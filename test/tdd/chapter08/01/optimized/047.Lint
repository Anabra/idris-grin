grinMain =
  idr_Main.main3_val.0 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main3.0 <- store idr_Main.main3_val.0
  idr_Main.main4_val.0 <- pure (Cidr_Main.Same)
  idr_Main.main4.0 <- store idr_Main.main4_val.0
  idr_Prelude.Interactive.printLn'2.0 <- pure idr_Main.main3.0
  idr_Prelude.Interactive.printLn'3.0 <- pure idr_Main.main4.0
  "idr_{APPLY_0}0_val.1.0" <- fetch idr_Prelude.Interactive.printLn'2.0
  ccp.0.0 <- case "idr_{APPLY_0}0_val.1.0" of
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}5.0.158.0.arity.1.0" <- pure 4
      idris_int_str2.0.0.0.0 <- _prim_int_str "idr_Main.{main_1}5.0.158.0.arity.1.0"
      ccp.3.0.0 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.0" <- pure 5
      idris_int_eq2.0.0.0 <- _prim_int_eq ccp.3.0.0 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.0"
      ccp.0.0.0.0 <- case idris_int_eq2.0.0.0 of
        #False ->
          pure ccp.3.0.0
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.0.0 <- case ccp.0.0.0.0 of
        0 ->
          idris_int_lt2.0.0.0 <- _prim_int_lt ccp.3.0.0 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.0"
          ccp.1.0.0.0 <- case idris_int_lt2.0.0.0 of
            #False ->
              pure ccp.0.0.0.0
            #True ->
              pure 1
          case ccp.1.0.0.0 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.0.0 <- case idr_Prelude.Show.primNumShow5_val_193.0.0 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.0.0 <- pure idris_int_eq2.0.0.0
          ccp.0.1.0.0 <- case idris_int_eq2.0.0.0 of
            #False ->
              pure ccp.3.0.0
            #True ->
              pure 1
          case ccp.0.1.0.0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.0.0 <- case idr_Prelude.Show.primNumShow5_val_192.0.0 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.0 <- pure #""
          idris_str_eq3.0.0.0 <- _prim_string_eq idris_int_str2.0.0.0.0 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.0
          ccp.2.0.0.0 <- case idris_str_eq3.0.0.0 of
            #False ->
              pure ccp.3.0.0
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.0.0 <- case ccp.2.0.0.0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.0" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.0.0 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.0.0 <- _prim_string_head idris_int_str2.0.0.0.0
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.0 <- pure 45
              idris_int_eq2.2.0.0.0 <- _prim_int_eq idris_str_head2.0.0.0.0 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.0
              ccp.0.2.0.0.0 <- case idris_int_eq2.2.0.0.0 of
                #False ->
                  pure ccp.3.0.0
                #True ->
                  pure 1
              case ccp.0.2.0.0.0 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.0"
      unboxed.CGrString.6.0.0 <- case idr_Prelude.Show.primNumShow5_val.0.0 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.0.0
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.0.0 <- pure #")"
          idris_str_concat3.0.0.0 <- _prim_string_concat idris_int_str2.0.0.0.0 idris_str_concat2_0.0.0.0
          idris_str_concat1_0.1.0.0 <- pure #"("
          idris_str_concat3.1.0.0 <- _prim_string_concat idris_str_concat1_0.1.0.0 idris_str_concat3.0.0.0
          pure idris_str_concat3.1.0.0
      idris_str_concat1_0.3.0.0 <- pure #"Same "
      idris_str_concat3.3.0.0 <- _prim_string_concat idris_str_concat1_0.3.0.0 unboxed.CGrString.6.0.0
      pure idris_str_concat3.3.0.0
    (C"idr_{U_Main.{main_2}_1}") ->
      "idr_Main.{main_2}5.0.158.1.arity.1.0" <- pure 5
      idris_int_str2.0.0.1.0 <- _prim_int_str "idr_Main.{main_2}5.0.158.1.arity.1.0"
      ccp.3.1.0 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.1.0" <- pure "idr_Main.{main_2}5.0.158.1.arity.1.0"
      idris_int_eq2.0.1.0 <- _prim_int_eq ccp.3.1.0 "idr_Main.{main_2}5.0.158.1.arity.1.0"
      ccp.0.0.1.0 <- case idris_int_eq2.0.1.0 of
        #False ->
          pure ccp.3.1.0
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.1.0 <- case ccp.0.0.1.0 of
        0 ->
          idris_int_lt2.0.1.0 <- _prim_int_lt ccp.3.1.0 "idr_Main.{main_2}5.0.158.1.arity.1.0"
          ccp.1.0.1.0 <- case idris_int_lt2.0.1.0 of
            #False ->
              pure ccp.0.0.1.0
            #True ->
              pure 1
          case ccp.1.0.1.0 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.1.0 <- case idr_Prelude.Show.primNumShow5_val_193.1.0 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.1.0 <- pure idris_int_eq2.0.1.0
          ccp.0.1.1.0 <- case idris_int_eq2.0.1.0 of
            #False ->
              pure ccp.3.1.0
            #True ->
              pure 1
          case ccp.0.1.1.0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.1.0 <- case idr_Prelude.Show.primNumShow5_val_192.1.0 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.0 <- pure #""
          idris_str_eq3.0.1.0 <- _prim_string_eq idris_int_str2.0.0.1.0 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.0
          ccp.2.0.1.0 <- case idris_str_eq3.0.1.0 of
            #False ->
              pure ccp.3.1.0
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.1.0 <- case ccp.2.0.1.0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.0" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.1.0 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.1.0 <- _prim_string_head idris_int_str2.0.0.1.0
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.0 <- pure 45
              idris_int_eq2.2.0.1.0 <- _prim_int_eq idris_str_head2.0.0.1.0 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.0
              ccp.0.2.0.1.0 <- case idris_int_eq2.2.0.1.0 of
                #False ->
                  pure ccp.3.1.0
                #True ->
                  pure 1
              case ccp.0.2.0.1.0 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.0"
      unboxed.CGrString.7.0.0 <- case idr_Prelude.Show.primNumShow5_val.1.0 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.1.0
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.1.0 <- pure #")"
          idris_str_concat3.0.1.0 <- _prim_string_concat idris_int_str2.0.0.1.0 idris_str_concat2_0.0.1.0
          idris_str_concat1_0.1.1.0 <- pure #"("
          idris_str_concat3.1.1.0 <- _prim_string_concat idris_str_concat1_0.1.1.0 idris_str_concat3.0.1.0
          pure idris_str_concat3.1.1.0
      idris_str_concat1_0.4.0.0 <- pure #"Same "
      idris_str_concat3.4.0.0 <- _prim_string_concat idris_str_concat1_0.4.0.0 unboxed.CGrString.7.0.0
      pure idris_str_concat3.4.0.0
    (C"idr_{U_Main.{main_3}_1}") ->
      "idr_Main.{main_3}5.0.158.2.arity.1.0" <- pure 3
      idris_int_str2.0.0.2.0 <- _prim_int_str "idr_Main.{main_3}5.0.158.2.arity.1.0"
      ccp.3.2.0 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.0" <- pure 5
      idris_int_eq2.0.2.0 <- _prim_int_eq ccp.3.2.0 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.0"
      ccp.0.0.2.0 <- case idris_int_eq2.0.2.0 of
        #False ->
          pure ccp.3.2.0
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.2.0 <- case ccp.0.0.2.0 of
        0 ->
          idris_int_lt2.0.2.0 <- _prim_int_lt ccp.3.2.0 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.0"
          ccp.1.0.2.0 <- case idris_int_lt2.0.2.0 of
            #False ->
              pure ccp.0.0.2.0
            #True ->
              pure 1
          case ccp.1.0.2.0 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.2.0 <- case idr_Prelude.Show.primNumShow5_val_193.2.0 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.2.0 <- pure idris_int_eq2.0.2.0
          ccp.0.1.2.0 <- case idris_int_eq2.0.2.0 of
            #False ->
              pure ccp.3.2.0
            #True ->
              pure 1
          case ccp.0.1.2.0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.2.0 <- case idr_Prelude.Show.primNumShow5_val_192.2.0 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.0 <- pure #""
          idris_str_eq3.0.2.0 <- _prim_string_eq idris_int_str2.0.0.2.0 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.0
          ccp.2.0.2.0 <- case idris_str_eq3.0.2.0 of
            #False ->
              pure ccp.3.2.0
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.2.0 <- case ccp.2.0.2.0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.0" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.2.0 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.2.0 <- _prim_string_head idris_int_str2.0.0.2.0
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.0 <- pure 45
              idris_int_eq2.2.0.2.0 <- _prim_int_eq idris_str_head2.0.0.2.0 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.0
              ccp.0.2.0.2.0 <- case idris_int_eq2.2.0.2.0 of
                #False ->
                  pure ccp.3.2.0
                #True ->
                  pure 1
              case ccp.0.2.0.2.0 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.0"
      unboxed.CGrString.8.0.0 <- case idr_Prelude.Show.primNumShow5_val.2.0 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.2.0
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.2.0 <- pure #")"
          idris_str_concat3.0.2.0 <- _prim_string_concat idris_int_str2.0.0.2.0 idris_str_concat2_0.0.2.0
          idris_str_concat1_0.1.2.0 <- pure #"("
          idris_str_concat3.1.2.0 <- _prim_string_concat idris_str_concat1_0.1.2.0 idris_str_concat3.0.2.0
          pure idris_str_concat3.1.2.0
      idris_str_concat1_0.5.0.0 <- pure #"Same "
      idris_str_concat3.5.0.0 <- _prim_string_concat idris_str_concat1_0.5.0.0 unboxed.CGrString.8.0.0
      pure idris_str_concat3.5.0.0
    (C"idr_{U_Main.{main_5}_1}") ->
      "idr_Main.{main_5}0_val.0.0" <- fetch idr_Prelude.Interactive.printLn'3.0
      ccp.5.0.0 <- case "idr_Main.{main_5}0_val.0.0" of
        (Cidr_Prelude.Bool.False) ->
          pure #"False"
        (Cidr_Prelude.Bool.True) ->
          pure #"True"
      pure ccp.5.0.0
  idris_str_concat2_0.2.0 <- pure #"\n"
  idris_str_concat3.2.0 <- _prim_string_concat ccp.0.0 idris_str_concat2_0.2.0
  _prim_string_print idris_str_concat3.2.0
  idr_Main.main1_val.0 <- pure (Cidr_MkUnit)
  idr_Main.main4_val_125.0 <- pure (C"idr_{U_Main.{main_2}_1}")
  idr_Main.main4_126.0 <- store idr_Main.main4_val_125.0
  idr_Prelude.Interactive.printLn'2.1 <- pure idr_Main.main4_126.0
  idr_Prelude.Interactive.printLn'3.1 <- pure idr_Main.main4.0
  "idr_{APPLY_0}0_val.1.1" <- fetch idr_Prelude.Interactive.printLn'2.1
  ccp.0.1 <- case "idr_{APPLY_0}0_val.1.1" of
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}5.0.158.0.arity.1.1" <- pure 4
      idris_int_str2.0.0.0.1 <- _prim_int_str "idr_Main.{main_1}5.0.158.0.arity.1.1"
      ccp.3.0.1 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.1" <- pure 5
      idris_int_eq2.0.0.1 <- _prim_int_eq ccp.3.0.1 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.1"
      ccp.0.0.0.1 <- case idris_int_eq2.0.0.1 of
        #False ->
          pure ccp.3.0.1
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.0.1 <- case ccp.0.0.0.1 of
        0 ->
          idris_int_lt2.0.0.1 <- _prim_int_lt ccp.3.0.1 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.1"
          ccp.1.0.0.1 <- case idris_int_lt2.0.0.1 of
            #False ->
              pure ccp.0.0.0.1
            #True ->
              pure 1
          case ccp.1.0.0.1 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.0.1 <- case idr_Prelude.Show.primNumShow5_val_193.0.1 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.0.1 <- pure idris_int_eq2.0.0.1
          ccp.0.1.0.1 <- case idris_int_eq2.0.0.1 of
            #False ->
              pure ccp.3.0.1
            #True ->
              pure 1
          case ccp.0.1.0.1 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.0.1 <- case idr_Prelude.Show.primNumShow5_val_192.0.1 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.1 <- pure #""
          idris_str_eq3.0.0.1 <- _prim_string_eq idris_int_str2.0.0.0.1 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.1
          ccp.2.0.0.1 <- case idris_str_eq3.0.0.1 of
            #False ->
              pure ccp.3.0.1
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.0.1 <- case ccp.2.0.0.1 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.1" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.0.1 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.0.1 <- _prim_string_head idris_int_str2.0.0.0.1
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.1 <- pure 45
              idris_int_eq2.2.0.0.1 <- _prim_int_eq idris_str_head2.0.0.0.1 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.1
              ccp.0.2.0.0.1 <- case idris_int_eq2.2.0.0.1 of
                #False ->
                  pure ccp.3.0.1
                #True ->
                  pure 1
              case ccp.0.2.0.0.1 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.1"
      unboxed.CGrString.6.0.1 <- case idr_Prelude.Show.primNumShow5_val.0.1 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.0.1
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.0.1 <- pure #")"
          idris_str_concat3.0.0.1 <- _prim_string_concat idris_int_str2.0.0.0.1 idris_str_concat2_0.0.0.1
          idris_str_concat1_0.1.0.1 <- pure #"("
          idris_str_concat3.1.0.1 <- _prim_string_concat idris_str_concat1_0.1.0.1 idris_str_concat3.0.0.1
          pure idris_str_concat3.1.0.1
      idris_str_concat1_0.3.0.1 <- pure #"Same "
      idris_str_concat3.3.0.1 <- _prim_string_concat idris_str_concat1_0.3.0.1 unboxed.CGrString.6.0.1
      pure idris_str_concat3.3.0.1
    (C"idr_{U_Main.{main_2}_1}") ->
      "idr_Main.{main_2}5.0.158.1.arity.1.1" <- pure 5
      idris_int_str2.0.0.1.1 <- _prim_int_str "idr_Main.{main_2}5.0.158.1.arity.1.1"
      ccp.3.1.1 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.1.1" <- pure "idr_Main.{main_2}5.0.158.1.arity.1.1"
      idris_int_eq2.0.1.1 <- _prim_int_eq ccp.3.1.1 "idr_Main.{main_2}5.0.158.1.arity.1.1"
      ccp.0.0.1.1 <- case idris_int_eq2.0.1.1 of
        #False ->
          pure ccp.3.1.1
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.1.1 <- case ccp.0.0.1.1 of
        0 ->
          idris_int_lt2.0.1.1 <- _prim_int_lt ccp.3.1.1 "idr_Main.{main_2}5.0.158.1.arity.1.1"
          ccp.1.0.1.1 <- case idris_int_lt2.0.1.1 of
            #False ->
              pure ccp.0.0.1.1
            #True ->
              pure 1
          case ccp.1.0.1.1 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.1.1 <- case idr_Prelude.Show.primNumShow5_val_193.1.1 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.1.1 <- pure idris_int_eq2.0.1.1
          ccp.0.1.1.1 <- case idris_int_eq2.0.1.1 of
            #False ->
              pure ccp.3.1.1
            #True ->
              pure 1
          case ccp.0.1.1.1 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.1.1 <- case idr_Prelude.Show.primNumShow5_val_192.1.1 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.1 <- pure #""
          idris_str_eq3.0.1.1 <- _prim_string_eq idris_int_str2.0.0.1.1 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.1
          ccp.2.0.1.1 <- case idris_str_eq3.0.1.1 of
            #False ->
              pure ccp.3.1.1
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.1.1 <- case ccp.2.0.1.1 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.1" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.1.1 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.1.1 <- _prim_string_head idris_int_str2.0.0.1.1
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.1 <- pure 45
              idris_int_eq2.2.0.1.1 <- _prim_int_eq idris_str_head2.0.0.1.1 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.1
              ccp.0.2.0.1.1 <- case idris_int_eq2.2.0.1.1 of
                #False ->
                  pure ccp.3.1.1
                #True ->
                  pure 1
              case ccp.0.2.0.1.1 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.1"
      unboxed.CGrString.7.0.1 <- case idr_Prelude.Show.primNumShow5_val.1.1 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.1.1
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.1.1 <- pure #")"
          idris_str_concat3.0.1.1 <- _prim_string_concat idris_int_str2.0.0.1.1 idris_str_concat2_0.0.1.1
          idris_str_concat1_0.1.1.1 <- pure #"("
          idris_str_concat3.1.1.1 <- _prim_string_concat idris_str_concat1_0.1.1.1 idris_str_concat3.0.1.1
          pure idris_str_concat3.1.1.1
      idris_str_concat1_0.4.0.1 <- pure #"Same "
      idris_str_concat3.4.0.1 <- _prim_string_concat idris_str_concat1_0.4.0.1 unboxed.CGrString.7.0.1
      pure idris_str_concat3.4.0.1
    (C"idr_{U_Main.{main_3}_1}") ->
      "idr_Main.{main_3}5.0.158.2.arity.1.1" <- pure 3
      idris_int_str2.0.0.2.1 <- _prim_int_str "idr_Main.{main_3}5.0.158.2.arity.1.1"
      ccp.3.2.1 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.1" <- pure 5
      idris_int_eq2.0.2.1 <- _prim_int_eq ccp.3.2.1 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.1"
      ccp.0.0.2.1 <- case idris_int_eq2.0.2.1 of
        #False ->
          pure ccp.3.2.1
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.2.1 <- case ccp.0.0.2.1 of
        0 ->
          idris_int_lt2.0.2.1 <- _prim_int_lt ccp.3.2.1 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.1"
          ccp.1.0.2.1 <- case idris_int_lt2.0.2.1 of
            #False ->
              pure ccp.0.0.2.1
            #True ->
              pure 1
          case ccp.1.0.2.1 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.2.1 <- case idr_Prelude.Show.primNumShow5_val_193.2.1 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.2.1 <- pure idris_int_eq2.0.2.1
          ccp.0.1.2.1 <- case idris_int_eq2.0.2.1 of
            #False ->
              pure ccp.3.2.1
            #True ->
              pure 1
          case ccp.0.1.2.1 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.2.1 <- case idr_Prelude.Show.primNumShow5_val_192.2.1 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.1 <- pure #""
          idris_str_eq3.0.2.1 <- _prim_string_eq idris_int_str2.0.0.2.1 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.1
          ccp.2.0.2.1 <- case idris_str_eq3.0.2.1 of
            #False ->
              pure ccp.3.2.1
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.2.1 <- case ccp.2.0.2.1 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.1" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.2.1 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.2.1 <- _prim_string_head idris_int_str2.0.0.2.1
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.1 <- pure 45
              idris_int_eq2.2.0.2.1 <- _prim_int_eq idris_str_head2.0.0.2.1 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.1
              ccp.0.2.0.2.1 <- case idris_int_eq2.2.0.2.1 of
                #False ->
                  pure ccp.3.2.1
                #True ->
                  pure 1
              case ccp.0.2.0.2.1 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.1"
      unboxed.CGrString.8.0.1 <- case idr_Prelude.Show.primNumShow5_val.2.1 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.2.1
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.2.1 <- pure #")"
          idris_str_concat3.0.2.1 <- _prim_string_concat idris_int_str2.0.0.2.1 idris_str_concat2_0.0.2.1
          idris_str_concat1_0.1.2.1 <- pure #"("
          idris_str_concat3.1.2.1 <- _prim_string_concat idris_str_concat1_0.1.2.1 idris_str_concat3.0.2.1
          pure idris_str_concat3.1.2.1
      idris_str_concat1_0.5.0.1 <- pure #"Same "
      idris_str_concat3.5.0.1 <- _prim_string_concat idris_str_concat1_0.5.0.1 unboxed.CGrString.8.0.1
      pure idris_str_concat3.5.0.1
    (C"idr_{U_Main.{main_5}_1}") ->
      "idr_Main.{main_5}0_val.0.1" <- fetch idr_Prelude.Interactive.printLn'3.1
      ccp.5.0.1 <- case "idr_Main.{main_5}0_val.0.1" of
        (Cidr_Prelude.Bool.False) ->
          pure #"False"
        (Cidr_Prelude.Bool.True) ->
          pure #"True"
      pure ccp.5.0.1
  idris_str_concat2_0.2.1 <- pure #"\n"
  idris_str_concat3.2.1 <- _prim_string_concat ccp.0.1 idris_str_concat2_0.2.1
  _prim_string_print idris_str_concat3.2.1
  idr_Main.main2_val_120.0 <- pure (Cidr_MkUnit)
  idr_Main.main5_val_133.0 <- pure (C"idr_{U_Main.{main_3}_1}")
  idr_Main.main5_134.0 <- store idr_Main.main5_val_133.0
  idr_Prelude.Interactive.printLn'2.2 <- pure idr_Main.main5_134.0
  idr_Prelude.Interactive.printLn'3.2 <- pure idr_Main.main4.0
  "idr_{APPLY_0}0_val.1.2" <- fetch idr_Prelude.Interactive.printLn'2.2
  ccp.0.2 <- case "idr_{APPLY_0}0_val.1.2" of
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}5.0.158.0.arity.1.2" <- pure 4
      idris_int_str2.0.0.0.2 <- _prim_int_str "idr_Main.{main_1}5.0.158.0.arity.1.2"
      ccp.3.0.2 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.2" <- pure 5
      idris_int_eq2.0.0.2 <- _prim_int_eq ccp.3.0.2 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.2"
      ccp.0.0.0.2 <- case idris_int_eq2.0.0.2 of
        #False ->
          pure ccp.3.0.2
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.0.2 <- case ccp.0.0.0.2 of
        0 ->
          idris_int_lt2.0.0.2 <- _prim_int_lt ccp.3.0.2 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.2"
          ccp.1.0.0.2 <- case idris_int_lt2.0.0.2 of
            #False ->
              pure ccp.0.0.0.2
            #True ->
              pure 1
          case ccp.1.0.0.2 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.0.2 <- case idr_Prelude.Show.primNumShow5_val_193.0.2 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.0.2 <- pure idris_int_eq2.0.0.2
          ccp.0.1.0.2 <- case idris_int_eq2.0.0.2 of
            #False ->
              pure ccp.3.0.2
            #True ->
              pure 1
          case ccp.0.1.0.2 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.0.2 <- case idr_Prelude.Show.primNumShow5_val_192.0.2 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.2 <- pure #""
          idris_str_eq3.0.0.2 <- _prim_string_eq idris_int_str2.0.0.0.2 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.2
          ccp.2.0.0.2 <- case idris_str_eq3.0.0.2 of
            #False ->
              pure ccp.3.0.2
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.0.2 <- case ccp.2.0.0.2 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.2" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.0.2 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.0.2 <- _prim_string_head idris_int_str2.0.0.0.2
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.2 <- pure 45
              idris_int_eq2.2.0.0.2 <- _prim_int_eq idris_str_head2.0.0.0.2 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.2
              ccp.0.2.0.0.2 <- case idris_int_eq2.2.0.0.2 of
                #False ->
                  pure ccp.3.0.2
                #True ->
                  pure 1
              case ccp.0.2.0.0.2 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.2"
      unboxed.CGrString.6.0.2 <- case idr_Prelude.Show.primNumShow5_val.0.2 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.0.2
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.0.2 <- pure #")"
          idris_str_concat3.0.0.2 <- _prim_string_concat idris_int_str2.0.0.0.2 idris_str_concat2_0.0.0.2
          idris_str_concat1_0.1.0.2 <- pure #"("
          idris_str_concat3.1.0.2 <- _prim_string_concat idris_str_concat1_0.1.0.2 idris_str_concat3.0.0.2
          pure idris_str_concat3.1.0.2
      idris_str_concat1_0.3.0.2 <- pure #"Same "
      idris_str_concat3.3.0.2 <- _prim_string_concat idris_str_concat1_0.3.0.2 unboxed.CGrString.6.0.2
      pure idris_str_concat3.3.0.2
    (C"idr_{U_Main.{main_2}_1}") ->
      "idr_Main.{main_2}5.0.158.1.arity.1.2" <- pure 5
      idris_int_str2.0.0.1.2 <- _prim_int_str "idr_Main.{main_2}5.0.158.1.arity.1.2"
      ccp.3.1.2 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.1.2" <- pure "idr_Main.{main_2}5.0.158.1.arity.1.2"
      idris_int_eq2.0.1.2 <- _prim_int_eq ccp.3.1.2 "idr_Main.{main_2}5.0.158.1.arity.1.2"
      ccp.0.0.1.2 <- case idris_int_eq2.0.1.2 of
        #False ->
          pure ccp.3.1.2
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.1.2 <- case ccp.0.0.1.2 of
        0 ->
          idris_int_lt2.0.1.2 <- _prim_int_lt ccp.3.1.2 "idr_Main.{main_2}5.0.158.1.arity.1.2"
          ccp.1.0.1.2 <- case idris_int_lt2.0.1.2 of
            #False ->
              pure ccp.0.0.1.2
            #True ->
              pure 1
          case ccp.1.0.1.2 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.1.2 <- case idr_Prelude.Show.primNumShow5_val_193.1.2 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.1.2 <- pure idris_int_eq2.0.1.2
          ccp.0.1.1.2 <- case idris_int_eq2.0.1.2 of
            #False ->
              pure ccp.3.1.2
            #True ->
              pure 1
          case ccp.0.1.1.2 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.1.2 <- case idr_Prelude.Show.primNumShow5_val_192.1.2 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.2 <- pure #""
          idris_str_eq3.0.1.2 <- _prim_string_eq idris_int_str2.0.0.1.2 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.2
          ccp.2.0.1.2 <- case idris_str_eq3.0.1.2 of
            #False ->
              pure ccp.3.1.2
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.1.2 <- case ccp.2.0.1.2 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.2" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.1.2 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.1.2 <- _prim_string_head idris_int_str2.0.0.1.2
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.2 <- pure 45
              idris_int_eq2.2.0.1.2 <- _prim_int_eq idris_str_head2.0.0.1.2 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.2
              ccp.0.2.0.1.2 <- case idris_int_eq2.2.0.1.2 of
                #False ->
                  pure ccp.3.1.2
                #True ->
                  pure 1
              case ccp.0.2.0.1.2 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.2"
      unboxed.CGrString.7.0.2 <- case idr_Prelude.Show.primNumShow5_val.1.2 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.1.2
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.1.2 <- pure #")"
          idris_str_concat3.0.1.2 <- _prim_string_concat idris_int_str2.0.0.1.2 idris_str_concat2_0.0.1.2
          idris_str_concat1_0.1.1.2 <- pure #"("
          idris_str_concat3.1.1.2 <- _prim_string_concat idris_str_concat1_0.1.1.2 idris_str_concat3.0.1.2
          pure idris_str_concat3.1.1.2
      idris_str_concat1_0.4.0.2 <- pure #"Same "
      idris_str_concat3.4.0.2 <- _prim_string_concat idris_str_concat1_0.4.0.2 unboxed.CGrString.7.0.2
      pure idris_str_concat3.4.0.2
    (C"idr_{U_Main.{main_3}_1}") ->
      "idr_Main.{main_3}5.0.158.2.arity.1.2" <- pure 3
      idris_int_str2.0.0.2.2 <- _prim_int_str "idr_Main.{main_3}5.0.158.2.arity.1.2"
      ccp.3.2.2 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.2" <- pure 5
      idris_int_eq2.0.2.2 <- _prim_int_eq ccp.3.2.2 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.2"
      ccp.0.0.2.2 <- case idris_int_eq2.0.2.2 of
        #False ->
          pure ccp.3.2.2
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.2.2 <- case ccp.0.0.2.2 of
        0 ->
          idris_int_lt2.0.2.2 <- _prim_int_lt ccp.3.2.2 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.2"
          ccp.1.0.2.2 <- case idris_int_lt2.0.2.2 of
            #False ->
              pure ccp.0.0.2.2
            #True ->
              pure 1
          case ccp.1.0.2.2 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.2.2 <- case idr_Prelude.Show.primNumShow5_val_193.2.2 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.2.2 <- pure idris_int_eq2.0.2.2
          ccp.0.1.2.2 <- case idris_int_eq2.0.2.2 of
            #False ->
              pure ccp.3.2.2
            #True ->
              pure 1
          case ccp.0.1.2.2 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.2.2 <- case idr_Prelude.Show.primNumShow5_val_192.2.2 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.2 <- pure #""
          idris_str_eq3.0.2.2 <- _prim_string_eq idris_int_str2.0.0.2.2 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.2
          ccp.2.0.2.2 <- case idris_str_eq3.0.2.2 of
            #False ->
              pure ccp.3.2.2
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.2.2 <- case ccp.2.0.2.2 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.2" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.2.2 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.2.2 <- _prim_string_head idris_int_str2.0.0.2.2
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.2 <- pure 45
              idris_int_eq2.2.0.2.2 <- _prim_int_eq idris_str_head2.0.0.2.2 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.2
              ccp.0.2.0.2.2 <- case idris_int_eq2.2.0.2.2 of
                #False ->
                  pure ccp.3.2.2
                #True ->
                  pure 1
              case ccp.0.2.0.2.2 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.2"
      unboxed.CGrString.8.0.2 <- case idr_Prelude.Show.primNumShow5_val.2.2 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.2.2
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.2.2 <- pure #")"
          idris_str_concat3.0.2.2 <- _prim_string_concat idris_int_str2.0.0.2.2 idris_str_concat2_0.0.2.2
          idris_str_concat1_0.1.2.2 <- pure #"("
          idris_str_concat3.1.2.2 <- _prim_string_concat idris_str_concat1_0.1.2.2 idris_str_concat3.0.2.2
          pure idris_str_concat3.1.2.2
      idris_str_concat1_0.5.0.2 <- pure #"Same "
      idris_str_concat3.5.0.2 <- _prim_string_concat idris_str_concat1_0.5.0.2 unboxed.CGrString.8.0.2
      pure idris_str_concat3.5.0.2
    (C"idr_{U_Main.{main_5}_1}") ->
      "idr_Main.{main_5}0_val.0.2" <- fetch idr_Prelude.Interactive.printLn'3.2
      ccp.5.0.2 <- case "idr_Main.{main_5}0_val.0.2" of
        (Cidr_Prelude.Bool.False) ->
          pure #"False"
        (Cidr_Prelude.Bool.True) ->
          pure #"True"
      pure ccp.5.0.2
  idris_str_concat2_0.2.2 <- pure #"\n"
  idris_str_concat3.2.2 <- _prim_string_concat ccp.0.2 idris_str_concat2_0.2.2
  _prim_string_print idris_str_concat3.2.2
  idr_Main.main3_val_128.0 <- pure (Cidr_MkUnit)
  idr_Prelude.Interactive.printLn'2.3 <- pure idr_Main.main3.0
  idr_Prelude.Interactive.printLn'3.3 <- pure idr_Main.main4.0
  "idr_{APPLY_0}0_val.1.3" <- fetch idr_Prelude.Interactive.printLn'2.3
  ccp.0.3 <- case "idr_{APPLY_0}0_val.1.3" of
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}5.0.158.0.arity.1.3" <- pure 4
      idris_int_str2.0.0.0.3 <- _prim_int_str "idr_Main.{main_1}5.0.158.0.arity.1.3"
      ccp.3.0.3 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.3" <- pure 5
      idris_int_eq2.0.0.3 <- _prim_int_eq ccp.3.0.3 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.3"
      ccp.0.0.0.3 <- case idris_int_eq2.0.0.3 of
        #False ->
          pure ccp.3.0.3
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.0.3 <- case ccp.0.0.0.3 of
        0 ->
          idris_int_lt2.0.0.3 <- _prim_int_lt ccp.3.0.3 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.3"
          ccp.1.0.0.3 <- case idris_int_lt2.0.0.3 of
            #False ->
              pure ccp.0.0.0.3
            #True ->
              pure 1
          case ccp.1.0.0.3 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.0.3 <- case idr_Prelude.Show.primNumShow5_val_193.0.3 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.0.3 <- pure idris_int_eq2.0.0.3
          ccp.0.1.0.3 <- case idris_int_eq2.0.0.3 of
            #False ->
              pure ccp.3.0.3
            #True ->
              pure 1
          case ccp.0.1.0.3 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.0.3 <- case idr_Prelude.Show.primNumShow5_val_192.0.3 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.3 <- pure #""
          idris_str_eq3.0.0.3 <- _prim_string_eq idris_int_str2.0.0.0.3 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.3
          ccp.2.0.0.3 <- case idris_str_eq3.0.0.3 of
            #False ->
              pure ccp.3.0.3
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.0.3 <- case ccp.2.0.0.3 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.3" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.0.3 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.0.3 <- _prim_string_head idris_int_str2.0.0.0.3
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.3 <- pure 45
              idris_int_eq2.2.0.0.3 <- _prim_int_eq idris_str_head2.0.0.0.3 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.3
              ccp.0.2.0.0.3 <- case idris_int_eq2.2.0.0.3 of
                #False ->
                  pure ccp.3.0.3
                #True ->
                  pure 1
              case ccp.0.2.0.0.3 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.3"
      unboxed.CGrString.6.0.3 <- case idr_Prelude.Show.primNumShow5_val.0.3 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.0.3
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.0.3 <- pure #")"
          idris_str_concat3.0.0.3 <- _prim_string_concat idris_int_str2.0.0.0.3 idris_str_concat2_0.0.0.3
          idris_str_concat1_0.1.0.3 <- pure #"("
          idris_str_concat3.1.0.3 <- _prim_string_concat idris_str_concat1_0.1.0.3 idris_str_concat3.0.0.3
          pure idris_str_concat3.1.0.3
      idris_str_concat1_0.3.0.3 <- pure #"Same "
      idris_str_concat3.3.0.3 <- _prim_string_concat idris_str_concat1_0.3.0.3 unboxed.CGrString.6.0.3
      pure idris_str_concat3.3.0.3
    (C"idr_{U_Main.{main_2}_1}") ->
      "idr_Main.{main_2}5.0.158.1.arity.1.3" <- pure 5
      idris_int_str2.0.0.1.3 <- _prim_int_str "idr_Main.{main_2}5.0.158.1.arity.1.3"
      ccp.3.1.3 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.1.3" <- pure "idr_Main.{main_2}5.0.158.1.arity.1.3"
      idris_int_eq2.0.1.3 <- _prim_int_eq ccp.3.1.3 "idr_Main.{main_2}5.0.158.1.arity.1.3"
      ccp.0.0.1.3 <- case idris_int_eq2.0.1.3 of
        #False ->
          pure ccp.3.1.3
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.1.3 <- case ccp.0.0.1.3 of
        0 ->
          idris_int_lt2.0.1.3 <- _prim_int_lt ccp.3.1.3 "idr_Main.{main_2}5.0.158.1.arity.1.3"
          ccp.1.0.1.3 <- case idris_int_lt2.0.1.3 of
            #False ->
              pure ccp.0.0.1.3
            #True ->
              pure 1
          case ccp.1.0.1.3 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.1.3 <- case idr_Prelude.Show.primNumShow5_val_193.1.3 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.1.3 <- pure idris_int_eq2.0.1.3
          ccp.0.1.1.3 <- case idris_int_eq2.0.1.3 of
            #False ->
              pure ccp.3.1.3
            #True ->
              pure 1
          case ccp.0.1.1.3 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.1.3 <- case idr_Prelude.Show.primNumShow5_val_192.1.3 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.3 <- pure #""
          idris_str_eq3.0.1.3 <- _prim_string_eq idris_int_str2.0.0.1.3 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.3
          ccp.2.0.1.3 <- case idris_str_eq3.0.1.3 of
            #False ->
              pure ccp.3.1.3
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.1.3 <- case ccp.2.0.1.3 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.3" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.1.3 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.1.3 <- _prim_string_head idris_int_str2.0.0.1.3
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.3 <- pure 45
              idris_int_eq2.2.0.1.3 <- _prim_int_eq idris_str_head2.0.0.1.3 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.3
              ccp.0.2.0.1.3 <- case idris_int_eq2.2.0.1.3 of
                #False ->
                  pure ccp.3.1.3
                #True ->
                  pure 1
              case ccp.0.2.0.1.3 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.3"
      unboxed.CGrString.7.0.3 <- case idr_Prelude.Show.primNumShow5_val.1.3 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.1.3
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.1.3 <- pure #")"
          idris_str_concat3.0.1.3 <- _prim_string_concat idris_int_str2.0.0.1.3 idris_str_concat2_0.0.1.3
          idris_str_concat1_0.1.1.3 <- pure #"("
          idris_str_concat3.1.1.3 <- _prim_string_concat idris_str_concat1_0.1.1.3 idris_str_concat3.0.1.3
          pure idris_str_concat3.1.1.3
      idris_str_concat1_0.4.0.3 <- pure #"Same "
      idris_str_concat3.4.0.3 <- _prim_string_concat idris_str_concat1_0.4.0.3 unboxed.CGrString.7.0.3
      pure idris_str_concat3.4.0.3
    (C"idr_{U_Main.{main_3}_1}") ->
      "idr_Main.{main_3}5.0.158.2.arity.1.3" <- pure 3
      idris_int_str2.0.0.2.3 <- _prim_int_str "idr_Main.{main_3}5.0.158.2.arity.1.3"
      ccp.3.2.3 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.3" <- pure 5
      idris_int_eq2.0.2.3 <- _prim_int_eq ccp.3.2.3 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.3"
      ccp.0.0.2.3 <- case idris_int_eq2.0.2.3 of
        #False ->
          pure ccp.3.2.3
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.2.3 <- case ccp.0.0.2.3 of
        0 ->
          idris_int_lt2.0.2.3 <- _prim_int_lt ccp.3.2.3 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.3"
          ccp.1.0.2.3 <- case idris_int_lt2.0.2.3 of
            #False ->
              pure ccp.0.0.2.3
            #True ->
              pure 1
          case ccp.1.0.2.3 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.2.3 <- case idr_Prelude.Show.primNumShow5_val_193.2.3 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.2.3 <- pure idris_int_eq2.0.2.3
          ccp.0.1.2.3 <- case idris_int_eq2.0.2.3 of
            #False ->
              pure ccp.3.2.3
            #True ->
              pure 1
          case ccp.0.1.2.3 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.2.3 <- case idr_Prelude.Show.primNumShow5_val_192.2.3 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.3 <- pure #""
          idris_str_eq3.0.2.3 <- _prim_string_eq idris_int_str2.0.0.2.3 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.3
          ccp.2.0.2.3 <- case idris_str_eq3.0.2.3 of
            #False ->
              pure ccp.3.2.3
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.2.3 <- case ccp.2.0.2.3 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.3" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.2.3 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.2.3 <- _prim_string_head idris_int_str2.0.0.2.3
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.3 <- pure 45
              idris_int_eq2.2.0.2.3 <- _prim_int_eq idris_str_head2.0.0.2.3 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.3
              ccp.0.2.0.2.3 <- case idris_int_eq2.2.0.2.3 of
                #False ->
                  pure ccp.3.2.3
                #True ->
                  pure 1
              case ccp.0.2.0.2.3 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.3"
      unboxed.CGrString.8.0.3 <- case idr_Prelude.Show.primNumShow5_val.2.3 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.2.3
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.2.3 <- pure #")"
          idris_str_concat3.0.2.3 <- _prim_string_concat idris_int_str2.0.0.2.3 idris_str_concat2_0.0.2.3
          idris_str_concat1_0.1.2.3 <- pure #"("
          idris_str_concat3.1.2.3 <- _prim_string_concat idris_str_concat1_0.1.2.3 idris_str_concat3.0.2.3
          pure idris_str_concat3.1.2.3
      idris_str_concat1_0.5.0.3 <- pure #"Same "
      idris_str_concat3.5.0.3 <- _prim_string_concat idris_str_concat1_0.5.0.3 unboxed.CGrString.8.0.3
      pure idris_str_concat3.5.0.3
    (C"idr_{U_Main.{main_5}_1}") ->
      "idr_Main.{main_5}0_val.0.3" <- fetch idr_Prelude.Interactive.printLn'3.3
      ccp.5.0.3 <- case "idr_Main.{main_5}0_val.0.3" of
        (Cidr_Prelude.Bool.False) ->
          pure #"False"
        (Cidr_Prelude.Bool.True) ->
          pure #"True"
      pure ccp.5.0.3
  idris_str_concat2_0.2.3 <- pure #"\n"
  idris_str_concat3.2.3 <- _prim_string_concat ccp.0.3 idris_str_concat2_0.2.3
  _prim_string_print idris_str_concat3.2.3
  idr_Main.main4_val_136.0 <- pure (Cidr_MkUnit)
  idr_Main.main7_val_149.0 <- pure (C"idr_{U_Main.{main_5}_1}")
  idr_Main.main7_150.0 <- store idr_Main.main7_val_149.0
  idr_Main.main9.0.57.0.arity.1 <- pure 2
  idr_Main.exactLength4_val.0 <- idr_Main.checkEqNat idr_Main.main9.0.57.0.arity.1 idr_Main.main9.0.57.0.arity.1
  idr_Main.main8_val.0 <- case idr_Main.exactLength4_val.0 of
    (Cidr_Prelude.Maybe.Just idr_Main.exactLength5.0) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    (Cidr_Prelude.Maybe.Nothing) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Main.main8_156.0 <- store idr_Main.main8_val.0
  idr_Prelude.Interactive.printLn'2.4 <- pure idr_Main.main7_150.0
  idr_Prelude.Interactive.printLn'3.4 <- pure idr_Main.main8_156.0
  "idr_{APPLY_0}0_val.1.4" <- fetch idr_Prelude.Interactive.printLn'2.4
  ccp.0.4 <- case "idr_{APPLY_0}0_val.1.4" of
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}5.0.158.0.arity.1.4" <- pure 4
      idris_int_str2.0.0.0.4 <- _prim_int_str "idr_Main.{main_1}5.0.158.0.arity.1.4"
      ccp.3.0.4 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.4" <- pure 5
      idris_int_eq2.0.0.4 <- _prim_int_eq ccp.3.0.4 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.4"
      ccp.0.0.0.4 <- case idris_int_eq2.0.0.4 of
        #False ->
          pure ccp.3.0.4
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.0.4 <- case ccp.0.0.0.4 of
        0 ->
          idris_int_lt2.0.0.4 <- _prim_int_lt ccp.3.0.4 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.4"
          ccp.1.0.0.4 <- case idris_int_lt2.0.0.4 of
            #False ->
              pure ccp.0.0.0.4
            #True ->
              pure 1
          case ccp.1.0.0.4 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.0.4 <- case idr_Prelude.Show.primNumShow5_val_193.0.4 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.0.4 <- pure idris_int_eq2.0.0.4
          ccp.0.1.0.4 <- case idris_int_eq2.0.0.4 of
            #False ->
              pure ccp.3.0.4
            #True ->
              pure 1
          case ccp.0.1.0.4 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.0.4 <- case idr_Prelude.Show.primNumShow5_val_192.0.4 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.4 <- pure #""
          idris_str_eq3.0.0.4 <- _prim_string_eq idris_int_str2.0.0.0.4 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.4
          ccp.2.0.0.4 <- case idris_str_eq3.0.0.4 of
            #False ->
              pure ccp.3.0.4
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.0.4 <- case ccp.2.0.0.4 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.4" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.0.4 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.0.4 <- _prim_string_head idris_int_str2.0.0.0.4
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.4 <- pure 45
              idris_int_eq2.2.0.0.4 <- _prim_int_eq idris_str_head2.0.0.0.4 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.4
              ccp.0.2.0.0.4 <- case idris_int_eq2.2.0.0.4 of
                #False ->
                  pure ccp.3.0.4
                #True ->
                  pure 1
              case ccp.0.2.0.0.4 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.4"
      unboxed.CGrString.6.0.4 <- case idr_Prelude.Show.primNumShow5_val.0.4 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.0.4
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.0.4 <- pure #")"
          idris_str_concat3.0.0.4 <- _prim_string_concat idris_int_str2.0.0.0.4 idris_str_concat2_0.0.0.4
          idris_str_concat1_0.1.0.4 <- pure #"("
          idris_str_concat3.1.0.4 <- _prim_string_concat idris_str_concat1_0.1.0.4 idris_str_concat3.0.0.4
          pure idris_str_concat3.1.0.4
      idris_str_concat1_0.3.0.4 <- pure #"Same "
      idris_str_concat3.3.0.4 <- _prim_string_concat idris_str_concat1_0.3.0.4 unboxed.CGrString.6.0.4
      pure idris_str_concat3.3.0.4
    (C"idr_{U_Main.{main_2}_1}") ->
      "idr_Main.{main_2}5.0.158.1.arity.1.4" <- pure 5
      idris_int_str2.0.0.1.4 <- _prim_int_str "idr_Main.{main_2}5.0.158.1.arity.1.4"
      ccp.3.1.4 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.1.4" <- pure "idr_Main.{main_2}5.0.158.1.arity.1.4"
      idris_int_eq2.0.1.4 <- _prim_int_eq ccp.3.1.4 "idr_Main.{main_2}5.0.158.1.arity.1.4"
      ccp.0.0.1.4 <- case idris_int_eq2.0.1.4 of
        #False ->
          pure ccp.3.1.4
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.1.4 <- case ccp.0.0.1.4 of
        0 ->
          idris_int_lt2.0.1.4 <- _prim_int_lt ccp.3.1.4 "idr_Main.{main_2}5.0.158.1.arity.1.4"
          ccp.1.0.1.4 <- case idris_int_lt2.0.1.4 of
            #False ->
              pure ccp.0.0.1.4
            #True ->
              pure 1
          case ccp.1.0.1.4 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.1.4 <- case idr_Prelude.Show.primNumShow5_val_193.1.4 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.1.4 <- pure idris_int_eq2.0.1.4
          ccp.0.1.1.4 <- case idris_int_eq2.0.1.4 of
            #False ->
              pure ccp.3.1.4
            #True ->
              pure 1
          case ccp.0.1.1.4 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.1.4 <- case idr_Prelude.Show.primNumShow5_val_192.1.4 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.4 <- pure #""
          idris_str_eq3.0.1.4 <- _prim_string_eq idris_int_str2.0.0.1.4 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.4
          ccp.2.0.1.4 <- case idris_str_eq3.0.1.4 of
            #False ->
              pure ccp.3.1.4
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.1.4 <- case ccp.2.0.1.4 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.4" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.1.4 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.1.4 <- _prim_string_head idris_int_str2.0.0.1.4
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.4 <- pure 45
              idris_int_eq2.2.0.1.4 <- _prim_int_eq idris_str_head2.0.0.1.4 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.4
              ccp.0.2.0.1.4 <- case idris_int_eq2.2.0.1.4 of
                #False ->
                  pure ccp.3.1.4
                #True ->
                  pure 1
              case ccp.0.2.0.1.4 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.4"
      unboxed.CGrString.7.0.4 <- case idr_Prelude.Show.primNumShow5_val.1.4 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.1.4
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.1.4 <- pure #")"
          idris_str_concat3.0.1.4 <- _prim_string_concat idris_int_str2.0.0.1.4 idris_str_concat2_0.0.1.4
          idris_str_concat1_0.1.1.4 <- pure #"("
          idris_str_concat3.1.1.4 <- _prim_string_concat idris_str_concat1_0.1.1.4 idris_str_concat3.0.1.4
          pure idris_str_concat3.1.1.4
      idris_str_concat1_0.4.0.4 <- pure #"Same "
      idris_str_concat3.4.0.4 <- _prim_string_concat idris_str_concat1_0.4.0.4 unboxed.CGrString.7.0.4
      pure idris_str_concat3.4.0.4
    (C"idr_{U_Main.{main_3}_1}") ->
      "idr_Main.{main_3}5.0.158.2.arity.1.4" <- pure 3
      idris_int_str2.0.0.2.4 <- _prim_int_str "idr_Main.{main_3}5.0.158.2.arity.1.4"
      ccp.3.2.4 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.4" <- pure 5
      idris_int_eq2.0.2.4 <- _prim_int_eq ccp.3.2.4 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.4"
      ccp.0.0.2.4 <- case idris_int_eq2.0.2.4 of
        #False ->
          pure ccp.3.2.4
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.2.4 <- case ccp.0.0.2.4 of
        0 ->
          idris_int_lt2.0.2.4 <- _prim_int_lt ccp.3.2.4 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.4"
          ccp.1.0.2.4 <- case idris_int_lt2.0.2.4 of
            #False ->
              pure ccp.0.0.2.4
            #True ->
              pure 1
          case ccp.1.0.2.4 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.2.4 <- case idr_Prelude.Show.primNumShow5_val_193.2.4 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.2.4 <- pure idris_int_eq2.0.2.4
          ccp.0.1.2.4 <- case idris_int_eq2.0.2.4 of
            #False ->
              pure ccp.3.2.4
            #True ->
              pure 1
          case ccp.0.1.2.4 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.2.4 <- case idr_Prelude.Show.primNumShow5_val_192.2.4 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.4 <- pure #""
          idris_str_eq3.0.2.4 <- _prim_string_eq idris_int_str2.0.0.2.4 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.4
          ccp.2.0.2.4 <- case idris_str_eq3.0.2.4 of
            #False ->
              pure ccp.3.2.4
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.2.4 <- case ccp.2.0.2.4 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.4" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.2.4 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.2.4 <- _prim_string_head idris_int_str2.0.0.2.4
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.4 <- pure 45
              idris_int_eq2.2.0.2.4 <- _prim_int_eq idris_str_head2.0.0.2.4 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.4
              ccp.0.2.0.2.4 <- case idris_int_eq2.2.0.2.4 of
                #False ->
                  pure ccp.3.2.4
                #True ->
                  pure 1
              case ccp.0.2.0.2.4 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.4"
      unboxed.CGrString.8.0.4 <- case idr_Prelude.Show.primNumShow5_val.2.4 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.2.4
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.2.4 <- pure #")"
          idris_str_concat3.0.2.4 <- _prim_string_concat idris_int_str2.0.0.2.4 idris_str_concat2_0.0.2.4
          idris_str_concat1_0.1.2.4 <- pure #"("
          idris_str_concat3.1.2.4 <- _prim_string_concat idris_str_concat1_0.1.2.4 idris_str_concat3.0.2.4
          pure idris_str_concat3.1.2.4
      idris_str_concat1_0.5.0.4 <- pure #"Same "
      idris_str_concat3.5.0.4 <- _prim_string_concat idris_str_concat1_0.5.0.4 unboxed.CGrString.8.0.4
      pure idris_str_concat3.5.0.4
    (C"idr_{U_Main.{main_5}_1}") ->
      "idr_Main.{main_5}0_val.0.4" <- fetch idr_Prelude.Interactive.printLn'3.4
      ccp.5.0.4 <- case "idr_Main.{main_5}0_val.0.4" of
        (Cidr_Prelude.Bool.False) ->
          pure #"False"
        (Cidr_Prelude.Bool.True) ->
          pure #"True"
      pure ccp.5.0.4
  idris_str_concat2_0.2.4 <- pure #"\n"
  idris_str_concat3.2.4 <- _prim_string_concat ccp.0.4 idris_str_concat2_0.2.4
  _prim_string_print idris_str_concat3.2.4
  idr_Main.main5_val_144.0 <- pure (Cidr_MkUnit)
  idr_Main.main9_168.49.3.arity.1.0 <- pure 10
  idr_Main.main9_val_166.0 <- idr_Main.checkEqNat2 idr_Main.main9_168.49.3.arity.1.0 idr_Main.main9_168.49.3.arity.1.0
  idr_Main.main9_val_165.0 <- case idr_Main.main9_val_166.0 of
    (Cidr_Prelude.Maybe.Just idr_Main.main10_173.0) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    (Cidr_Prelude.Maybe.Nothing) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Main.main9_174.0 <- store idr_Main.main9_val_165.0
  idr_Prelude.Interactive.printLn'2.5 <- pure idr_Main.main7_150.0
  idr_Prelude.Interactive.printLn'3.5 <- pure idr_Main.main9_174.0
  "idr_{APPLY_0}0_val.1.5" <- fetch idr_Prelude.Interactive.printLn'2.5
  ccp.0.5 <- case "idr_{APPLY_0}0_val.1.5" of
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}5.0.158.0.arity.1.5" <- pure 4
      idris_int_str2.0.0.0.5 <- _prim_int_str "idr_Main.{main_1}5.0.158.0.arity.1.5"
      ccp.3.0.5 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.5" <- pure 5
      idris_int_eq2.0.0.5 <- _prim_int_eq ccp.3.0.5 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.5"
      ccp.0.0.0.5 <- case idris_int_eq2.0.0.5 of
        #False ->
          pure ccp.3.0.5
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.0.5 <- case ccp.0.0.0.5 of
        0 ->
          idris_int_lt2.0.0.5 <- _prim_int_lt ccp.3.0.5 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.5"
          ccp.1.0.0.5 <- case idris_int_lt2.0.0.5 of
            #False ->
              pure ccp.0.0.0.5
            #True ->
              pure 1
          case ccp.1.0.0.5 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.0.5 <- case idr_Prelude.Show.primNumShow5_val_193.0.5 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.0.5 <- pure idris_int_eq2.0.0.5
          ccp.0.1.0.5 <- case idris_int_eq2.0.0.5 of
            #False ->
              pure ccp.3.0.5
            #True ->
              pure 1
          case ccp.0.1.0.5 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.0.5 <- case idr_Prelude.Show.primNumShow5_val_192.0.5 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.5 <- pure #""
          idris_str_eq3.0.0.5 <- _prim_string_eq idris_int_str2.0.0.0.5 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.5
          ccp.2.0.0.5 <- case idris_str_eq3.0.0.5 of
            #False ->
              pure ccp.3.0.5
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.0.5 <- case ccp.2.0.0.5 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.5" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.0.5 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.0.5 <- _prim_string_head idris_int_str2.0.0.0.5
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.5 <- pure 45
              idris_int_eq2.2.0.0.5 <- _prim_int_eq idris_str_head2.0.0.0.5 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.5
              ccp.0.2.0.0.5 <- case idris_int_eq2.2.0.0.5 of
                #False ->
                  pure ccp.3.0.5
                #True ->
                  pure 1
              case ccp.0.2.0.0.5 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.5"
      unboxed.CGrString.6.0.5 <- case idr_Prelude.Show.primNumShow5_val.0.5 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.0.5
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.0.5 <- pure #")"
          idris_str_concat3.0.0.5 <- _prim_string_concat idris_int_str2.0.0.0.5 idris_str_concat2_0.0.0.5
          idris_str_concat1_0.1.0.5 <- pure #"("
          idris_str_concat3.1.0.5 <- _prim_string_concat idris_str_concat1_0.1.0.5 idris_str_concat3.0.0.5
          pure idris_str_concat3.1.0.5
      idris_str_concat1_0.3.0.5 <- pure #"Same "
      idris_str_concat3.3.0.5 <- _prim_string_concat idris_str_concat1_0.3.0.5 unboxed.CGrString.6.0.5
      pure idris_str_concat3.3.0.5
    (C"idr_{U_Main.{main_2}_1}") ->
      "idr_Main.{main_2}5.0.158.1.arity.1.5" <- pure 5
      idris_int_str2.0.0.1.5 <- _prim_int_str "idr_Main.{main_2}5.0.158.1.arity.1.5"
      ccp.3.1.5 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.1.5" <- pure "idr_Main.{main_2}5.0.158.1.arity.1.5"
      idris_int_eq2.0.1.5 <- _prim_int_eq ccp.3.1.5 "idr_Main.{main_2}5.0.158.1.arity.1.5"
      ccp.0.0.1.5 <- case idris_int_eq2.0.1.5 of
        #False ->
          pure ccp.3.1.5
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.1.5 <- case ccp.0.0.1.5 of
        0 ->
          idris_int_lt2.0.1.5 <- _prim_int_lt ccp.3.1.5 "idr_Main.{main_2}5.0.158.1.arity.1.5"
          ccp.1.0.1.5 <- case idris_int_lt2.0.1.5 of
            #False ->
              pure ccp.0.0.1.5
            #True ->
              pure 1
          case ccp.1.0.1.5 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.1.5 <- case idr_Prelude.Show.primNumShow5_val_193.1.5 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.1.5 <- pure idris_int_eq2.0.1.5
          ccp.0.1.1.5 <- case idris_int_eq2.0.1.5 of
            #False ->
              pure ccp.3.1.5
            #True ->
              pure 1
          case ccp.0.1.1.5 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.1.5 <- case idr_Prelude.Show.primNumShow5_val_192.1.5 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.5 <- pure #""
          idris_str_eq3.0.1.5 <- _prim_string_eq idris_int_str2.0.0.1.5 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.5
          ccp.2.0.1.5 <- case idris_str_eq3.0.1.5 of
            #False ->
              pure ccp.3.1.5
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.1.5 <- case ccp.2.0.1.5 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.5" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.1.5 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.1.5 <- _prim_string_head idris_int_str2.0.0.1.5
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.5 <- pure 45
              idris_int_eq2.2.0.1.5 <- _prim_int_eq idris_str_head2.0.0.1.5 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.5
              ccp.0.2.0.1.5 <- case idris_int_eq2.2.0.1.5 of
                #False ->
                  pure ccp.3.1.5
                #True ->
                  pure 1
              case ccp.0.2.0.1.5 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.5"
      unboxed.CGrString.7.0.5 <- case idr_Prelude.Show.primNumShow5_val.1.5 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.1.5
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.1.5 <- pure #")"
          idris_str_concat3.0.1.5 <- _prim_string_concat idris_int_str2.0.0.1.5 idris_str_concat2_0.0.1.5
          idris_str_concat1_0.1.1.5 <- pure #"("
          idris_str_concat3.1.1.5 <- _prim_string_concat idris_str_concat1_0.1.1.5 idris_str_concat3.0.1.5
          pure idris_str_concat3.1.1.5
      idris_str_concat1_0.4.0.5 <- pure #"Same "
      idris_str_concat3.4.0.5 <- _prim_string_concat idris_str_concat1_0.4.0.5 unboxed.CGrString.7.0.5
      pure idris_str_concat3.4.0.5
    (C"idr_{U_Main.{main_3}_1}") ->
      "idr_Main.{main_3}5.0.158.2.arity.1.5" <- pure 3
      idris_int_str2.0.0.2.5 <- _prim_int_str "idr_Main.{main_3}5.0.158.2.arity.1.5"
      ccp.3.2.5 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.5" <- pure 5
      idris_int_eq2.0.2.5 <- _prim_int_eq ccp.3.2.5 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.5"
      ccp.0.0.2.5 <- case idris_int_eq2.0.2.5 of
        #False ->
          pure ccp.3.2.5
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.2.5 <- case ccp.0.0.2.5 of
        0 ->
          idris_int_lt2.0.2.5 <- _prim_int_lt ccp.3.2.5 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.5"
          ccp.1.0.2.5 <- case idris_int_lt2.0.2.5 of
            #False ->
              pure ccp.0.0.2.5
            #True ->
              pure 1
          case ccp.1.0.2.5 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.2.5 <- case idr_Prelude.Show.primNumShow5_val_193.2.5 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.2.5 <- pure idris_int_eq2.0.2.5
          ccp.0.1.2.5 <- case idris_int_eq2.0.2.5 of
            #False ->
              pure ccp.3.2.5
            #True ->
              pure 1
          case ccp.0.1.2.5 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.2.5 <- case idr_Prelude.Show.primNumShow5_val_192.2.5 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.5 <- pure #""
          idris_str_eq3.0.2.5 <- _prim_string_eq idris_int_str2.0.0.2.5 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.5
          ccp.2.0.2.5 <- case idris_str_eq3.0.2.5 of
            #False ->
              pure ccp.3.2.5
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.2.5 <- case ccp.2.0.2.5 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.5" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.2.5 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.2.5 <- _prim_string_head idris_int_str2.0.0.2.5
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.5 <- pure 45
              idris_int_eq2.2.0.2.5 <- _prim_int_eq idris_str_head2.0.0.2.5 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.5
              ccp.0.2.0.2.5 <- case idris_int_eq2.2.0.2.5 of
                #False ->
                  pure ccp.3.2.5
                #True ->
                  pure 1
              case ccp.0.2.0.2.5 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.5"
      unboxed.CGrString.8.0.5 <- case idr_Prelude.Show.primNumShow5_val.2.5 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.2.5
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.2.5 <- pure #")"
          idris_str_concat3.0.2.5 <- _prim_string_concat idris_int_str2.0.0.2.5 idris_str_concat2_0.0.2.5
          idris_str_concat1_0.1.2.5 <- pure #"("
          idris_str_concat3.1.2.5 <- _prim_string_concat idris_str_concat1_0.1.2.5 idris_str_concat3.0.2.5
          pure idris_str_concat3.1.2.5
      idris_str_concat1_0.5.0.5 <- pure #"Same "
      idris_str_concat3.5.0.5 <- _prim_string_concat idris_str_concat1_0.5.0.5 unboxed.CGrString.8.0.5
      pure idris_str_concat3.5.0.5
    (C"idr_{U_Main.{main_5}_1}") ->
      "idr_Main.{main_5}0_val.0.5" <- fetch idr_Prelude.Interactive.printLn'3.5
      ccp.5.0.5 <- case "idr_Main.{main_5}0_val.0.5" of
        (Cidr_Prelude.Bool.False) ->
          pure #"False"
        (Cidr_Prelude.Bool.True) ->
          pure #"True"
      pure ccp.5.0.5
  idris_str_concat2_0.2.5 <- pure #"\n"
  idris_str_concat3.2.5 <- _prim_string_concat ccp.0.5 idris_str_concat2_0.2.5
  _prim_string_print idris_str_concat3.2.5
  idr_Main.main6_val_158.0 <- pure (Cidr_MkUnit)
  idr_Main.main11_187.49.4.arity.1.0 <- pure 9
  idr_Main.main10_val_183.0 <- idr_Main.checkEqNat2 idr_Main.main9_168.49.3.arity.1.0 idr_Main.main11_187.49.4.arity.1.0
  idr_Main.main10_val_182.0 <- case idr_Main.main10_val_183.0 of
    (Cidr_Prelude.Maybe.Just idr_Main.main11_190.0) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Maybe.Nothing) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Main.main10_191.0 <- store idr_Main.main10_val_182.0
  idr_Prelude.Interactive.printLn'2.6 <- pure idr_Main.main7_150.0
  idr_Prelude.Interactive.printLn'3.6 <- pure idr_Main.main10_191.0
  "idr_{APPLY_0}0_val.1.6" <- fetch idr_Prelude.Interactive.printLn'2.6
  ccp.0.6 <- case "idr_{APPLY_0}0_val.1.6" of
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}5.0.158.0.arity.1.6" <- pure 4
      idris_int_str2.0.0.0.6 <- _prim_int_str "idr_Main.{main_1}5.0.158.0.arity.1.6"
      ccp.3.0.6 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.6" <- pure 5
      idris_int_eq2.0.0.6 <- _prim_int_eq ccp.3.0.6 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.6"
      ccp.0.0.0.6 <- case idris_int_eq2.0.0.6 of
        #False ->
          pure ccp.3.0.6
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.0.6 <- case ccp.0.0.0.6 of
        0 ->
          idris_int_lt2.0.0.6 <- _prim_int_lt ccp.3.0.6 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.0.6"
          ccp.1.0.0.6 <- case idris_int_lt2.0.0.6 of
            #False ->
              pure ccp.0.0.0.6
            #True ->
              pure 1
          case ccp.1.0.0.6 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.0.6 <- case idr_Prelude.Show.primNumShow5_val_193.0.6 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.0.6 <- pure idris_int_eq2.0.0.6
          ccp.0.1.0.6 <- case idris_int_eq2.0.0.6 of
            #False ->
              pure ccp.3.0.6
            #True ->
              pure 1
          case ccp.0.1.0.6 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.0.6 <- case idr_Prelude.Show.primNumShow5_val_192.0.6 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.6 <- pure #""
          idris_str_eq3.0.0.6 <- _prim_string_eq idris_int_str2.0.0.0.6 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.0.6
          ccp.2.0.0.6 <- case idris_str_eq3.0.0.6 of
            #False ->
              pure ccp.3.0.6
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.0.6 <- case ccp.2.0.0.6 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.6" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.0.6 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.0.6 <- _prim_string_head idris_int_str2.0.0.0.6
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.6 <- pure 45
              idris_int_eq2.2.0.0.6 <- _prim_int_eq idris_str_head2.0.0.0.6 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.0.6
              ccp.0.2.0.0.6 <- case idris_int_eq2.2.0.0.6 of
                #False ->
                  pure ccp.3.0.6
                #True ->
                  pure 1
              case ccp.0.2.0.0.6 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.0.6"
      unboxed.CGrString.6.0.6 <- case idr_Prelude.Show.primNumShow5_val.0.6 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.0.6
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.0.6 <- pure #")"
          idris_str_concat3.0.0.6 <- _prim_string_concat idris_int_str2.0.0.0.6 idris_str_concat2_0.0.0.6
          idris_str_concat1_0.1.0.6 <- pure #"("
          idris_str_concat3.1.0.6 <- _prim_string_concat idris_str_concat1_0.1.0.6 idris_str_concat3.0.0.6
          pure idris_str_concat3.1.0.6
      idris_str_concat1_0.3.0.6 <- pure #"Same "
      idris_str_concat3.3.0.6 <- _prim_string_concat idris_str_concat1_0.3.0.6 unboxed.CGrString.6.0.6
      pure idris_str_concat3.3.0.6
    (C"idr_{U_Main.{main_2}_1}") ->
      "idr_Main.{main_2}5.0.158.1.arity.1.6" <- pure 5
      idris_int_str2.0.0.1.6 <- _prim_int_str "idr_Main.{main_2}5.0.158.1.arity.1.6"
      ccp.3.1.6 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.1.6" <- pure "idr_Main.{main_2}5.0.158.1.arity.1.6"
      idris_int_eq2.0.1.6 <- _prim_int_eq ccp.3.1.6 "idr_Main.{main_2}5.0.158.1.arity.1.6"
      ccp.0.0.1.6 <- case idris_int_eq2.0.1.6 of
        #False ->
          pure ccp.3.1.6
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.1.6 <- case ccp.0.0.1.6 of
        0 ->
          idris_int_lt2.0.1.6 <- _prim_int_lt ccp.3.1.6 "idr_Main.{main_2}5.0.158.1.arity.1.6"
          ccp.1.0.1.6 <- case idris_int_lt2.0.1.6 of
            #False ->
              pure ccp.0.0.1.6
            #True ->
              pure 1
          case ccp.1.0.1.6 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.1.6 <- case idr_Prelude.Show.primNumShow5_val_193.1.6 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.1.6 <- pure idris_int_eq2.0.1.6
          ccp.0.1.1.6 <- case idris_int_eq2.0.1.6 of
            #False ->
              pure ccp.3.1.6
            #True ->
              pure 1
          case ccp.0.1.1.6 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.1.6 <- case idr_Prelude.Show.primNumShow5_val_192.1.6 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.6 <- pure #""
          idris_str_eq3.0.1.6 <- _prim_string_eq idris_int_str2.0.0.1.6 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.1.6
          ccp.2.0.1.6 <- case idris_str_eq3.0.1.6 of
            #False ->
              pure ccp.3.1.6
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.1.6 <- case ccp.2.0.1.6 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.6" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.1.6 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.1.6 <- _prim_string_head idris_int_str2.0.0.1.6
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.6 <- pure 45
              idris_int_eq2.2.0.1.6 <- _prim_int_eq idris_str_head2.0.0.1.6 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.1.6
              ccp.0.2.0.1.6 <- case idris_int_eq2.2.0.1.6 of
                #False ->
                  pure ccp.3.1.6
                #True ->
                  pure 1
              case ccp.0.2.0.1.6 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.1.6"
      unboxed.CGrString.7.0.6 <- case idr_Prelude.Show.primNumShow5_val.1.6 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.1.6
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.1.6 <- pure #")"
          idris_str_concat3.0.1.6 <- _prim_string_concat idris_int_str2.0.0.1.6 idris_str_concat2_0.0.1.6
          idris_str_concat1_0.1.1.6 <- pure #"("
          idris_str_concat3.1.1.6 <- _prim_string_concat idris_str_concat1_0.1.1.6 idris_str_concat3.0.1.6
          pure idris_str_concat3.1.1.6
      idris_str_concat1_0.4.0.6 <- pure #"Same "
      idris_str_concat3.4.0.6 <- _prim_string_concat idris_str_concat1_0.4.0.6 unboxed.CGrString.7.0.6
      pure idris_str_concat3.4.0.6
    (C"idr_{U_Main.{main_3}_1}") ->
      "idr_Main.{main_3}5.0.158.2.arity.1.6" <- pure 3
      idris_int_str2.0.0.2.6 <- _prim_int_str "idr_Main.{main_3}5.0.158.2.arity.1.6"
      ccp.3.2.6 <- pure 0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.6" <- pure 5
      idris_int_eq2.0.2.6 <- _prim_int_eq ccp.3.2.6 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.6"
      ccp.0.0.2.6 <- case idris_int_eq2.0.2.6 of
        #False ->
          pure ccp.3.2.6
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_193.2.6 <- case ccp.0.0.2.6 of
        0 ->
          idris_int_lt2.0.2.6 <- _prim_int_lt ccp.3.2.6 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0.2.6"
          ccp.1.0.2.6 <- case idris_int_lt2.0.2.6 of
            #False ->
              pure ccp.0.0.2.6
            #True ->
              pure 1
          case ccp.1.0.2.6 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_192.2.6 <- case idr_Prelude.Show.primNumShow5_val_193.2.6 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idris_int_eq2.1.2.6 <- pure idris_int_eq2.0.2.6
          ccp.0.1.2.6 <- case idris_int_eq2.0.2.6 of
            #False ->
              pure ccp.3.2.6
            #True ->
              pure 1
          case ccp.0.1.2.6 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.2.6 <- case idr_Prelude.Show.primNumShow5_val_192.2.6 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.6 <- pure #""
          idris_str_eq3.0.2.6 <- _prim_string_eq idris_int_str2.0.0.2.6 idr_Prelude.Show.primNumShow6_209.41.7.arity.1.2.6
          ccp.2.0.2.6 <- case idris_str_eq3.0.2.6 of
            #False ->
              pure ccp.3.2.6
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_206.2.6 <- case ccp.2.0.2.6 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.6" <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_206.2.6 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0.2.6 <- _prim_string_head idris_int_str2.0.0.2.6
              idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.6 <- pure 45
              idris_int_eq2.2.0.2.6 <- _prim_int_eq idris_str_head2.0.0.2.6 idr_Prelude.Show.primNumShow8.41.9.arity.1.0.2.6
              ccp.0.2.0.2.6 <- case idris_int_eq2.2.0.2.6 of
                #False ->
                  pure ccp.3.2.6
                #True ->
                  pure 1
              case ccp.0.2.0.2.6 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0.2.6"
      unboxed.CGrString.8.0.6 <- case idr_Prelude.Show.primNumShow5_val.2.6 of
        (Cidr_Prelude.Bool.False) ->
          pure idris_int_str2.0.0.2.6
        (Cidr_Prelude.Bool.True) ->
          idris_str_concat2_0.0.2.6 <- pure #")"
          idris_str_concat3.0.2.6 <- _prim_string_concat idris_int_str2.0.0.2.6 idris_str_concat2_0.0.2.6
          idris_str_concat1_0.1.2.6 <- pure #"("
          idris_str_concat3.1.2.6 <- _prim_string_concat idris_str_concat1_0.1.2.6 idris_str_concat3.0.2.6
          pure idris_str_concat3.1.2.6
      idris_str_concat1_0.5.0.6 <- pure #"Same "
      idris_str_concat3.5.0.6 <- _prim_string_concat idris_str_concat1_0.5.0.6 unboxed.CGrString.8.0.6
      pure idris_str_concat3.5.0.6
    (C"idr_{U_Main.{main_5}_1}") ->
      "idr_Main.{main_5}0_val.0.6" <- fetch idr_Prelude.Interactive.printLn'3.6
      ccp.5.0.6 <- case "idr_Main.{main_5}0_val.0.6" of
        (Cidr_Prelude.Bool.False) ->
          pure #"False"
        (Cidr_Prelude.Bool.True) ->
          pure #"True"
      pure ccp.5.0.6
  idris_str_concat2_0.2.6 <- pure #"\n"
  idris_str_concat3.2.6 <- _prim_string_concat ccp.0.6 idris_str_concat2_0.2.6
  _prim_string_print idris_str_concat3.2.6
  "idr_{runMain_0}0_val.0" <- pure (Cidr_MkUnit)
  pure ()

idr_Main.checkEqNat idr_Main.checkEqNat0.49.arity.1 idr_Main.checkEqNat1.49.arity.1 =
  case idr_Main.checkEqNat1.49.arity.1 of
    0 ->
      case idr_Main.checkEqNat0.49.arity.1 of
        0 ->
          idr_Main.checkEqNat2_val <- pure (Cidr_Main.Same)
          idr_Main.checkEqNat2_2 <- store idr_Main.checkEqNat2_val
          pure (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat2_2) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat2_2)
        #default ->
          pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
    #default ->
      idr_Main.checkEqNat2_13.41.1.arity.1 <- pure 1
      idris_int_sub2.1 <- _prim_int_sub idr_Main.checkEqNat1.49.arity.1 idr_Main.checkEqNat2_13.41.1.arity.1
      case idr_Main.checkEqNat0.49.arity.1 of
        0 ->
          pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
        #default ->
          idris_int_sub2.2 <- _prim_int_sub idr_Main.checkEqNat0.49.arity.1 idr_Main.checkEqNat2_13.41.1.arity.1
          idr_Main.checkEqNat4_val <- idr_Main.checkEqNat idris_int_sub2.2 idris_int_sub2.1
          case idr_Main.checkEqNat4_val of
            (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat5) ->
              idr_Main.checkEqNat6_val <- pure (Cidr_Main.Same)
              idr_Main.checkEqNat6 <- store idr_Main.checkEqNat6_val
              pure (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat6) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat6)
            (Cidr_Prelude.Maybe.Nothing) ->
              pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)

idr_Main.checkEqNat2 idr_Main.checkEqNat20.49.arity.1 idr_Main.checkEqNat21.49.arity.1 =
  case idr_Main.checkEqNat21.49.arity.1 of
    0 ->
      case idr_Main.checkEqNat20.49.arity.1 of
        0 ->
          idr_Main.checkEqNat22_val <- pure (Cidr_Refl)
          idr_Main.checkEqNat22 <- store idr_Main.checkEqNat22_val
          pure (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat22) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat22)
        #default ->
          pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
    #default ->
      idr_Main.checkEqNat22_67.41.4.arity.1 <- pure 1
      idris_int_sub2.4 <- _prim_int_sub idr_Main.checkEqNat21.49.arity.1 idr_Main.checkEqNat22_67.41.4.arity.1
      case idr_Main.checkEqNat20.49.arity.1 of
        0 ->
          pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
        #default ->
          idris_int_sub2.5 <- _prim_int_sub idr_Main.checkEqNat20.49.arity.1 idr_Main.checkEqNat22_67.41.4.arity.1
          idr_Main.checkEqNat27_val <- idr_Main.checkEqNat2 idris_int_sub2.5 idris_int_sub2.4
          case idr_Main.checkEqNat27_val of
            (Cidr_Prelude.Maybe.Just "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:04.0") ->
              "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:05_val.0" <- pure (Cidr_Refl)
              "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:05.0" <- store "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:05_val.0"
              pure (Cidr_Prelude.Maybe.Just "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:05.0") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:05.0")
            (Cidr_Prelude.Maybe.Nothing) ->
              pure idr_Main.checkEqNat27_val
