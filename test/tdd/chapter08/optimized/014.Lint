idris_int_eq.unboxed idris_int_eq0.41.arity.1 idris_int_eq1.41.arity.1 =
  (CGrInt idris_int_eq0_1) <- pure (CGrInt idris_int_eq0.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrInt idris_int_eq1_1) <- pure (CGrInt idris_int_eq1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_eq2 <- _prim_int_eq idris_int_eq0_1 idris_int_eq1_1
  case idris_int_eq2 of
    #False ->
      v.0 <- pure (CGrInt 0)
      (CGrInt unboxed.CGrInt.0) <- pure v.0
      pure unboxed.CGrInt.0
    #True ->
      v.1 <- pure (CGrInt 1)
      (CGrInt unboxed.CGrInt.1) <- pure v.1
      pure unboxed.CGrInt.1

idris_int_lt.unboxed idris_int_lt0.41.arity.1 idris_int_lt1.41.arity.1 =
  (CGrInt idris_int_lt0_1) <- pure (CGrInt idris_int_lt0.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrInt idris_int_lt1_1) <- pure (CGrInt idris_int_lt1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_lt2 <- _prim_int_lt idris_int_lt0_1 idris_int_lt1_1
  case idris_int_lt2 of
    #False ->
      v.2 <- pure (CGrInt 0)
      (CGrInt unboxed.CGrInt.2) <- pure v.2
      pure unboxed.CGrInt.2
    #True ->
      v.3 <- pure (CGrInt 1)
      (CGrInt unboxed.CGrInt.3) <- pure v.3
      pure unboxed.CGrInt.3

grinMain =
  v.140.0 <- pure (CErased)
  "idr_{runMain_0}0_val_238.0" <- pure v.140.0
  "idr_{runMain_0}0.0" <- store v.140.0
  "idr_{runMain_0}0_val.0" <- idr_Main.main
  "idr_{runMain_0}0_239.0" <- store "idr_{runMain_0}0_val.0"
  "idr_{EVAL_0}0.0.0" <- pure "idr_{runMain_0}0_239.0"
  "idr_{EVAL_0}0_val.0.0" <- fetch "idr_{EVAL_0}0.0.0"
  r <- fetch "idr_{EVAL_0}0.0.0"
  pure ()

idr_Main.checkEqNat idr_Main.checkEqNat0 idr_Main.checkEqNat1 =
  idr_Main.checkEqNat1_val <- fetch idr_Main.checkEqNat1
  case idr_Main.checkEqNat1_val of
    (CGrInt idr_Main.checkEqNat_cpat_LInt64_0) ->
      case idr_Main.checkEqNat_cpat_LInt64_0 of
        0 ->
          idr_Main.checkEqNat0_val <- fetch idr_Main.checkEqNat0
          case idr_Main.checkEqNat0_val of
            (CGrInt idr_Main.checkEqNat_cpat_LInt64_0_1) ->
              case idr_Main.checkEqNat_cpat_LInt64_0_1 of
                0 ->
                  v.10 <- pure (Cidr_Main.Same)
                  idr_Main.checkEqNat2_val <- pure v.10
                  idr_Main.checkEqNat2_2 <- store v.10
                  v.11 <- pure (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat2_2)
                  pure v.11
                #default ->
                  v.12 <- pure (CGrInt 1)
                  idr_Main.checkEqNat2_val_4 <- pure v.12
                  idr_Main.checkEqNat2_5 <- store v.12
                  (CGrInt idr_Main.checkEqNat0.41.0.arity.1) <- fetch idr_Main.checkEqNat0
                  (CGrInt idr_Main.checkEqNat2_5.41.0.arity.1) <- fetch idr_Main.checkEqNat2_5
                  idris_int_sub0.41.arity.1.0 <- pure idr_Main.checkEqNat0.41.0.arity.1
                  idris_int_sub1.41.arity.1.0 <- pure idr_Main.checkEqNat2_5.41.0.arity.1
                  (CGrInt idris_int_sub0_1.0) <- pure (CGrInt idris_int_sub0.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_sub1_1.0) <- pure (CGrInt idris_int_sub1.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_sub2.0 <- _prim_int_sub idris_int_sub0_1.0 idris_int_sub1_1.0
                  v.4.0 <- pure (CGrInt idris_int_sub2.0)
                  (CGrInt unboxed.CGrInt.4.0) <- pure v.4.0
                  unboxed.CGrInt.7 <- pure unboxed.CGrInt.4.0
                  idr_Main.checkEqNat2_val_3 <- pure (CGrInt unboxed.CGrInt.7)
                  idr_Main.checkEqNat2_6 <- store idr_Main.checkEqNat2_val_3
                  v.13 <- pure (Cidr_Prelude.Maybe.Nothing)
                  pure v.13 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat2_5.41.0.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat0.41.0.arity.1)
        #default ->
          v.16 <- pure (CGrInt 1)
          idr_Main.checkEqNat2_val_12 <- pure v.16
          idr_Main.checkEqNat2_13 <- store v.16
          (CGrInt idr_Main.checkEqNat1.41.1.arity.1) <- fetch idr_Main.checkEqNat1
          (CGrInt idr_Main.checkEqNat2_13.41.1.arity.1) <- fetch idr_Main.checkEqNat2_13
          idris_int_sub0.41.arity.1.1 <- pure idr_Main.checkEqNat1.41.1.arity.1
          idris_int_sub1.41.arity.1.1 <- pure idr_Main.checkEqNat2_13.41.1.arity.1
          (CGrInt idris_int_sub0_1.1) <- pure (CGrInt idris_int_sub0.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_sub1_1.1) <- pure (CGrInt idris_int_sub1.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_sub2.1 <- _prim_int_sub idris_int_sub0_1.1 idris_int_sub1_1.1
          v.4.1 <- pure (CGrInt idris_int_sub2.1)
          (CGrInt unboxed.CGrInt.4.1) <- pure v.4.1
          unboxed.CGrInt.8 <- pure unboxed.CGrInt.4.1
          idr_Main.checkEqNat2_val_11 <- pure (CGrInt unboxed.CGrInt.8)
          idr_Main.checkEqNat2_14 <- store idr_Main.checkEqNat2_val_11
          idr_Main.checkEqNat0_val_15 <- fetch idr_Main.checkEqNat0
          case idr_Main.checkEqNat0_val_15 of
            (CGrInt idr_Main.checkEqNat_cpat_LInt64_0_16) ->
              case idr_Main.checkEqNat_cpat_LInt64_0_16 of
                0 ->
                  v.17 <- pure (Cidr_Prelude.Maybe.Nothing)
                  pure v.17
                #default ->
                  v.18 <- pure (CGrInt 1)
                  idr_Main.checkEqNat3_val_17 <- pure v.18
                  idr_Main.checkEqNat3 <- store v.18
                  (CGrInt idr_Main.checkEqNat0.41.2.arity.1) <- fetch idr_Main.checkEqNat0
                  (CGrInt idr_Main.checkEqNat3.41.2.arity.1) <- fetch idr_Main.checkEqNat3
                  idris_int_sub0.41.arity.1.2 <- pure idr_Main.checkEqNat0.41.2.arity.1
                  idris_int_sub1.41.arity.1.2 <- pure idr_Main.checkEqNat3.41.2.arity.1
                  (CGrInt idris_int_sub0_1.2) <- pure (CGrInt idris_int_sub0.41.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_sub1_1.2) <- pure (CGrInt idris_int_sub1.41.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_sub2.2 <- _prim_int_sub idris_int_sub0_1.2 idris_int_sub1_1.2
                  v.4.2 <- pure (CGrInt idris_int_sub2.2)
                  (CGrInt unboxed.CGrInt.4.2) <- pure v.4.2
                  unboxed.CGrInt.9 <- pure unboxed.CGrInt.4.2
                  idr_Main.checkEqNat3_val <- pure (CGrInt unboxed.CGrInt.9)
                  idr_Main.checkEqNat3_18 <- store idr_Main.checkEqNat3_val
                  idr_Main.checkEqNat4_val <- idr_Main.checkEqNat idr_Main.checkEqNat3_18 idr_Main.checkEqNat2_14
                  idr_Main.checkEqNat4 <- store idr_Main.checkEqNat4_val
                  idr_Main.checkEqNat4_val_19 <- fetch idr_Main.checkEqNat4
                  case idr_Main.checkEqNat4_val_19 of
                    (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat5) ->
                      v.19 <- pure (Cidr_Main.Same)
                      idr_Main.checkEqNat6_val <- pure v.19
                      idr_Main.checkEqNat6 <- store v.19
                      v.20 <- pure (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat6)
                      pure v.20
                    (Cidr_Prelude.Maybe.Nothing) ->
                      v.21 <- pure (Cidr_Prelude.Maybe.Nothing)
                      pure v.21 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat3.41.2.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat0.41.2.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat2_13.41.1.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat1.41.1.arity.1)

idr_Main.checkEqNat2 idr_Main.checkEqNat20 idr_Main.checkEqNat21 =
  idr_Main.checkEqNat21_val <- fetch idr_Main.checkEqNat21
  case idr_Main.checkEqNat21_val of
    (CGrInt idr_Main.checkEqNat2_cpat_LInt64_0) ->
      case idr_Main.checkEqNat2_cpat_LInt64_0 of
        0 ->
          idr_Main.checkEqNat20_val <- fetch idr_Main.checkEqNat20
          case idr_Main.checkEqNat20_val of
            (CGrInt idr_Main.checkEqNat2_cpat_LInt64_0_56) ->
              case idr_Main.checkEqNat2_cpat_LInt64_0_56 of
                0 ->
                  v.36 <- pure (Cidr_Refl)
                  idr_Main.checkEqNat22_val <- pure v.36
                  idr_Main.checkEqNat22 <- store v.36
                  v.37 <- pure (Cidr_Prelude.Maybe.Just idr_Main.checkEqNat22)
                  pure v.37
                #default ->
                  v.38 <- pure (CGrInt 1)
                  idr_Main.checkEqNat22_val_58 <- pure v.38
                  idr_Main.checkEqNat22_59 <- store v.38
                  (CGrInt idr_Main.checkEqNat20.41.3.arity.1) <- fetch idr_Main.checkEqNat20
                  (CGrInt idr_Main.checkEqNat22_59.41.3.arity.1) <- fetch idr_Main.checkEqNat22_59
                  idris_int_sub0.41.arity.1.3 <- pure idr_Main.checkEqNat20.41.3.arity.1
                  idris_int_sub1.41.arity.1.3 <- pure idr_Main.checkEqNat22_59.41.3.arity.1
                  (CGrInt idris_int_sub0_1.3) <- pure (CGrInt idris_int_sub0.41.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_sub1_1.3) <- pure (CGrInt idris_int_sub1.41.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_sub2.3 <- _prim_int_sub idris_int_sub0_1.3 idris_int_sub1_1.3
                  v.4.3 <- pure (CGrInt idris_int_sub2.3)
                  (CGrInt unboxed.CGrInt.4.3) <- pure v.4.3
                  unboxed.CGrInt.10 <- pure unboxed.CGrInt.4.3
                  idr_Main.checkEqNat22_val_57 <- pure (CGrInt unboxed.CGrInt.10)
                  idr_Main.checkEqNat22_60 <- store idr_Main.checkEqNat22_val_57
                  v.39 <- pure (Cidr_Prelude.Maybe.Nothing)
                  pure v.39 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat22_59.41.3.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat20.41.3.arity.1)
        #default ->
          v.42 <- pure (CGrInt 1)
          idr_Main.checkEqNat22_val_66 <- pure v.42
          idr_Main.checkEqNat22_67 <- store v.42
          (CGrInt idr_Main.checkEqNat21.41.4.arity.1) <- fetch idr_Main.checkEqNat21
          (CGrInt idr_Main.checkEqNat22_67.41.4.arity.1) <- fetch idr_Main.checkEqNat22_67
          idris_int_sub0.41.arity.1.4 <- pure idr_Main.checkEqNat21.41.4.arity.1
          idris_int_sub1.41.arity.1.4 <- pure idr_Main.checkEqNat22_67.41.4.arity.1
          (CGrInt idris_int_sub0_1.4) <- pure (CGrInt idris_int_sub0.41.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_sub1_1.4) <- pure (CGrInt idris_int_sub1.41.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_sub2.4 <- _prim_int_sub idris_int_sub0_1.4 idris_int_sub1_1.4
          v.4.4 <- pure (CGrInt idris_int_sub2.4)
          (CGrInt unboxed.CGrInt.4.4) <- pure v.4.4
          unboxed.CGrInt.11 <- pure unboxed.CGrInt.4.4
          idr_Main.checkEqNat22_val_65 <- pure (CGrInt unboxed.CGrInt.11)
          idr_Main.checkEqNat22_68 <- store idr_Main.checkEqNat22_val_65
          idr_Main.checkEqNat20_val_69 <- fetch idr_Main.checkEqNat20
          case idr_Main.checkEqNat20_val_69 of
            (CGrInt idr_Main.checkEqNat2_cpat_LInt64_0_70) ->
              case idr_Main.checkEqNat2_cpat_LInt64_0_70 of
                0 ->
                  v.43 <- pure (Cidr_Prelude.Maybe.Nothing)
                  pure v.43
                #default ->
                  v.44 <- pure (CGrInt 1)
                  idr_Main.checkEqNat23_val_71 <- pure v.44
                  idr_Main.checkEqNat23 <- store v.44
                  (CGrInt idr_Main.checkEqNat20.41.5.arity.1) <- fetch idr_Main.checkEqNat20
                  (CGrInt idr_Main.checkEqNat23.41.5.arity.1) <- fetch idr_Main.checkEqNat23
                  idris_int_sub0.41.arity.1.5 <- pure idr_Main.checkEqNat20.41.5.arity.1
                  idris_int_sub1.41.arity.1.5 <- pure idr_Main.checkEqNat23.41.5.arity.1
                  (CGrInt idris_int_sub0_1.5) <- pure (CGrInt idris_int_sub0.41.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_sub1_1.5) <- pure (CGrInt idris_int_sub1.41.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_sub2.5 <- _prim_int_sub idris_int_sub0_1.5 idris_int_sub1_1.5
                  v.4.5 <- pure (CGrInt idris_int_sub2.5)
                  (CGrInt unboxed.CGrInt.4.5) <- pure v.4.5
                  unboxed.CGrInt.12 <- pure unboxed.CGrInt.4.5
                  idr_Main.checkEqNat23_val <- pure (CGrInt unboxed.CGrInt.12)
                  idr_Main.checkEqNat23_72 <- store idr_Main.checkEqNat23_val
                  v.45 <- pure (CErased)
                  idr_Main.checkEqNat24_val <- pure v.45
                  idr_Main.checkEqNat24 <- store v.45
                  v.46 <- pure (CErased)
                  idr_Main.checkEqNat25_val <- pure v.46
                  idr_Main.checkEqNat25 <- store v.46
                  v.47 <- pure (C"idr_{U_Main.{checkEqNat2_0}_1}")
                  idr_Main.checkEqNat26_val <- pure v.47
                  idr_Main.checkEqNat26 <- store v.47
                  idr_Main.checkEqNat27_val <- idr_Main.checkEqNat2 idr_Main.checkEqNat23_72 idr_Main.checkEqNat22_68
                  idr_Main.checkEqNat27 <- store idr_Main.checkEqNat27_val
                  "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:02.0" <- pure idr_Main.checkEqNat26
                  "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:03.0" <- pure idr_Main.checkEqNat27
                  "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:03_val.0" <- fetch "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:03.0"
                  case "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:03_val.0" of
                    (Cidr_Prelude.Maybe.Just "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:04.0") ->
                      "idr_{APPLY_0}0.2.0" <- pure "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:02.0"
                      "idr_{APPLY_0}1.2.0" <- pure "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:04.0"
                      "idr_{APPLY_0}0_val.2.0" <- fetch "idr_{APPLY_0}0.2.0"
                      "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:05_val.0" <- case "idr_{APPLY_0}0_val.2.0" of
                        (C"idr_{U_Main.{checkEqNat2_0}_1}") ->
                          "idr_Main.{checkEqNat2_0}"
                      "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:05.0" <- store "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:05_val.0"
                      v.162.0 <- pure (Cidr_Prelude.Maybe.Just "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:05.0")
                      pure v.162.0
                    (Cidr_Prelude.Maybe.Nothing) ->
                      fetch "idr_Prelude.Functor.Prelude.@Prelude.Functor.Functor$Maybe:!map:03.0" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat23.41.5.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat20.41.5.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat22_67.41.4.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.checkEqNat21.41.4.arity.1)

idr_Main.exactLength idr_Main.exactLength1 idr_Main.exactLength2 idr_Main.exactLength3 =
  idr_Main.exactLength4_val <- idr_Main.checkEqNat idr_Main.exactLength1 idr_Main.exactLength2
  idr_Main.exactLength4 <- store idr_Main.exactLength4_val
  idr_Main.exactLength4_val_115 <- fetch idr_Main.exactLength4
  case idr_Main.exactLength4_val_115 of
    (Cidr_Prelude.Maybe.Just idr_Main.exactLength5) ->
      v.62 <- pure (Cidr_Prelude.Maybe.Just idr_Main.exactLength3)
      pure v.62
    (Cidr_Prelude.Maybe.Nothing) ->
      v.63 <- pure (Cidr_Prelude.Maybe.Nothing)
      pure v.63

idr_Main.main =
  v.64 <- pure (CErased)
  idr_Main.main1_val_118 <- pure v.64
  idr_Main.main1 <- store v.64
  v.65 <- pure (CErased)
  idr_Main.main2_val <- pure v.65
  idr_Main.main2 <- store v.65
  v.66 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main3_val <- pure v.66
  idr_Main.main3 <- store v.66
  v.67 <- pure (Cidr_Main.Same)
  idr_Main.main4_val <- pure v.67
  idr_Main.main4 <- store v.67
  idr_Main.main1_val <- idr_Prelude.Interactive.printLn' idr_Main.main3 idr_Main.main4
  idr_Main.main1_119 <- store idr_Main.main1_val
  v.68 <- pure (CErased)
  idr_Main.main2_val_121 <- pure v.68
  idr_Main.main2_122 <- store v.68
  v.69 <- pure (CErased)
  idr_Main.main3_val_123 <- pure v.69
  idr_Main.main3_124 <- store v.69
  v.70 <- pure (C"idr_{U_Main.{main_2}_1}")
  idr_Main.main4_val_125 <- pure v.70
  idr_Main.main4_126 <- store v.70
  v.71 <- pure (Cidr_Main.Same)
  idr_Main.main5_val <- pure v.71
  idr_Main.main5 <- store v.71
  idr_Main.main2_val_120 <- idr_Prelude.Interactive.printLn' idr_Main.main4_126 idr_Main.main5
  idr_Main.main2_127 <- store idr_Main.main2_val_120
  v.72 <- pure (CErased)
  idr_Main.main3_val_129 <- pure v.72
  idr_Main.main3_130 <- store v.72
  v.73 <- pure (CErased)
  idr_Main.main4_val_131 <- pure v.73
  idr_Main.main4_132 <- store v.73
  v.74 <- pure (C"idr_{U_Main.{main_3}_1}")
  idr_Main.main5_val_133 <- pure v.74
  idr_Main.main5_134 <- store v.74
  v.75 <- pure (Cidr_Main.Same)
  idr_Main.main6_val <- pure v.75
  idr_Main.main6 <- store v.75
  idr_Main.main3_val_128 <- idr_Prelude.Interactive.printLn' idr_Main.main5_134 idr_Main.main6
  idr_Main.main3_135 <- store idr_Main.main3_val_128
  v.76 <- pure (CErased)
  idr_Main.main4_val_137 <- pure v.76
  idr_Main.main4_138 <- store v.76
  v.77 <- pure (CErased)
  idr_Main.main5_val_139 <- pure v.77
  idr_Main.main5_140 <- store v.77
  v.78 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main6_val_141 <- pure v.78
  idr_Main.main6_142 <- store v.78
  v.79 <- pure (Cidr_Main.Same)
  idr_Main.main7_val <- pure v.79
  idr_Main.main7 <- store v.79
  idr_Main.main4_val_136 <- idr_Prelude.Interactive.printLn' idr_Main.main6_142 idr_Main.main7
  idr_Main.main4_143 <- store idr_Main.main4_val_136
  v.80 <- pure (CErased)
  idr_Main.main5_val_145 <- pure v.80
  idr_Main.main5_146 <- store v.80
  v.81 <- pure (CErased)
  idr_Main.main6_val_147 <- pure v.81
  idr_Main.main6_148 <- store v.81
  v.82 <- pure (C"idr_{U_Main.{main_5}_1}")
  idr_Main.main7_val_149 <- pure v.82
  idr_Main.main7_150 <- store v.82
  v.83 <- pure (CErased)
  idr_Main.main8_val_152 <- pure v.83
  idr_Main.main8 <- store v.83
  v.84 <- pure (CGrInt 2)
  idr_Main.main9_val <- pure v.84
  idr_Main.main9 <- store v.84
  v.85 <- pure (CGrInt 2)
  idr_Main.main10_val <- pure v.85
  idr_Main.main10 <- store v.85
  v.86 <- pure (Cidr_Main.::)
  idr_Main.main11_val <- pure v.86
  idr_Main.main11 <- store v.86
  idr_Main.main8_val_151 <- idr_Main.exactLength idr_Main.main9 idr_Main.main10 idr_Main.main11
  idr_Main.main8_153 <- store idr_Main.main8_val_151
  idr_Main.main8_val_154 <- fetch idr_Main.main8_153
  idr_Main.main8_val <- case idr_Main.main8_val_154 of
    (Cidr_Prelude.Maybe.Just idr_Main.main9_155) ->
      v.87 <- pure (Cidr_Prelude.Bool.True)
      pure v.87
    (Cidr_Prelude.Maybe.Nothing) ->
      v.88 <- pure (Cidr_Prelude.Bool.False)
      pure v.88
  idr_Main.main8_156 <- store idr_Main.main8_val
  idr_Main.main5_val_144 <- idr_Prelude.Interactive.printLn' idr_Main.main7_150 idr_Main.main8_156
  idr_Main.main5_157 <- store idr_Main.main5_val_144
  v.89 <- pure (CErased)
  idr_Main.main6_val_159 <- pure v.89
  idr_Main.main6_160 <- store v.89
  v.90 <- pure (CErased)
  idr_Main.main7_val_161 <- pure v.90
  idr_Main.main7_162 <- store v.90
  v.91 <- pure (C"idr_{U_Main.{main_5}_1}")
  idr_Main.main8_val_163 <- pure v.91
  idr_Main.main8_164 <- store v.91
  v.92 <- pure (CGrInt 10)
  idr_Main.main9_val_167 <- pure v.92
  idr_Main.main9_168 <- store v.92
  v.93 <- pure (CGrInt 10)
  idr_Main.main10_val_169 <- pure v.93
  idr_Main.main10_170 <- store v.93
  idr_Main.main9_val_166 <- idr_Main.checkEqNat2 idr_Main.main9_168 idr_Main.main10_170
  idr_Main.main9_171 <- store idr_Main.main9_val_166
  idr_Main.main9_val_172 <- fetch idr_Main.main9_171
  idr_Main.main9_val_165 <- case idr_Main.main9_val_172 of
    (Cidr_Prelude.Maybe.Just idr_Main.main10_173) ->
      v.94 <- pure (Cidr_Prelude.Bool.True)
      pure v.94
    (Cidr_Prelude.Maybe.Nothing) ->
      v.95 <- pure (Cidr_Prelude.Bool.False)
      pure v.95
  idr_Main.main9_174 <- store idr_Main.main9_val_165
  idr_Main.main6_val_158 <- idr_Prelude.Interactive.printLn' idr_Main.main8_164 idr_Main.main9_174
  idr_Main.main6_175 <- store idr_Main.main6_val_158
  v.96 <- pure (CErased)
  idr_Main.main7_val_176 <- pure v.96
  idr_Main.main7_177 <- store v.96
  v.97 <- pure (CErased)
  idr_Main.main8_val_178 <- pure v.97
  idr_Main.main8_179 <- store v.97
  v.98 <- pure (C"idr_{U_Main.{main_5}_1}")
  idr_Main.main9_val_180 <- pure v.98
  idr_Main.main9_181 <- store v.98
  v.99 <- pure (CGrInt 10)
  idr_Main.main10_val_184 <- pure v.99
  idr_Main.main10_185 <- store v.99
  v.100 <- pure (CGrInt 9)
  idr_Main.main11_val_186 <- pure v.100
  idr_Main.main11_187 <- store v.100
  idr_Main.main10_val_183 <- idr_Main.checkEqNat2 idr_Main.main10_185 idr_Main.main11_187
  idr_Main.main10_188 <- store idr_Main.main10_val_183
  idr_Main.main10_val_189 <- fetch idr_Main.main10_188
  idr_Main.main10_val_182 <- case idr_Main.main10_val_189 of
    (Cidr_Prelude.Maybe.Just idr_Main.main11_190) ->
      v.101 <- pure (Cidr_Prelude.Bool.False)
      pure v.101
    (Cidr_Prelude.Maybe.Nothing) ->
      v.102 <- pure (Cidr_Prelude.Bool.True)
      pure v.102
  idr_Main.main10_191 <- store idr_Main.main10_val_182
  idr_Prelude.Interactive.printLn' idr_Main.main9_181 idr_Main.main10_191

idr_Prelude.Show.primNumShow idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3 =
  "idr_{APPLY_0}0.0" <- pure idr_Prelude.Show.primNumShow1
  "idr_{APPLY_0}1.0" <- pure idr_Prelude.Show.primNumShow3
  "idr_{APPLY_0}0_val.0" <- fetch "idr_{APPLY_0}0.0"
  idr_Prelude.Show.primNumShow4_val <- case "idr_{APPLY_0}0_val.0" of
    (C"idr_{U_prim__toStrBigInt_1}") ->
      idr_prim__toStrBigInt "idr_{APPLY_0}1.0"
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- pure (Cidr_Prelude.Show.Open)
  idr_Prelude.Show.primNumShow5_val_194 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.Open) ->
      v.107 <- pure (CGrInt 0)
      pure v.107
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_194
  v.110 <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6_val <- pure v.110
  idr_Prelude.Show.primNumShow6 <- store v.110
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0" <- pure idr_Prelude.Show.primNumShow5
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0" <- pure idr_Prelude.Show.primNumShow6
  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.14.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0"
  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0"
  unboxed.CGrInt.17.0 <- idris_int_eq.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.14.arity.1.0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0" <- pure (CGrInt unboxed.CGrInt.17.0)
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02.0" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_247.0" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02.0"
  idr_Prelude.Show.primNumShow5_val_193 <- case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_247.0" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0" of
        0 ->
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.15.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0"
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.15.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0"
          unboxed.CGrInt.18.0 <- idris_int_lt.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.15.arity.1.0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.15.arity.1.0"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0" <- pure (CGrInt unboxed.CGrInt.18.0)
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03.0" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_248.0" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03.0"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_248.0" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_249.0") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_249.0" of
                0 ->
                  v.163.0 <- pure (Cidr_Prelude.Interfaces.GT)
                  pure v.163.0
                #default ->
                  v.164.0 <- pure (Cidr_Prelude.Interfaces.LT)
                  pure v.164.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.15.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.15.arity.1.0")
        #default ->
          v.166.0 <- pure (Cidr_Prelude.Interfaces.EQ)
          pure v.166.0
  idr_Prelude.Show.primNumShow5_195 <- store idr_Prelude.Show.primNumShow5_val_193
  idr_Prelude.Show.primNumShow5_val_196 <- fetch idr_Prelude.Show.primNumShow5_195
  idr_Prelude.Show.primNumShow5_val_192 <- case idr_Prelude.Show.primNumShow5_val_196 of
    (Cidr_Prelude.Interfaces.GT) ->
      v.111 <- pure (Cidr_Prelude.Bool.True)
      pure v.111
    #default ->
      idr_Prelude.Show.primNumShow2_val_199 <- pure (Cidr_Prelude.Show.Open)
      idr_Prelude.Show.primNumShow6_val_198 <- case idr_Prelude.Show.primNumShow2_val_199 of
        (Cidr_Prelude.Show.Open) ->
          v.116 <- pure (CGrInt 0)
          pure v.116
      idr_Prelude.Show.primNumShow6_200 <- store idr_Prelude.Show.primNumShow6_val_198
      v.119 <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7_val <- pure v.119
      idr_Prelude.Show.primNumShow7 <- store v.119
      (CGrInt idr_Prelude.Show.primNumShow6_200.41.6.arity.1) <- fetch idr_Prelude.Show.primNumShow6_200
      (CGrInt idr_Prelude.Show.primNumShow7.41.6.arity.1) <- fetch idr_Prelude.Show.primNumShow7
      unboxed.CGrInt.13 <- idris_int_eq.unboxed idr_Prelude.Show.primNumShow6_200.41.6.arity.1 idr_Prelude.Show.primNumShow7.41.6.arity.1
      idr_Prelude.Show.primNumShow6_val_197 <- pure (CGrInt unboxed.CGrInt.13)
      idr_Prelude.Show.primNumShow6_201 <- store idr_Prelude.Show.primNumShow6_val_197
      idr_Prelude.Show.primNumShow6_val_202 <- fetch idr_Prelude.Show.primNumShow6_201
      case idr_Prelude.Show.primNumShow6_val_202 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 ->
              v.120 <- pure (Cidr_Prelude.Bool.False)
              pure v.120
            #default ->
              v.121 <- pure (Cidr_Prelude.Bool.True)
              pure v.121 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow7.41.6.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow6_200.41.6.arity.1)
  idr_Prelude.Show.primNumShow5_203 <- store idr_Prelude.Show.primNumShow5_val_192
  idr_Prelude.Show.primNumShow5_val_204 <- fetch idr_Prelude.Show.primNumShow5_203
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_204 of
    (Cidr_Prelude.Bool.False) ->
      v.123 <- pure (Cidr_Prelude.Bool.False)
      pure v.123
    (Cidr_Prelude.Bool.True) ->
      v.124 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_val_208 <- pure v.124
      idr_Prelude.Show.primNumShow6_209 <- store v.124
      (CGrString idr_Prelude.Show.primNumShow6_209.41.7.arity.1) <- fetch idr_Prelude.Show.primNumShow6_209
      idris_str_eq1.0 <- pure idr_Prelude.Show.primNumShow4
      idris_str_eq2.41.arity.1.0 <- pure idr_Prelude.Show.primNumShow6_209.41.7.arity.1
      (CGrString idris_str_eq1_0.0) <- fetch idris_str_eq1.0
      (CGrString idris_str_eq2_0.0) <- pure (CGrString idris_str_eq2.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_eq3.0 <- _prim_string_eq idris_str_eq1_0.0 idris_str_eq2_0.0
      v.7.0 <- pure (CGrInt idris_str_eq3.0)
      (CGrInt unboxed.CGrInt.5.0) <- pure v.7.0
      unboxed.CGrInt.14 <- pure unboxed.CGrInt.5.0
      idr_Prelude.Show.primNumShow6_val_207 <- pure (CGrInt unboxed.CGrInt.14)
      idr_Prelude.Show.primNumShow6_210 <- store idr_Prelude.Show.primNumShow6_val_207
      idr_Prelude.Show.primNumShow6_val_211 <- fetch idr_Prelude.Show.primNumShow6_210
      idr_Prelude.Show.primNumShow6_val_206 <- case idr_Prelude.Show.primNumShow6_val_211 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_212) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_212 of
            0 ->
              v.125 <- pure (Cidr_Prelude.Bool.True)
              pure v.125
            #default ->
              v.126 <- pure (Cidr_Prelude.Bool.False)
              pure v.126
      idr_Prelude.Show.primNumShow6_213 <- store idr_Prelude.Show.primNumShow6_val_206
      v.128 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_val_214 <- pure v.128
      idr_Prelude.Show.primNumShow7_215 <- store v.128
      (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Show.primNumShow7_215
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.0" <- pure idr_Prelude.Show.primNumShow6_213
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow6_val_205 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_246.0" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.0"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_246.0" of
            (Cidr_Prelude.Bool.False) ->
              v.160.0 <- pure (Cidr_Prelude.Basics.No)
              pure v.160.0
            (Cidr_Prelude.Bool.True) ->
              v.161.0 <- pure (Cidr_Prelude.Basics.Yes)
              pure v.161.0
      idr_Prelude.Show.primNumShow6_216 <- store idr_Prelude.Show.primNumShow6_val_205
      idr_Prelude.Show.primNumShow6_val_217 <- fetch idr_Prelude.Show.primNumShow6_216
      case idr_Prelude.Show.primNumShow6_val_217 of
        (Cidr_Prelude.Basics.No) ->
          v.129 <- pure (Cidr_Prelude.Bool.False)
          pure v.129
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_head1.0 <- pure idr_Prelude.Show.primNumShow4
          (CGrString idris_str_head1_0.0) <- fetch idris_str_head1.0
          idris_str_head2.0 <- _prim_string_head idris_str_head1_0.0
          v.8.0 <- pure (CGrInt idris_str_head2.0)
          (CGrInt unboxed.CGrInt.6.0) <- pure v.8.0
          unboxed.CGrInt.15 <- pure unboxed.CGrInt.6.0
          idr_Prelude.Show.primNumShow7_val_219 <- pure (CGrInt unboxed.CGrInt.15)
          idr_Prelude.Show.primNumShow7_220 <- store idr_Prelude.Show.primNumShow7_val_219
          v.130 <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8_val <- pure v.130
          idr_Prelude.Show.primNumShow8 <- store v.130
          (CGrInt idr_Prelude.Show.primNumShow7_220.41.9.arity.1) <- fetch idr_Prelude.Show.primNumShow7_220
          (CGrInt idr_Prelude.Show.primNumShow8.41.9.arity.1) <- fetch idr_Prelude.Show.primNumShow8
          unboxed.CGrInt.16 <- idris_int_eq.unboxed idr_Prelude.Show.primNumShow7_220.41.9.arity.1 idr_Prelude.Show.primNumShow8.41.9.arity.1
          idr_Prelude.Show.primNumShow7_val_218 <- pure (CGrInt unboxed.CGrInt.16)
          idr_Prelude.Show.primNumShow7_221 <- store idr_Prelude.Show.primNumShow7_val_218
          idr_Prelude.Show.primNumShow7_val_222 <- fetch idr_Prelude.Show.primNumShow7_221
          case idr_Prelude.Show.primNumShow7_val_222 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_223) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_223 of
                0 ->
                  v.131 <- pure (Cidr_Prelude.Bool.False)
                  pure v.131
                #default ->
                  v.132 <- pure (Cidr_Prelude.Bool.True)
                  pure v.132 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow8.41.9.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow7_220.41.9.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.0) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow6_209.41.7.arity.1)
  idr_Prelude.Show.primNumShow5_224 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_225 <- fetch idr_Prelude.Show.primNumShow5_224
  case idr_Prelude.Show.primNumShow5_val_225 of
    (Cidr_Prelude.Bool.False) ->
      fetch idr_Prelude.Show.primNumShow4
    (Cidr_Prelude.Bool.True) ->
      v.134 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_val_226 <- pure v.134
      idr_Prelude.Show.primNumShow6_227 <- store v.134
      v.135 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_val_229 <- pure v.135
      idr_Prelude.Show.primNumShow7_230 <- store v.135
      idris_str_concat1.0 <- pure idr_Prelude.Show.primNumShow4
      idris_str_concat2.0 <- pure idr_Prelude.Show.primNumShow7_230
      (CGrString idris_str_concat1_0.0) <- fetch idris_str_concat1.0
      (CGrString idris_str_concat2_0.0) <- fetch idris_str_concat2.0
      idris_str_concat3.0 <- _prim_string_concat idris_str_concat1_0.0 idris_str_concat2_0.0
      v.6.0 <- pure (CGrString idris_str_concat3.0)
      idr_Prelude.Show.primNumShow7_val_228 <- pure v.6.0
      idr_Prelude.Show.primNumShow7_231 <- store idr_Prelude.Show.primNumShow7_val_228
      idris_str_concat1.1 <- pure idr_Prelude.Show.primNumShow6_227
      idris_str_concat2.1 <- pure idr_Prelude.Show.primNumShow7_231
      (CGrString idris_str_concat1_0.1) <- fetch idris_str_concat1.1
      (CGrString idris_str_concat2_0.1) <- fetch idris_str_concat2.1
      idris_str_concat3.1 <- _prim_string_concat idris_str_concat1_0.1 idris_str_concat2_0.1
      v.6.1 <- pure (CGrString idris_str_concat3.1)
      pure v.6.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.14.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.14.arity.1.0")

idr_prim__toStrBigInt idr_prim__toStrBigInt0 =
  idris_int_str1.0 <- pure idr_prim__toStrBigInt0
  (CGrInt idris_int_str1_0.0) <- fetch idris_int_str1.0
  idris_int_str2.0 <- _prim_int_str idris_int_str1_0.0
  v.9.0 <- pure (CGrString idris_int_str2.0)
  pure v.9.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.0)

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  "idr_{APPLY_0}0.1" <- pure idr_Prelude.Interactive.printLn'2
  "idr_{APPLY_0}1.1" <- pure idr_Prelude.Interactive.printLn'3
  "idr_{APPLY_0}0_val.1" <- fetch "idr_{APPLY_0}0.1"
  idr_Prelude.Interactive.printLn'5_val_233 <- case "idr_{APPLY_0}0_val.1" of
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}"
    (C"idr_{U_Main.{main_2}_1}") ->
      "idr_Main.{main_2}"
    (C"idr_{U_Main.{main_3}_1}") ->
      "idr_Main.{main_3}"
    (C"idr_{U_Main.{main_5}_1}") ->
      "idr_Main.{main_5}" "idr_{APPLY_0}1.1"
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_233
  v.136 <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6_val <- pure v.136
  idr_Prelude.Interactive.printLn'6 <- store v.136
  idris_str_concat1.2 <- pure idr_Prelude.Interactive.printLn'5
  idris_str_concat2.2 <- pure idr_Prelude.Interactive.printLn'6
  (CGrString idris_str_concat1_0.2) <- fetch idris_str_concat1.2
  (CGrString idris_str_concat2_0.2) <- fetch idris_str_concat2.2
  idris_str_concat3.2 <- _prim_string_concat idris_str_concat1_0.2 idris_str_concat2_0.2
  v.6.2 <- pure (CGrString idris_str_concat3.2)
  idr_Prelude.Interactive.printLn'5_val_232 <- pure v.6.2
  idr_Prelude.Interactive.printLn'5_234 <- store idr_Prelude.Interactive.printLn'5_val_232
  (CGrString idr_Prelude.Interactive.printLn'5_234.41.10.arity.1) <- fetch idr_Prelude.Interactive.printLn'5_234
  idris_write_str2.41.arity.1.0 <- pure idr_Prelude.Interactive.printLn'5_234.41.10.arity.1
  (CGrString idris_write_str2_0.0) <- pure (CGrString idris_write_str2.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0.0
  v.5.0 <- pure (CUnit)
  idr_Prelude.Interactive.printLn'5_val <- pure v.5.0
  idr_Prelude.Interactive.printLn'5_235 <- store idr_Prelude.Interactive.printLn'5_val
  v.137 <- pure (Cidr_MkUnit)
  pure v.137 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Interactive.printLn'5_234.41.10.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.2)

"idr_Main.{checkEqNat2_0}" =
  v.139 <- pure (Cidr_Refl)
  pure v.139

"idr_Main.{main_1}" =
  v.141 <- pure (CGrString #"Same ")
  "idr_Main.{main_1}1_val" <- pure v.141
  "idr_Main.{main_1}1" <- store v.141
  v.142 <- pure (CErased)
  "idr_Main.{main_1}2_val_240" <- pure v.142
  "idr_Main.{main_1}2" <- store v.142
  v.143 <- pure (C"idr_{U_prim__toStrBigInt_1}")
  "idr_Main.{main_1}3_val" <- pure v.143
  "idr_Main.{main_1}3" <- store v.143
  v.144 <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_1}4_val" <- pure v.144
  "idr_Main.{main_1}4" <- store v.144
  v.145 <- pure (CGrInt 4)
  "idr_Main.{main_1}5_val" <- pure v.145
  "idr_Main.{main_1}5" <- store v.145
  (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_1}4"
  "idr_Main.{main_1}2_val" <- idr_Prelude.Show.primNumShow "idr_Main.{main_1}3" "idr_Main.{main_1}5"
  "idr_Main.{main_1}2_241" <- store "idr_Main.{main_1}2_val"
  idris_str_concat1.3 <- pure "idr_Main.{main_1}1"
  idris_str_concat2.3 <- pure "idr_Main.{main_1}2_241"
  (CGrString idris_str_concat1_0.3) <- fetch idris_str_concat1.3
  (CGrString idris_str_concat2_0.3) <- fetch idris_str_concat2.3
  idris_str_concat3.3 <- _prim_string_concat idris_str_concat1_0.3 idris_str_concat2_0.3
  v.6.3 <- pure (CGrString idris_str_concat3.3)
  pure v.6.3 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.3) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)

"idr_Main.{main_2}" =
  v.146 <- pure (CGrString #"Same ")
  "idr_Main.{main_2}1_val" <- pure v.146
  "idr_Main.{main_2}1" <- store v.146
  v.147 <- pure (CErased)
  "idr_Main.{main_2}2_val_242" <- pure v.147
  "idr_Main.{main_2}2" <- store v.147
  v.148 <- pure (C"idr_{U_prim__toStrBigInt_1}")
  "idr_Main.{main_2}3_val" <- pure v.148
  "idr_Main.{main_2}3" <- store v.148
  v.149 <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_2}4_val" <- pure v.149
  "idr_Main.{main_2}4" <- store v.149
  v.150 <- pure (CGrInt 5)
  "idr_Main.{main_2}5_val" <- pure v.150
  "idr_Main.{main_2}5" <- store v.150
  (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_2}4"
  "idr_Main.{main_2}2_val" <- idr_Prelude.Show.primNumShow "idr_Main.{main_2}3" "idr_Main.{main_2}5"
  "idr_Main.{main_2}2_243" <- store "idr_Main.{main_2}2_val"
  idris_str_concat1.4 <- pure "idr_Main.{main_2}1"
  idris_str_concat2.4 <- pure "idr_Main.{main_2}2_243"
  (CGrString idris_str_concat1_0.4) <- fetch idris_str_concat1.4
  (CGrString idris_str_concat2_0.4) <- fetch idris_str_concat2.4
  idris_str_concat3.4 <- _prim_string_concat idris_str_concat1_0.4 idris_str_concat2_0.4
  v.6.4 <- pure (CGrString idris_str_concat3.4)
  pure v.6.4 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.4) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.4) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)

"idr_Main.{main_3}" =
  v.151 <- pure (CGrString #"Same ")
  "idr_Main.{main_3}1_val" <- pure v.151
  "idr_Main.{main_3}1" <- store v.151
  v.152 <- pure (CErased)
  "idr_Main.{main_3}2_val_244" <- pure v.152
  "idr_Main.{main_3}2" <- store v.152
  v.153 <- pure (C"idr_{U_prim__toStrBigInt_1}")
  "idr_Main.{main_3}3_val" <- pure v.153
  "idr_Main.{main_3}3" <- store v.153
  v.154 <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_3}4_val" <- pure v.154
  "idr_Main.{main_3}4" <- store v.154
  v.155 <- pure (CGrInt 3)
  "idr_Main.{main_3}5_val" <- pure v.155
  "idr_Main.{main_3}5" <- store v.155
  (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_3}4"
  "idr_Main.{main_3}2_val" <- idr_Prelude.Show.primNumShow "idr_Main.{main_3}3" "idr_Main.{main_3}5"
  "idr_Main.{main_3}2_245" <- store "idr_Main.{main_3}2_val"
  idris_str_concat1.5 <- pure "idr_Main.{main_3}1"
  idris_str_concat2.5 <- pure "idr_Main.{main_3}2_245"
  (CGrString idris_str_concat1_0.5) <- fetch idris_str_concat1.5
  (CGrString idris_str_concat2_0.5) <- fetch idris_str_concat2.5
  idris_str_concat3.5 <- _prim_string_concat idris_str_concat1_0.5 idris_str_concat2_0.5
  v.6.5 <- pure (CGrString idris_str_concat3.5)
  pure v.6.5 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.5) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.5) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)

"idr_Main.{main_5}" "idr_Main.{main_5}0" =
  "idr_Main.{main_5}0_val" <- fetch "idr_Main.{main_5}0"
  -- LINT: case has non-covered alternative Cidr_Main.Same
  case "idr_Main.{main_5}0_val" of
    (Cidr_Prelude.Bool.False) ->
      v.156 <- pure (CGrString #"False")
      pure v.156
    (Cidr_Prelude.Bool.True) ->
      v.157 <- pure (CGrString #"True")
      pure v.157
