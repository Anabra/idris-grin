idris_int_eq.unboxed idris_int_eq0.41.arity.1 idris_int_eq1.41.arity.1 =
  (CGrInt idris_int_eq0_1) <- pure (CGrInt idris_int_eq0.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrInt idris_int_eq1_1) <- pure (CGrInt idris_int_eq1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_eq2 <- _prim_int_eq idris_int_eq0_1 idris_int_eq1_1
  ccp.0 <- case idris_int_eq2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.0

idris_int_div idris_int_div0 idris_int_div1 =
  (CGrInt idris_int_div0_1) <- fetch idris_int_div0
  (CGrInt idris_int_div1_1) <- fetch idris_int_div1
  idris_int_div2 <- _prim_int_div idris_int_div0_1 idris_int_div1_1
  pure (CGrInt idris_int_div2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_int_div2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_div1_1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_div0_1)

idris_write_str idris_write_str2.41.arity.1 =
  (CGrString idris_write_str2_0) <- pure (CGrString idris_write_str2.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0
  pure (CUnit) -- LINT: Last return expressions can only return non-node values: pure (CUnit)

idris_str_concat.unboxed idris_str_concat1 idris_str_concat2 =
  (CGrString idris_str_concat1_0) <- fetch idris_str_concat1
  (CGrString idris_str_concat2_0) <- fetch idris_str_concat2
  idris_str_concat3 <- _prim_string_concat idris_str_concat1_0 idris_str_concat2_0
  pure idris_str_concat3 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0)

idris_str_eq.unboxed idris_str_eq1 idris_str_eq2.41.arity.1 =
  (CGrString idris_str_eq1_0) <- fetch idris_str_eq1
  (CGrString idris_str_eq2_0) <- pure (CGrString idris_str_eq2.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_eq3 <- _prim_string_eq idris_str_eq1_0 idris_str_eq2_0
  ccp.2 <- case idris_str_eq3 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0)

idris_str_head.unboxed idris_str_head1 =
  (CGrString idris_str_head1_0) <- fetch idris_str_head1
  idris_str_head2 <- _prim_string_head idris_str_head1_0
  pure idris_str_head2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0)

grinMain =
  "idr_{runMain_0}0_val_417.0" <- pure (CErased)
  "idr_{runMain_0}0.0" <- store "idr_{runMain_0}0_val_417.0"
  "idr_{runMain_0}0_val.0" <- idr_Main.main
  "idr_{runMain_0}0_418.0" <- store "idr_{runMain_0}0_val.0"
  "idr_{EVAL_0}0.0.0" <- pure "idr_{runMain_0}0_418.0"
  "idr_{EVAL_0}0_val.0.0" <- fetch "idr_{EVAL_0}0.0.0"
  r <- case "idr_{EVAL_0}0_val.0.0" of
    #default ->
      fetch "idr_{EVAL_0}0.0.0"
  pure ()

idr_Main.eval.unboxed idr_Main.eval1 idr_Main.eval2 idr_Main.eval3.41.arity.1 idr_Main.eval3.41.arity.2 idr_Main.eval4 =
  idr_Main.eval4_val <- fetch idr_Main.eval4
  case idr_Main.eval4_val of
    (Cidr_Main.Add idr_Main.eval5_6 idr_Main.eval6_7) ->
      idr_Main.eval3_val <- pure (Cidr_Prelude.Interfaces.Integral_ictor idr_Main.eval3.41.arity.1 idr_Main.eval3.41.arity.2)
      (Cidr_Prelude.Interfaces.Integral_ictor idr_Main.eval7 idr_Main.eval8) <- pure idr_Main.eval3_val
      idr_Main.eval7_val <- fetch idr_Main.eval7
      (Cidr_Prelude.Interfaces.Num_ictor idr_Main.eval9 idr_Main.eval10) <- pure idr_Main.eval7_val
      idr_Main.eval11_val_9 <- pure (CErased)
      idr_Main.eval11 <- store idr_Main.eval11_val_9
      idr_Main.eval11_val_8 <- do
        unboxed.CGrInt.3 <- idr_Main.eval.unboxed idr_Main.eval1 idr_Main.eval2 idr_Main.eval3.41.arity.1 idr_Main.eval3.41.arity.2 idr_Main.eval5_6
        pure (CGrInt unboxed.CGrInt.3) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.3)
      idr_Main.eval11_10 <- store idr_Main.eval11_val_8
      "idr_{APPLY_0}0.0" <- pure idr_Main.eval9
      "idr_{APPLY_0}1.0" <- pure idr_Main.eval11_10
      "idr_{APPLY_0}0_val.0" <- fetch "idr_{APPLY_0}0.0"
      idr_Main.eval11_val <- case "idr_{APPLY_0}0_val.0" of
        (C"idr_{U_Main.{main_4}_2}") ->
          pure (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}1.0") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}1.0")
      idr_Main.eval11_11 <- store idr_Main.eval11_val
      idr_Main.eval12_val_12 <- pure (CErased)
      idr_Main.eval12 <- store idr_Main.eval12_val_12
      idr_Main.eval12_val <- do
        unboxed.CGrInt.4 <- idr_Main.eval.unboxed idr_Main.eval1 idr_Main.eval2 idr_Main.eval3.41.arity.1 idr_Main.eval3.41.arity.2 idr_Main.eval6_7
        pure (CGrInt unboxed.CGrInt.4) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.4)
      idr_Main.eval12_13 <- store idr_Main.eval12_val
      "idr_{APPLY_0}0.1" <- pure idr_Main.eval11_11
      "idr_{APPLY_0}1.1" <- pure idr_Main.eval12_13
      "idr_{APPLY_0}0_val.1" <- fetch "idr_{APPLY_0}0.1"
      case "idr_{APPLY_0}0_val.1" of
        (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}2_413.1") ->
          "idr_Main.{main_4}.unboxed" "idr_{APPLY_0}2_413.1" "idr_{APPLY_0}1.1"
    (Cidr_Main.Mul idr_Main.eval5_27 idr_Main.eval6_28) ->
      idr_Main.eval3_val_29 <- pure (Cidr_Prelude.Interfaces.Integral_ictor idr_Main.eval3.41.arity.1 idr_Main.eval3.41.arity.2)
      (Cidr_Prelude.Interfaces.Integral_ictor idr_Main.eval7_30 idr_Main.eval8_31) <- pure idr_Main.eval3_val_29
      idr_Main.eval7_val_32 <- fetch idr_Main.eval7_30
      (Cidr_Prelude.Interfaces.Num_ictor idr_Main.eval9_33 idr_Main.eval10_34) <- pure idr_Main.eval7_val_32
      idr_Main.eval11_val_37 <- pure (CErased)
      idr_Main.eval11_38 <- store idr_Main.eval11_val_37
      idr_Main.eval11_val_36 <- do
        unboxed.CGrInt.5 <- idr_Main.eval.unboxed idr_Main.eval1 idr_Main.eval2 idr_Main.eval3.41.arity.1 idr_Main.eval3.41.arity.2 idr_Main.eval5_27
        pure (CGrInt unboxed.CGrInt.5) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.5)
      idr_Main.eval11_39 <- store idr_Main.eval11_val_36
      "idr_{APPLY_0}0.2" <- pure idr_Main.eval10_34
      "idr_{APPLY_0}1.2" <- pure idr_Main.eval11_39
      "idr_{APPLY_0}0_val.2" <- fetch "idr_{APPLY_0}0.2"
      idr_Main.eval11_val_35 <- case "idr_{APPLY_0}0_val.2" of
        (C"idr_{U_Main.{main_5}_2}") ->
          pure (C"idr_{U_Main.{main_5}_1}" "idr_{APPLY_0}1.2") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_5}_1}" "idr_{APPLY_0}1.2")
      idr_Main.eval11_40 <- store idr_Main.eval11_val_35
      idr_Main.eval12_val_42 <- pure (CErased)
      idr_Main.eval12_43 <- store idr_Main.eval12_val_42
      idr_Main.eval12_val_41 <- do
        unboxed.CGrInt.10 <- idr_Main.eval.unboxed idr_Main.eval1 idr_Main.eval2 idr_Main.eval3.41.arity.1 idr_Main.eval3.41.arity.2 idr_Main.eval6_28
        pure (CGrInt unboxed.CGrInt.10) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.10)
      idr_Main.eval12_44 <- store idr_Main.eval12_val_41
      "idr_{APPLY_0}0.3" <- pure idr_Main.eval11_40
      "idr_{APPLY_0}1.3" <- pure idr_Main.eval12_44
      "idr_{APPLY_0}0_val.3" <- fetch "idr_{APPLY_0}0.3"
      case "idr_{APPLY_0}0_val.3" of
        (C"idr_{U_Main.{main_5}_1}" "idr_{APPLY_0}2_414.3") ->
          "idr_Main.{main_5}.unboxed" "idr_{APPLY_0}2_414.3" "idr_{APPLY_0}1.3"
    (Cidr_Main.Val idr_Main.eval5_56) ->
      do
        (CGrInt unboxed.CGrInt.1) <- fetch idr_Main.eval5_56
        pure unboxed.CGrInt.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt unboxed.CGrInt.1)

idr_Main.eval'.unboxed idr_Main.eval'1 =
  idr_Main.eval'1_val <- fetch idr_Main.eval'1
  case idr_Main.eval'1_val of
    (Cidr_Main.Add' idr_Main.eval'2_59 idr_Main.eval'3_60 idr_Main.eval'4_61) ->
      idr_Main.eval'2_val <- fetch idr_Main.eval'2_59
      (Cidr_Prelude.Interfaces.Num_ictor idr_Main.eval'5 idr_Main.eval'6) <- pure idr_Main.eval'2_val
      idr_Main.eval'7_val_63 <- pure (CErased)
      idr_Main.eval'7 <- store idr_Main.eval'7_val_63
      idr_Main.eval'7_val_62 <- do
        unboxed.CGrInt.11 <- idr_Main.eval'.unboxed idr_Main.eval'3_60
        pure (CGrInt unboxed.CGrInt.11) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.11)
      idr_Main.eval'7_64 <- store idr_Main.eval'7_val_62
      "idr_{APPLY_0}0.4" <- pure idr_Main.eval'5
      "idr_{APPLY_0}1.4" <- pure idr_Main.eval'7_64
      "idr_{APPLY_0}0_val.4" <- fetch "idr_{APPLY_0}0.4"
      idr_Main.eval'7_val <- case "idr_{APPLY_0}0_val.4" of
        (C"idr_{U_Main.{main_4}_2}") ->
          pure (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}1.4") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}1.4")
      idr_Main.eval'7_65 <- store idr_Main.eval'7_val
      idr_Main.eval'8_val_66 <- pure (CErased)
      idr_Main.eval'8 <- store idr_Main.eval'8_val_66
      idr_Main.eval'8_val <- do
        unboxed.CGrInt.12 <- idr_Main.eval'.unboxed idr_Main.eval'4_61
        pure (CGrInt unboxed.CGrInt.12) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.12)
      idr_Main.eval'8_67 <- store idr_Main.eval'8_val
      "idr_{APPLY_0}0.5" <- pure idr_Main.eval'7_65
      "idr_{APPLY_0}1.5" <- pure idr_Main.eval'8_67
      "idr_{APPLY_0}0_val.5" <- fetch "idr_{APPLY_0}0.5"
      case "idr_{APPLY_0}0_val.5" of
        (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}2_413.5") ->
          "idr_Main.{main_4}.unboxed" "idr_{APPLY_0}2_413.5" "idr_{APPLY_0}1.5"
    (Cidr_Main.Mul' idr_Main.eval'2_84 idr_Main.eval'3_85 idr_Main.eval'4_86) ->
      idr_Main.eval'2_val_87 <- fetch idr_Main.eval'2_84
      (Cidr_Prelude.Interfaces.Num_ictor idr_Main.eval'5_88 idr_Main.eval'6_89) <- pure idr_Main.eval'2_val_87
      idr_Main.eval'7_val_92 <- pure (CErased)
      idr_Main.eval'7_93 <- store idr_Main.eval'7_val_92
      idr_Main.eval'7_val_91 <- do
        unboxed.CGrInt.13 <- idr_Main.eval'.unboxed idr_Main.eval'3_85
        pure (CGrInt unboxed.CGrInt.13) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.13)
      idr_Main.eval'7_94 <- store idr_Main.eval'7_val_91
      "idr_{APPLY_0}0.6" <- pure idr_Main.eval'6_89
      "idr_{APPLY_0}1.6" <- pure idr_Main.eval'7_94
      "idr_{APPLY_0}0_val.6" <- fetch "idr_{APPLY_0}0.6"
      idr_Main.eval'7_val_90 <- case "idr_{APPLY_0}0_val.6" of
        (C"idr_{U_Main.{main_5}_2}") ->
          pure (C"idr_{U_Main.{main_5}_1}" "idr_{APPLY_0}1.6") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_5}_1}" "idr_{APPLY_0}1.6")
      idr_Main.eval'7_95 <- store idr_Main.eval'7_val_90
      idr_Main.eval'8_val_97 <- pure (CErased)
      idr_Main.eval'8_98 <- store idr_Main.eval'8_val_97
      idr_Main.eval'8_val_96 <- do
        unboxed.CGrInt.14 <- idr_Main.eval'.unboxed idr_Main.eval'4_86
        pure (CGrInt unboxed.CGrInt.14) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.14)
      idr_Main.eval'8_99 <- store idr_Main.eval'8_val_96
      "idr_{APPLY_0}0.7" <- pure idr_Main.eval'7_95
      "idr_{APPLY_0}1.7" <- pure idr_Main.eval'8_99
      "idr_{APPLY_0}0_val.7" <- fetch "idr_{APPLY_0}0.7"
      case "idr_{APPLY_0}0_val.7" of
        (C"idr_{U_Main.{main_5}_1}" "idr_{APPLY_0}2_414.7") ->
          "idr_Main.{main_5}.unboxed" "idr_{APPLY_0}2_414.7" "idr_{APPLY_0}1.7"
    (Cidr_Main.Val' idr_Main.eval'2_111) ->
      do
        (CGrInt unboxed.CGrInt.2) <- fetch idr_Main.eval'2_111
        pure unboxed.CGrInt.2 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt unboxed.CGrInt.2)

idr_Main.main =
  idr_Main.main1_val_115 <- pure (CGrString #"Expr\n")
  idr_Main.main1 <- store idr_Main.main1_val_115
  (CGrString idr_Main.main1.41.5.arity.1) <- fetch idr_Main.main1
  idr_Main.main1_val_114 <- idris_write_str idr_Main.main1.41.5.arity.1
  idr_Main.main1_116 <- store idr_Main.main1_val_114
  idr_Main.main1_val <- pure (Cidr_MkUnit)
  idr_Main.main1_117 <- store idr_Main.main1_val
  idr_Main.main2_val_118 <- pure (CErased)
  idr_Main.main2 <- store idr_Main.main2_val_118
  idr_Main.main3_val <- pure (CErased)
  idr_Main.main3 <- store idr_Main.main3_val
  idr_Main.main4_val <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main4 <- store idr_Main.main4_val
  idr_Main.main5_val_119 <- pure (CErased)
  idr_Main.main5 <- store idr_Main.main5_val_119
  idr_Main.main6_val <- pure (C"idr_{U_Main.{main_2}_1}")
  idr_Main.main6 <- store idr_Main.main6_val
  idr_Main.main7_val <- pure (C"idr_{U_Main.{main_3}_2}")
  idr_Main.main7 <- store idr_Main.main7_val
  idr_Main.main8_val_121 <- pure (C"idr_{U_Main.{main_4}_2}")
  idr_Main.main8 <- store idr_Main.main8_val_121
  idr_Main.main9_val <- pure (C"idr_{U_Main.{main_5}_2}")
  idr_Main.main9 <- store idr_Main.main9_val
  idr_Main.main8_val_120 <- pure (Cidr_Prelude.Interfaces.Num_ictor idr_Main.main8 idr_Main.main9)
  idr_Main.main8_122 <- store idr_Main.main8_val_120
  idr_Main.main9_val_123 <- pure (C"idr_{U_Main.{main_6}_2}")
  idr_Main.main9_124 <- store idr_Main.main9_val_123
  idr_Main.main8_val <- pure (Cidr_Prelude.Interfaces.Integral_ictor idr_Main.main8_122 idr_Main.main9_124)
  idr_Main.main8_125 <- store idr_Main.main8_val
  idr_Main.main9_val_128 <- pure (CGrInt 6)
  idr_Main.main9_129 <- store idr_Main.main9_val_128
  idr_Main.main9_val_127 <- pure (Cidr_Main.Val idr_Main.main9_129)
  idr_Main.main9_130 <- store idr_Main.main9_val_127
  idr_Main.main10_val_132 <- pure (CGrInt 3)
  idr_Main.main10 <- store idr_Main.main10_val_132
  idr_Main.main10_val_131 <- pure (Cidr_Main.Val idr_Main.main10)
  idr_Main.main10_133 <- store idr_Main.main10_val_131
  idr_Main.main11_val_134 <- pure (CGrInt 12)
  idr_Main.main11 <- store idr_Main.main11_val_134
  idr_Main.main11_val <- pure (Cidr_Main.Val idr_Main.main11)
  idr_Main.main11_135 <- store idr_Main.main11_val
  idr_Main.main10_val <- pure (Cidr_Main.Mul idr_Main.main10_133 idr_Main.main11_135)
  idr_Main.main10_136 <- store idr_Main.main10_val
  idr_Main.main9_val_126 <- pure (Cidr_Main.Add idr_Main.main9_130 idr_Main.main10_136)
  idr_Main.main9_137 <- store idr_Main.main9_val_126
  (Cidr_Prelude.Interfaces.Integral_ictor idr_Main.main8_125.41.6.arity.1 idr_Main.main8_125.41.6.arity.2) <- fetch idr_Main.main8_125
  idr_Main.main5_val <- do
    unboxed.CGrInt.15 <- idr_Main.eval.unboxed idr_Main.main6 idr_Main.main7 idr_Main.main8_125.41.6.arity.1 idr_Main.main8_125.41.6.arity.2 idr_Main.main9_137
    pure (CGrInt unboxed.CGrInt.15) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.15)
  idr_Main.main5_138 <- store idr_Main.main5_val
  idr_Main.main2_val <- idr_Prelude.Interactive.printLn' idr_Main.main4 idr_Main.main5_138
  idr_Main.main2_139 <- store idr_Main.main2_val
  idr_Main.main3_val_141 <- pure (CErased)
  idr_Main.main3_142 <- store idr_Main.main3_val_141
  idr_Main.main4_val_143 <- pure (CErased)
  idr_Main.main4_144 <- store idr_Main.main4_val_143
  idr_Main.main5_val_145 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main5_146 <- store idr_Main.main5_val_145
  idr_Main.main6_val_148 <- pure (CErased)
  idr_Main.main6_149 <- store idr_Main.main6_val_148
  idr_Main.main7_val_150 <- pure (C"idr_{U_Main.{main_2}_1}")
  idr_Main.main7_151 <- store idr_Main.main7_val_150
  idr_Main.main8_val_152 <- pure (C"idr_{U_Main.{main_3}_2}")
  idr_Main.main8_153 <- store idr_Main.main8_val_152
  idr_Main.main9_val_156 <- pure (C"idr_{U_Main.{main_4}_2}")
  idr_Main.main9_157 <- store idr_Main.main9_val_156
  idr_Main.main10_val_158 <- pure (C"idr_{U_Main.{main_5}_2}")
  idr_Main.main10_159 <- store idr_Main.main10_val_158
  idr_Main.main9_val_155 <- pure (Cidr_Prelude.Interfaces.Num_ictor idr_Main.main9_157 idr_Main.main10_159)
  idr_Main.main9_160 <- store idr_Main.main9_val_155
  idr_Main.main10_val_161 <- pure (C"idr_{U_Main.{main_6}_2}")
  idr_Main.main10_162 <- store idr_Main.main10_val_161
  idr_Main.main9_val_154 <- pure (Cidr_Prelude.Interfaces.Integral_ictor idr_Main.main9_160 idr_Main.main10_162)
  idr_Main.main9_163 <- store idr_Main.main9_val_154
  idr_Main.main10_val_166 <- pure (CGrInt 6)
  idr_Main.main10_167 <- store idr_Main.main10_val_166
  idr_Main.main10_val_165 <- pure (Cidr_Main.Val idr_Main.main10_167)
  idr_Main.main10_168 <- store idr_Main.main10_val_165
  idr_Main.main11_val_171 <- pure (CGrInt 3)
  idr_Main.main11_172 <- store idr_Main.main11_val_171
  idr_Main.main11_val_170 <- pure (Cidr_Main.Val idr_Main.main11_172)
  idr_Main.main11_173 <- store idr_Main.main11_val_170
  idr_Main.main12_val_174 <- pure (CGrInt 12)
  idr_Main.main12 <- store idr_Main.main12_val_174
  idr_Main.main12_val <- pure (Cidr_Main.Val idr_Main.main12)
  idr_Main.main12_175 <- store idr_Main.main12_val
  idr_Main.main11_val_169 <- pure (Cidr_Main.Mul idr_Main.main11_173 idr_Main.main12_175)
  idr_Main.main11_176 <- store idr_Main.main11_val_169
  idr_Main.main10_val_164 <- pure (Cidr_Main.Add idr_Main.main10_168 idr_Main.main11_176)
  idr_Main.main10_177 <- store idr_Main.main10_val_164
  (Cidr_Prelude.Interfaces.Integral_ictor idr_Main.main9_163.41.7.arity.1 idr_Main.main9_163.41.7.arity.2) <- fetch idr_Main.main9_163
  idr_Main.main6_val_147 <- do
    unboxed.CGrInt.16 <- idr_Main.eval.unboxed idr_Main.main7_151 idr_Main.main8_153 idr_Main.main9_163.41.7.arity.1 idr_Main.main9_163.41.7.arity.2 idr_Main.main10_177
    pure (CGrInt unboxed.CGrInt.16) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.16)
  idr_Main.main6_178 <- store idr_Main.main6_val_147
  idr_Main.main3_val_140 <- idr_Prelude.Interactive.printLn' idr_Main.main5_146 idr_Main.main6_178
  idr_Main.main3_179 <- store idr_Main.main3_val_140
  idr_Main.main4_val_181 <- pure (CErased)
  idr_Main.main4_182 <- store idr_Main.main4_val_181
  idr_Main.main5_val_183 <- pure (CErased)
  idr_Main.main5_184 <- store idr_Main.main5_val_183
  idr_Main.main6_val_185 <- pure (C"idr_{U_Main.{main_14}_1}")
  idr_Main.main6_186 <- store idr_Main.main6_val_185
  idr_Main.main7_val_189 <- pure (CGrInt 6)
  idr_Main.main7_190 <- store idr_Main.main7_val_189
  idr_Main.main7_val_188 <- pure (Cidr_Main.Val idr_Main.main7_190)
  idr_Main.main7_191 <- store idr_Main.main7_val_188
  idr_Main.main8_val_194 <- pure (CGrInt 3)
  idr_Main.main8_195 <- store idr_Main.main8_val_194
  idr_Main.main8_val_193 <- pure (Cidr_Main.Val idr_Main.main8_195)
  idr_Main.main8_196 <- store idr_Main.main8_val_193
  idr_Main.main9_val_198 <- pure (CGrInt 12)
  idr_Main.main9_199 <- store idr_Main.main9_val_198
  idr_Main.main9_val_197 <- pure (Cidr_Main.Val idr_Main.main9_199)
  idr_Main.main9_200 <- store idr_Main.main9_val_197
  idr_Main.main8_val_192 <- pure (Cidr_Main.Mul idr_Main.main8_196 idr_Main.main9_200)
  idr_Main.main8_201 <- store idr_Main.main8_val_192
  idr_Main.main7_val_187 <- pure (Cidr_Main.Add idr_Main.main7_191 idr_Main.main8_201)
  idr_Main.main7_202 <- store idr_Main.main7_val_187
  idr_Main.main4_val_180 <- idr_Prelude.Interactive.printLn' idr_Main.main6_186 idr_Main.main7_202
  idr_Main.main4_203 <- store idr_Main.main4_val_180
  idr_Main.main5_val_205 <- pure (CErased)
  idr_Main.main5_206 <- store idr_Main.main5_val_205
  idr_Main.main6_val_207 <- pure (CErased)
  idr_Main.main6_208 <- store idr_Main.main6_val_207
  idr_Main.main7_val_209 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main7_210 <- store idr_Main.main7_val_209
  idr_Main.main8_val_212 <- pure (CErased)
  idr_Main.main8_213 <- store idr_Main.main8_val_212
  idr_Main.main9_val_216 <- pure (C"idr_{U_Main.{main_4}_2}")
  idr_Main.main9_217 <- store idr_Main.main9_val_216
  idr_Main.main10_val_218 <- pure (C"idr_{U_Main.{main_5}_2}")
  idr_Main.main10_219 <- store idr_Main.main10_val_218
  idr_Main.main9_val_215 <- pure (Cidr_Prelude.Interfaces.Num_ictor idr_Main.main9_217 idr_Main.main10_219)
  idr_Main.main9_220 <- store idr_Main.main9_val_215
  idr_Main.main10_val_222 <- pure (CGrInt 6)
  idr_Main.main10_223 <- store idr_Main.main10_val_222
  idr_Main.main10_val_221 <- pure (Cidr_Main.Val' idr_Main.main10_223)
  idr_Main.main10_224 <- store idr_Main.main10_val_221
  idr_Main.main11_val_227 <- pure (C"idr_{U_Main.{main_4}_2}")
  idr_Main.main11_228 <- store idr_Main.main11_val_227
  idr_Main.main12_val_229 <- pure (C"idr_{U_Main.{main_5}_2}")
  idr_Main.main12_230 <- store idr_Main.main12_val_229
  idr_Main.main11_val_226 <- pure (Cidr_Prelude.Interfaces.Num_ictor idr_Main.main11_228 idr_Main.main12_230)
  idr_Main.main11_231 <- store idr_Main.main11_val_226
  idr_Main.main12_val_233 <- pure (CGrInt 3)
  idr_Main.main12_234 <- store idr_Main.main12_val_233
  idr_Main.main12_val_232 <- pure (Cidr_Main.Val' idr_Main.main12_234)
  idr_Main.main12_235 <- store idr_Main.main12_val_232
  idr_Main.main13_val_236 <- pure (CGrInt 12)
  idr_Main.main13 <- store idr_Main.main13_val_236
  idr_Main.main13_val <- pure (Cidr_Main.Val' idr_Main.main13)
  idr_Main.main13_237 <- store idr_Main.main13_val
  idr_Main.main11_val_225 <- pure (Cidr_Main.Mul' idr_Main.main11_231 idr_Main.main12_235 idr_Main.main13_237)
  idr_Main.main11_238 <- store idr_Main.main11_val_225
  idr_Main.main9_val_214 <- pure (Cidr_Main.Add' idr_Main.main9_220 idr_Main.main10_224 idr_Main.main11_238)
  idr_Main.main9_239 <- store idr_Main.main9_val_214
  idr_Main.main8_val_211 <- do
    unboxed.CGrInt.17 <- idr_Main.eval'.unboxed idr_Main.main9_239
    pure (CGrInt unboxed.CGrInt.17) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.17)
  idr_Main.main8_240 <- store idr_Main.main8_val_211
  idr_Main.main5_val_204 <- idr_Prelude.Interactive.printLn' idr_Main.main7_210 idr_Main.main8_240
  idr_Main.main5_241 <- store idr_Main.main5_val_204
  idr_Main.main6_val_243 <- pure (CErased)
  idr_Main.main6_244 <- store idr_Main.main6_val_243
  idr_Main.main7_val_245 <- pure (CErased)
  idr_Main.main7_246 <- store idr_Main.main7_val_245
  idr_Main.main8_val_247 <- pure (C"idr_{U_Main.{main_21}_1}")
  idr_Main.main8_248 <- store idr_Main.main8_val_247
  idr_Main.main9_val_250 <- pure (CErased)
  idr_Main.main9_251 <- store idr_Main.main9_val_250
  idr_Main.main10_val_252 <- pure (CErased)
  idr_Main.main10_253 <- store idr_Main.main10_val_252
  idr_Main.main11_val_254 <- pure (C"idr_{U_Main.{main_22}_1}")
  idr_Main.main11_255 <- store idr_Main.main11_val_254
  idr_Main.main12_val_257 <- pure (CGrInt 1)
  idr_Main.main12_258 <- store idr_Main.main12_val_257
  idr_Main.main13_val_260 <- pure (CGrInt 2)
  idr_Main.main13_261 <- store idr_Main.main13_val_260
  idr_Main.main14_val_262 <- pure (CGrInt 3)
  idr_Main.main14 <- store idr_Main.main14_val_262
  idr_Main.main15_val_263 <- pure (CGrInt 4)
  idr_Main.main15 <- store idr_Main.main15_val_263
  idr_Main.main16_val <- pure (Cidr_Prelude.List.Nil)
  idr_Main.main16 <- store idr_Main.main16_val
  idr_Main.main15_val <- pure (Cidr_Prelude.List.:: idr_Main.main15 idr_Main.main16)
  idr_Main.main15_264 <- store idr_Main.main15_val
  idr_Main.main14_val <- pure (Cidr_Prelude.List.:: idr_Main.main14 idr_Main.main15_264)
  idr_Main.main14_265 <- store idr_Main.main14_val
  idr_Main.main13_val_259 <- pure (Cidr_Prelude.List.:: idr_Main.main13_261 idr_Main.main14_265)
  idr_Main.main13_266 <- store idr_Main.main13_val_259
  idr_Main.main12_val_256 <- pure (Cidr_Prelude.List.:: idr_Main.main12_258 idr_Main.main13_266)
  idr_Main.main12_267 <- store idr_Main.main12_val_256
  idr_Main.main9_val_249 <- "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" idr_Main.main11_255 idr_Main.main12_267
  idr_Main.main9_268 <- store idr_Main.main9_val_249
  idr_Main.main6_val_242 <- idr_Prelude.Interactive.printLn' idr_Main.main8_248 idr_Main.main9_268
  idr_Main.main6_269 <- store idr_Main.main6_val_242
  idr_Main.main7_val_271 <- pure (CErased)
  idr_Main.main7_272 <- store idr_Main.main7_val_271
  idr_Main.main8_val_273 <- pure (CErased)
  idr_Main.main8_274 <- store idr_Main.main8_val_273
  idr_Main.main9_val_275 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main9_276 <- store idr_Main.main9_val_275
  idr_Main.main10_val_278 <- pure (CErased)
  idr_Main.main10_279 <- store idr_Main.main10_val_278
  idr_Main.main11_val_280 <- pure (CErased)
  idr_Main.main11_281 <- store idr_Main.main11_val_280
  idr_Main.main12_val_282 <- pure (C"idr_{U_Main.{main_4}_2}")
  idr_Main.main12_283 <- store idr_Main.main12_val_282
  idr_Main.main13_val_284 <- pure (CGrInt 0)
  idr_Main.main13_285 <- store idr_Main.main13_val_284
  idr_Main.main14_val_287 <- pure (CGrInt 1)
  idr_Main.main14_288 <- store idr_Main.main14_val_287
  idr_Main.main15_val_290 <- pure (CGrInt 2)
  idr_Main.main15_291 <- store idr_Main.main15_val_290
  idr_Main.main16_val_293 <- pure (CGrInt 3)
  idr_Main.main16_294 <- store idr_Main.main16_val_293
  idr_Main.main17_val_295 <- pure (CGrInt 4)
  idr_Main.main17 <- store idr_Main.main17_val_295
  idr_Main.main18_val <- pure (Cidr_Prelude.List.Nil)
  idr_Main.main18 <- store idr_Main.main18_val
  idr_Main.main17_val <- pure (Cidr_Prelude.List.:: idr_Main.main17 idr_Main.main18)
  idr_Main.main17_296 <- store idr_Main.main17_val
  idr_Main.main16_val_292 <- pure (Cidr_Prelude.List.:: idr_Main.main16_294 idr_Main.main17_296)
  idr_Main.main16_297 <- store idr_Main.main16_val_292
  idr_Main.main15_val_289 <- pure (Cidr_Prelude.List.:: idr_Main.main15_291 idr_Main.main16_297)
  idr_Main.main15_298 <- store idr_Main.main15_val_289
  idr_Main.main14_val_286 <- pure (Cidr_Prelude.List.:: idr_Main.main14_288 idr_Main.main15_298)
  idr_Main.main14_299 <- store idr_Main.main14_val_286
  (CGrInt idr_Main.main13_285.41.8.arity.1) <- fetch idr_Main.main13_285
  idr_Main.main10_val_277 <- do
    unboxed.CGrInt.18 <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0.unboxed" idr_Main.main12_283 idr_Main.main13_285.41.8.arity.1 idr_Main.main14_299
    pure (CGrInt unboxed.CGrInt.18) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.18)
  idr_Main.main10_300 <- store idr_Main.main10_val_277
  idr_Main.main7_val_270 <- idr_Prelude.Interactive.printLn' idr_Main.main9_276 idr_Main.main10_300
  idr_Main.main7_301 <- store idr_Main.main7_val_270
  idr_Main.main8_val_303 <- pure (CErased)
  idr_Main.main8_304 <- store idr_Main.main8_val_303
  idr_Main.main9_val_305 <- pure (CErased)
  idr_Main.main9_306 <- store idr_Main.main9_val_305
  idr_Main.main10_val_307 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main10_308 <- store idr_Main.main10_val_307
  idr_Main.main11_val_310 <- pure (CErased)
  idr_Main.main11_311 <- store idr_Main.main11_val_310
  idr_Main.main12_val_312 <- pure (CErased)
  idr_Main.main12_313 <- store idr_Main.main12_val_312
  idr_Main.main13_val_314 <- pure (C"idr_{U_Main.{main_5}_2}")
  idr_Main.main13_315 <- store idr_Main.main13_val_314
  idr_Main.main14_val_316 <- pure (CGrInt 1)
  idr_Main.main14_317 <- store idr_Main.main14_val_316
  idr_Main.main15_val_319 <- pure (CGrInt 1)
  idr_Main.main15_320 <- store idr_Main.main15_val_319
  idr_Main.main16_val_322 <- pure (CGrInt 2)
  idr_Main.main16_323 <- store idr_Main.main16_val_322
  idr_Main.main17_val_325 <- pure (CGrInt 3)
  idr_Main.main17_326 <- store idr_Main.main17_val_325
  idr_Main.main18_val_328 <- pure (CGrInt 4)
  idr_Main.main18_329 <- store idr_Main.main18_val_328
  idr_Main.main19_val <- pure (Cidr_Prelude.List.Nil)
  idr_Main.main19 <- store idr_Main.main19_val
  idr_Main.main18_val_327 <- pure (Cidr_Prelude.List.:: idr_Main.main18_329 idr_Main.main19)
  idr_Main.main18_330 <- store idr_Main.main18_val_327
  idr_Main.main17_val_324 <- pure (Cidr_Prelude.List.:: idr_Main.main17_326 idr_Main.main18_330)
  idr_Main.main17_331 <- store idr_Main.main17_val_324
  idr_Main.main16_val_321 <- pure (Cidr_Prelude.List.:: idr_Main.main16_323 idr_Main.main17_331)
  idr_Main.main16_332 <- store idr_Main.main16_val_321
  idr_Main.main15_val_318 <- pure (Cidr_Prelude.List.:: idr_Main.main15_320 idr_Main.main16_332)
  idr_Main.main15_333 <- store idr_Main.main15_val_318
  (CGrInt idr_Main.main14_317.41.9.arity.1) <- fetch idr_Main.main14_317
  idr_Main.main11_val_309 <- do
    unboxed.CGrInt.19 <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0.unboxed" idr_Main.main13_315 idr_Main.main14_317.41.9.arity.1 idr_Main.main15_333
    pure (CGrInt unboxed.CGrInt.19) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.19)
  idr_Main.main11_334 <- store idr_Main.main11_val_309
  idr_Main.main8_val_302 <- idr_Prelude.Interactive.printLn' idr_Main.main10_308 idr_Main.main11_334
  idr_Main.main8_335 <- store idr_Main.main8_val_302
  idr_Main.main9_val_336 <- pure (CErased)
  idr_Main.main9_337 <- store idr_Main.main9_val_336
  idr_Main.main10_val_338 <- pure (CErased)
  idr_Main.main10_339 <- store idr_Main.main10_val_338
  idr_Main.main11_val_340 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main11_341 <- store idr_Main.main11_val_340
  idr_Main.main12_val_343 <- pure (CErased)
  idr_Main.main12_344 <- store idr_Main.main12_val_343
  idr_Main.main13_val_345 <- pure (CErased)
  idr_Main.main13_346 <- store idr_Main.main13_val_345
  idr_Main.main14_val_347 <- pure (C"idr_{U_Main.{main_28}_2}")
  idr_Main.main14_348 <- store idr_Main.main14_val_347
  idr_Main.main15_val_349 <- pure (CGrInt 0)
  idr_Main.main15_350 <- store idr_Main.main15_val_349
  idr_Main.main16_val_352 <- pure (CGrString #"One")
  idr_Main.main16_353 <- store idr_Main.main16_val_352
  idr_Main.main17_val_355 <- pure (CGrString #"Two")
  idr_Main.main17_356 <- store idr_Main.main17_val_355
  idr_Main.main18_val_358 <- pure (CGrString #"Three")
  idr_Main.main18_359 <- store idr_Main.main18_val_358
  idr_Main.main19_val_360 <- pure (Cidr_Prelude.List.Nil)
  idr_Main.main19_361 <- store idr_Main.main19_val_360
  idr_Main.main18_val_357 <- pure (Cidr_Prelude.List.:: idr_Main.main18_359 idr_Main.main19_361)
  idr_Main.main18_362 <- store idr_Main.main18_val_357
  idr_Main.main17_val_354 <- pure (Cidr_Prelude.List.:: idr_Main.main17_356 idr_Main.main18_362)
  idr_Main.main17_363 <- store idr_Main.main17_val_354
  idr_Main.main16_val_351 <- pure (Cidr_Prelude.List.:: idr_Main.main16_353 idr_Main.main17_363)
  idr_Main.main16_364 <- store idr_Main.main16_val_351
  (CGrInt idr_Main.main15_350.41.10.arity.1) <- fetch idr_Main.main15_350
  idr_Main.main12_val_342 <- do
    unboxed.CGrInt.20 <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0.unboxed" idr_Main.main14_348 idr_Main.main15_350.41.10.arity.1 idr_Main.main16_364
    pure (CGrInt unboxed.CGrInt.20) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.20)
  idr_Main.main12_365 <- store idr_Main.main12_val_342
  idr_Prelude.Interactive.printLn' idr_Main.main11_341 idr_Main.main12_365 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.main15_350.41.10.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.main14_317.41.9.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.main13_285.41.8.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Interfaces.Integral_ictor idr_Main.main9_163.41.7.arity.1 idr_Main.main9_163.41.7.arity.2) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Interfaces.Integral_ictor idr_Main.main8_125.41.6.arity.1 idr_Main.main8_125.41.6.arity.2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main1.41.5.arity.1)

idr_prim__toStrBigInt.unboxed idr_prim__toStrBigInt0 =
  idris_int_str1.0 <- pure idr_prim__toStrBigInt0
  (CGrInt idris_int_str1_0.0) <- fetch idris_int_str1.0
  idris_int_str2.0 <- _prim_int_str idris_int_str1_0.0
  pure idris_int_str2.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.0)

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  "idr_{APPLY_0}0.9" <- pure idr_Prelude.Interactive.printLn'2
  "idr_{APPLY_0}1.9" <- pure idr_Prelude.Interactive.printLn'3
  "idr_{APPLY_0}0_val.9" <- fetch "idr_{APPLY_0}0.9"
  idr_Prelude.Interactive.printLn'5_val_407 <- case "idr_{APPLY_0}0_val.9" of
    (C"idr_{U_Main.{main_14}_1}") ->
      do
        unboxed.CGrString.4 <- "idr_Main.{main_14}.unboxed" "idr_{APPLY_0}1.9"
        pure (CGrString unboxed.CGrString.4) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.4)
    (C"idr_{U_Main.{main_1}_1}") ->
      do
        unboxed.CGrString.5 <- "idr_Main.{main_1}.unboxed" "idr_{APPLY_0}1.9"
        pure (CGrString unboxed.CGrString.5) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.5)
    (C"idr_{U_Main.{main_21}_1}") ->
      do
        unboxed.CGrString.6 <- "idr_Main.{main_21}.unboxed" "idr_{APPLY_0}1.9"
        pure (CGrString unboxed.CGrString.6) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.6)
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_407
  idr_Prelude.Interactive.printLn'6_val <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6 <- store idr_Prelude.Interactive.printLn'6_val
  idr_Prelude.Interactive.printLn'5_val_406 <- do
    unboxed.CGrString.7 <- idris_str_concat.unboxed idr_Prelude.Interactive.printLn'5 idr_Prelude.Interactive.printLn'6
    pure (CGrString unboxed.CGrString.7) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.7)
  idr_Prelude.Interactive.printLn'5_408 <- store idr_Prelude.Interactive.printLn'5_val_406
  (CGrString idr_Prelude.Interactive.printLn'5_408.41.15.arity.1) <- fetch idr_Prelude.Interactive.printLn'5_408
  idr_Prelude.Interactive.printLn'5_val <- idris_write_str idr_Prelude.Interactive.printLn'5_408.41.15.arity.1
  idr_Prelude.Interactive.printLn'5_409 <- store idr_Prelude.Interactive.printLn'5_val
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Interactive.printLn'5_408.41.15.arity.1)

"idr_Prelude.Interfaces.{divBigInt_0}" =
  idris_error1.0 <- pure #"*** ./Prelude/Interfaces.idr:341:22-27:unmatched case in Prelude.Interfaces.case block in divBigInt at ./Prelude/Interfaces.idr:341:22-27 ***"
  _prim_error idris_error1.0

"idr_Main.{main_1}.unboxed" "idr_Main.{main_1}0" =
  "idr_Main.{main_1}1_val" <- pure (CErased)
  "idr_Main.{main_1}1" <- store "idr_Main.{main_1}1_val"
  "idr_Main.{main_1}2_val" <- pure (C"idr_{U_prim__toStrBigInt_1}")
  "idr_Main.{main_1}2" <- store "idr_Main.{main_1}2_val"
  "idr_Main.{main_1}3_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_1}3" <- store "idr_Main.{main_1}3_val"
  (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_1}3"
  idr_Prelude.Show.primNumShow1.0 <- pure "idr_Main.{main_1}2"
  idr_Prelude.Show.primNumShow3.0 <- pure "idr_Main.{main_1}0"
  "idr_{APPLY_0}0.8.0" <- pure idr_Prelude.Show.primNumShow1.0
  "idr_{APPLY_0}1.8.0" <- pure idr_Prelude.Show.primNumShow3.0
  "idr_{APPLY_0}0_val.8.0" <- fetch "idr_{APPLY_0}0.8.0"
  idr_Prelude.Show.primNumShow4_val.0 <- case "idr_{APPLY_0}0_val.8.0" of
    (C"idr_{U_prim__toStrBigInt_1}") ->
      do
        unboxed.CGrString.8 <- idr_prim__toStrBigInt.unboxed "idr_{APPLY_0}1.8.0"
        pure (CGrString unboxed.CGrString.8) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.8)
  idr_Prelude.Show.primNumShow4.0 <- store idr_Prelude.Show.primNumShow4_val.0
  idr_Prelude.Show.primNumShow2_val.0 <- pure (Cidr_Prelude.Show.Open)
  ccp.3.0 <- case idr_Prelude.Show.primNumShow2_val.0 of
    (Cidr_Prelude.Show.Open) ->
      pure 0
  idr_Prelude.Show.primNumShow5_val_368.0 <- pure (CGrInt ccp.3.0)
  idr_Prelude.Show.primNumShow5.0 <- store idr_Prelude.Show.primNumShow5_val_368.0
  idr_Prelude.Show.primNumShow6_val.0 <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6.0 <- store idr_Prelude.Show.primNumShow6_val.0
  idr_Prelude.Show.primNumShow5_val_367.0 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" idr_Prelude.Show.primNumShow5.0 idr_Prelude.Show.primNumShow6.0
  idr_Prelude.Show.primNumShow5_369.0 <- store idr_Prelude.Show.primNumShow5_val_367.0
  idr_Prelude.Show.primNumShow5_val_370.0 <- fetch idr_Prelude.Show.primNumShow5_369.0
  idr_Prelude.Show.primNumShow5_val_366.0 <- case idr_Prelude.Show.primNumShow5_val_370.0 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Show.primNumShow2_val_373.0 <- pure (Cidr_Prelude.Show.Open)
      ccp.4.0 <- case idr_Prelude.Show.primNumShow2_val_373.0 of
        (Cidr_Prelude.Show.Open) ->
          pure 0
      idr_Prelude.Show.primNumShow6_val_372.0 <- pure (CGrInt ccp.4.0)
      idr_Prelude.Show.primNumShow6_374.0 <- store idr_Prelude.Show.primNumShow6_val_372.0
      idr_Prelude.Show.primNumShow7_val.0 <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7.0 <- store idr_Prelude.Show.primNumShow7_val.0
      (CGrInt idr_Prelude.Show.primNumShow6_374.41.11.arity.1.0) <- fetch idr_Prelude.Show.primNumShow6_374.0
      (CGrInt idr_Prelude.Show.primNumShow7.41.11.arity.1.0) <- fetch idr_Prelude.Show.primNumShow7.0
      unboxed.CGrInt.2.0 <- idris_int_eq.unboxed idr_Prelude.Show.primNumShow6_374.41.11.arity.1.0 idr_Prelude.Show.primNumShow7.41.11.arity.1.0
      idr_Prelude.Show.primNumShow6_val_371.0 <- pure (CGrInt unboxed.CGrInt.2.0)
      idr_Prelude.Show.primNumShow6_375.0 <- store idr_Prelude.Show.primNumShow6_val_371.0
      idr_Prelude.Show.primNumShow6_val_376.0 <- fetch idr_Prelude.Show.primNumShow6_375.0
      case idr_Prelude.Show.primNumShow6_val_376.0 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0.0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0.0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow7.41.11.arity.1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow6_374.41.11.arity.1.0)
  idr_Prelude.Show.primNumShow5_377.0 <- store idr_Prelude.Show.primNumShow5_val_366.0
  idr_Prelude.Show.primNumShow5_val_378.0 <- fetch idr_Prelude.Show.primNumShow5_377.0
  idr_Prelude.Show.primNumShow5_val.0 <- case idr_Prelude.Show.primNumShow5_val_378.0 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_382.0 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_383.0 <- store idr_Prelude.Show.primNumShow6_val_382.0
      (CGrString idr_Prelude.Show.primNumShow6_383.41.12.arity.1.0) <- fetch idr_Prelude.Show.primNumShow6_383.0
      unboxed.CGrInt.3.0 <- idris_str_eq.unboxed idr_Prelude.Show.primNumShow4.0 idr_Prelude.Show.primNumShow6_383.41.12.arity.1.0
      idr_Prelude.Show.primNumShow6_val_381.0 <- pure (CGrInt unboxed.CGrInt.3.0)
      idr_Prelude.Show.primNumShow6_384.0 <- store idr_Prelude.Show.primNumShow6_val_381.0
      idr_Prelude.Show.primNumShow6_val_385.0 <- fetch idr_Prelude.Show.primNumShow6_384.0
      idr_Prelude.Show.primNumShow6_val_380.0 <- case idr_Prelude.Show.primNumShow6_val_385.0 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_386.0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_386.0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Show.primNumShow6_387.0 <- store idr_Prelude.Show.primNumShow6_val_380.0
      idr_Prelude.Show.primNumShow7_val_388.0 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_389.0 <- store idr_Prelude.Show.primNumShow7_val_388.0
      (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Show.primNumShow7_389.0
      idr_Prelude.Show.primNumShow6_val_379.0 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Show.primNumShow6_387.0
      idr_Prelude.Show.primNumShow6_390.0 <- store idr_Prelude.Show.primNumShow6_val_379.0
      idr_Prelude.Show.primNumShow6_val_391.0 <- fetch idr_Prelude.Show.primNumShow6_390.0
      case idr_Prelude.Show.primNumShow6_val_391.0 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          unboxed.CGrInt.4.0 <- idris_str_head.unboxed idr_Prelude.Show.primNumShow4.0
          idr_Prelude.Show.primNumShow7_val_393.0 <- pure (CGrInt unboxed.CGrInt.4.0)
          idr_Prelude.Show.primNumShow7_394.0 <- store idr_Prelude.Show.primNumShow7_val_393.0
          idr_Prelude.Show.primNumShow8_val.0 <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8.0 <- store idr_Prelude.Show.primNumShow8_val.0
          (CGrInt idr_Prelude.Show.primNumShow7_394.41.14.arity.1.0) <- fetch idr_Prelude.Show.primNumShow7_394.0
          (CGrInt idr_Prelude.Show.primNumShow8.41.14.arity.1.0) <- fetch idr_Prelude.Show.primNumShow8.0
          unboxed.CGrInt.5.0 <- idris_int_eq.unboxed idr_Prelude.Show.primNumShow7_394.41.14.arity.1.0 idr_Prelude.Show.primNumShow8.41.14.arity.1.0
          idr_Prelude.Show.primNumShow7_val_392.0 <- pure (CGrInt unboxed.CGrInt.5.0)
          idr_Prelude.Show.primNumShow7_395.0 <- store idr_Prelude.Show.primNumShow7_val_392.0
          idr_Prelude.Show.primNumShow7_val_396.0 <- fetch idr_Prelude.Show.primNumShow7_395.0
          case idr_Prelude.Show.primNumShow7_val_396.0 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_397.0) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_397.0 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow8.41.14.arity.1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow7_394.41.14.arity.1.0) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow6_383.41.12.arity.1.0)
  idr_Prelude.Show.primNumShow5_398.0 <- store idr_Prelude.Show.primNumShow5_val.0
  idr_Prelude.Show.primNumShow5_val_399.0 <- fetch idr_Prelude.Show.primNumShow5_398.0
  case idr_Prelude.Show.primNumShow5_val_399.0 of
    (Cidr_Prelude.Bool.False) ->
      do
        (CGrString unboxed.CGrString.3) <- fetch idr_Prelude.Show.primNumShow4.0
        pure unboxed.CGrString.3 -- LINT: The result of Fetch can only be bound to a variable: (CGrString unboxed.CGrString.3)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_400.0 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_401.0 <- store idr_Prelude.Show.primNumShow6_val_400.0
      idr_Prelude.Show.primNumShow7_val_403.0 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_404.0 <- store idr_Prelude.Show.primNumShow7_val_403.0
      idr_Prelude.Show.primNumShow7_val_402.0 <- do
        unboxed.CGrString.9 <- idris_str_concat.unboxed idr_Prelude.Show.primNumShow4.0 idr_Prelude.Show.primNumShow7_404.0
        pure (CGrString unboxed.CGrString.9) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.9)
      idr_Prelude.Show.primNumShow7_405.0 <- store idr_Prelude.Show.primNumShow7_val_402.0
      idris_str_concat.unboxed idr_Prelude.Show.primNumShow6_401.0 idr_Prelude.Show.primNumShow7_405.0 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)

"idr_Main.{main_2}.unboxed" "idr_Main.{main_2}0" =
  "idr_Main.{main_2}1_val_419" <- pure (CGrInt 0)
  "idr_Main.{main_2}1" <- store "idr_Main.{main_2}1_val_419"
  "idr_Main.{main_2}1_val" <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" "idr_Main.{main_2}0" "idr_Main.{main_2}1"
  "idr_Main.{main_2}1_420" <- store "idr_Main.{main_2}1_val"
  "idr_Main.{main_2}1_val_421" <- fetch "idr_Main.{main_2}1_420"
  case "idr_Main.{main_2}1_val_421" of
    (Cidr_Prelude.Interfaces.LT) ->
      "idr_Main.{main_2}2_val" <- pure (CGrInt 0)
      "idr_Main.{main_2}2" <- store "idr_Main.{main_2}2_val"
      (CGrInt "idr_Main.{main_2}2.41.17.arity.1") <- fetch "idr_Main.{main_2}2"
      idris_int_sub0.41.arity.1.0 <- pure "idr_Main.{main_2}2.41.17.arity.1"
      idris_int_sub1.0 <- pure "idr_Main.{main_2}0"
      (CGrInt idris_int_sub0_1.0) <- pure (CGrInt idris_int_sub0.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
      (CGrInt idris_int_sub1_1.0) <- fetch idris_int_sub1.0
      idris_int_sub2.0 <- _prim_int_sub idris_int_sub0_1.0 idris_int_sub1_1.0
      pure idris_int_sub2.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_sub1_1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Main.{main_2}2.41.17.arity.1")
    #default ->
      (CGrInt unboxed.CGrInt.0) <- fetch "idr_Main.{main_2}0"
      pure unboxed.CGrInt.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt unboxed.CGrInt.0)

"idr_Main.{main_3}.unboxed" "idr_Main.{main_3}0" "idr_Main.{main_3}1" =
  (CGrInt "idr_Main.{main_3}0.41.18.arity.1") <- fetch "idr_Main.{main_3}0"
  idris_int_sub0.41.arity.1.1 <- pure "idr_Main.{main_3}0.41.18.arity.1"
  idris_int_sub1.1 <- pure "idr_Main.{main_3}1"
  (CGrInt idris_int_sub0_1.1) <- pure (CGrInt idris_int_sub0.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrInt idris_int_sub1_1.1) <- fetch idris_int_sub1.1
  idris_int_sub2.1 <- _prim_int_sub idris_int_sub0_1.1 idris_int_sub1_1.1
  pure idris_int_sub2.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_sub1_1.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Main.{main_3}0.41.18.arity.1")

"idr_Main.{main_4}.unboxed" "idr_Main.{main_4}0" "idr_Main.{main_4}1" =
  idris_int_add0.0 <- pure "idr_Main.{main_4}0"
  idris_int_add1.0 <- pure "idr_Main.{main_4}1"
  (CGrInt idris_int_add0_1.0) <- fetch idris_int_add0.0
  (CGrInt idris_int_add1_1.0) <- fetch idris_int_add1.0
  idris_int_add2.0 <- _prim_int_add idris_int_add0_1.0 idris_int_add1_1.0
  pure idris_int_add2.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1.0)

"idr_Main.{main_5}.unboxed" "idr_Main.{main_5}0" "idr_Main.{main_5}1" =
  idris_int_mul0.0 <- pure "idr_Main.{main_5}0"
  idris_int_mul1.0 <- pure "idr_Main.{main_5}1"
  (CGrInt idris_int_mul0_1.0) <- fetch idris_int_mul0.0
  (CGrInt idris_int_mul1_1.0) <- fetch idris_int_mul1.0
  idris_int_mul2.0 <- _prim_int_mul idris_int_mul0_1.0 idris_int_mul1_1.0
  pure idris_int_mul2.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_mul1_1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_mul0_1.0)

"idr_Main.{main_6}" "idr_Main.{main_6}0" "idr_Main.{main_6}1" =
  idr_Prelude.Interfaces.divBigInt0.0 <- pure "idr_Main.{main_6}0"
  idr_Prelude.Interfaces.divBigInt1.0 <- pure "idr_Main.{main_6}1"
  idr_Prelude.Interfaces.divBigInt2_val_1.0 <- pure (CGrInt 0)
  idr_Prelude.Interfaces.divBigInt2.0 <- store idr_Prelude.Interfaces.divBigInt2_val_1.0
  (CGrInt idr_Prelude.Interfaces.divBigInt1.41.0.arity.1.0) <- fetch idr_Prelude.Interfaces.divBigInt1.0
  (CGrInt idr_Prelude.Interfaces.divBigInt2.41.0.arity.1.0) <- fetch idr_Prelude.Interfaces.divBigInt2.0
  unboxed.CGrInt.1.0 <- idris_int_eq.unboxed idr_Prelude.Interfaces.divBigInt1.41.0.arity.1.0 idr_Prelude.Interfaces.divBigInt2.41.0.arity.1.0
  idr_Prelude.Interfaces.divBigInt2_val.0 <- pure (CGrInt unboxed.CGrInt.1.0)
  idr_Prelude.Interfaces.divBigInt2_2.0 <- store idr_Prelude.Interfaces.divBigInt2_val.0
  idr_Prelude.Interfaces.divBigInt2_val_3.0 <- fetch idr_Prelude.Interfaces.divBigInt2_2.0
  case idr_Prelude.Interfaces.divBigInt2_val_3.0 of
    (CGrInt idr_Prelude.Interfaces.divBigInt_cpat_LInt64_0.0) ->
      case idr_Prelude.Interfaces.divBigInt_cpat_LInt64_0.0 of
        0 ->
          idris_int_div idr_Prelude.Interfaces.divBigInt0.0 idr_Prelude.Interfaces.divBigInt1.0
        #default ->
          pure (C"idr_{P_Prelude.Interfaces.{divBigInt_0}_0}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{P_Prelude.Interfaces.{divBigInt_0}_0}") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Interfaces.divBigInt2.41.0.arity.1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Interfaces.divBigInt1.41.0.arity.1.0)

"idr_Main.{main_14}.unboxed" "idr_Main.{main_14}0" =
  "idr_Main.{main_14}1_val" <- pure (CErased)
  "idr_Main.{main_14}1" <- store "idr_Main.{main_14}1_val"
  "idr_Main.{main_14}2_val" <- pure (C"idr_{U_Main.{main_1}_1}")
  "idr_Main.{main_14}2" <- store "idr_Main.{main_14}2_val"
  "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:0.unboxed" "idr_Main.{main_14}2" "idr_Main.{main_14}0"

"idr_Main.{main_21}.unboxed" "idr_Main.{main_21}0" =
  "idr_Main.{main_21}1_val" <- pure (CGrString #"[")
  "idr_Main.{main_21}1" <- store "idr_Main.{main_21}1_val"
  "idr_Main.{main_21}2_val_423" <- pure (CErased)
  "idr_Main.{main_21}2" <- store "idr_Main.{main_21}2_val_423"
  "idr_Main.{main_21}3_val" <- pure (CErased)
  "idr_Main.{main_21}3" <- store "idr_Main.{main_21}3_val"
  "idr_Main.{main_21}4_val" <- pure (C"idr_{U_Main.{main_1}_1}")
  "idr_Main.{main_21}4" <- store "idr_Main.{main_21}4_val"
  "idr_Main.{main_21}5_val" <- pure (CGrString #"")
  "idr_Main.{main_21}5" <- store "idr_Main.{main_21}5_val"
  unboxed.CGrString.2 <- "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Main.{main_21}4" "idr_Main.{main_21}5" "idr_Main.{main_21}0"
  "idr_Main.{main_21}2_val_422" <- pure (CGrString unboxed.CGrString.2)
  "idr_Main.{main_21}2_424" <- store "idr_Main.{main_21}2_val_422"
  "idr_Main.{main_21}3_val_425" <- pure (CGrString #"]")
  "idr_Main.{main_21}3_426" <- store "idr_Main.{main_21}3_val_425"
  "idr_Main.{main_21}2_val" <- do
    unboxed.CGrString.10 <- idris_str_concat.unboxed "idr_Main.{main_21}2_424" "idr_Main.{main_21}3_426"
    pure (CGrString unboxed.CGrString.10) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.10)
  "idr_Main.{main_21}2_427" <- store "idr_Main.{main_21}2_val"
  idris_str_concat.unboxed "idr_Main.{main_21}1" "idr_Main.{main_21}2_427"

"idr_Main.{main_22}.unboxed" "idr_Main.{main_22}0" =
  "idr_Main.{main_22}1_val" <- pure (CGrInt 2)
  "idr_Main.{main_22}1" <- store "idr_Main.{main_22}1_val"
  idris_int_mul0.1 <- pure "idr_Main.{main_22}0"
  idris_int_mul1.1 <- pure "idr_Main.{main_22}1"
  (CGrInt idris_int_mul0_1.1) <- fetch idris_int_mul0.1
  (CGrInt idris_int_mul1_1.1) <- fetch idris_int_mul1.1
  idris_int_mul2.1 <- _prim_int_mul idris_int_mul0_1.1 idris_int_mul1_1.1
  pure idris_int_mul2.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_mul1_1.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_mul0_1.1)

"idr_Main.{main_28}.unboxed" "idr_Main.{main_28}0" "idr_Main.{main_28}1" =
  idris_str_len1.0 <- pure "idr_Main.{main_28}0"
  (CGrString idris_str_len2.0) <- fetch idris_str_len1.0
  idris_str_len3.0 <- _prim_string_len idris_str_len2.0
  unboxed.CGrInt.6 <- pure idris_str_len3.0
  "idr_Main.{main_28}2_val_428" <- pure (CGrInt unboxed.CGrInt.6)
  "idr_Main.{main_28}2" <- store "idr_Main.{main_28}2_val_428"
  (CGrInt "idr_Main.{main_28}2.41.19.arity.1") <- fetch "idr_Main.{main_28}2"
  idris_lz_ext1.41.arity.1.0 <- pure "idr_Main.{main_28}2.41.19.arity.1"
  (CGrInt idris_lz_ext2.0) <- pure (CGrInt idris_lz_ext1.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_lz_ext3.0 <- _prim_int_add idris_lz_ext2.0 0
  unboxed.CGrInt.7 <- pure idris_lz_ext3.0
  "idr_Main.{main_28}2_val" <- pure (CGrInt unboxed.CGrInt.7)
  "idr_Main.{main_28}2_429" <- store "idr_Main.{main_28}2_val"
  idris_int_add0.1 <- pure "idr_Main.{main_28}2_429"
  idris_int_add1.1 <- pure "idr_Main.{main_28}1"
  (CGrInt idris_int_add0_1.1) <- fetch idris_int_add0.1
  (CGrInt idris_int_add1_1.1) <- fetch idris_int_add1.1
  idris_int_add2.1 <- _prim_int_add idris_int_add0_1.1 idris_int_add1_1.1
  pure idris_int_add2.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Main.{main_28}2.41.19.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_len2.0)

"idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04" =
  "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04"
  case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06") ->
      "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
      case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" of
        (Cidr_Prelude.List.Nil) ->
          "idr_{APPLY_0}0.10" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02"
          "idr_{APPLY_0}1.10" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_{APPLY_0}0_val.10" <- fetch "idr_{APPLY_0}0.10"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val" <- case "idr_{APPLY_0}0_val.10" of
            (C"idr_{U_Main.{main_1}_1}") ->
              do
                unboxed.CGrString.11 <- "idr_Main.{main_1}.unboxed" "idr_{APPLY_0}1.10"
                pure (CGrString unboxed.CGrString.11) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.11)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val"
          (CGrString unboxed.CGrString.0) <- do
            unboxed.CGrString.12 <- idris_str_concat.unboxed "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07"
            pure (CGrString unboxed.CGrString.12) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.12)
          pure unboxed.CGrString.0
        #default ->
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val_430" <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_431" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val_430"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08_val" <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08_val"
          "idr_{APPLY_0}0.11" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02"
          "idr_{APPLY_0}1.11" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_{APPLY_0}0_val.11" <- fetch "idr_{APPLY_0}0.11"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_433" <- case "idr_{APPLY_0}0_val.11" of
            (C"idr_{U_Main.{main_1}_1}") ->
              do
                unboxed.CGrString.13 <- "idr_Main.{main_1}.unboxed" "idr_{APPLY_0}1.11"
                pure (CGrString unboxed.CGrString.13) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.13)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_433"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val" <- pure (CGrString #", ")
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_432" <- do
            unboxed.CGrString.14 <- idris_str_concat.unboxed "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010"
            pure (CGrString unboxed.CGrString.14) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.14)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_434" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_432"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val" <- do
            unboxed.CGrString.15 <- idris_str_concat.unboxed "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_434"
            pure (CGrString unboxed.CGrString.15) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.15)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_435" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_435" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
    (Cidr_Prelude.List.Nil) ->
      (CGrString unboxed.CGrString.1) <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"
      pure unboxed.CGrString.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString unboxed.CGrString.1)

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" <- pure (Cidr_Prelude.Bool.True)
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" of
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_436" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_436" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)

"idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0.unboxed" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03.41.arity.1" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04" =
  "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04_val" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04"
  case "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:06") ->
      "idr_{APPLY_0}0.12" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02"
      "idr_{APPLY_0}1.12" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05"
      "idr_{APPLY_0}0_val.12" <- fetch "idr_{APPLY_0}0.12"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07_val" <- case "idr_{APPLY_0}0_val.12" of
        (C"idr_{U_Main.{main_28}_2}") ->
          pure (C"idr_{U_Main.{main_28}_1}" "idr_{APPLY_0}1.12") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_28}_1}" "idr_{APPLY_0}1.12")
        (C"idr_{U_Main.{main_4}_2}") ->
          pure (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}1.12") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}1.12")
        (C"idr_{U_Main.{main_5}_2}") ->
          pure (C"idr_{U_Main.{main_5}_1}" "idr_{APPLY_0}1.12") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_5}_1}" "idr_{APPLY_0}1.12")
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07_val"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val_437" <- pure (CErased)
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val_437"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:09_val" <- pure (CErased)
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:09" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:09_val"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val" <- do
        unboxed.CGrInt.21 <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0.unboxed" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03.41.arity.1" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:06"
        pure (CGrInt unboxed.CGrInt.21) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.21)
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_438" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val"
      "idr_{APPLY_0}0.13" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07"
      "idr_{APPLY_0}1.13" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_438"
      "idr_{APPLY_0}0_val.13" <- fetch "idr_{APPLY_0}0.13"
      case "idr_{APPLY_0}0_val.13" of
        (C"idr_{U_Main.{main_28}_1}" "idr_{APPLY_0}2.13") ->
          "idr_Main.{main_28}.unboxed" "idr_{APPLY_0}2.13" "idr_{APPLY_0}1.13"
        (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}2_413.13") ->
          "idr_Main.{main_4}.unboxed" "idr_{APPLY_0}2_413.13" "idr_{APPLY_0}1.13"
        (C"idr_{U_Main.{main_5}_1}" "idr_{APPLY_0}2_414.13") ->
          "idr_Main.{main_5}.unboxed" "idr_{APPLY_0}2_414.13" "idr_{APPLY_0}1.13"
    (Cidr_Prelude.List.Nil) ->
      pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03.41.arity.1"

"idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03" =
  "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val" <- fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03"
  case "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:05") ->
      "idr_{APPLY_0}0.14" <- pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02"
      "idr_{APPLY_0}1.14" <- pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
      "idr_{APPLY_0}0_val.14" <- fetch "idr_{APPLY_0}0.14"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06_val" <- case "idr_{APPLY_0}0_val.14" of
        (C"idr_{U_Main.{main_22}_1}") ->
          do
            unboxed.CGrInt.22 <- "idr_Main.{main_22}.unboxed" "idr_{APPLY_0}1.14"
            pure (CGrInt unboxed.CGrInt.22) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.22)
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06_val"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val_439" <- pure (CErased)
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val_439"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:08_val" <- pure (CErased)
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:08" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:08_val"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val" <- "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:05"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_440" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val"
      pure (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_440") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_440")
    (Cidr_Prelude.List.Nil) ->
      fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03"

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01" =
  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.21.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00"
  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.21.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
  unboxed.CGrInt.8 <- idris_int_eq.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.21.arity.1" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.21.arity.1"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val" <- pure (CGrInt unboxed.CGrInt.8)
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_441" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_441" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0" of
        0 ->
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.22.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00"
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.22.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
          idris_int_lt0.41.arity.1.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.22.arity.1"
          idris_int_lt1.41.arity.1.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.22.arity.1"
          (CGrInt idris_int_lt0_1.0) <- pure (CGrInt idris_int_lt0.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_lt1_1.0) <- pure (CGrInt idris_int_lt1.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_lt2.0 <- _prim_int_lt idris_int_lt0_1.0 idris_int_lt1_1.0
          ccp.1.0 <- case idris_int_lt2.0 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.9 <- pure ccp.1.0
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val" <- pure (CGrInt unboxed.CGrInt.9)
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_442" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_442" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_443") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_443" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.22.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.22.arity.1")
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.21.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.21.arity.1")

"idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:01" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:02" =
  "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:02_val" <- fetch "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:02"
  case "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:02_val" of
    (Cidr_Main.Add "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:03_448" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:04_449") ->
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:05_val_450" <- pure (CGrString #"(")
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:05_451" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:05_val_450"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_454" <- pure (CErased)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_455" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_454"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_453" <- do
        unboxed.CGrString.16 <- "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:01" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:03_448"
        pure (CGrString unboxed.CGrString.16) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.16)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_456" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_453"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_val_457" <- pure (CGrString #" + ")
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_val_457"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val_459" <- pure (CErased)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val_459"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val_458" <- do
        unboxed.CGrString.17 <- "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:01" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:04_449"
        pure (CGrString unboxed.CGrString.17) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.17)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_460" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val_458"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:09_val" <- pure (CGrString #")")
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:09" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:09_val"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val" <- do
        unboxed.CGrString.18 <- idris_str_concat.unboxed "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_460" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:09"
        pure (CGrString unboxed.CGrString.18) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.18)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_461" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_val" <- do
        unboxed.CGrString.19 <- idris_str_concat.unboxed "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_461"
        pure (CGrString unboxed.CGrString.19) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.19)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_462" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_val"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_452" <- do
        unboxed.CGrString.20 <- idris_str_concat.unboxed "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_456" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_462"
        pure (CGrString unboxed.CGrString.20) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.20)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_463" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_452"
      idris_str_concat.unboxed "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:05_451" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_463"
    (Cidr_Main.Mul "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:03_486" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:04_487") ->
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:05_val_488" <- pure (CGrString #"(")
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:05_489" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:05_val_488"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_492" <- pure (CErased)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_493" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_492"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_491" <- do
        unboxed.CGrString.21 <- "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:01" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:03_486"
        pure (CGrString unboxed.CGrString.21) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.21)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_494" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_491"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_val_496" <- pure (CGrString #" * ")
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_497" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_val_496"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val_500" <- pure (CErased)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_501" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val_500"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val_499" <- do
        unboxed.CGrString.22 <- "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:01" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:04_487"
        pure (CGrString unboxed.CGrString.22) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.22)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_502" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val_499"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:09_val_503" <- pure (CGrString #")")
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:09_504" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:09_val_503"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val_498" <- do
        unboxed.CGrString.23 <- idris_str_concat.unboxed "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_502" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:09_504"
        pure (CGrString unboxed.CGrString.23) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.23)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_505" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_val_498"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_val_495" <- do
        unboxed.CGrString.24 <- idris_str_concat.unboxed "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_497" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:08_505"
        pure (CGrString unboxed.CGrString.24) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.24)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_506" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_val_495"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_490" <- do
        unboxed.CGrString.25 <- idris_str_concat.unboxed "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_494" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:07_506"
        pure (CGrString unboxed.CGrString.25) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.25)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_507" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_val_490"
      idris_str_concat.unboxed "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:05_489" "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:06_507"
    (Cidr_Main.Val "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:03_530") ->
      "idr_{APPLY_0}0.15" <- pure "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:01"
      "idr_{APPLY_0}1.15" <- pure "idr_Prelude.Show.Main.@Prelude.Show.Show$Expr ty:!show:03_530"
      "idr_{APPLY_0}0_val.15" <- fetch "idr_{APPLY_0}0.15"
      case "idr_{APPLY_0}0_val.15" of
        (C"idr_{U_Main.{main_1}_1}") ->
          "idr_Main.{main_1}.unboxed" "idr_{APPLY_0}1.15"
