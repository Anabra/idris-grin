grinMain =
  idr_Main.main3_val.0 <- pure (C"idr_{U_Main.{main_0}_1}")
  idr_Main.main3.0 <- store idr_Main.main3_val.0
  idr_Main.main4_val.0 <- pure (CGrString #"Main")
  idr_Main.main4.0 <- store idr_Main.main4_val.0
  idr_Main.main1_val.0 <- idr_Prelude.Interactive.printLn' idr_Main.main3.0 idr_Main.main4.0
  idr_Main.main4_val_64.0 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main4_65.0 <- store idr_Main.main4_val_64.0
  idr_Main.main6_val.0 <- pure (C"idr_{U_Main.{main_2}_2}")
  idr_Main.main6.0 <- store idr_Main.main6_val.0
  idr_Main.main7_val.0 <- pure (CGrInt 98)
  idr_Main.main7.0 <- store idr_Main.main7_val.0
  idr_Main.main8_val_67.0 <- pure (CGrInt 97)
  idr_Main.main8.0 <- store idr_Main.main8_val_67.0
  idr_Main.main9.0 <- pure idr_Main.main8.0
  idr_Main.main10.0 <- pure idr_Main.main7.0
  idr_Main.main11.0 <- pure idr_Main.main7.0
  idr_Main.main12.0 <- pure idr_Main.main7.0
  idr_Main.main13_val_72.0 <- pure (CGrInt 99)
  idr_Main.main13.0 <- store idr_Main.main13_val_72.0
  idr_Main.main14_val.0 <- pure (Cidr_Prelude.List.Nil)
  idr_Main.main14.0 <- store idr_Main.main14_val.0
  idr_Main.main13_val.0 <- pure (Cidr_Prelude.List.:: idr_Main.main13.0 idr_Main.main14.0)
  idr_Main.main13_73.0 <- store idr_Main.main13_val.0
  idr_Main.main12_val.0 <- pure (Cidr_Prelude.List.:: idr_Main.main7.0 idr_Main.main13_73.0)
  idr_Main.main12_74.0 <- store idr_Main.main12_val.0
  idr_Main.main11_val.0 <- pure (Cidr_Prelude.List.:: idr_Main.main7.0 idr_Main.main12_74.0)
  idr_Main.main11_75.0 <- store idr_Main.main11_val.0
  idr_Main.main10_val.0 <- pure (Cidr_Prelude.List.:: idr_Main.main7.0 idr_Main.main11_75.0)
  idr_Main.main10_76.0 <- store idr_Main.main10_val.0
  idr_Main.main9_val.0 <- pure (Cidr_Prelude.List.:: idr_Main.main8.0 idr_Main.main10_76.0)
  idr_Main.main9_77.0 <- store idr_Main.main9_val.0
  idr_Main.main8_val.0 <- pure (Cidr_Prelude.List.:: idr_Main.main8.0 idr_Main.main9_77.0)
  idr_Main.main8_78.0 <- store idr_Main.main8_val.0
  unboxed.CGrInt.3.0 <- idr_Main.occurences.unboxed idr_Main.main6.0 idr_Main.main7.0 idr_Main.main8_78.0
  idr_Main.main5_val.0 <- pure (CGrInt unboxed.CGrInt.3.0)
  idr_Main.main5_79.0 <- store idr_Main.main5_val.0
  idr_Main.main2_val_59.0 <- idr_Prelude.Interactive.printLn' idr_Main.main4_65.0 idr_Main.main5_79.0
  idr_Main.main5_87.0 <- pure idr_Main.main4_65.0
  idr_Main.main7_val_91.0 <- pure (C"idr_{U_Main.{main_4}_2}")
  idr_Main.main7_92.0 <- store idr_Main.main7_val_91.0
  idr_Main.main8_val_93.0 <- pure (CGrInt 100)
  idr_Main.main8_94.0 <- store idr_Main.main8_val_93.0
  idr_Main.main9_val_96.0 <- pure (CGrInt 50)
  idr_Main.main9_97.0 <- store idr_Main.main9_val_96.0
  idr_Main.main10_100.0 <- pure idr_Main.main8_94.0
  idr_Main.main11_103.0 <- pure idr_Main.main8_94.0
  idr_Main.main12_106.0 <- pure idr_Main.main9_97.0
  idr_Main.main13_108.0 <- pure idr_Main.main14.0
  idr_Main.main12_val_104.0 <- pure (Cidr_Prelude.List.:: idr_Main.main9_97.0 idr_Main.main14.0)
  idr_Main.main12_109.0 <- store idr_Main.main12_val_104.0
  idr_Main.main11_val_101.0 <- pure (Cidr_Prelude.List.:: idr_Main.main8_94.0 idr_Main.main12_109.0)
  idr_Main.main11_110.0 <- store idr_Main.main11_val_101.0
  idr_Main.main10_val_98.0 <- pure (Cidr_Prelude.List.:: idr_Main.main8_94.0 idr_Main.main11_110.0)
  idr_Main.main10_111.0 <- store idr_Main.main10_val_98.0
  idr_Main.main9_val_95.0 <- pure (Cidr_Prelude.List.:: idr_Main.main9_97.0 idr_Main.main10_111.0)
  idr_Main.main9_112.0 <- store idr_Main.main9_val_95.0
  unboxed.CGrInt.4.0 <- idr_Main.occurences.unboxed idr_Main.main7_92.0 idr_Main.main8_94.0 idr_Main.main9_112.0
  idr_Main.main6_val_88.0 <- pure (CGrInt unboxed.CGrInt.4.0)
  idr_Main.main6_113.0 <- store idr_Main.main6_val_88.0
  idr_Main.main3_val_81.0 <- idr_Prelude.Interactive.printLn' idr_Main.main4_65.0 idr_Main.main6_113.0
  idr_Main.main6_121.0 <- pure idr_Main.main4_65.0
  idr_Main.main8_val_125.0 <- pure (C"idr_{U_Main.{main_6}_2}")
  idr_Main.main8_126.0 <- store idr_Main.main8_val_125.0
  idr_Main.main9_val_127.0 <- pure (Cidr_Main.Liquid)
  idr_Main.main9_128.0 <- store idr_Main.main9_val_127.0
  idr_Main.main10_val_130.0 <- pure (Cidr_Main.Solid)
  idr_Main.main10_131.0 <- store idr_Main.main10_val_130.0
  idr_Main.main11_134.0 <- pure idr_Main.main9_128.0
  idr_Main.main12_137.0 <- pure idr_Main.main9_128.0
  idr_Main.main13_val_139.0 <- pure (Cidr_Main.Gas)
  idr_Main.main13_140.0 <- store idr_Main.main13_val_139.0
  idr_Main.main14_143.0 <- pure idr_Main.main13_140.0
  idr_Main.main15.0 <- pure idr_Main.main14.0
  idr_Main.main14_val_141.0 <- pure (Cidr_Prelude.List.:: idr_Main.main13_140.0 idr_Main.main14.0)
  idr_Main.main14_144.0 <- store idr_Main.main14_val_141.0
  idr_Main.main13_val_138.0 <- pure (Cidr_Prelude.List.:: idr_Main.main13_140.0 idr_Main.main14_144.0)
  idr_Main.main13_145.0 <- store idr_Main.main13_val_138.0
  idr_Main.main12_val_135.0 <- pure (Cidr_Prelude.List.:: idr_Main.main9_128.0 idr_Main.main13_145.0)
  idr_Main.main12_146.0 <- store idr_Main.main12_val_135.0
  idr_Main.main11_val_132.0 <- pure (Cidr_Prelude.List.:: idr_Main.main9_128.0 idr_Main.main12_146.0)
  idr_Main.main11_147.0 <- store idr_Main.main11_val_132.0
  idr_Main.main10_val_129.0 <- pure (Cidr_Prelude.List.:: idr_Main.main10_131.0 idr_Main.main11_147.0)
  idr_Main.main10_148.0 <- store idr_Main.main10_val_129.0
  unboxed.CGrInt.5.0 <- idr_Main.occurences.unboxed idr_Main.main8_126.0 idr_Main.main9_128.0 idr_Main.main10_148.0
  idr_Main.main7_val_122.0 <- pure (CGrInt unboxed.CGrInt.5.0)
  idr_Main.main7_149.0 <- store idr_Main.main7_val_122.0
  idr_Main.main4_val_115.0 <- idr_Prelude.Interactive.printLn' idr_Main.main4_65.0 idr_Main.main7_149.0
  idr_Main.main7_val_156.0 <- pure (C"idr_{U_Main.{main_7}_1}")
  idr_Main.main7_157.0 <- store idr_Main.main7_val_156.0
  idr_Main.main8_val_161.0 <- pure (CGrString #"David Bowie")
  idr_Main.main8_162.0 <- store idr_Main.main8_val_161.0
  idr_Main.main9_val_163.0 <- pure (CGrString #"Heroes")
  idr_Main.main9_164.0 <- store idr_Main.main9_val_163.0
  idr_Main.main10_val_165.0 <- pure (CGrInt 1977)
  idr_Main.main10_166.0 <- store idr_Main.main10_val_165.0
  idr_Main.main9_val_169.0 <- pure (CGrString #"Joni Mitchell")
  idr_Main.main9_170.0 <- store idr_Main.main9_val_169.0
  idr_Main.main10_val_171.0 <- pure (CGrString #"Clouds")
  idr_Main.main10_172.0 <- store idr_Main.main10_val_171.0
  idr_Main.main11_val_173.0 <- pure (CGrInt 1969)
  idr_Main.main11_174.0 <- store idr_Main.main11_val_173.0
  idr_Main.main8_val_159.0 <- "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:0" idr_Main.main8_162.0 idr_Main.main9_164.0 idr_Main.main10_166.0 idr_Main.main9_170.0 idr_Main.main10_172.0 idr_Main.main11_174.0
  idr_Main.main8_val_158.0 <- case idr_Main.main8_val_159.0 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Main.main8_178.0 <- store idr_Main.main8_val_158.0
  idr_Main.main5_val_151.0 <- idr_Prelude.Interactive.printLn' idr_Main.main7_157.0 idr_Main.main8_178.0
  idr_Main.main8_186.0 <- pure idr_Main.main7_157.0
  idr_Main.main9_val_190.0 <- pure (CGrString #"The Beatles")
  idr_Main.main9_191.0 <- store idr_Main.main9_val_190.0
  idr_Main.main10_val_192.0 <- pure (CGrString #"Help")
  idr_Main.main10_193.0 <- store idr_Main.main10_val_192.0
  idr_Main.main11_val_194.0 <- pure (CGrInt 1965)
  idr_Main.main11_195.0 <- store idr_Main.main11_val_194.0
  idr_Main.main10_199.0 <- pure idr_Main.main9_191.0
  idr_Main.main11_val_200.0 <- pure (CGrString #"Rubber Soul")
  idr_Main.main11_201.0 <- store idr_Main.main11_val_200.0
  idr_Main.main12_203.0 <- pure idr_Main.main11_195.0
  idr_Main.main9_val_188.0 <- "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:0" idr_Main.main9_191.0 idr_Main.main10_193.0 idr_Main.main11_195.0 idr_Main.main9_191.0 idr_Main.main11_201.0 idr_Main.main11_195.0
  idr_Main.main9_val_187.0 <- case idr_Main.main9_val_188.0 of
    (Cidr_Prelude.Interfaces.LT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Eq$Album:!==:02.41.22.arity.1.0" <- pure #"The Beatles"
      idris_str_eq1_0.0 <- pure #"The Beatles"
      idris_str_eq3.0 <- _prim_string_eq idris_str_eq1_0.0 "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Eq$Album:!==:02.41.22.arity.1.0"
      ccp.2.0 <- case idris_str_eq3.0 of
        #False ->
          pure 0
        #True ->
          pure 1
      case ccp.2.0 of
        0 ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Eq$Album:!==:03.41.23.arity.1.0" <- pure #"Rubber Soul"
          idris_str_eq1_0.1 <- pure #"Help"
          idris_str_eq3.1 <- _prim_string_eq idris_str_eq1_0.1 "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Eq$Album:!==:03.41.23.arity.1.0"
          ccp.2.1 <- case idris_str_eq3.1 of
            #False ->
              pure 0
            #True ->
              pure 1
          case ccp.2.1 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              idris_int_eq0_1.0 <- pure 1965
              idris_int_eq1_1.0 <- pure 1965
              idris_int_eq2.0 <- _prim_int_eq idris_int_eq0_1.0 idris_int_eq1_1.0
              ccp.0.0 <- case idris_int_eq2.0 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              case ccp.0.0 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Main.main9_223.0 <- store idr_Main.main9_val_187.0
  idr_Main.main6_val_180.0 <- idr_Prelude.Interactive.printLn' idr_Main.main7_157.0 idr_Main.main9_223.0
  idr_Main.main9_val_230.0 <- pure (C"idr_{U_Main.{main_10}_1}")
  idr_Main.main9_231.0 <- store idr_Main.main9_val_230.0
  idr_Main.main12_val_237.0 <- pure (C"idr_{U_Main.{main_11}_1}")
  idr_Main.main12_238.0 <- store idr_Main.main12_val_237.0
  idr_Main.main14_val_242.0 <- pure (C"idr_{U_Main.{main_12}_2}")
  idr_Main.main14_243.0 <- store idr_Main.main14_val_242.0
  idr_Main.collection0.0 <- pure idr_Main.main9_191.0
  idr_Main.collection1.0 <- pure idr_Main.main10_193.0
  idr_Main.collection2.0 <- pure idr_Main.main11_195.0
  idr_Main.collection0_val.0 <- pure (Cidr_Main.MkAlbum idr_Main.main9_191.0 idr_Main.main10_193.0 idr_Main.main11_195.0)
  idr_Main.collection0_2.0 <- store idr_Main.collection0_val.0
  idr_Main.collection1_6.0 <- pure idr_Main.main9_191.0
  idr_Main.collection2_8.0 <- pure idr_Main.main11_201.0
  idr_Main.collection3.0 <- pure idr_Main.main11_195.0
  idr_Main.collection1_val_4.0 <- pure (Cidr_Main.MkAlbum idr_Main.main9_191.0 idr_Main.main11_201.0 idr_Main.main11_195.0)
  idr_Main.collection1_9.0 <- store idr_Main.collection1_val_4.0
  idr_Main.collection2_13.0 <- pure idr_Main.main9_170.0
  idr_Main.collection3_15.0 <- pure idr_Main.main10_172.0
  idr_Main.collection4.0 <- pure idr_Main.main11_174.0
  idr_Main.collection2_val_11.0 <- pure (Cidr_Main.MkAlbum idr_Main.main9_170.0 idr_Main.main10_172.0 idr_Main.main11_174.0)
  idr_Main.collection2_16.0 <- store idr_Main.collection2_val_11.0
  idr_Main.collection3_20.0 <- pure idr_Main.main8_162.0
  idr_Main.collection4_val_21.0 <- pure (CGrString #"Hunky Dory")
  idr_Main.collection4_22.0 <- store idr_Main.collection4_val_21.0
  idr_Main.collection5_val.0 <- pure (CGrInt 1971)
  idr_Main.collection5.0 <- store idr_Main.collection5_val.0
  idr_Main.collection3_val_18.0 <- pure (Cidr_Main.MkAlbum idr_Main.main8_162.0 idr_Main.collection4_22.0 idr_Main.collection5.0)
  idr_Main.collection3_23.0 <- store idr_Main.collection3_val_18.0
  idr_Main.collection4_27.0 <- pure idr_Main.main8_162.0
  idr_Main.collection5_29.0 <- pure idr_Main.main9_164.0
  idr_Main.collection6.0 <- pure idr_Main.main10_166.0
  idr_Main.collection4_val_25.0 <- pure (Cidr_Main.MkAlbum idr_Main.main8_162.0 idr_Main.main9_164.0 idr_Main.main10_166.0)
  idr_Main.collection4_30.0 <- store idr_Main.collection4_val_25.0
  idr_Main.collection5_32.0 <- pure idr_Main.main14.0
  idr_Main.collection4_val_24.0 <- pure (Cidr_Prelude.List.:: idr_Main.collection4_30.0 idr_Main.main14.0)
  idr_Main.collection4_33.0 <- store idr_Main.collection4_val_24.0
  idr_Main.collection3_val_17.0 <- pure (Cidr_Prelude.List.:: idr_Main.collection3_23.0 idr_Main.collection4_33.0)
  idr_Main.collection3_34.0 <- store idr_Main.collection3_val_17.0
  idr_Main.collection2_val_10.0 <- pure (Cidr_Prelude.List.:: idr_Main.collection2_16.0 idr_Main.collection3_34.0)
  idr_Main.collection2_35.0 <- store idr_Main.collection2_val_10.0
  idr_Main.collection1_val_3.0 <- pure (Cidr_Prelude.List.:: idr_Main.collection1_9.0 idr_Main.collection2_35.0)
  idr_Main.collection1_36.0 <- store idr_Main.collection1_val_3.0
  idr_Main.main15_val_244.0 <- pure (Cidr_Prelude.List.:: idr_Main.collection0_2.0 idr_Main.collection1_36.0)
  idr_Main.main15_245.0 <- store idr_Main.main15_val_244.0
  idr_Main.main13_val_239.0 <- idr_Prelude.List.sortBy idr_Main.main14_243.0 idr_Main.main15_245.0
  idr_Main.main13_246.0 <- store idr_Main.main13_val_239.0
  idr_Main.main10_val_232.0 <- "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" idr_Main.main12_238.0 idr_Main.main13_246.0
  idr_Main.main10_247.0 <- store idr_Main.main10_val_232.0
  idr_Main.main7_val_225.0 <- idr_Prelude.Interactive.printLn' idr_Main.main9_231.0 idr_Main.main10_247.0
  idr_Main.main10_val_253.0 <- pure (C"idr_{U_Main.{main_13}_1}")
  idr_Main.main10_254.0 <- store idr_Main.main10_val_253.0
  idr_Main.main11_257.0 <- pure idr_Main.main9_170.0
  idr_Main.main12_259.0 <- pure idr_Main.main10_172.0
  idr_Main.main13_261.0 <- pure idr_Main.main11_174.0
  idr_Main.main11_val_255.0 <- pure (Cidr_Main.MkAlbum idr_Main.main9_170.0 idr_Main.main10_172.0 idr_Main.main11_174.0)
  idr_Main.main11_262.0 <- store idr_Main.main11_val_255.0
  "idr_{runMain_0}0_val.0" <- idr_Prelude.Interactive.printLn' idr_Main.main10_254.0 idr_Main.main11_262.0
  pure ()

idr_Prelude.List.mergeBy idr_Prelude.List.mergeBy1 idr_Prelude.List.mergeBy2 idr_Prelude.List.mergeBy3 =
  idr_Prelude.List.mergeBy2_val <- fetch idr_Prelude.List.mergeBy2
  case idr_Prelude.List.mergeBy2_val of
    (Cidr_Prelude.List.Nil) ->
      fetch idr_Prelude.List.mergeBy3
    #default ->
      idr_Prelude.List.mergeBy3_val <- fetch idr_Prelude.List.mergeBy3
      case idr_Prelude.List.mergeBy3_val of
        (Cidr_Prelude.List.:: idr_Prelude.List.mergeBy4 idr_Prelude.List.mergeBy5) ->
          -- LINT: Invalid pattern match for (Cidr_Prelude.List.:: idr_Prelude.List.mergeBy6 idr_Prelude.List.mergeBy7). Expected pattern of type: {Cidr_Prelude.List.::[{75
                                ,79
                                ,83
                                ,87
                                ,91}
                               ,{107,109,236}]}, but got: {Cidr_Prelude.List.::[{75
                                ,79
                                ,83
                                ,87
                                ,91}
                               ,{107,109,236}]
          ,Cidr_Prelude.List.Nil[]}
          (Cidr_Prelude.List.:: idr_Prelude.List.mergeBy6 idr_Prelude.List.mergeBy7) <- pure idr_Prelude.List.mergeBy2_val
          idr_Prelude.List.mergeBy8_val_264 <- pure (C"idr_{U_Main.{main_12}_1}" idr_Prelude.List.mergeBy6)
          "idr_{APPLY_0}0_val.1" <- pure idr_Prelude.List.mergeBy8_val_264
          "idr_{APPLY_0}2.1" <- pure idr_Prelude.List.mergeBy6
          (Cidr_Main.MkAlbum "idr_Main.{main_12}0.49.5.arity.1.0" "idr_Main.{main_12}0.49.5.arity.2.0" "idr_Main.{main_12}0.49.5.arity.3.0") <- fetch idr_Prelude.List.mergeBy6
          (Cidr_Main.MkAlbum "idr_Main.{main_12}1.49.5.arity.1.0" "idr_Main.{main_12}1.49.5.arity.2.0" "idr_Main.{main_12}1.49.5.arity.3.0") <- fetch idr_Prelude.List.mergeBy4
          idr_Prelude.List.mergeBy8_val <- "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:0" "idr_Main.{main_12}0.49.5.arity.1.0" "idr_Main.{main_12}0.49.5.arity.2.0" "idr_Main.{main_12}0.49.5.arity.3.0" "idr_Main.{main_12}1.49.5.arity.1.0" "idr_Main.{main_12}1.49.5.arity.2.0" "idr_Main.{main_12}1.49.5.arity.3.0"
          case idr_Prelude.List.mergeBy8_val of
            (Cidr_Prelude.Interfaces.LT) ->
              idr_Prelude.List.mergeBy10_val <- pure (Cidr_Prelude.List.:: idr_Prelude.List.mergeBy4 idr_Prelude.List.mergeBy5)
              idr_Prelude.List.mergeBy10 <- store idr_Prelude.List.mergeBy10_val
              idr_Prelude.List.mergeBy9_val <- idr_Prelude.List.mergeBy idr_Prelude.List.mergeBy1 idr_Prelude.List.mergeBy7 idr_Prelude.List.mergeBy10
              idr_Prelude.List.mergeBy9_268 <- store idr_Prelude.List.mergeBy9_val
              pure (Cidr_Prelude.List.:: idr_Prelude.List.mergeBy6 idr_Prelude.List.mergeBy9_268) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.List.mergeBy6 idr_Prelude.List.mergeBy9_268)
            #default ->
              idr_Prelude.List.mergeBy10_val_272 <- pure (Cidr_Prelude.List.:: idr_Prelude.List.mergeBy6 idr_Prelude.List.mergeBy7)
              idr_Prelude.List.mergeBy10_273 <- store idr_Prelude.List.mergeBy10_val_272
              idr_Prelude.List.mergeBy9_val_269 <- idr_Prelude.List.mergeBy idr_Prelude.List.mergeBy1 idr_Prelude.List.mergeBy10_273 idr_Prelude.List.mergeBy5
              idr_Prelude.List.mergeBy9_274 <- store idr_Prelude.List.mergeBy9_val_269
              pure (Cidr_Prelude.List.:: idr_Prelude.List.mergeBy4 idr_Prelude.List.mergeBy9_274) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.List.mergeBy4 idr_Prelude.List.mergeBy9_274) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Main.MkAlbum "idr_Main.{main_12}1.49.5.arity.1.0" "idr_Main.{main_12}1.49.5.arity.2.0" "idr_Main.{main_12}1.49.5.arity.3.0") -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Main.MkAlbum "idr_Main.{main_12}0.49.5.arity.1.0" "idr_Main.{main_12}0.49.5.arity.2.0" "idr_Main.{main_12}0.49.5.arity.3.0")
        (Cidr_Prelude.List.Nil) ->
          pure idr_Prelude.List.mergeBy2_val

idr_Main.occurences.unboxed idr_Main.occurences1 idr_Main.occurences2 idr_Main.occurences3 =
  idr_Main.occurences3_val <- fetch idr_Main.occurences3
  case idr_Main.occurences3_val of
    (Cidr_Prelude.List.:: idr_Main.occurences4 idr_Main.occurences5) ->
      "idr_{APPLY_0}0_val.2" <- fetch idr_Main.occurences1
      idr_Main.occurences6_val_275 <- case "idr_{APPLY_0}0_val.2" of
        (C"idr_{U_Main.{main_2}_2}") ->
          pure (C"idr_{U_Main.{main_2}_1}" idr_Main.occurences2) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_2}_1}" idr_Main.occurences2)
        (C"idr_{U_Main.{main_4}_2}") ->
          pure (C"idr_{U_Main.{main_4}_1}" idr_Main.occurences2) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_4}_1}" idr_Main.occurences2)
        (C"idr_{U_Main.{main_6}_2}") ->
          pure (C"idr_{U_Main.{main_6}_1}" idr_Main.occurences2) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_6}_1}" idr_Main.occurences2)
      "idr_{APPLY_0}0_val.3" <- pure idr_Main.occurences6_val_275
      idr_Main.occurences6_val <- case idr_Main.occurences6_val_275 of
        (C"idr_{U_Main.{main_2}_1}" "idr_{APPLY_0}2_436.3") ->
          -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.1)
          -- LINT: Invalid pattern match for (CGrInt idris_int_eq0_1.1). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
          ,Cidr_Main.Liquid[]}
          (CGrInt idris_int_eq0_1.1) <- fetch "idr_{APPLY_0}2_436.3"
          -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq1_1.1)
          -- LINT: Invalid pattern match for (CGrInt idris_int_eq1_1.1). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
          ,Cidr_Main.Gas[]
          ,Cidr_Main.Liquid[]
          ,Cidr_Main.Solid[]}
          (CGrInt idris_int_eq1_1.1) <- fetch idr_Main.occurences4
          idris_int_eq2.1 <- _prim_int_eq idris_int_eq0_1.1 idris_int_eq1_1.1
          ccp.0.1 <- case idris_int_eq2.1 of
            #False ->
              pure 0
            #True ->
              pure 1
          case ccp.0.1 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}2_437.3") ->
          -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.2)
          -- LINT: Invalid pattern match for (CGrInt idris_int_eq0_1.2). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
          ,Cidr_Main.Liquid[]}
          (CGrInt idris_int_eq0_1.2) <- fetch "idr_{APPLY_0}2_437.3"
          -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq1_1.2)
          -- LINT: Invalid pattern match for (CGrInt idris_int_eq1_1.2). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
          ,Cidr_Main.Gas[]
          ,Cidr_Main.Liquid[]
          ,Cidr_Main.Solid[]}
          (CGrInt idris_int_eq1_1.2) <- fetch idr_Main.occurences4
          idris_int_eq2.2 <- _prim_int_eq idris_int_eq0_1.2 idris_int_eq1_1.2
          ccp.0.2 <- case idris_int_eq2.2 of
            #False ->
              pure 0
            #True ->
              pure 1
          case ccp.0.2 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        (C"idr_{U_Main.{main_6}_1}" "idr_{APPLY_0}2_438.3") ->
          "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Eq$Matter:!==:01_val.0.0" <- fetch idr_Main.occurences4
          case "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Eq$Matter:!==:01_val.0.0" of
            (Cidr_Main.Gas) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Main.Liquid) ->
              "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Eq$Matter:!==:00_val_539.0.0" <- fetch "idr_{APPLY_0}2_438.3"
              case "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Eq$Matter:!==:00_val_539.0.0" of
                (Cidr_Main.Liquid) ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Main.Solid) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      case idr_Main.occurences6_val of
        (Cidr_Prelude.Bool.False) ->
          idr_Main.occurences.unboxed idr_Main.occurences1 idr_Main.occurences2 idr_Main.occurences5
        (Cidr_Prelude.Bool.True) ->
          unboxed.CGrInt.6 <- idr_Main.occurences.unboxed idr_Main.occurences1 idr_Main.occurences2 idr_Main.occurences5
          idr_Main.occurences7_279.41.1.arity.1 <- pure 1
          idris_int_add2.0 <- _prim_int_add idr_Main.occurences7_279.41.1.arity.1 unboxed.CGrInt.6
          pure idris_int_add2.0
    (Cidr_Prelude.List.Nil) ->
      pure 0

idr_Prelude.Show.primNumShow.unboxed idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3 =
  "idr_{APPLY_0}0_val.4" <- fetch idr_Prelude.Show.primNumShow1
  ccp.0 <- case "idr_{APPLY_0}0_val.4" of
    (C"idr_{U_prim__toStrBigInt_1}") ->
      -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.0.0)
      -- LINT: Invalid pattern match for (CGrInt idris_int_str1_0.0.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
      ,CGrString[T_String]
      ,Cidr_Main.MkAlbum[{101}
                        ,{102}
                        ,{103}]
      ,Cidr_Prelude.Bool.False[]
      ,Cidr_Prelude.Bool.True[]
      ,Cidr_Prelude.List.::[{258}
                           ,{259}]
      ,Cidr_Prelude.List.Nil[]}
      (CGrInt idris_int_str1_0.0.0) <- fetch idr_Prelude.Show.primNumShow3
      idris_int_str2.0.0 <- _prim_int_str idris_int_str1_0.0.0
      pure idris_int_str2.0.0
    (C"idr_{U_prim__toStrInt_1}") ->
      -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.1.0)
      -- LINT: Invalid pattern match for (CGrInt idris_int_str1_0.1.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
      ,CGrString[T_String]
      ,Cidr_Main.MkAlbum[{101}
                        ,{102}
                        ,{103}]
      ,Cidr_Prelude.Bool.False[]
      ,Cidr_Prelude.Bool.True[]
      ,Cidr_Prelude.List.::[{258}
                           ,{259}]
      ,Cidr_Prelude.List.Nil[]}
      (CGrInt idris_int_str1_0.1.0) <- fetch idr_Prelude.Show.primNumShow3
      idris_int_str2.1.0 <- _prim_int_str idris_int_str1_0.1.0
      pure idris_int_str2.1.0
  idr_Prelude.Show.primNumShow4_val <- pure (CGrString ccp.0)
  ccp.4 <- pure 0
  idr_Prelude.Show.primNumShow5_val_284 <- pure (CGrInt ccp.4)
  idr_Prelude.Show.primNumShow6_val <- pure (CGrInt 5)
  idris_int_eq0_1.9.0 <- pure ccp.4
  idris_int_eq1_1.9.0 <- pure 5
  idris_int_eq2.9.0 <- _prim_int_eq ccp.4 idris_int_eq1_1.9.0
  ccp.0.9.0 <- case idris_int_eq2.9.0 of
    #False ->
      pure ccp.4
    #True ->
      pure 1
  idr_Prelude.Show.primNumShow5_val_283 <- case ccp.0.9.0 of
    0 ->
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.25.arity.1.0" <- pure 5
      idris_int_lt0_1.1.0 <- pure ccp.4
      idris_int_lt2.1.0 <- _prim_int_lt ccp.4 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.25.arity.1.0"
      ccp.1.1.0 <- case idris_int_lt2.1.0 of
        #False ->
          pure ccp.0.9.0
        #True ->
          pure 1
      case ccp.1.1.0 of
        0 ->
          pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
        #default ->
          pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
    #default ->
      pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
  idr_Prelude.Show.primNumShow5_val_282 <- case idr_Prelude.Show.primNumShow5_val_283 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      ccp.5 <- pure ccp.4
      idr_Prelude.Show.primNumShow6_val_288 <- pure (CGrInt ccp.4)
      idris_int_eq0_1.3 <- pure ccp.4
      idris_int_eq1_1.3 <- pure 5
      idris_int_eq2.3 <- _prim_int_eq ccp.4 idris_int_eq1_1.3
      ccp.0.3 <- case idris_int_eq2.3 of
        #False ->
          pure ccp.4
        #True ->
          pure 1
      case ccp.0.3 of
        0 ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_282 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_299.41.2.arity.1 <- pure #""
      idris_str_eq1_0.2 <- pure ccp.0
      idris_str_eq3.2 <- _prim_string_eq ccp.0 idr_Prelude.Show.primNumShow6_299.41.2.arity.1
      ccp.2.2 <- case idris_str_eq3.2 of
        #False ->
          pure ccp.4
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow6_val_296 <- case ccp.2.2 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" <- pure (Cidr_Prelude.Bool.True)
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_517.0" <- pure idr_Prelude.Show.primNumShow6_val_296
      idr_Prelude.Show.primNumShow6_val_295 <- case idr_Prelude.Show.primNumShow6_val_296 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      case idr_Prelude.Show.primNumShow6_val_295 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_head1_0.0 <- pure ccp.0
          idris_str_head2.0 <- _prim_string_head ccp.0
          idr_Prelude.Show.primNumShow7_val_309 <- pure (CGrInt idris_str_head2.0)
          idr_Prelude.Show.primNumShow8_val <- pure (CGrInt 45)
          idris_int_eq0_1.4 <- pure idris_str_head2.0
          idris_int_eq1_1.4 <- pure 45
          idris_int_eq2.4 <- _prim_int_eq idris_str_head2.0 idris_int_eq1_1.4
          ccp.0.4 <- case idris_int_eq2.4 of
            #False ->
              pure ccp.4
            #True ->
              pure 1
          case ccp.0.4 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
  case idr_Prelude.Show.primNumShow5_val of
    (Cidr_Prelude.Bool.False) ->
      pure ccp.0
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_316 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow7_val_319 <- pure (CGrString #")")
      idris_str_concat1_0.0 <- pure ccp.0
      idris_str_concat2_0.0 <- pure #")"
      idris_str_concat3.0 <- _prim_string_concat ccp.0 idris_str_concat2_0.0
      idr_Prelude.Show.primNumShow7_val_318 <- pure (CGrString idris_str_concat3.0)
      idris_str_concat1_0.1 <- pure #"("
      idris_str_concat2_0.1 <- pure idris_str_concat3.0
      idris_str_concat3.1 <- _prim_string_concat idris_str_concat1_0.1 idris_str_concat3.0
      pure idris_str_concat3.1

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  "idr_{APPLY_0}0_val.5" <- fetch idr_Prelude.Interactive.printLn'2
  ccp.1 <- case "idr_{APPLY_0}0_val.5" of
    (C"idr_{U_Main.{main_0}_1}") ->
      unboxed.CGrString.11 <- "idr_Main.{main_0}.unboxed" idr_Prelude.Interactive.printLn'3
      pure unboxed.CGrString.11
    (C"idr_{U_Main.{main_10}_1}") ->
      "idr_Main.{main_10}1_val.0" <- pure (CGrString #"[")
      "idr_Main.{main_10}4_val.0" <- pure (C"idr_{U_Main.{main_0}_1}")
      "idr_Main.{main_10}4.0" <- store "idr_Main.{main_10}4_val.0"
      "idr_Main.{main_10}5_val.0" <- pure (CGrString #"")
      "idr_Main.{main_10}5.0" <- store "idr_Main.{main_10}5_val.0"
      unboxed.CGrString.6.0 <- "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Main.{main_10}4.0" "idr_Main.{main_10}5.0" idr_Prelude.Interactive.printLn'3
      "idr_Main.{main_10}2_val_486.0" <- pure (CGrString unboxed.CGrString.6.0)
      "idr_Main.{main_10}3_val_489.0" <- pure (CGrString #"]")
      idris_str_concat1_0.6.0 <- pure unboxed.CGrString.6.0
      idris_str_concat2_0.6.0 <- pure #"]"
      idris_str_concat3.6.0 <- _prim_string_concat unboxed.CGrString.6.0 idris_str_concat2_0.6.0
      "idr_Main.{main_10}2_val.0" <- pure (CGrString idris_str_concat3.6.0)
      idris_str_concat1_0.7.0 <- pure #"["
      idris_str_concat2_0.7.0 <- pure idris_str_concat3.6.0
      idris_str_concat3.7.0 <- _prim_string_concat idris_str_concat1_0.7.0 idris_str_concat3.6.0
      pure idris_str_concat3.7.0
    (C"idr_{U_Main.{main_13}_1}") ->
      "idr_Main.{main_13}0_val.0" <- fetch idr_Prelude.Interactive.printLn'3
      -- LINT: Invalid pattern match for (Cidr_Main.MkAlbum "idr_Main.{main_13}1.0" "idr_Main.{main_13}2.0" "idr_Main.{main_13}3.0"). Expected pattern of type: {Cidr_Main.MkAlbum[{101}
                        ,{102}
                        ,{103}]}, but got: {CGrInt[T_Int64]
      ,CGrString[T_String]
      ,Cidr_Main.MkAlbum[{101}
                        ,{102}
                        ,{103}]
      ,Cidr_Prelude.Bool.False[]
      ,Cidr_Prelude.Bool.True[]
      ,Cidr_Prelude.List.::[{258}
                           ,{259}]
      ,Cidr_Prelude.List.Nil[]}
      (Cidr_Main.MkAlbum "idr_Main.{main_13}1.0" "idr_Main.{main_13}2.0" "idr_Main.{main_13}3.0") <- pure "idr_Main.{main_13}0_val.0"
      "idr_Main.{main_13}4_val_492.0" <- pure (CGrString #" by ")
      "idr_Main.{main_13}5_val_494.0" <- pure (CGrString #" (released ")
      "idr_Main.{main_13}7_val.0" <- pure (C"idr_{U_prim__toStrBigInt_1}")
      "idr_Main.{main_13}7.0" <- store "idr_Main.{main_13}7_val.0"
      unboxed.CGrString.18.0 <- idr_Prelude.Show.primNumShow.unboxed "idr_Main.{main_13}7.0" "idr_Main.{main_13}3.0"
      "idr_Main.{main_13}6_val_495.0" <- pure (CGrString unboxed.CGrString.18.0)
      "idr_Main.{main_13}7_val_498.0" <- pure (CGrString #")")
      idris_str_concat1_0.8.0 <- pure unboxed.CGrString.18.0
      idris_str_concat2_0.8.0 <- pure #")"
      idris_str_concat3.8.0 <- _prim_string_concat unboxed.CGrString.18.0 idris_str_concat2_0.8.0
      "idr_Main.{main_13}6_val.0" <- pure (CGrString idris_str_concat3.8.0)
      idris_str_concat1_0.9.0 <- pure #" (released "
      idris_str_concat2_0.9.0 <- pure idris_str_concat3.8.0
      idris_str_concat3.9.0 <- _prim_string_concat idris_str_concat1_0.9.0 idris_str_concat3.8.0
      "idr_Main.{main_13}5_val_493.0" <- pure (CGrString idris_str_concat3.9.0)
      (CGrString idris_str_concat1_0.10.0) <- fetch "idr_Main.{main_13}1.0"
      idris_str_concat2_0.10.0 <- pure idris_str_concat3.9.0
      idris_str_concat3.10.0 <- _prim_string_concat idris_str_concat1_0.10.0 idris_str_concat3.9.0
      "idr_Main.{main_13}5_val.0" <- pure (CGrString idris_str_concat3.10.0)
      idris_str_concat1_0.11.0 <- pure #" by "
      idris_str_concat2_0.11.0 <- pure idris_str_concat3.10.0
      idris_str_concat3.11.0 <- _prim_string_concat idris_str_concat1_0.11.0 idris_str_concat3.10.0
      "idr_Main.{main_13}4_val.0" <- pure (CGrString idris_str_concat3.11.0)
      (CGrString idris_str_concat1_0.12.0) <- fetch "idr_Main.{main_13}2.0"
      idris_str_concat2_0.12.0 <- pure idris_str_concat3.11.0
      idris_str_concat3.12.0 <- _prim_string_concat idris_str_concat1_0.12.0 idris_str_concat3.11.0
      pure idris_str_concat3.12.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.12.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.10.0)
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}2_val.0" <- pure (C"idr_{U_prim__toStrBigInt_1}")
      "idr_Main.{main_1}2.0" <- store "idr_Main.{main_1}2_val.0"
      unboxed.CGrString.14 <- idr_Prelude.Show.primNumShow.unboxed "idr_Main.{main_1}2.0" idr_Prelude.Interactive.printLn'3
      pure unboxed.CGrString.14
    (C"idr_{U_Main.{main_7}_1}") ->
      "idr_Main.{main_7}0_val.5" <- fetch idr_Prelude.Interactive.printLn'3
      ccp.7.5 <- -- LINT: case has non-covered alternative CGrInt
                 -- LINT: case has non-covered alternative CGrString
                 -- LINT: case has non-covered alternative Cidr_Main.MkAlbum
                 -- LINT: case has non-covered alternative Cidr_Prelude.List.::
                 -- LINT: case has non-covered alternative Cidr_Prelude.List.Nil
      case "idr_Main.{main_7}0_val.5" of
        (Cidr_Prelude.Bool.False) ->
          pure #"False"
        (Cidr_Prelude.Bool.True) ->
          pure #"True"
      pure ccp.7.5
  idr_Prelude.Interactive.printLn'5_val_323 <- pure (CGrString ccp.1)
  idr_Prelude.Interactive.printLn'6_val <- pure (CGrString #"\n")
  idris_str_concat1_0.2 <- pure ccp.1
  idris_str_concat2_0.2 <- pure #"\n"
  idris_str_concat3.2 <- _prim_string_concat ccp.1 idris_str_concat2_0.2
  _prim_string_print idris_str_concat3.2
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

idr_Prelude.Show.protectEsc.unboxed idr_Prelude.Show.protectEsc0 idr_Prelude.Show.protectEsc1 idr_Prelude.Show.protectEsc2 =
  idr_Prelude.Show.protectEsc3.41.6.arity.1 <- pure #""
  (CGrString idris_str_eq1_0.3) <- fetch idr_Prelude.Show.protectEsc2
  idris_str_eq3.3 <- _prim_string_eq idris_str_eq1_0.3 idr_Prelude.Show.protectEsc3.41.6.arity.1
  ccp.2.3 <- case idris_str_eq3.3 of
    #False ->
      pure 0
    #True ->
      pure 1
  idr_Prelude.Show.protectEsc3_val_329 <- case ccp.2.3 of
    0 ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1" <- pure (Cidr_Prelude.Bool.True)
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_517.1" <- pure idr_Prelude.Show.protectEsc3_val_329
  idr_Prelude.Show.protectEsc3_val_328 <- case idr_Prelude.Show.protectEsc3_val_329 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
    (Cidr_Prelude.Bool.True) ->
      pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
  idr_Prelude.Show.protectEsc3_val_327 <- case idr_Prelude.Show.protectEsc3_val_328 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Basics.Yes) ->
      idris_str_head1_0.1 <- pure idris_str_eq1_0.3
      idris_str_head2.1 <- _prim_string_head idris_str_eq1_0.3
      idr_Prelude.Show.protectEsc4_val_337 <- pure (CGrInt idris_str_head2.1)
      "idr_{APPLY_0}0_val.6" <- fetch idr_Prelude.Show.protectEsc0
      case "idr_{APPLY_0}0_val.6" of
        (C"idr_{U_Prelude.Chars.isDigit_1}") ->
          idr_Prelude.Chars.isDigit1_val_40.0 <- pure (CGrInt 48)
          idris_int_eq0_1.8.0 <- pure idris_str_head2.1
          idris_int_eq1_1.8.0 <- pure 48
          idris_int_eq2.8.0 <- _prim_int_eq idris_str_head2.1 idris_int_eq1_1.8.0
          ccp.0.8.0 <- case idris_int_eq2.8.0 of
            #False ->
              pure 0
            #True ->
              pure 1
          idr_Prelude.Chars.isDigit1_val_39.0 <- case ccp.0.8.0 of
            0 ->
              "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.24.arity.1.0" <- pure 48
              idris_int_lt0_1.0.0 <- pure idris_str_head2.1
              idris_int_lt2.0.0 <- _prim_int_lt idris_str_head2.1 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.24.arity.1.0"
              ccp.1.0.0 <- case idris_int_lt2.0.0 of
                #False ->
                  pure ccp.0.8.0
                #True ->
                  pure 1
              case ccp.1.0.0 of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
            #default ->
              pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
          idr_Prelude.Chars.isDigit1_val.0 <- case idr_Prelude.Chars.isDigit1_val_39.0 of
            (Cidr_Prelude.Interfaces.GT) ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1"
            #default ->
              idris_int_eq0_1.5 <- pure idris_str_head2.1
              idris_int_eq1_1.5 <- pure 48
              idris_int_eq2.5 <- _prim_int_eq idris_str_head2.1 idris_int_eq1_1.5
              ccp.0.5 <- case idris_int_eq2.5 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              case ccp.0.5 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1"
          case idr_Prelude.Chars.isDigit1_val.0 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idr_Prelude.Chars.isDigit2_val_49.0 <- pure (CGrInt 57)
              idris_int_eq0_1.8.1 <- pure idris_str_head2.1
              idris_int_eq1_1.8.1 <- pure 57
              idris_int_eq2.8.1 <- _prim_int_eq idris_str_head2.1 idris_int_eq1_1.8.1
              ccp.0.8.1 <- case idris_int_eq2.8.1 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              idr_Prelude.Chars.isDigit2_val_48.0 <- case ccp.0.8.1 of
                0 ->
                  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.24.arity.1.1" <- pure 57
                  idris_int_lt0_1.0.1 <- pure idris_str_head2.1
                  idris_int_lt2.0.1 <- _prim_int_lt idris_str_head2.1 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.24.arity.1.1"
                  ccp.1.0.1 <- case idris_int_lt2.0.1 of
                    #False ->
                      pure ccp.0.8.1
                    #True ->
                      pure 1
                  case ccp.1.0.1 of
                    0 ->
                      pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                    #default ->
                      pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
              case idr_Prelude.Chars.isDigit2_val_48.0 of
                (Cidr_Prelude.Interfaces.LT) ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1"
                #default ->
                  idris_int_eq0_1.6 <- pure idris_str_head2.1
                  idris_int_eq1_1.6 <- pure 57
                  idris_int_eq2.6 <- _prim_int_eq idris_str_head2.1 idris_int_eq1_1.6
                  ccp.0.6 <- case idris_int_eq2.6 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  case ccp.0.6 of
                    0 ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                    #default ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1"
        (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
          "idr_Prelude.Show.{showLitChar_21}1_val_504.0" <- pure (CGrInt 72)
          idris_int_eq0_1.7 <- pure idris_str_head2.1
          idris_int_eq1_1.7 <- pure 72
          idris_int_eq2.7 <- _prim_int_eq idris_str_head2.1 idris_int_eq1_1.7
          ccp.0.7 <- case idris_int_eq2.7 of
            #False ->
              pure 0
            #True ->
              pure 1
          case ccp.0.7 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1"
  ccp.6 <- case idr_Prelude.Show.protectEsc3_val_327 of
    (Cidr_Prelude.Bool.False) ->
      pure idr_Prelude.Show.protectEsc3.41.6.arity.1
    (Cidr_Prelude.Bool.True) ->
      pure #"\\&"
  idr_Prelude.Show.protectEsc3_val_326 <- pure (CGrString ccp.6)
  idris_str_concat1_0.3 <- pure ccp.6
  idris_str_concat2_0.3 <- pure idris_str_eq1_0.3
  idris_str_concat3.3 <- _prim_string_concat ccp.6 idris_str_eq1_0.3
  idr_Prelude.Show.protectEsc3_val <- pure (CGrString idris_str_concat3.3)
  (CGrString idris_str_concat1_0.4) <- fetch idr_Prelude.Show.protectEsc1
  idris_str_concat2_0.4 <- pure idris_str_concat3.3
  idris_str_concat3.4 <- _prim_string_concat idris_str_concat1_0.4 idris_str_concat3.3
  pure idris_str_concat3.4 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.4) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.3)

idr_Prelude.Show.showLitString.unboxed idr_Prelude.Show.showLitString0 idr_Prelude.Show.showLitString1.41.arity.1 =
  idr_Prelude.Show.showLitString0_val <- fetch idr_Prelude.Show.showLitString0
  case idr_Prelude.Show.showLitString0_val of
    (Cidr_Prelude.List.:: idr_Prelude.Show.showLitString2 idr_Prelude.Show.showLitString3) ->
      idr_Prelude.Show.showLitString2_val <- fetch idr_Prelude.Show.showLitString2
      (CGrInt idr_Prelude.Show.showLitString_cpat_LInt64_34) <- pure idr_Prelude.Show.showLitString2_val
      case idr_Prelude.Show.showLitString_cpat_LInt64_34 of
        34 ->
          idr_Prelude.Show.showLitString4_val <- pure (CGrString #"\\\"")
          unboxed.CGrString.15 <- idr_Prelude.Show.showLitString.unboxed idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1.41.arity.1
          idr_Prelude.Show.showLitString5_val <- pure (CGrString unboxed.CGrString.15)
          idris_str_concat1_0.5 <- pure #"\\\""
          idris_str_concat2_0.5 <- pure unboxed.CGrString.15
          idris_str_concat3.5 <- _prim_string_concat idris_str_concat1_0.5 unboxed.CGrString.15
          pure idris_str_concat3.5
        #default ->
          idr_Prelude.Show.showLitChar0_val.0 <- pure idr_Prelude.Show.showLitString2_val
          (CGrInt idr_Prelude.Show.showLitChar_cpat_LInt64_7.0) <- pure idr_Prelude.Show.showLitString2_val
          idr_Prelude.Show.showLitString4_val_379 <- case idr_Prelude.Show.showLitChar_cpat_LInt64_7.0 of
            7 ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_14}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_14}_1}")
            8 ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_15}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_15}_1}")
            9 ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_16}_1}")
            10 ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_17}_1}")
            11 ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_18}_1}")
            12 ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_19}_1}")
            13 ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_20}_1}")
            14 ->
              idr_Prelude.Show.showLitChar1_val.0 <- pure (C"idr_{U_Prelude.Show.{showLitChar_21}_1}")
              idr_Prelude.Show.showLitChar1.0 <- store idr_Prelude.Show.showLitChar1_val.0
              idr_Prelude.Show.showLitChar2_val.0 <- pure (CGrString #"\\SO")
              idr_Prelude.Show.showLitChar2.0 <- store idr_Prelude.Show.showLitChar2_val.0
              pure (C"idr_{U_Prelude.Show.protectEsc_1}" idr_Prelude.Show.showLitChar1.0 idr_Prelude.Show.showLitChar2.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.protectEsc_1}" idr_Prelude.Show.showLitChar1.0 idr_Prelude.Show.showLitChar2.0)
            92 ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_22}_1}")
            127 ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_23}_1}")
            #default ->
              (CGrInt idr_Prelude.Show.showLitChar0.41.8.arity.1.0) <- pure idr_Prelude.Show.showLitString2_val
              idris_ls_ext3.0 <- _prim_int_add idr_Prelude.Show.showLitChar0.41.8.arity.1.0 0
              idr_Prelude.Show.showLitChar:asciiTab:101_val.0 <- pure (CGrString #"NUL")
              idr_Prelude.Show.showLitChar:asciiTab:101.0 <- store idr_Prelude.Show.showLitChar:asciiTab:101_val.0
              idr_Prelude.Show.showLitChar:asciiTab:102_val_575.0 <- pure (CGrString #"SOH")
              idr_Prelude.Show.showLitChar:asciiTab:102.0 <- store idr_Prelude.Show.showLitChar:asciiTab:102_val_575.0
              idr_Prelude.Show.showLitChar:asciiTab:103_val_576.0 <- pure (CGrString #"STX")
              idr_Prelude.Show.showLitChar:asciiTab:103.0 <- store idr_Prelude.Show.showLitChar:asciiTab:103_val_576.0
              idr_Prelude.Show.showLitChar:asciiTab:104_val_577.0 <- pure (CGrString #"ETX")
              idr_Prelude.Show.showLitChar:asciiTab:104.0 <- store idr_Prelude.Show.showLitChar:asciiTab:104_val_577.0
              idr_Prelude.Show.showLitChar:asciiTab:105_val_578.0 <- pure (CGrString #"EOT")
              idr_Prelude.Show.showLitChar:asciiTab:105.0 <- store idr_Prelude.Show.showLitChar:asciiTab:105_val_578.0
              idr_Prelude.Show.showLitChar:asciiTab:106_val_579.0 <- pure (CGrString #"ENQ")
              idr_Prelude.Show.showLitChar:asciiTab:106.0 <- store idr_Prelude.Show.showLitChar:asciiTab:106_val_579.0
              idr_Prelude.Show.showLitChar:asciiTab:107_val_580.0 <- pure (CGrString #"ACK")
              idr_Prelude.Show.showLitChar:asciiTab:107.0 <- store idr_Prelude.Show.showLitChar:asciiTab:107_val_580.0
              idr_Prelude.Show.showLitChar:asciiTab:108_val_581.0 <- pure (CGrString #"BEL")
              idr_Prelude.Show.showLitChar:asciiTab:108.0 <- store idr_Prelude.Show.showLitChar:asciiTab:108_val_581.0
              idr_Prelude.Show.showLitChar:asciiTab:109_val_582.0 <- pure (CGrString #"BS")
              idr_Prelude.Show.showLitChar:asciiTab:109.0 <- store idr_Prelude.Show.showLitChar:asciiTab:109_val_582.0
              idr_Prelude.Show.showLitChar:asciiTab:1010_val_583.0 <- pure (CGrString #"HT")
              idr_Prelude.Show.showLitChar:asciiTab:1010.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1010_val_583.0
              idr_Prelude.Show.showLitChar:asciiTab:1011_val_584.0 <- pure (CGrString #"LF")
              idr_Prelude.Show.showLitChar:asciiTab:1011.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1011_val_584.0
              idr_Prelude.Show.showLitChar:asciiTab:1012_val_585.0 <- pure (CGrString #"VT")
              idr_Prelude.Show.showLitChar:asciiTab:1012.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1012_val_585.0
              idr_Prelude.Show.showLitChar:asciiTab:1013_val_586.0 <- pure (CGrString #"FF")
              idr_Prelude.Show.showLitChar:asciiTab:1013.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1013_val_586.0
              idr_Prelude.Show.showLitChar:asciiTab:1014_val_587.0 <- pure (CGrString #"CR")
              idr_Prelude.Show.showLitChar:asciiTab:1014.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1014_val_587.0
              idr_Prelude.Show.showLitChar:asciiTab:1015_val_588.0 <- pure (CGrString #"SO")
              idr_Prelude.Show.showLitChar:asciiTab:1015.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1015_val_588.0
              idr_Prelude.Show.showLitChar:asciiTab:1016_val_589.0 <- pure (CGrString #"SI")
              idr_Prelude.Show.showLitChar:asciiTab:1016.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1016_val_589.0
              idr_Prelude.Show.showLitChar:asciiTab:1017_val_590.0 <- pure (CGrString #"DLE")
              idr_Prelude.Show.showLitChar:asciiTab:1017.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1017_val_590.0
              idr_Prelude.Show.showLitChar:asciiTab:1018_val_591.0 <- pure (CGrString #"DC1")
              idr_Prelude.Show.showLitChar:asciiTab:1018.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1018_val_591.0
              idr_Prelude.Show.showLitChar:asciiTab:1019_val_592.0 <- pure (CGrString #"DC2")
              idr_Prelude.Show.showLitChar:asciiTab:1019.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1019_val_592.0
              idr_Prelude.Show.showLitChar:asciiTab:1020_val_593.0 <- pure (CGrString #"DC3")
              idr_Prelude.Show.showLitChar:asciiTab:1020.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1020_val_593.0
              idr_Prelude.Show.showLitChar:asciiTab:1021_val_594.0 <- pure (CGrString #"DC4")
              idr_Prelude.Show.showLitChar:asciiTab:1021.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1021_val_594.0
              idr_Prelude.Show.showLitChar:asciiTab:1022_val_595.0 <- pure (CGrString #"NAK")
              idr_Prelude.Show.showLitChar:asciiTab:1022.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1022_val_595.0
              idr_Prelude.Show.showLitChar:asciiTab:1023_val_596.0 <- pure (CGrString #"SYN")
              idr_Prelude.Show.showLitChar:asciiTab:1023.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1023_val_596.0
              idr_Prelude.Show.showLitChar:asciiTab:1024_val_597.0 <- pure (CGrString #"ETB")
              idr_Prelude.Show.showLitChar:asciiTab:1024.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1024_val_597.0
              idr_Prelude.Show.showLitChar:asciiTab:1025_val_598.0 <- pure (CGrString #"CAN")
              idr_Prelude.Show.showLitChar:asciiTab:1025.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1025_val_598.0
              idr_Prelude.Show.showLitChar:asciiTab:1026_val_599.0 <- pure (CGrString #"EM")
              idr_Prelude.Show.showLitChar:asciiTab:1026.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1026_val_599.0
              idr_Prelude.Show.showLitChar:asciiTab:1027_val_600.0 <- pure (CGrString #"SUB")
              idr_Prelude.Show.showLitChar:asciiTab:1027.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1027_val_600.0
              idr_Prelude.Show.showLitChar:asciiTab:1028_val_601.0 <- pure (CGrString #"ESC")
              idr_Prelude.Show.showLitChar:asciiTab:1028.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1028_val_601.0
              idr_Prelude.Show.showLitChar:asciiTab:1029_val_602.0 <- pure (CGrString #"FS")
              idr_Prelude.Show.showLitChar:asciiTab:1029.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1029_val_602.0
              idr_Prelude.Show.showLitChar:asciiTab:1030_val_603.0 <- pure (CGrString #"GS")
              idr_Prelude.Show.showLitChar:asciiTab:1030.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1030_val_603.0
              idr_Prelude.Show.showLitChar:asciiTab:1031_val_604.0 <- pure (CGrString #"RS")
              idr_Prelude.Show.showLitChar:asciiTab:1031.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1031_val_604.0
              idr_Prelude.Show.showLitChar:asciiTab:1032_val_605.0 <- pure (CGrString #"US")
              idr_Prelude.Show.showLitChar:asciiTab:1032.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1032_val_605.0
              idr_Prelude.Show.showLitChar:asciiTab:1033_val.0 <- pure (Cidr_Prelude.List.Nil)
              idr_Prelude.Show.showLitChar:asciiTab:1033.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1033_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1032_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1032.0 idr_Prelude.Show.showLitChar:asciiTab:1033.0)
              idr_Prelude.Show.showLitChar:asciiTab:1032_606.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1032_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1031_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1031.0 idr_Prelude.Show.showLitChar:asciiTab:1032_606.0)
              idr_Prelude.Show.showLitChar:asciiTab:1031_607.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1031_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1030_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1030.0 idr_Prelude.Show.showLitChar:asciiTab:1031_607.0)
              idr_Prelude.Show.showLitChar:asciiTab:1030_608.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1030_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1029_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1029.0 idr_Prelude.Show.showLitChar:asciiTab:1030_608.0)
              idr_Prelude.Show.showLitChar:asciiTab:1029_609.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1029_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1028_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1028.0 idr_Prelude.Show.showLitChar:asciiTab:1029_609.0)
              idr_Prelude.Show.showLitChar:asciiTab:1028_610.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1028_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1027_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1027.0 idr_Prelude.Show.showLitChar:asciiTab:1028_610.0)
              idr_Prelude.Show.showLitChar:asciiTab:1027_611.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1027_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1026_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1026.0 idr_Prelude.Show.showLitChar:asciiTab:1027_611.0)
              idr_Prelude.Show.showLitChar:asciiTab:1026_612.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1026_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1025_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1025.0 idr_Prelude.Show.showLitChar:asciiTab:1026_612.0)
              idr_Prelude.Show.showLitChar:asciiTab:1025_613.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1025_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1024_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1024.0 idr_Prelude.Show.showLitChar:asciiTab:1025_613.0)
              idr_Prelude.Show.showLitChar:asciiTab:1024_614.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1024_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1023_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1023.0 idr_Prelude.Show.showLitChar:asciiTab:1024_614.0)
              idr_Prelude.Show.showLitChar:asciiTab:1023_615.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1023_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1022_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1022.0 idr_Prelude.Show.showLitChar:asciiTab:1023_615.0)
              idr_Prelude.Show.showLitChar:asciiTab:1022_616.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1022_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1021_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1021.0 idr_Prelude.Show.showLitChar:asciiTab:1022_616.0)
              idr_Prelude.Show.showLitChar:asciiTab:1021_617.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1021_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1020_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1020.0 idr_Prelude.Show.showLitChar:asciiTab:1021_617.0)
              idr_Prelude.Show.showLitChar:asciiTab:1020_618.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1020_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1019_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1019.0 idr_Prelude.Show.showLitChar:asciiTab:1020_618.0)
              idr_Prelude.Show.showLitChar:asciiTab:1019_619.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1019_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1018_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1018.0 idr_Prelude.Show.showLitChar:asciiTab:1019_619.0)
              idr_Prelude.Show.showLitChar:asciiTab:1018_620.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1018_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1017_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1017.0 idr_Prelude.Show.showLitChar:asciiTab:1018_620.0)
              idr_Prelude.Show.showLitChar:asciiTab:1017_621.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1017_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1016_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1016.0 idr_Prelude.Show.showLitChar:asciiTab:1017_621.0)
              idr_Prelude.Show.showLitChar:asciiTab:1016_622.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1016_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1015_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1015.0 idr_Prelude.Show.showLitChar:asciiTab:1016_622.0)
              idr_Prelude.Show.showLitChar:asciiTab:1015_623.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1015_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1014_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1014.0 idr_Prelude.Show.showLitChar:asciiTab:1015_623.0)
              idr_Prelude.Show.showLitChar:asciiTab:1014_624.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1014_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1013_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1013.0 idr_Prelude.Show.showLitChar:asciiTab:1014_624.0)
              idr_Prelude.Show.showLitChar:asciiTab:1013_625.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1013_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1012_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1012.0 idr_Prelude.Show.showLitChar:asciiTab:1013_625.0)
              idr_Prelude.Show.showLitChar:asciiTab:1012_626.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1012_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1011_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1011.0 idr_Prelude.Show.showLitChar:asciiTab:1012_626.0)
              idr_Prelude.Show.showLitChar:asciiTab:1011_627.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1011_val.0
              idr_Prelude.Show.showLitChar:asciiTab:1010_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1010.0 idr_Prelude.Show.showLitChar:asciiTab:1011_627.0)
              idr_Prelude.Show.showLitChar:asciiTab:1010_628.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1010_val.0
              idr_Prelude.Show.showLitChar:asciiTab:109_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:109.0 idr_Prelude.Show.showLitChar:asciiTab:1010_628.0)
              idr_Prelude.Show.showLitChar:asciiTab:109_629.0 <- store idr_Prelude.Show.showLitChar:asciiTab:109_val.0
              idr_Prelude.Show.showLitChar:asciiTab:108_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:108.0 idr_Prelude.Show.showLitChar:asciiTab:109_629.0)
              idr_Prelude.Show.showLitChar:asciiTab:108_630.0 <- store idr_Prelude.Show.showLitChar:asciiTab:108_val.0
              idr_Prelude.Show.showLitChar:asciiTab:107_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:107.0 idr_Prelude.Show.showLitChar:asciiTab:108_630.0)
              idr_Prelude.Show.showLitChar:asciiTab:107_631.0 <- store idr_Prelude.Show.showLitChar:asciiTab:107_val.0
              idr_Prelude.Show.showLitChar:asciiTab:106_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:106.0 idr_Prelude.Show.showLitChar:asciiTab:107_631.0)
              idr_Prelude.Show.showLitChar:asciiTab:106_632.0 <- store idr_Prelude.Show.showLitChar:asciiTab:106_val.0
              idr_Prelude.Show.showLitChar:asciiTab:105_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:105.0 idr_Prelude.Show.showLitChar:asciiTab:106_632.0)
              idr_Prelude.Show.showLitChar:asciiTab:105_633.0 <- store idr_Prelude.Show.showLitChar:asciiTab:105_val.0
              idr_Prelude.Show.showLitChar:asciiTab:104_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:104.0 idr_Prelude.Show.showLitChar:asciiTab:105_633.0)
              idr_Prelude.Show.showLitChar:asciiTab:104_634.0 <- store idr_Prelude.Show.showLitChar:asciiTab:104_val.0
              idr_Prelude.Show.showLitChar:asciiTab:103_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:103.0 idr_Prelude.Show.showLitChar:asciiTab:104_634.0)
              idr_Prelude.Show.showLitChar:asciiTab:103_635.0 <- store idr_Prelude.Show.showLitChar:asciiTab:103_val.0
              idr_Prelude.Show.showLitChar:asciiTab:102_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:102.0 idr_Prelude.Show.showLitChar:asciiTab:103_635.0)
              idr_Prelude.Show.showLitChar:asciiTab:102_636.0 <- store idr_Prelude.Show.showLitChar:asciiTab:102_val.0
              idr_Prelude.Show.showLitChar3_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:101.0 idr_Prelude.Show.showLitChar:asciiTab:102_636.0)
              idr_Prelude.Show.showLitChar3_351.0 <- store idr_Prelude.Show.showLitChar3_val.0
              idr_Prelude.Show.showLitChar1_val_343.0 <- idr_Prelude.Show.showLitChar:getAt:10 idris_ls_ext3.0 idr_Prelude.Show.showLitChar3_351.0
              case idr_Prelude.Show.showLitChar1_val_343.0 of
                (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar2_354.0) ->
                  pure (C"idr_{U_Prelude.Show.{showLitChar_24}_1}" idr_Prelude.Show.showLitChar2_354.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_24}_1}" idr_Prelude.Show.showLitChar2_354.0)
                (Cidr_Prelude.Maybe.Nothing) ->
                  idr_Prelude.Show.showLitChar2_val_356.0 <- pure (CGrInt 127)
                  (CGrInt idris_int_eq0_1.8.2) <- pure idr_Prelude.Show.showLitString2_val
                  idris_int_eq1_1.8.2 <- pure 127
                  idris_int_eq2.8.2 <- _prim_int_eq idris_int_eq0_1.8.2 idris_int_eq1_1.8.2
                  ccp.0.8.2 <- case idris_int_eq2.8.2 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  idr_Prelude.Show.showLitChar2_val_355.0 <- case ccp.0.8.2 of
                    0 ->
                      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.24.arity.1.2" <- pure 127
                      (CGrInt idris_int_lt0_1.0.2) <- pure idr_Prelude.Show.showLitString2_val
                      idris_int_lt2.0.2 <- _prim_int_lt idris_int_lt0_1.0.2 "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.24.arity.1.2"
                      ccp.1.0.2 <- case idris_int_lt2.0.2 of
                        #False ->
                          pure ccp.0.8.2
                        #True ->
                          pure 1
                      case ccp.1.0.2 of
                        0 ->
                          pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                        #default ->
                          pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
                    #default ->
                      pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
                  case idr_Prelude.Show.showLitChar2_val_355.0 of
                    (Cidr_Prelude.Interfaces.GT) ->
                      pure (C"idr_{U_Prelude.Show.{showLitChar_25}_1}" idr_Prelude.Show.showLitString2) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_25}_1}" idr_Prelude.Show.showLitString2)
                    #default ->
                      pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitString2) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitString2)
          unboxed.CGrString.16 <- idr_Prelude.Show.showLitString.unboxed idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1.41.arity.1
          idr_Prelude.Show.showLitString5_val_381 <- pure (CGrString unboxed.CGrString.16)
          idr_Prelude.Show.showLitString5_382 <- store idr_Prelude.Show.showLitString5_val_381
          "idr_{APPLY_0}0_val.7" <- pure idr_Prelude.Show.showLitString4_val_379
          case idr_Prelude.Show.showLitString4_val_379 of
            (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_439.7" "idr_{APPLY_0}3.7") ->
              idr_Prelude.Show.protectEsc.unboxed "idr_{APPLY_0}2_439.7" "idr_{APPLY_0}3.7" idr_Prelude.Show.showLitString5_382
            (C"idr_{U_Prelude.Show.{showLitChar_14}_1}") ->
              "idr_Prelude.Show.{showLitChar_14}1_val.0" <- pure (CGrString #"\\a")
              idris_str_concat1_0.13.0 <- pure #"\\a"
              idris_str_concat2_0.13.0 <- pure unboxed.CGrString.16
              idris_str_concat3.13.0 <- _prim_string_concat idris_str_concat1_0.13.0 unboxed.CGrString.16
              pure idris_str_concat3.13.0
            (C"idr_{U_Prelude.Show.{showLitChar_15}_1}") ->
              "idr_Prelude.Show.{showLitChar_15}1_val.0" <- pure (CGrString #"\\b")
              idris_str_concat1_0.14.0 <- pure #"\\b"
              idris_str_concat2_0.14.0 <- pure unboxed.CGrString.16
              idris_str_concat3.14.0 <- _prim_string_concat idris_str_concat1_0.14.0 unboxed.CGrString.16
              pure idris_str_concat3.14.0
            (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
              "idr_Prelude.Show.{showLitChar_16}1_val.0" <- pure (CGrString #"\\t")
              idris_str_concat1_0.15.0 <- pure #"\\t"
              idris_str_concat2_0.15.0 <- pure unboxed.CGrString.16
              idris_str_concat3.15.0 <- _prim_string_concat idris_str_concat1_0.15.0 unboxed.CGrString.16
              pure idris_str_concat3.15.0
            (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
              "idr_Prelude.Show.{showLitChar_17}1_val.0" <- pure (CGrString #"\\n")
              idris_str_concat1_0.16.0 <- pure #"\\n"
              idris_str_concat2_0.16.0 <- pure unboxed.CGrString.16
              idris_str_concat3.16.0 <- _prim_string_concat idris_str_concat1_0.16.0 unboxed.CGrString.16
              pure idris_str_concat3.16.0
            (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
              "idr_Prelude.Show.{showLitChar_18}1_val.0" <- pure (CGrString #"\\v")
              idris_str_concat1_0.17.0 <- pure #"\\v"
              idris_str_concat2_0.17.0 <- pure unboxed.CGrString.16
              idris_str_concat3.17.0 <- _prim_string_concat idris_str_concat1_0.17.0 unboxed.CGrString.16
              pure idris_str_concat3.17.0
            (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
              "idr_Prelude.Show.{showLitChar_19}1_val.0" <- pure (CGrString #"\\f")
              idris_str_concat1_0.18.0 <- pure #"\\f"
              idris_str_concat2_0.18.0 <- pure unboxed.CGrString.16
              idris_str_concat3.18.0 <- _prim_string_concat idris_str_concat1_0.18.0 unboxed.CGrString.16
              pure idris_str_concat3.18.0
            (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
              "idr_Prelude.Show.{showLitChar_20}1_val.0" <- pure (CGrString #"\\r")
              idris_str_concat1_0.19.0 <- pure #"\\r"
              idris_str_concat2_0.19.0 <- pure unboxed.CGrString.16
              idris_str_concat3.19.0 <- _prim_string_concat idris_str_concat1_0.19.0 unboxed.CGrString.16
              pure idris_str_concat3.19.0
            (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
              "idr_Prelude.Show.{showLitChar_22}1_val.0" <- pure (CGrString #"\\\\")
              idris_str_concat1_0.20.0 <- pure #"\\\\"
              idris_str_concat2_0.20.0 <- pure unboxed.CGrString.16
              idris_str_concat3.20.0 <- _prim_string_concat idris_str_concat1_0.20.0 unboxed.CGrString.16
              pure idris_str_concat3.20.0
            (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
              "idr_Prelude.Show.{showLitChar_23}1_val.0" <- pure (CGrString #"\\DEL")
              idris_str_concat1_0.21.0 <- pure #"\\DEL"
              idris_str_concat2_0.21.0 <- pure unboxed.CGrString.16
              idris_str_concat3.21.0 <- _prim_string_concat idris_str_concat1_0.21.0 unboxed.CGrString.16
              pure idris_str_concat3.21.0
            (C"idr_{U_Prelude.Show.{showLitChar_24}_1}" "idr_{APPLY_0}2_440.7") ->
              (CGrString idris_str_concat1_0.22.0) <- fetch "idr_{APPLY_0}2_440.7"
              idris_str_concat2_0.22.0 <- pure unboxed.CGrString.16
              idris_str_concat3.22.0 <- _prim_string_concat idris_str_concat1_0.22.0 unboxed.CGrString.16
              "idr_Prelude.Show.{showLitChar_24}3_val.0" <- pure (CGrString idris_str_concat3.22.0)
              "idr_Prelude.Show.{showLitChar_24}2.49.6.arity.1.0" <- pure 92
              idris_str_cons2_0.0.0 <- pure idris_str_concat3.22.0
              idris_str_cons3.0.0 <- _prim_string_cons "idr_Prelude.Show.{showLitChar_24}2.49.6.arity.1.0" idris_str_concat3.22.0
              pure idris_str_cons3.0.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.22.0)
            (C"idr_{U_Prelude.Show.{showLitChar_25}_1}" "idr_{APPLY_0}2_441.7") ->
              (CGrInt "idr_{APPLY_0}2_441.7.49.3.arity.1") <- fetch "idr_{APPLY_0}2_441.7"
              "idr_Prelude.Show.{showLitChar_25}3_val_507.0" <- pure (C"idr_{U_Prelude.Chars.isDigit_1}")
              "idr_Prelude.Show.{showLitChar_25}3.0" <- store "idr_Prelude.Show.{showLitChar_25}3_val_507.0"
              "idr_Prelude.Show.{showLitChar_25}5_val.0" <- pure (C"idr_{U_prim__toStrInt_1}")
              "idr_Prelude.Show.{showLitChar_25}5.0" <- store "idr_Prelude.Show.{showLitChar_25}5_val.0"
              "idr_Prelude.Show.{showLitChar_25}7_val.0" <- pure (CGrInt "idr_{APPLY_0}2_441.7.49.3.arity.1")
              "idr_Prelude.Show.{showLitChar_25}7.0" <- store "idr_Prelude.Show.{showLitChar_25}7_val.0"
              unboxed.CGrString.19.0 <- idr_Prelude.Show.primNumShow.unboxed "idr_Prelude.Show.{showLitChar_25}5.0" "idr_Prelude.Show.{showLitChar_25}7.0"
              "idr_Prelude.Show.{showLitChar_25}4_val.0" <- pure (CGrString unboxed.CGrString.19.0)
              "idr_Prelude.Show.{showLitChar_25}4_509.0" <- store "idr_Prelude.Show.{showLitChar_25}4_val.0"
              unboxed.CGrString.20.0 <- idr_Prelude.Show.protectEsc.unboxed "idr_Prelude.Show.{showLitChar_25}3.0" "idr_Prelude.Show.{showLitChar_25}4_509.0" idr_Prelude.Show.showLitString5_382
              "idr_Prelude.Show.{showLitChar_25}3_val.0" <- pure (CGrString unboxed.CGrString.20.0)
              "idr_Prelude.Show.{showLitChar_25}2.49.7.arity.1.0" <- pure 92
              idris_str_cons2_0.0.1 <- pure unboxed.CGrString.20.0
              idris_str_cons3.0.1 <- _prim_string_cons "idr_Prelude.Show.{showLitChar_25}2.49.7.arity.1.0" unboxed.CGrString.20.0
              pure idris_str_cons3.0.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_{APPLY_0}2_441.7.49.3.arity.1")
            (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_442.7") ->
              (CGrInt "idr_{APPLY_0}2_442.7.49.4.arity.1") <- fetch "idr_{APPLY_0}2_442.7"
              idris_str_cons2_0.0.2 <- pure unboxed.CGrString.16
              idris_str_cons3.0.2 <- _prim_string_cons "idr_{APPLY_0}2_442.7.49.4.arity.1" unboxed.CGrString.16
              pure idris_str_cons3.0.2 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_{APPLY_0}2_442.7.49.4.arity.1")
    (Cidr_Prelude.List.Nil) ->
      pure idr_Prelude.Show.showLitString1.41.arity.1

idr_Prelude.List.sortBy idr_Prelude.List.sortBy1 idr_Prelude.List.sortBy2 =
  idr_Prelude.List.sortBy2_val <- fetch idr_Prelude.List.sortBy2
  case idr_Prelude.List.sortBy2_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.sortBy3 idr_Prelude.List.sortBy4) ->
      idr_Prelude.List.sortBy4_val <- fetch idr_Prelude.List.sortBy4
      case idr_Prelude.List.sortBy4_val of
        (Cidr_Prelude.List.Nil) ->
          idr_Prelude.List.sortBy5_val <- pure (Cidr_Prelude.List.Nil)
          idr_Prelude.List.sortBy5 <- store idr_Prelude.List.sortBy5_val
          pure (Cidr_Prelude.List.:: idr_Prelude.List.sortBy3 idr_Prelude.List.sortBy5) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.List.sortBy3 idr_Prelude.List.sortBy5)
        #default ->
          idr_Prelude.List.sortBy8_val <- pure (C"idr_{U_Prelude.List.{sortBy_26}_1}")
          idr_Prelude.List.sortBy8 <- store idr_Prelude.List.sortBy8_val
          idr_Prelude.List.sortBy5_val_389 <- idr_Prelude.List.sortBy:splitRec:2 idr_Prelude.List.sortBy2 idr_Prelude.List.sortBy2 idr_Prelude.List.sortBy8
          (Cidr_Builtins.MkPair idr_Prelude.List.sortBy6_394 idr_Prelude.List.sortBy7_395) <- pure idr_Prelude.List.sortBy5_val_389
          idr_Prelude.List.sortBy9_val <- idr_Prelude.List.sortBy idr_Prelude.List.sortBy1 idr_Prelude.List.sortBy6_394
          idr_Prelude.List.sortBy9_399 <- store idr_Prelude.List.sortBy9_val
          idr_Prelude.List.sortBy10_val <- idr_Prelude.List.sortBy idr_Prelude.List.sortBy1 idr_Prelude.List.sortBy7_395
          idr_Prelude.List.sortBy10_401 <- store idr_Prelude.List.sortBy10_val
          idr_Prelude.List.mergeBy idr_Prelude.List.sortBy1 idr_Prelude.List.sortBy9_399 idr_Prelude.List.sortBy10_401
    (Cidr_Prelude.List.Nil) ->
      pure idr_Prelude.List.sortBy2_val

"idr_Main.{main_0}.unboxed" "idr_Main.{main_0}0" =
  "idr_Main.{main_0}2.41.12.arity.1" <- pure #""
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.4)
  -- LINT: Invalid pattern match for (CGrString idris_str_eq1_0.4). Expected pattern of type: {CGrString[T_String]}, but got: {CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Main.MkAlbum[{101}
                    ,{102}
                    ,{103}]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{258}
                       ,{259}]
  ,Cidr_Prelude.List.Nil[]}
  (CGrString idris_str_eq1_0.4) <- fetch "idr_Main.{main_0}0"
  idris_str_eq3.4 <- _prim_string_eq idris_str_eq1_0.4 "idr_Main.{main_0}2.41.12.arity.1"
  ccp.2.4 <- case idris_str_eq3.4 of
    #False ->
      pure 0
    #True ->
      pure 1
  "idr_Main.{main_0}2_val_447" <- case ccp.2.4 of
    0 ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.2" <- pure (Cidr_Prelude.Bool.True)
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_517.2" <- pure "idr_Main.{main_0}2_val_447"
  "idr_Main.{main_0}2_val_446" <- case "idr_Main.{main_0}2_val_447" of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
    (Cidr_Prelude.Bool.True) ->
      pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
  "idr_Main.{main_0}2_val_445" <- case "idr_Main.{main_0}2_val_446" of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      idris_str_head1_0.2 <- pure idris_str_eq1_0.4
      idris_str_head2.2 <- _prim_string_head idris_str_eq1_0.4
      "idr_Main.{main_0}3_val_455" <- pure (CGrInt idris_str_head2.2)
      "idr_Main.{main_0}3_456" <- store "idr_Main.{main_0}3_val_455"
      idris_str_tail1_0.0 <- pure idris_str_eq1_0.4
      idris_str_tail2.0 <- _prim_string_tail idris_str_eq1_0.4
      "idr_Main.{main_0}5_val_461" <- pure (CGrString idris_str_tail2.0)
      "idr_Main.{main_0}6.41.14.arity.1" <- pure "idr_Main.{main_0}2.41.12.arity.1"
      idris_str_eq1_0.5 <- pure idris_str_tail2.0
      idris_str_eq3.5 <- _prim_string_eq idris_str_tail2.0 "idr_Main.{main_0}2.41.12.arity.1"
      ccp.2.5 <- case idris_str_eq3.5 of
        #False ->
          pure 0
        #True ->
          pure 1
      "idr_Main.{main_0}5_val_459" <- case ccp.2.5 of
        0 ->
          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.2"
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_517.3" <- pure "idr_Main.{main_0}5_val_459"
      "idr_Main.{main_0}5_val_458" <- case "idr_Main.{main_0}5_val_459" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      "idr_Main.{main_0}5_val" <- case "idr_Main.{main_0}5_val_458" of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_tail1_0.1 <- pure idris_str_eq1_0.4
          idris_str_tail2.1 <- _prim_string_tail idris_str_eq1_0.4
          "idr_Main.{main_0}6_val_471" <- pure (CGrString idris_str_tail2.1)
          idris_str_head1_0.3 <- pure idris_str_tail2.1
          idris_str_head2.3 <- _prim_string_head idris_str_tail2.1
          "idr_Main.{main_0}6_val_470" <- pure (CGrInt idris_str_head2.3)
          "idr_Main.{main_0}6_473" <- store "idr_Main.{main_0}6_val_470"
          idris_str_tail1_0.2 <- pure idris_str_eq1_0.4
          idris_str_tail2.2 <- _prim_string_tail idris_str_eq1_0.4
          "idr_Main.{main_0}7_val_474" <- pure (CGrString idris_str_tail2.2)
          idris_str_tail1_0.3 <- pure idris_str_tail2.2
          idris_str_tail2.3 <- _prim_string_tail idris_str_tail2.2
          "idr_Main.{main_0}7_val" <- pure (CGrString idris_str_tail2.3)
          "idr_Main.{main_0}7_475" <- store "idr_Main.{main_0}7_val"
          pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_0}6_473" "idr_Main.{main_0}7_475") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_0}6_473" "idr_Main.{main_0}7_475")
      "idr_Main.{main_0}5_476" <- store "idr_Main.{main_0}5_val"
      "idr_Main.{main_0}4_val" <- idr__Prelude.Strings.unpack_with_36 "idr_Main.{main_0}5_476"
      "idr_Main.{main_0}4_477" <- store "idr_Main.{main_0}4_val"
      pure (Cidr_Prelude.List.:: "idr_Main.{main_0}3_456" "idr_Main.{main_0}4_477") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{main_0}3_456" "idr_Main.{main_0}4_477")
  "idr_Main.{main_0}2_478" <- store "idr_Main.{main_0}2_val_445"
  "idr_Main.{main_0}3_480.41.16.arity.1" <- pure #"\""
  unboxed.CGrString.17 <- idr_Prelude.Show.showLitString.unboxed "idr_Main.{main_0}2_478" "idr_Main.{main_0}3_480.41.16.arity.1"
  "idr_Main.{main_0}2_val" <- pure (CGrString unboxed.CGrString.17)
  "idr_Main.{main_0}1.41.17.arity.1" <- pure 34
  idris_str_cons2_0.1 <- pure unboxed.CGrString.17
  idris_str_cons3.1 <- _prim_string_cons "idr_Main.{main_0}1.41.17.arity.1" unboxed.CGrString.17
  pure idris_str_cons3.1

"idr_{Prelude.List.sortBy:splitRec:2_lam_28}" "idr_{Prelude.List.sortBy:splitRec:2_lam_28}0" "idr_{Prelude.List.sortBy:splitRec:2_lam_28}1" "idr_{Prelude.List.sortBy:splitRec:2_lam_28}2" =
  "idr_{Prelude.List.sortBy:splitRec:2_lam_28}3_val" <- pure (Cidr_Prelude.List.:: "idr_{Prelude.List.sortBy:splitRec:2_lam_28}1" "idr_{Prelude.List.sortBy:splitRec:2_lam_28}2")
  "idr_{Prelude.List.sortBy:splitRec:2_lam_28}3" <- store "idr_{Prelude.List.sortBy:splitRec:2_lam_28}3_val"
  "idr_{APPLY_0}0_val.8" <- fetch "idr_{Prelude.List.sortBy:splitRec:2_lam_28}0"
  case "idr_{APPLY_0}0_val.8" of
    (C"idr_{U_Prelude.List.{sortBy_26}_1}") ->
      pure "idr_{Prelude.List.sortBy:splitRec:2_lam_28}3_val"
    (C"idr_{U_{Prelude.List.sortBy:splitRec:2_lam_28}_1}" "idr_{APPLY_0}2_443.8" "idr_{APPLY_0}3_444.8") ->
      "idr_{Prelude.List.sortBy:splitRec:2_lam_28}" "idr_{APPLY_0}2_443.8" "idr_{APPLY_0}3_444.8" "idr_{Prelude.List.sortBy:splitRec:2_lam_28}3"

"idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04" =
  "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04"
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  -- LINT: case has non-covered alternative Cidr_Main.MkAlbum
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.False
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.True
  case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06") ->
      "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
      case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" of
        (Cidr_Prelude.List.Nil) ->
          unboxed.CGrString.21 <- "idr_Main.{main_0}.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val" <- pure (CGrString unboxed.CGrString.21)
          (CGrString idris_str_concat1_0.23) <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"
          idris_str_concat2_0.23 <- pure unboxed.CGrString.21
          idris_str_concat3.23 <- _prim_string_concat idris_str_concat1_0.23 unboxed.CGrString.21
          pure idris_str_concat3.23 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.23)
        #default ->
          unboxed.CGrString.22 <- "idr_Main.{main_0}.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_514" <- pure (CGrString unboxed.CGrString.22)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val" <- pure (CGrString #", ")
          idris_str_concat1_0.24 <- pure unboxed.CGrString.22
          idris_str_concat2_0.24 <- pure #", "
          idris_str_concat3.24 <- _prim_string_concat unboxed.CGrString.22 idris_str_concat2_0.24
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_513" <- pure (CGrString idris_str_concat3.24)
          (CGrString idris_str_concat1_0.25) <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"
          idris_str_concat2_0.25 <- pure idris_str_concat3.24
          idris_str_concat3.25 <- _prim_string_concat idris_str_concat1_0.25 idris_str_concat3.24
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val" <- pure (CGrString idris_str_concat3.25)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_516" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_516" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06" -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.25)
    (Cidr_Prelude.List.Nil) ->
      (CGrString unboxed.CGrString.1) <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"
      pure unboxed.CGrString.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString unboxed.CGrString.1)

"idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03" =
  "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val" <- fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03"
  case "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:05") ->
      "idr_Main.{main_11}0_val.11" <- fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
      (Cidr_Main.MkAlbum "idr_Main.{main_11}1.11" "idr_Main.{main_11}2.11" "idr_Main.{main_11}3.11") <- pure "idr_Main.{main_11}0_val.11"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06_val" <- fetch "idr_Main.{main_11}2.11"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06_val"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val" <- "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:05"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_542" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val"
      pure (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_542") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_542")
    (Cidr_Prelude.List.Nil) ->
      pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val"

"idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:0" "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:00.49.arity.1" "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:00.49.arity.2" "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:00.49.arity.3" "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:01.49.arity.1" "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:01.49.arity.2" "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:01.49.arity.3" =
  (CGrString "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:02.49.8.arity.1") <- fetch "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:01.49.arity.1"
  (CGrString idris_str_eq1_0.6.0) <- fetch "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:00.49.arity.1"
  idris_str_eq3.6.0 <- _prim_string_eq idris_str_eq1_0.6.0 "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:02.49.8.arity.1"
  ccp.2.6.0 <- case idris_str_eq3.6.0 of
    #False ->
      pure 0
    #True ->
      pure 1
  "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:08_val" <- case ccp.2.6.0 of
    0 ->
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$String:!compare:00.41.27.arity.1.0" <- pure idris_str_eq1_0.6.0
      idris_str_lt3.0.0 <- _prim_string_lt idris_str_eq1_0.6.0 "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:02.49.8.arity.1"
      ccp.3.0.0 <- case idris_str_lt3.0.0 of
        #False ->
          pure ccp.2.6.0
        #True ->
          pure 1
      case ccp.3.0.0 of
        0 ->
          pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
        #default ->
          pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
    #default ->
      pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
  case "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:08_val" of
    (Cidr_Prelude.Interfaces.EQ) ->
      (CGrInt idris_int_eq0_1.9.1) <- fetch "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:00.49.arity.3"
      (CGrInt idris_int_eq1_1.9.1) <- fetch "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:01.49.arity.3"
      idris_int_eq2.9.1 <- _prim_int_eq idris_int_eq0_1.9.1 idris_int_eq1_1.9.1
      ccp.0.9.1 <- case idris_int_eq2.9.1 of
        #False ->
          pure 0
        #True ->
          pure 1
      "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:09_val" <- case ccp.0.9.1 of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.25.arity.1.1" <- pure idris_int_eq1_1.9.1
          idris_int_lt0_1.1.1 <- pure idris_int_eq0_1.9.1
          idris_int_lt2.1.1 <- _prim_int_lt idris_int_eq0_1.9.1 idris_int_eq1_1.9.1
          ccp.1.1.1 <- case idris_int_lt2.1.1 of
            #False ->
              pure ccp.0.9.1
            #True ->
              pure 1
          case ccp.1.1.1 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      case "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:09_val" of
        (Cidr_Prelude.Interfaces.EQ) ->
          (CGrString "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:03.49.9.arity.1") <- fetch "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:01.49.arity.2"
          (CGrString idris_str_eq1_0.6.1) <- fetch "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:00.49.arity.2"
          idris_str_eq3.6.1 <- _prim_string_eq idris_str_eq1_0.6.1 "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:03.49.9.arity.1"
          ccp.2.6.1 <- case idris_str_eq3.6.1 of
            #False ->
              pure 0
            #True ->
              pure 1
          case ccp.2.6.1 of
            0 ->
              "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$String:!compare:00.41.27.arity.1.1" <- pure idris_str_eq1_0.6.1
              idris_str_lt3.0.1 <- _prim_string_lt idris_str_eq1_0.6.1 "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:03.49.9.arity.1"
              ccp.3.0.1 <- case idris_str_lt3.0.1 of
                #False ->
                  pure ccp.2.6.1
                #True ->
                  pure 1
              case ccp.3.0.1 of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
            #default ->
              pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.6.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:03.49.9.arity.1")
        #default ->
          idris_int_eq0_1.9.2 <- pure idris_int_eq0_1.9.1
          idris_int_eq1_1.9.2 <- pure idris_int_eq1_1.9.1
          idris_int_eq2.9.2 <- _prim_int_eq idris_int_eq0_1.9.1 idris_int_eq1_1.9.1
          ccp.0.9.2 <- case idris_int_eq2.9.2 of
            #False ->
              pure 0
            #True ->
              pure 1
          case ccp.0.9.2 of
            0 ->
              "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.25.arity.1.2" <- pure idris_int_eq1_1.9.1
              idris_int_lt0_1.1.2 <- pure idris_int_eq0_1.9.1
              idris_int_lt2.1.2 <- _prim_int_lt idris_int_eq0_1.9.1 idris_int_eq1_1.9.1
              ccp.1.1.2 <- case idris_int_lt2.1.2 of
                #False ->
                  pure ccp.0.9.2
                #True ->
                  pure 1
              case ccp.1.1.2 of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
            #default ->
              pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq1_1.9.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.9.1)
    #default ->
      idris_str_eq1_0.6.2 <- pure idris_str_eq1_0.6.0
      idris_str_eq3.6.2 <- _prim_string_eq idris_str_eq1_0.6.0 "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:02.49.8.arity.1"
      ccp.2.6.2 <- case idris_str_eq3.6.2 of
        #False ->
          pure 0
        #True ->
          pure 1
      case ccp.2.6.2 of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$String:!compare:00.41.27.arity.1.2" <- pure idris_str_eq1_0.6.0
          idris_str_lt3.0.2 <- _prim_string_lt idris_str_eq1_0.6.0 "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:02.49.8.arity.1"
          ccp.3.0.2 <- case idris_str_lt3.0.2 of
            #False ->
              pure ccp.2.6.2
            #True ->
              pure 1
          case ccp.3.0.2 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.6.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Interfaces.Main.@Prelude.Interfaces.Ord$Album:!compare:02.49.8.arity.1")

idr_Prelude.List.sortBy:splitRec:2 idr_Prelude.List.sortBy:splitRec:23 idr_Prelude.List.sortBy:splitRec:24 idr_Prelude.List.sortBy:splitRec:25 =
  idr_Prelude.List.sortBy:splitRec:24_val <- fetch idr_Prelude.List.sortBy:splitRec:24
  case idr_Prelude.List.sortBy:splitRec:24_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.sortBy:splitRec:26 idr_Prelude.List.sortBy:splitRec:27) ->
      idr_Prelude.List.sortBy:splitRec:23_val <- fetch idr_Prelude.List.sortBy:splitRec:23
      case idr_Prelude.List.sortBy:splitRec:23_val of
        (Cidr_Prelude.List.:: idr_Prelude.List.sortBy:splitRec:28 idr_Prelude.List.sortBy:splitRec:29) ->
          idr_Prelude.List.sortBy:splitRec:29_val <- fetch idr_Prelude.List.sortBy:splitRec:29
          case idr_Prelude.List.sortBy:splitRec:29_val of
            (Cidr_Prelude.List.:: idr_Prelude.List.sortBy:splitRec:210 idr_Prelude.List.sortBy:splitRec:211) ->
              idr_Prelude.List.sortBy:splitRec:215_val <- pure (C"idr_{U_{Prelude.List.sortBy:splitRec:2_lam_28}_1}" idr_Prelude.List.sortBy:splitRec:25 idr_Prelude.List.sortBy:splitRec:26)
              idr_Prelude.List.sortBy:splitRec:215 <- store idr_Prelude.List.sortBy:splitRec:215_val
              idr_Prelude.List.sortBy:splitRec:2 idr_Prelude.List.sortBy:splitRec:211 idr_Prelude.List.sortBy:splitRec:27 idr_Prelude.List.sortBy:splitRec:215
            #default ->
              idr_Prelude.List.sortBy:splitRec:210_val_566 <- pure (Cidr_Prelude.List.Nil)
              idr_Prelude.List.sortBy:splitRec:210_567 <- store idr_Prelude.List.sortBy:splitRec:210_val_566
              "idr_{APPLY_0}0_val.12" <- fetch idr_Prelude.List.sortBy:splitRec:25
              idr_Prelude.List.sortBy:splitRec:210_val <- case "idr_{APPLY_0}0_val.12" of
                (C"idr_{U_Prelude.List.{sortBy_26}_1}") ->
                  pure idr_Prelude.List.sortBy:splitRec:210_val_566
                (C"idr_{U_{Prelude.List.sortBy:splitRec:2_lam_28}_1}" "idr_{APPLY_0}2_443.12" "idr_{APPLY_0}3_444.12") ->
                  "idr_{Prelude.List.sortBy:splitRec:2_lam_28}" "idr_{APPLY_0}2_443.12" "idr_{APPLY_0}3_444.12" idr_Prelude.List.sortBy:splitRec:210_567
              idr_Prelude.List.sortBy:splitRec:210_568 <- store idr_Prelude.List.sortBy:splitRec:210_val
              pure (Cidr_Builtins.MkPair idr_Prelude.List.sortBy:splitRec:210_568 idr_Prelude.List.sortBy:splitRec:24) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.sortBy:splitRec:210_568 idr_Prelude.List.sortBy:splitRec:24)
        #default ->
          idr_Prelude.List.sortBy:splitRec:28_val_569 <- pure (Cidr_Prelude.List.Nil)
          idr_Prelude.List.sortBy:splitRec:28_570 <- store idr_Prelude.List.sortBy:splitRec:28_val_569
          "idr_{APPLY_0}0_val.13" <- fetch idr_Prelude.List.sortBy:splitRec:25
          idr_Prelude.List.sortBy:splitRec:28_val <- case "idr_{APPLY_0}0_val.13" of
            (C"idr_{U_Prelude.List.{sortBy_26}_1}") ->
              pure idr_Prelude.List.sortBy:splitRec:28_val_569
            (C"idr_{U_{Prelude.List.sortBy:splitRec:2_lam_28}_1}" "idr_{APPLY_0}2_443.13" "idr_{APPLY_0}3_444.13") ->
              "idr_{Prelude.List.sortBy:splitRec:2_lam_28}" "idr_{APPLY_0}2_443.13" "idr_{APPLY_0}3_444.13" idr_Prelude.List.sortBy:splitRec:28_570
          idr_Prelude.List.sortBy:splitRec:28_571 <- store idr_Prelude.List.sortBy:splitRec:28_val
          pure (Cidr_Builtins.MkPair idr_Prelude.List.sortBy:splitRec:28_571 idr_Prelude.List.sortBy:splitRec:24) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.sortBy:splitRec:28_571 idr_Prelude.List.sortBy:splitRec:24)
    #default ->
      idr_Prelude.List.sortBy:splitRec:26_val_572 <- pure (Cidr_Prelude.List.Nil)
      idr_Prelude.List.sortBy:splitRec:26_573 <- store idr_Prelude.List.sortBy:splitRec:26_val_572
      "idr_{APPLY_0}0_val.14" <- fetch idr_Prelude.List.sortBy:splitRec:25
      idr_Prelude.List.sortBy:splitRec:26_val <- case "idr_{APPLY_0}0_val.14" of
        (C"idr_{U_Prelude.List.{sortBy_26}_1}") ->
          pure idr_Prelude.List.sortBy:splitRec:26_val_572
        (C"idr_{U_{Prelude.List.sortBy:splitRec:2_lam_28}_1}" "idr_{APPLY_0}2_443.14" "idr_{APPLY_0}3_444.14") ->
          "idr_{Prelude.List.sortBy:splitRec:2_lam_28}" "idr_{APPLY_0}2_443.14" "idr_{APPLY_0}3_444.14" idr_Prelude.List.sortBy:splitRec:26_573
      idr_Prelude.List.sortBy:splitRec:26_574 <- store idr_Prelude.List.sortBy:splitRec:26_val
      pure (Cidr_Builtins.MkPair idr_Prelude.List.sortBy:splitRec:26_574 idr_Prelude.List.sortBy:splitRec:24) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.sortBy:splitRec:26_574 idr_Prelude.List.sortBy:splitRec:24)

idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:101.49.arity.1 idr_Prelude.Show.showLitChar:getAt:102 =
  idr_Prelude.Show.showLitChar:getAt:102_val <- fetch idr_Prelude.Show.showLitChar:getAt:102
  case idr_Prelude.Show.showLitChar:getAt:102_val of
    (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:getAt:103 idr_Prelude.Show.showLitChar:getAt:104) ->
      case idr_Prelude.Show.showLitChar:getAt:101.49.arity.1 of
        0 ->
          pure (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar:getAt:103) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar:getAt:103)
        #default ->
          idr_Prelude.Show.showLitChar:getAt:105.41.28.arity.1 <- pure 1
          idris_int_sub2.0 <- _prim_int_sub idr_Prelude.Show.showLitChar:getAt:101.49.arity.1 idr_Prelude.Show.showLitChar:getAt:105.41.28.arity.1
          idr_Prelude.Show.showLitChar:getAt:10 idris_int_sub2.0 idr_Prelude.Show.showLitChar:getAt:104
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)

idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_361 =
  idr__Prelude.Strings.unpack_with_361_val <- fetch idr__Prelude.Strings.unpack_with_361
  case idr__Prelude.Strings.unpack_with_361_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_363) ->
      idr__Prelude.Strings.unpack_with_365.41.29.arity.1 <- pure #""
      (CGrString idris_str_eq1_0.7) <- fetch idr__Prelude.Strings.unpack_with_363
      idris_str_eq3.7 <- _prim_string_eq idris_str_eq1_0.7 idr__Prelude.Strings.unpack_with_365.41.29.arity.1
      ccp.2.7 <- case idris_str_eq3.7 of
        #False ->
          pure 0
        #True ->
          pure 1
      idr__Prelude.Strings.unpack_with_365_val_647 <- case ccp.2.7 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_517.4" <- pure idr__Prelude.Strings.unpack_with_365_val_647
      idr__Prelude.Strings.unpack_with_365_val_646 <- case idr__Prelude.Strings.unpack_with_365_val_647 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr__Prelude.Strings.unpack_with_365_val <- case idr__Prelude.Strings.unpack_with_365_val_646 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_head1_0.4 <- pure idris_str_eq1_0.7
          idris_str_head2.4 <- _prim_string_head idris_str_eq1_0.7
          idr__Prelude.Strings.unpack_with_366_val_655 <- pure (CGrInt idris_str_head2.4)
          idr__Prelude.Strings.unpack_with_366_656 <- store idr__Prelude.Strings.unpack_with_366_val_655
          idris_str_tail1_0.4 <- pure idris_str_eq1_0.7
          idris_str_tail2.4 <- _prim_string_tail idris_str_eq1_0.7
          idr__Prelude.Strings.unpack_with_367_val <- pure (CGrString idris_str_tail2.4)
          idr__Prelude.Strings.unpack_with_367 <- store idr__Prelude.Strings.unpack_with_367_val
          pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_656 idr__Prelude.Strings.unpack_with_367) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_656 idr__Prelude.Strings.unpack_with_367)
      idr__Prelude.Strings.unpack_with_365_657 <- store idr__Prelude.Strings.unpack_with_365_val
      idr__Prelude.Strings.unpack_with_364_val <- idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_365_657
      idr__Prelude.Strings.unpack_with_364_658 <- store idr__Prelude.Strings.unpack_with_364_val
      pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_658) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_658) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.7)
    (Cidr_Prelude.Strings.StrNil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
