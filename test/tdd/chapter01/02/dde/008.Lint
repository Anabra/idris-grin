idris_write_str idris_write_str2.32.arity.1 =
  (CGrString idris_write_str2_0) <- pure (CGrString idris_write_str2.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0
  pure (CUnit) -- LINT: Last return expressions can only return non-node values: pure (CUnit)

idris_str_concat.unboxed idris_str_concat1 idris_str_concat2.32.arity.1 =
  (CGrString idris_str_concat1_0) <- fetch idris_str_concat1
  (CGrString idris_str_concat2_0) <- pure (CGrString idris_str_concat2.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_concat3 <- _prim_string_concat idris_str_concat1_0 idris_str_concat2_0
  pure idris_str_concat3 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0)

grinMain =
  r <- do
    "idr_{runMain_0}0_val_27.0" <- pure (CErased)
    "idr_{runMain_0}0.0" <- store "idr_{runMain_0}0_val_27.0"
    "idr_{runMain_0}0_val.0" <- idr_Main.main
    "idr_{runMain_0}0_28.0" <- store "idr_{runMain_0}0_val.0"
    do
      "idr_{EVAL_0}0.0.0" <- pure "idr_{runMain_0}0_28.0"
      "idr_{EVAL_0}0_val.0.0" <- fetch "idr_{EVAL_0}0.0.0"
      fetch "idr_{EVAL_0}0.0.0"
  pure ()

idr_Main.getStringOrInt idr_Main.getStringOrInt0 =
  idr_Main.getStringOrInt0_val <- fetch idr_Main.getStringOrInt0
  case idr_Main.getStringOrInt0_val of
    (Cidr_Prelude.Bool.False) ->
      pure (CGrString #"Ninety four") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"Ninety four")
    (Cidr_Prelude.Bool.True) ->
      pure (CGrInt 94) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 94)

idr_Main.main =
  idr_Main.main1_val_6 <- pure (Cidr_Prelude.Bool.True)
  idr_Main.main1 <- store idr_Main.main1_val_6
  idr_Main.main2_val_7 <- pure (Cidr_Prelude.Bool.True)
  idr_Main.main2 <- store idr_Main.main2_val_7
  idr_Main.main2_val <- idr_Main.getStringOrInt idr_Main.main2
  idr_Main.main2_8 <- store idr_Main.main2_val
  idr_Main.main1_val_5 <- idr_Main.valToString idr_Main.main1 idr_Main.main2_8
  idr_Main.main1_9 <- store idr_Main.main1_val_5
  idr_Main.main2_val_10 <- pure (CGrString #"\n")
  idr_Main.main2_11 <- store idr_Main.main2_val_10
  idr_Main.main1_val_4 <- do
    unboxed.CGrString.0 <- do
      (CGrString idr_Main.main2_11.32.0.arity.1) <- fetch idr_Main.main2_11
      idris_str_concat.unboxed idr_Main.main1_9 idr_Main.main2_11.32.0.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main2_11.32.0.arity.1)
    pure (CGrString unboxed.CGrString.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.0)
  idr_Main.main1_12 <- store idr_Main.main1_val_4
  idr_Main.main1_val_3 <- do
    (CGrString idr_Main.main1_12.32.1.arity.1) <- fetch idr_Main.main1_12
    idris_write_str idr_Main.main1_12.32.1.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main1_12.32.1.arity.1)
  idr_Main.main1_13 <- store idr_Main.main1_val_3
  idr_Main.main1_val <- pure (Cidr_MkUnit)
  idr_Main.main1_14 <- store idr_Main.main1_val
  idr_Main.main2_val_18 <- pure (Cidr_Prelude.Bool.False)
  idr_Main.main2_19 <- store idr_Main.main2_val_18
  idr_Main.main3_val_20 <- pure (Cidr_Prelude.Bool.False)
  idr_Main.main3 <- store idr_Main.main3_val_20
  idr_Main.main3_val <- idr_Main.getStringOrInt idr_Main.main3
  idr_Main.main3_21 <- store idr_Main.main3_val
  idr_Main.main2_val_17 <- idr_Main.valToString idr_Main.main2_19 idr_Main.main3_21
  idr_Main.main2_22 <- store idr_Main.main2_val_17
  idr_Main.main3_val_23 <- pure (CGrString #"\n")
  idr_Main.main3_24 <- store idr_Main.main3_val_23
  idr_Main.main2_val_16 <- do
    unboxed.CGrString.1 <- do
      (CGrString idr_Main.main3_24.32.2.arity.1) <- fetch idr_Main.main3_24
      idris_str_concat.unboxed idr_Main.main2_22 idr_Main.main3_24.32.2.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main3_24.32.2.arity.1)
    pure (CGrString unboxed.CGrString.1) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.1)
  idr_Main.main2_25 <- store idr_Main.main2_val_16
  idr_Main.main2_val_15 <- do
    (CGrString idr_Main.main2_25.32.3.arity.1) <- fetch idr_Main.main2_25
    idris_write_str idr_Main.main2_25.32.3.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main2_25.32.3.arity.1)
  idr_Main.main2_26 <- store idr_Main.main2_val_15
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

idr_Main.valToString idr_Main.valToString0 idr_Main.valToString1 =
  idr_Main.valToString0_val <- fetch idr_Main.valToString0
  case idr_Main.valToString0_val of
    (Cidr_Prelude.Bool.False) ->
      fetch idr_Main.valToString1
    (Cidr_Prelude.Bool.True) ->
      do
        idris_int_str1.0 <- pure idr_Main.valToString1
        (CGrInt idris_int_str1_0.0) <- fetch idris_int_str1.0
        idris_int_str2.0 <- _prim_int_str idris_int_str1_0.0
        pure (CGrString idris_int_str2.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_int_str2.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.0)
