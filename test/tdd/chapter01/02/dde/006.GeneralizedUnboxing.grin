primop effectful
  _prim_int_print :: T_Int64 -> T_Unit
  _prim_string_print :: T_String -> T_Unit
  _prim_read_string :: T_String
  _prim_usleep :: T_Int64 -> T_Unit
  _prim_error :: T_String -> T_Unit
  _prim_ffi_file_eof :: T_Int64 -> T_Int64
  
primop pure
  _prim_string_concat :: T_String -> T_String -> T_String
  _prim_string_reverse :: T_String -> T_String
  _prim_string_lt :: T_String -> T_String -> T_Bool
  _prim_string_eq :: T_String -> T_String -> T_Bool
  _prim_string_head :: T_String -> T_Int64
  _prim_string_tail :: T_String -> T_String
  _prim_string_cons :: T_Int64 -> T_String -> T_String
  _prim_string_len :: T_String -> T_Int64
  _prim_int_str :: T_Int64 -> T_String
  _prim_str_int :: T_String -> T_Int64
  _prim_int_float :: T_Int64 -> T_Float
  _prim_float_string :: T_Float -> T_String
  _prim_char_int :: T_Char -> T_Int64
  _prim_int_add :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_sub :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_mul :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_div :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_eq :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ne :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_gt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ge :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_lt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_le :: T_Int64 -> T_Int64 -> T_Bool
  _prim_word_add :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_sub :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_mul :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_div :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_eq :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ne :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_gt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ge :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_lt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_le :: T_Word64 -> T_Word64 -> T_Bool
  _prim_float_add :: T_Float -> T_Float -> T_Float
  _prim_float_sub :: T_Float -> T_Float -> T_Float
  _prim_float_mul :: T_Float -> T_Float -> T_Float
  _prim_float_div :: T_Float -> T_Float -> T_Float
  _prim_float_eq :: T_Float -> T_Float -> T_Bool
  _prim_float_ne :: T_Float -> T_Float -> T_Bool
  _prim_float_gt :: T_Float -> T_Float -> T_Bool
  _prim_float_ge :: T_Float -> T_Float -> T_Bool
  _prim_float_lt :: T_Float -> T_Float -> T_Bool
  _prim_float_le :: T_Float -> T_Float -> T_Bool
  _prim_bool_eq :: T_Bool -> T_Bool -> T_Bool
  _prim_bool_ne :: T_Bool -> T_Bool -> T_Bool
  
primop effectful
  _prim_int_print :: T_Int64 -> T_Unit
  _prim_string_print :: T_String -> T_Unit
  _prim_read_string :: T_String
  _prim_usleep :: T_Int64 -> T_Unit
  _prim_error :: T_String -> T_Unit
  _prim_ffi_file_eof :: T_Int64 -> T_Int64
  
primop pure
  _prim_string_concat :: T_String -> T_String -> T_String
  _prim_string_reverse :: T_String -> T_String
  _prim_string_lt :: T_String -> T_String -> T_Bool
  _prim_string_eq :: T_String -> T_String -> T_Bool
  _prim_string_head :: T_String -> T_Int64
  _prim_string_tail :: T_String -> T_String
  _prim_string_cons :: T_Int64 -> T_String -> T_String
  _prim_string_len :: T_String -> T_Int64
  _prim_int_str :: T_Int64 -> T_String
  _prim_str_int :: T_String -> T_Int64
  _prim_int_float :: T_Int64 -> T_Float
  _prim_float_string :: T_Float -> T_String
  _prim_char_int :: T_Char -> T_Int64
  _prim_int_add :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_sub :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_mul :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_div :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_eq :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ne :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_gt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ge :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_lt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_le :: T_Int64 -> T_Int64 -> T_Bool
  _prim_word_add :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_sub :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_mul :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_div :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_eq :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ne :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_gt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ge :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_lt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_le :: T_Word64 -> T_Word64 -> T_Bool
  _prim_float_add :: T_Float -> T_Float -> T_Float
  _prim_float_sub :: T_Float -> T_Float -> T_Float
  _prim_float_mul :: T_Float -> T_Float -> T_Float
  _prim_float_div :: T_Float -> T_Float -> T_Float
  _prim_float_eq :: T_Float -> T_Float -> T_Bool
  _prim_float_ne :: T_Float -> T_Float -> T_Bool
  _prim_float_gt :: T_Float -> T_Float -> T_Bool
  _prim_float_ge :: T_Float -> T_Float -> T_Bool
  _prim_float_lt :: T_Float -> T_Float -> T_Bool
  _prim_float_le :: T_Float -> T_Float -> T_Bool
  _prim_bool_eq :: T_Bool -> T_Bool -> T_Bool
  _prim_bool_ne :: T_Bool -> T_Bool -> T_Bool
  
idris_write_str idris_write_str2 =
  (CGrString idris_write_str2_0) <- fetch idris_write_str2
  _prim_string_print $ idris_write_str2_0
  pure (CUnit)

idris_str_concat.unboxed idris_str_concat1 idris_str_concat2 =
  (CGrString idris_str_concat1_0) <- fetch idris_str_concat1
  (CGrString idris_str_concat2_0) <- fetch idris_str_concat2
  idris_str_concat3 <- _prim_string_concat $ idris_str_concat1_0 idris_str_concat2_0
  pure idris_str_concat3

idris_int_str idris_int_str1 =
  (CGrInt idris_int_str1_0) <- fetch idris_int_str1
  idris_int_str2 <- _prim_int_str $ idris_int_str1_0
  pure (CGrString idris_int_str2)

grinMain =
  r <- "idr_{runMain_0}" $
  pure ()

idr_Main.getStringOrInt idr_Main.getStringOrInt0 =
  idr_Main.getStringOrInt0_val <- fetch idr_Main.getStringOrInt0
  case idr_Main.getStringOrInt0_val of
    (Cidr_Prelude.Bool.False) ->
      pure (CGrString #"Ninety four")
    (Cidr_Prelude.Bool.True) ->
      pure (CGrInt 94)

idr_Main.main =
  idr_Main.main1_val_6 <- pure (Cidr_Prelude.Bool.True)
  idr_Main.main1 <- store idr_Main.main1_val_6
  idr_Main.main2_val_7 <- pure (Cidr_Prelude.Bool.True)
  idr_Main.main2 <- store idr_Main.main2_val_7
  idr_Main.main2_val <- idr_Main.getStringOrInt $ idr_Main.main2
  idr_Main.main2_8 <- store idr_Main.main2_val
  idr_Main.main1_val_5 <- idr_Main.valToString $ idr_Main.main1 idr_Main.main2_8
  idr_Main.main1_9 <- store idr_Main.main1_val_5
  idr_Main.main2_val_10 <- pure (CGrString #"\n")
  idr_Main.main2_11 <- store idr_Main.main2_val_10
  idr_Main.main1_val_4 <- do
    unboxed.CGrString.0 <- idris_str_concat.unboxed $ idr_Main.main1_9 idr_Main.main2_11
    pure (CGrString unboxed.CGrString.0)
  idr_Main.main1_12 <- store idr_Main.main1_val_4
  idr_Main.main1_val_3 <- idris_write_str $ idr_Main.main1_12
  idr_Main.main1_13 <- store idr_Main.main1_val_3
  idr_Main.main1_val <- pure (Cidr_MkUnit)
  idr_Main.main1_14 <- store idr_Main.main1_val
  idr_Main.main2_val_18 <- pure (Cidr_Prelude.Bool.False)
  idr_Main.main2_19 <- store idr_Main.main2_val_18
  idr_Main.main3_val_20 <- pure (Cidr_Prelude.Bool.False)
  idr_Main.main3 <- store idr_Main.main3_val_20
  idr_Main.main3_val <- idr_Main.getStringOrInt $ idr_Main.main3
  idr_Main.main3_21 <- store idr_Main.main3_val
  idr_Main.main2_val_17 <- idr_Main.valToString $ idr_Main.main2_19 idr_Main.main3_21
  idr_Main.main2_22 <- store idr_Main.main2_val_17
  idr_Main.main3_val_23 <- pure (CGrString #"\n")
  idr_Main.main3_24 <- store idr_Main.main3_val_23
  idr_Main.main2_val_16 <- do
    unboxed.CGrString.1 <- idris_str_concat.unboxed $ idr_Main.main2_22 idr_Main.main3_24
    pure (CGrString unboxed.CGrString.1)
  idr_Main.main2_25 <- store idr_Main.main2_val_16
  idr_Main.main2_val_15 <- idris_write_str $ idr_Main.main2_25
  idr_Main.main2_26 <- store idr_Main.main2_val_15
  pure (Cidr_MkUnit)

idr_Main.valToString idr_Main.valToString0 idr_Main.valToString1 =
  idr_Main.valToString0_val <- fetch idr_Main.valToString0
  case idr_Main.valToString0_val of
    (Cidr_Prelude.Bool.False) ->
      fetch idr_Main.valToString1
    (Cidr_Prelude.Bool.True) ->
      idris_int_str $ idr_Main.valToString1

"idr_{runMain_0}" =
  "idr_{runMain_0}0_val_27" <- pure (CErased)
  "idr_{runMain_0}0" <- store "idr_{runMain_0}0_val_27"
  "idr_{runMain_0}0_val" <- idr_Main.main $
  "idr_{runMain_0}0_28" <- store "idr_{runMain_0}0_val"
  do
    "idr_{EVAL_0}0.0" <- pure "idr_{runMain_0}0_28"
    "idr_{EVAL_0}0_val.0" <- fetch "idr_{EVAL_0}0.0"
    fetch "idr_{EVAL_0}0.0"
