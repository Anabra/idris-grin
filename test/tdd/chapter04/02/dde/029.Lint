grinMain =
  "idr_{runMain_0}1_val_655.0" <- pure (CGrInt 0)
  "idr_{runMain_0}1.0" <- store "idr_{runMain_0}1_val_655.0"
  "idr_{runMain_0}2_val.0" <- pure (Cidr_Data.Vect.Nil)
  "idr_{runMain_0}2.0" <- store "idr_{runMain_0}2_val.0"
  "idr_{runMain_0}1_val.0" <- pure (Cidr_Main.MkData "idr_{runMain_0}1.0" "idr_{runMain_0}2.0")
  "idr_{runMain_0}1_656.0" <- store "idr_{runMain_0}1_val.0"
  "idr_{runMain_0}2_val_657.0" <- pure (CGrString #"Command: ")
  "idr_{runMain_0}2_658.0" <- store "idr_{runMain_0}2_val_657.0"
  "idr_{runMain_0}3_val.0" <- pure (C"idr_{U_Main.processInput_2}")
  "idr_{runMain_0}3.0" <- store "idr_{runMain_0}3_val.0"
  "idr_{runMain_0}4_val.0" <- pure (CErased)
  "idr_{runMain_0}4.0" <- store "idr_{runMain_0}4_val.0"
  "idr_{runMain_0}0_val.0" <- idr_Prelude.Interactive.replWith "idr_{runMain_0}1_656.0" "idr_{runMain_0}2_658.0" "idr_{runMain_0}3.0" "idr_{runMain_0}4.0"
  pure ()

idr_Data.Fin.finToInteger.unboxed idr_Data.Fin.finToInteger1 =
  idr_Data.Fin.finToInteger1_val <- fetch idr_Data.Fin.finToInteger1
  case idr_Data.Fin.finToInteger1_val of
    (Cidr_Data.Fin.FS idr_Data.Fin.finToInteger2) ->
      unboxed.CGrInt.2 <- idr_Data.Fin.finToInteger.unboxed idr_Data.Fin.finToInteger2
      idr_Data.Fin.finToInteger3.32.1.arity.1 <- pure 1
      idris_int_add2.0 <- _prim_int_add idr_Data.Fin.finToInteger3.32.1.arity.1 unboxed.CGrInt.2
      pure idris_int_add2.0
    (Cidr_Data.Fin.FZ) ->
      pure 0

idr_Data.Vect.foldrImpl.unboxed idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl4 idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl6 =
  idr_Data.Vect.foldrImpl6_val <- fetch idr_Data.Vect.foldrImpl6
  case idr_Data.Vect.foldrImpl6_val of
    (Cidr_Data.Vect.:: idr_Data.Vect.foldrImpl7 idr_Data.Vect.foldrImpl8) ->
      idr_Data.Vect.foldrImpl12_val <- pure (C"idr_{U_Data.Vect.{foldrImpl_2}_1}" idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl7)
      idr_Data.Vect.foldrImpl12 <- store idr_Data.Vect.foldrImpl12_val
      idr_Data.Vect.foldrImpl.unboxed idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl4 idr_Data.Vect.foldrImpl12 idr_Data.Vect.foldrImpl8
    (Cidr_Data.Vect.Nil) ->
      "idr_{APPLY_0}0_val.0" <- fetch idr_Data.Vect.foldrImpl5
      case "idr_{APPLY_0}0_val.0" of
        (C"idr_{U_Data.Vect.{foldrImpl_2}_1}" "idr_{APPLY_0}2.0" "idr_{APPLY_0}3.0" "idr_{APPLY_0}4.0") ->
          "idr_Data.Vect.{foldrImpl_2}.unboxed" "idr_{APPLY_0}2.0" "idr_{APPLY_0}3.0" "idr_{APPLY_0}4.0" idr_Data.Vect.foldrImpl4
        (C"idr_{U_Main.{search_9}_1}") ->
          (CGrString "idr_{APPLY_0}1.0.40.0.arity.1") <- fetch idr_Data.Vect.foldrImpl4
          pure "idr_{APPLY_0}1.0.40.0.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_{APPLY_0}1.0.40.0.arity.1")

idr_Data.Vect.index.unboxed idr_Data.Vect.index2 idr_Data.Vect.index3 =
  idr_Data.Vect.index2_val <- fetch idr_Data.Vect.index2
  case idr_Data.Vect.index2_val of
    (Cidr_Data.Fin.FS idr_Data.Vect.index4) ->
      idr_Data.Vect.index3_val <- fetch idr_Data.Vect.index3
      -- LINT: Invalid pattern match for (Cidr_Data.Vect.:: idr_Data.Vect.index5 idr_Data.Vect.index6). Expected pattern of type: {Cidr_Data.Vect.::[{51
                         ,61
                         ,89
                         ,96
                         ,291
                         ,302}
                        ,{259,260}]}, but got: {Cidr_Data.Vect.::[{51
                         ,61
                         ,89
                         ,96
                         ,291
                         ,302}
                        ,{259,260}]
      ,Cidr_Data.Vect.Nil[]}
      (Cidr_Data.Vect.:: idr_Data.Vect.index5 idr_Data.Vect.index6) <- pure idr_Data.Vect.index3_val
      idr_Data.Vect.index.unboxed idr_Data.Vect.index4 idr_Data.Vect.index6
    (Cidr_Data.Fin.FZ) ->
      idr_Data.Vect.index3_val_62 <- fetch idr_Data.Vect.index3
      -- LINT: Invalid pattern match for (Cidr_Data.Vect.:: idr_Data.Vect.index4_63 idr_Data.Vect.index5_64). Expected pattern of type: {Cidr_Data.Vect.::[{51
                         ,61
                         ,89
                         ,96
                         ,291
                         ,302}
                        ,{259,260}]}, but got: {Cidr_Data.Vect.::[{51
                         ,61
                         ,89
                         ,96
                         ,291
                         ,302}
                        ,{259,260}]
      ,Cidr_Data.Vect.Nil[]}
      (Cidr_Data.Vect.:: idr_Data.Vect.index4_63 idr_Data.Vect.index5_64) <- pure idr_Data.Vect.index3_val_62
      (CGrString unboxed.CGrString.0) <- fetch idr_Data.Vect.index4_63
      pure unboxed.CGrString.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrString unboxed.CGrString.0)

idr_Prelude.List.isPrefixOfBy idr_Prelude.List.isPrefixOfBy1 idr_Prelude.List.isPrefixOfBy2 idr_Prelude.List.isPrefixOfBy3 =
  idr_Prelude.List.isPrefixOfBy2_val <- fetch idr_Prelude.List.isPrefixOfBy2
  case idr_Prelude.List.isPrefixOfBy2_val of
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.List.isPrefixOfBy3_val <- fetch idr_Prelude.List.isPrefixOfBy3
      -- LINT: case has non-covered alternative CGrInt
      case idr_Prelude.List.isPrefixOfBy3_val of
        (Cidr_Prelude.List.:: idr_Prelude.List.isPrefixOfBy4 idr_Prelude.List.isPrefixOfBy5) ->
          -- LINT: Invalid pattern match for (Cidr_Prelude.List.:: idr_Prelude.List.isPrefixOfBy6 idr_Prelude.List.isPrefixOfBy7). Expected pattern of type: {Cidr_Prelude.List.::[{121
                                ,216
                                ,223
                                ,240
                                ,283}
                               ,{227,286}]}, but got: {Cidr_Prelude.List.::[{121
                                ,216
                                ,223
                                ,240
                                ,283}
                               ,{227,286}]
          ,Cidr_Prelude.List.Nil[]}
          (Cidr_Prelude.List.:: idr_Prelude.List.isPrefixOfBy6 idr_Prelude.List.isPrefixOfBy7) <- pure idr_Prelude.List.isPrefixOfBy2_val
          "idr_{APPLY_0}0_val.4" <- fetch idr_Prelude.List.isPrefixOfBy1
          idr_Prelude.List.isPrefixOfBy8_val_187 <- case "idr_{APPLY_0}0_val.4" of
            (C"idr_{U_{PE_isInfixOf_22f242c8_0}_2}") ->
              pure (C"idr_{U_{PE_isInfixOf_22f242c8_0}_1}" idr_Prelude.List.isPrefixOfBy6) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_{PE_isInfixOf_22f242c8_0}_1}" idr_Prelude.List.isPrefixOfBy6)
          idr_Prelude.List.isPrefixOfBy8 <- store idr_Prelude.List.isPrefixOfBy8_val_187
          "idr_{APPLY_0}0_val.5" <- fetch idr_Prelude.List.isPrefixOfBy8
          idr_Prelude.List.isPrefixOfBy8_val <- case "idr_{APPLY_0}0_val.5" of
            (C"idr_{U_{PE_isInfixOf_22f242c8_0}_1}" "idr_{APPLY_0}2_646.5") ->
              (CGrInt "idr_{PE_isInfixOf_22f242c8_0}1.40.64.arity.1.0") <- fetch idr_Prelude.List.isPrefixOfBy4
              (CGrInt idris_int_eq0_1.0) <- fetch "idr_{APPLY_0}2_646.5"
              idris_int_eq2.0 <- _prim_int_eq idris_int_eq0_1.0 "idr_{PE_isInfixOf_22f242c8_0}1.40.64.arity.1.0"
              ccp.0.0 <- case idris_int_eq2.0 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              "idr_{PE_isInfixOf_22f242c8_0}2_val.0" <- pure (CGrInt ccp.0.0)
              case "idr_{PE_isInfixOf_22f242c8_0}2_val.0" of
                (CGrInt "idr_{PE_isInfixOf_22f242c8_0}_cpat_LInt64_0.0") ->
                  case "idr_{PE_isInfixOf_22f242c8_0}_cpat_LInt64_0.0" of
                    0 ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                    #default ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_{PE_isInfixOf_22f242c8_0}1.40.64.arity.1.0")
          case idr_Prelude.List.isPrefixOfBy8_val of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idr_Prelude.List.isPrefixOfBy idr_Prelude.List.isPrefixOfBy1 idr_Prelude.List.isPrefixOfBy7 idr_Prelude.List.isPrefixOfBy5
        (Cidr_Prelude.List.Nil) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)

idr_Data.Fin.natToFin idr_Data.Fin.natToFin0.40.arity.1 idr_Data.Fin.natToFin1.40.arity.1 =
  idr_Data.Fin.natToFin0_val <- pure (CGrInt idr_Data.Fin.natToFin0.40.arity.1)
  case idr_Data.Fin.natToFin0_val of
    (CGrInt idr_Data.Fin.natToFin_cpat_LInt64_0) ->
      case idr_Data.Fin.natToFin_cpat_LInt64_0 of
        0 ->
          idr_Data.Fin.natToFin1_val <- pure (CGrInt idr_Data.Fin.natToFin1.40.arity.1)
          case idr_Data.Fin.natToFin1_val of
            (CGrInt idr_Data.Fin.natToFin_cpat_LInt64_0_194) ->
              case idr_Data.Fin.natToFin_cpat_LInt64_0_194 of
                0 ->
                  pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
                #default ->
                  idr_Data.Fin.natToFin3_val <- pure (Cidr_Data.Fin.FZ)
                  idr_Data.Fin.natToFin3 <- store idr_Data.Fin.natToFin3_val
                  pure (Cidr_Prelude.Maybe.Just idr_Data.Fin.natToFin3) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Data.Fin.natToFin3)
        #default ->
          idr_Data.Fin.natToFin2_205.32.20.arity.1 <- pure 1
          idris_int_sub2.1 <- _prim_int_sub idr_Data.Fin.natToFin0.40.arity.1 idr_Data.Fin.natToFin2_205.32.20.arity.1
          idr_Data.Fin.natToFin1_val_207 <- pure (CGrInt idr_Data.Fin.natToFin1.40.arity.1)
          case idr_Data.Fin.natToFin1_val_207 of
            (CGrInt idr_Data.Fin.natToFin_cpat_LInt64_0_208) ->
              case idr_Data.Fin.natToFin_cpat_LInt64_0_208 of
                0 ->
                  pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
                #default ->
                  idr_Data.Fin.natToFin3_211.32.21.arity.1 <- pure 1
                  idris_int_sub2.2 <- _prim_int_sub idr_Data.Fin.natToFin1.40.arity.1 idr_Data.Fin.natToFin3_211.32.21.arity.1
                  idr_Data.Fin.natToFin4_val <- idr_Data.Fin.natToFin idris_int_sub2.1 idris_int_sub2.2
                  case idr_Data.Fin.natToFin4_val of
                    (Cidr_Prelude.Maybe.Just idr_Data.Fin.natToFin5) ->
                      idr_Data.Fin.natToFin6_val <- pure (Cidr_Data.Fin.FS idr_Data.Fin.natToFin5)
                      idr_Data.Fin.natToFin6 <- store idr_Data.Fin.natToFin6_val
                      pure (Cidr_Prelude.Maybe.Just idr_Data.Fin.natToFin6) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Data.Fin.natToFin6)
                    (Cidr_Prelude.Maybe.Nothing) ->
                      pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)

idr_Data.Vect.range idr_Data.Vect.range0.40.arity.1 =
  idr_Data.Vect.range0_val <- pure (CGrInt idr_Data.Vect.range0.40.arity.1)
  case idr_Data.Vect.range0_val of
    (CGrInt idr_Data.Vect.range_cpat_LInt64_0) ->
      case idr_Data.Vect.range_cpat_LInt64_0 of
        0 ->
          pure (Cidr_Data.Vect.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.Nil)
        #default ->
          idr_Data.Vect.range1.32.44.arity.1 <- pure 1
          idris_int_sub2.3 <- _prim_int_sub idr_Data.Vect.range0.40.arity.1 idr_Data.Vect.range1.32.44.arity.1
          idr_Data.Vect.range2_val <- pure (Cidr_Data.Fin.FZ)
          idr_Data.Vect.range2 <- store idr_Data.Vect.range2_val
          idr_Data.Vect.range6_val <- pure (C"idr_{U_Data.Vect.{range_5}_1}")
          idr_Data.Vect.range6 <- store idr_Data.Vect.range6_val
          idr_Data.Vect.range7_val <- idr_Data.Vect.range idris_int_sub2.3
          idr_Data.Vect.range7 <- store idr_Data.Vect.range7_val
          idr_Data.Vect.range3_val <- "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:0" idr_Data.Vect.range6 idr_Data.Vect.range7
          idr_Data.Vect.range3_545 <- store idr_Data.Vect.range3_val
          pure (Cidr_Data.Vect.:: idr_Data.Vect.range2 idr_Data.Vect.range3_545) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Data.Vect.range2 idr_Data.Vect.range3_545)

idr_Prelude.Interactive.replWith idr_Prelude.Interactive.replWith1 idr_Prelude.Interactive.replWith2 idr_Prelude.Interactive.replWith3 idr_Prelude.Interactive.replWith4 =
  unboxed.CGrInt.45 <- pure 0
  idr_Prelude.Interactive.replWith5_val_564 <- pure (CGrInt unboxed.CGrInt.45)
  idr_Prelude.Interactive.replWith5 <- store idr_Prelude.Interactive.replWith5_val_564
  (CGrInt idr_Prelude.File.fEOF0.0.40.57.arity.1) <- fetch idr_Prelude.Interactive.replWith5
  idris_ffi_file_eof2.0 <- _prim_ffi_file_eof idr_Prelude.File.fEOF0.0.40.57.arity.1
  idr_Prelude.File.fEOF2_val.0 <- pure (CGrInt idris_ffi_file_eof2.0)
  idr_Prelude.File.fEOF2.0 <- store idr_Prelude.File.fEOF2_val.0
  idr_Prelude.File.fEOF3.0.40.58.arity.1 <- pure 0
  (CGrInt idris_int_eq0_1.1) <- fetch idr_Prelude.File.fEOF2.0
  idris_int_eq2.1 <- _prim_int_eq idris_int_eq0_1.1 idr_Prelude.File.fEOF3.0.40.58.arity.1
  ccp.0.1 <- case idris_int_eq2.1 of
    #False ->
      pure unboxed.CGrInt.45
    #True ->
      pure 1
  idr_Prelude.File.fEOF3_val.0 <- pure (CGrInt ccp.0.1)
  idr_Prelude.Interactive.replWith5_val <- case idr_Prelude.File.fEOF3_val.0 of
    (CGrInt idr_Prelude.File.fEOF_cpat_LInt64_0.0) ->
      case idr_Prelude.File.fEOF_cpat_LInt64_0.0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  case idr_Prelude.Interactive.replWith5_val of
    (Cidr_Prelude.Bool.False) ->
      (CGrString idris_write_str2_0.0) <- fetch idr_Prelude.Interactive.replWith2
      _prim_string_print idris_write_str2_0.0
      idris_read_str1.0 <- _prim_read_string
      idris_str_rev2.0 <- _prim_string_reverse idris_read_str1.0
      idr_Prelude.Interactive.getLine'4_val.0 <- pure (CGrString #"")
      idr_Prelude.Interactive.getLine'4.32.3.arity.1.0 <- pure #""
      idris_str_eq3.0 <- _prim_string_eq idris_str_rev2.0 idr_Prelude.Interactive.getLine'4.32.3.arity.1.0
      ccp.2.0 <- case idris_str_eq3.0 of
        #False ->
          pure unboxed.CGrInt.45
        #True ->
          pure 1
      idr_Prelude.Interactive.getLine'3_val_33.0 <- pure (CGrInt ccp.2.0)
      idr_Prelude.Interactive.getLine'3_val_32.0 <- case idr_Prelude.Interactive.getLine'3_val_33.0 of
        (CGrInt idr_Prelude.Interactive.getLine'_cpat_LInt64_0.0) ->
          case idr_Prelude.Interactive.getLine'_cpat_LInt64_0.0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Interactive.getLine'3_37.0 <- store idr_Prelude.Interactive.getLine'3_val_32.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Interactive.getLine'3_val_31.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.0" <- fetch idr_Prelude.Interactive.getLine'3_37.0
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.0" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Prelude.Interactive.getLine'3_val.0 <- case idr_Prelude.Interactive.getLine'3_val_31.0 of
        (Cidr_Prelude.Basics.No) ->
          pure idr_Prelude.Interactive.getLine'4_val.0
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_rev2.1 <- _prim_string_reverse idris_read_str1.0
          idris_str_head2.0 <- _prim_string_head idris_str_rev2.1
          idr_Prelude.Interactive.getLine'4_val_42.0 <- pure (CGrInt idris_str_head2.0)
          case idr_Prelude.Interactive.getLine'4_val_42.0 of
            (CGrInt idr_Prelude.Interactive.getLine'_cpat_LInt64_10.0) ->
              case idr_Prelude.Interactive.getLine'_cpat_LInt64_10.0 of
                10 ->
                  idris_str_rev2.2 <- _prim_string_reverse idris_read_str1.0
                  idris_str_tail2.0 <- _prim_string_tail idris_str_rev2.2
                  pure (CGrString idris_str_tail2.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_tail2.0)
                #default ->
                  idris_str_rev2.3 <- _prim_string_reverse idris_read_str1.0
                  idris_str_head2.1 <- _prim_string_head idris_str_rev2.3
                  idris_str_rev2.4 <- _prim_string_reverse idris_read_str1.0
                  idris_str_tail2.1 <- _prim_string_tail idris_str_rev2.4
                  idris_str_cons3.0 <- _prim_string_cons idris_str_head2.1 idris_str_tail2.1
                  pure (CGrString idris_str_cons3.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_cons3.0)
      (CGrString idr_Prelude.Interactive.getLine'3_61.32.10.arity.1.0) <- pure idr_Prelude.Interactive.getLine'3_val.0
      idris_str_rev2.5 <- _prim_string_reverse idr_Prelude.Interactive.getLine'3_61.32.10.arity.1.0
      idr_Prelude.Interactive.replWith7_val <- pure (CGrString idris_str_rev2.5)
      idr_Prelude.Interactive.replWith7_570 <- store idr_Prelude.Interactive.replWith7_val
      "idr_{APPLY_0}0_val.7" <- fetch idr_Prelude.Interactive.replWith3
      idr_Prelude.Interactive.replWith8_val_571 <- case "idr_{APPLY_0}0_val.7" of
        (C"idr_{U_Main.processInput_2}") ->
          pure (C"idr_{U_Main.processInput_1}" idr_Prelude.Interactive.replWith1) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.processInput_1}" idr_Prelude.Interactive.replWith1)
      idr_Prelude.Interactive.replWith8 <- store idr_Prelude.Interactive.replWith8_val_571
      "idr_{APPLY_0}0_val.8" <- fetch idr_Prelude.Interactive.replWith8
      idr_Prelude.Interactive.replWith8_val <- case "idr_{APPLY_0}0_val.8" of
        (C"idr_{U_Main.processInput_1}" "idr_{APPLY_0}2_633.8") ->
          idr_Main.parse1.32.22.arity.1.0.0 <- pure #""
          (CGrString idr_Main.parse0.0.40.19.arity.1.0) <- fetch idr_Prelude.Interactive.replWith7_570
          idris_str_eq3.1 <- _prim_string_eq idr_Main.parse0.0.40.19.arity.1.0 idr_Main.parse1.32.22.arity.1.0.0
          ccp.2.1 <- case idris_str_eq3.1 of
            #False ->
              pure unboxed.CGrInt.45
            #True ->
              pure 1
          idr_Main.parse1_val_252.0.0 <- pure (CGrInt ccp.2.1)
          idr_Main.parse1_val_251.0.0 <- case idr_Main.parse1_val_252.0.0 of
            (CGrInt idr_Main.parse_cpat_LInt64_0.0.0) ->
              case idr_Main.parse_cpat_LInt64_0.0.0 of
                0 ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Main.parse1_256.0.0 <- store idr_Main.parse1_val_251.0.0
          idr_Main.parse1_val_250.0.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.1" <- fetch idr_Main.parse1_256.0.0
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.1" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          idr_Main.parse1_val.0.0 <- case idr_Main.parse1_val_250.0.0 of
            (Cidr_Prelude.Basics.No) ->
              idr_Main.parse2_260.0.0 <- store idr_Prelude.Interactive.getLine'4_val.0
              idr_Main.parse3.0.0 <- store idr_Prelude.Interactive.getLine'4_val.0
              pure (Cidr_Builtins.MkPair idr_Main.parse2_260.0.0 idr_Main.parse3.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Main.parse2_260.0.0 idr_Main.parse3.0.0)
            (Cidr_Prelude.Basics.Yes) ->
              idris_str_head2.2 <- _prim_string_head idr_Main.parse0.0.40.19.arity.1.0
              idr_Main.parse2_val_262.0.0 <- pure (CGrInt idris_str_head2.2)
              idr_Main.parse2_263.0.0 <- store idr_Main.parse2_val_262.0.0
              idr_Main.parse3_265.0.40.21.arity.1.0 <- pure 32
              (CGrInt idris_int_eq0_1.2) <- fetch idr_Main.parse2_263.0.0
              idris_int_eq2.2 <- _prim_int_eq idris_int_eq0_1.2 idr_Main.parse3_265.0.40.21.arity.1.0
              ccp.0.2 <- case idris_int_eq2.2 of
                #False ->
                  pure unboxed.CGrInt.45
                #True ->
                  pure 1
              idr_Main.parse2_val_261.0.0 <- pure (CGrInt ccp.0.2)
              case idr_Main.parse2_val_261.0.0 of
                (CGrInt idr_Main.parse_cpat_LInt64_0_268.0.0) ->
                  case idr_Main.parse_cpat_LInt64_0_268.0.0 of
                    0 ->
                      idris_str_tail2.2 <- _prim_string_tail idr_Main.parse0.0.40.19.arity.1.0
                      idr_Main.parse4.32.24.arity.1.0.0 <- pure #""
                      idris_str_eq3.2 <- _prim_string_eq idris_str_tail2.2 idr_Main.parse4.32.24.arity.1.0.0
                      ccp.2.2 <- case idris_str_eq3.2 of
                        #False ->
                          pure unboxed.CGrInt.45
                        #True ->
                          pure 1
                      idr_Main.parse3_val_272.0.0 <- pure (CGrInt ccp.2.2)
                      idr_Main.parse3_val_271.0.0 <- case idr_Main.parse3_val_272.0.0 of
                        (CGrInt idr_Main.parse_cpat_LInt64_0_277.0.0) ->
                          case idr_Main.parse_cpat_LInt64_0_277.0.0 of
                            0 ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      idr_Main.parse3_278.0.0 <- store idr_Main.parse3_val_271.0.0
                      idr_Main.parse3_val_270.0.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
                        (Cidr_Prelude.Bool.True) ->
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.2" <- fetch idr_Main.parse3_278.0.0
                          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.2" of
                            (Cidr_Prelude.Bool.False) ->
                              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                            (Cidr_Prelude.Bool.True) ->
                              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                      idr_Main.parse3_val_269.0.0 <- case idr_Main.parse3_val_270.0.0 of
                        (Cidr_Prelude.Basics.No) ->
                          idr_Main.parse4_284.0.0 <- store idr_Prelude.Interactive.getLine'4_val.0
                          idr_Main.parse5.0.0 <- store idr_Prelude.Interactive.getLine'4_val.0
                          pure (Cidr_Builtins.MkPair idr_Main.parse4_284.0.0 idr_Main.parse5.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Main.parse4_284.0.0 idr_Main.parse5.0.0)
                        (Cidr_Prelude.Basics.Yes) ->
                          idris_str_tail2.3 <- _prim_string_tail idr_Main.parse0.0.40.19.arity.1.0
                          idris_str_head2.3 <- _prim_string_head idris_str_tail2.3
                          idr_Main.parse4_val_286.0.0 <- pure (CGrInt idris_str_head2.3)
                          idr_Main.parse4_289.0.0 <- store idr_Main.parse4_val_286.0.0
                          idr_Main.parse5_291.0.40.26.arity.1.0 <- pure 32
                          (CGrInt idris_int_eq0_1.3) <- fetch idr_Main.parse4_289.0.0
                          idris_int_eq2.3 <- _prim_int_eq idris_int_eq0_1.3 idr_Main.parse5_291.0.40.26.arity.1.0
                          ccp.0.3 <- case idris_int_eq2.3 of
                            #False ->
                              pure unboxed.CGrInt.45
                            #True ->
                              pure 1
                          idr_Main.parse4_val_285.0.0 <- pure (CGrInt ccp.0.3)
                          case idr_Main.parse4_val_285.0.0 of
                            (CGrInt idr_Main.parse_cpat_LInt64_0_294.0.0) ->
                              case idr_Main.parse_cpat_LInt64_0_294.0.0 of
                                0 ->
                                  idr_Main.parse5_val_296.0.0 <- pure (C"idr_{U_Main.{parse_3}_1}")
                                  idr_Main.parse5_297.0.0 <- store idr_Main.parse5_val_296.0.0
                                  idris_str_tail2.4 <- _prim_string_tail idr_Main.parse0.0.40.19.arity.1.0
                                  idris_str_tail2.5 <- _prim_string_tail idris_str_tail2.4
                                  idr_Main.parse8.32.26.arity.1.0.0 <- pure #""
                                  idris_str_eq3.3 <- _prim_string_eq idris_str_tail2.5 idr_Main.parse8.32.26.arity.1.0.0
                                  ccp.2.3 <- case idris_str_eq3.3 of
                                    #False ->
                                      pure unboxed.CGrInt.45
                                    #True ->
                                      pure 1
                                  idr_Main.parse7_val_300.0.0 <- pure (CGrInt ccp.2.3)
                                  idr_Main.parse7_val_299.0.0 <- case idr_Main.parse7_val_300.0.0 of
                                    (CGrInt idr_Main.parse_cpat_LInt64_0_306.0.0) ->
                                      case idr_Main.parse_cpat_LInt64_0_306.0.0 of
                                        0 ->
                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                        #default ->
                                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                  idr_Main.parse7_307.0.0 <- store idr_Main.parse7_val_299.0.0
                                  idr_Main.parse7_val_298.0.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
                                    (Cidr_Prelude.Bool.True) ->
                                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.3" <- fetch idr_Main.parse7_307.0.0
                                      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.3" of
                                        (Cidr_Prelude.Bool.False) ->
                                          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                                        (Cidr_Prelude.Bool.True) ->
                                          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                                  idr_Main.parse7_val.0.0 <- case idr_Main.parse7_val_298.0.0 of
                                    (Cidr_Prelude.Basics.No) ->
                                      pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                                    (Cidr_Prelude.Basics.Yes) ->
                                      idris_str_tail2.6 <- _prim_string_tail idr_Main.parse0.0.40.19.arity.1.0
                                      idris_str_tail2.7 <- _prim_string_tail idris_str_tail2.6
                                      idris_str_head2.4 <- _prim_string_head idris_str_tail2.7
                                      idr_Main.parse8_val_312.0.0 <- pure (CGrInt idris_str_head2.4)
                                      idr_Main.parse8_317.0.0 <- store idr_Main.parse8_val_312.0.0
                                      idris_str_tail2.8 <- _prim_string_tail idr_Main.parse0.0.40.19.arity.1.0
                                      idris_str_tail2.9 <- _prim_string_tail idris_str_tail2.8
                                      idris_str_tail2.10 <- _prim_string_tail idris_str_tail2.9
                                      idr_Main.parse9_val.0.0 <- pure (CGrString idris_str_tail2.10)
                                      idr_Main.parse9_321.0.0 <- store idr_Main.parse9_val.0.0
                                      pure (Cidr_Prelude.Strings.StrCons idr_Main.parse8_317.0.0 idr_Main.parse9_321.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Main.parse8_317.0.0 idr_Main.parse9_321.0.0)
                                  idr_Main.parse7_322.0.0 <- store idr_Main.parse7_val.0.0
                                  idr_Main.parse5_val_295.0.0 <- idr__Prelude.Strings.span_with_50 idr_Main.parse5_297.0.0 idr_Main.parse7_322.0.0
                                  (Cidr_Builtins.MkPair idr_Main.parse6_325.0.0 idr_Main.parse7_326.0.0) <- pure idr_Main.parse5_val_295.0.0
                                  idris_str_tail2.11 <- _prim_string_tail idr_Main.parse0.0.40.19.arity.1.0
                                  idris_str_head2.5 <- _prim_string_head idris_str_tail2.11
                                  (CGrString idr_Main.parse6_325.32.28.arity.1.0.0) <- fetch idr_Main.parse6_325.0.0
                                  idris_str_cons3.1 <- _prim_string_cons idris_str_head2.5 idr_Main.parse6_325.32.28.arity.1.0.0
                                  idr_Main.parse8_val_327.0.0 <- pure (CGrString idris_str_cons3.1)
                                  idr_Main.parse8_332.0.0 <- store idr_Main.parse8_val_327.0.0
                                  pure (Cidr_Builtins.MkPair idr_Main.parse8_332.0.0 idr_Main.parse7_326.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Main.parse8_332.0.0 idr_Main.parse7_326.0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.parse6_325.32.28.arity.1.0.0)
                                #default ->
                                  idr_Main.parse5_334.0.0 <- store idr_Prelude.Interactive.getLine'4_val.0
                                  idris_str_tail2.12 <- _prim_string_tail idr_Main.parse0.0.40.19.arity.1.0
                                  idris_str_head2.6 <- _prim_string_head idris_str_tail2.12
                                  idris_str_tail2.13 <- _prim_string_tail idr_Main.parse0.0.40.19.arity.1.0
                                  idris_str_tail2.14 <- _prim_string_tail idris_str_tail2.13
                                  idris_str_cons3.2 <- _prim_string_cons idris_str_head2.6 idris_str_tail2.14
                                  idr_Main.parse6_val_335.0.0 <- pure (CGrString idris_str_cons3.2)
                                  idr_Main.parse6_344.0.0 <- store idr_Main.parse6_val_335.0.0
                                  pure (Cidr_Builtins.MkPair idr_Main.parse5_334.0.0 idr_Main.parse6_344.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Main.parse5_334.0.0 idr_Main.parse6_344.0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.3)
                      (Cidr_Builtins.MkPair idr_Main.parse4_359.0.0 idr_Main.parse5_360.0.0) <- pure idr_Main.parse3_val_269.0.0
                      idris_str_head2.7 <- _prim_string_head idr_Main.parse0.0.40.19.arity.1.0
                      (CGrString idr_Main.parse4_359.32.30.arity.1.0.0) <- fetch idr_Main.parse4_359.0.0
                      idris_str_cons3.3 <- _prim_string_cons idris_str_head2.7 idr_Main.parse4_359.32.30.arity.1.0.0
                      idr_Main.parse6_val_361.0.0 <- pure (CGrString idris_str_cons3.3)
                      idr_Main.parse6_364.0.0 <- store idr_Main.parse6_val_361.0.0
                      pure (Cidr_Builtins.MkPair idr_Main.parse6_364.0.0 idr_Main.parse5_360.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Main.parse6_364.0.0 idr_Main.parse5_360.0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.parse4_359.32.30.arity.1.0.0)
                    #default ->
                      idr_Main.parse3_366.0.0 <- store idr_Prelude.Interactive.getLine'4_val.0
                      idris_str_head2.8 <- _prim_string_head idr_Main.parse0.0.40.19.arity.1.0
                      idris_str_tail2.15 <- _prim_string_tail idr_Main.parse0.0.40.19.arity.1.0
                      idris_str_cons3.4 <- _prim_string_cons idris_str_head2.8 idris_str_tail2.15
                      idr_Main.parse4_val_367.0.0 <- pure (CGrString idris_str_cons3.4)
                      idr_Main.parse4_372.0.0 <- store idr_Main.parse4_val_367.0.0
                      pure (Cidr_Builtins.MkPair idr_Main.parse3_366.0.0 idr_Main.parse4_372.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Main.parse3_366.0.0 idr_Main.parse4_372.0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.2)
          (Cidr_Builtins.MkPair idr_Main.parse2_383.0.0 idr_Main.parse3_384.0.0) <- pure idr_Main.parse1_val.0.0
          (CGrString idr_Main.parse2_383.32.32.arity.1.0.0) <- fetch idr_Main.parse2_383.0.0
          idr_Main.parseCommand0_val.0 <- pure (CGrString idr_Main.parse2_383.32.32.arity.1.0.0)
          idr_Main.processInput2_val.0 <- case idr_Main.parseCommand0_val.0 of
            (CGrString "idr_Main.parseCommand_cpat_LString_\"add\".0") ->
              case "idr_Main.parseCommand_cpat_LString_\"add\".0" of
                #"add" ->
                  idr_Main.parseCommand2_val.0 <- pure (Cidr_Main.Add idr_Main.parse3_384.0.0)
                  idr_Main.parseCommand2.0 <- store idr_Main.parseCommand2_val.0
                  pure (Cidr_Prelude.Maybe.Just idr_Main.parseCommand2.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.parseCommand2.0)
                #"get" ->
                  idr_Main.parseCommand4_val.0 <- pure (C"idr_{U_Main.{parseCommand_4}_2}")
                  idr_Main.parseCommand4.0 <- store idr_Main.parseCommand4_val.0
                  idr_Main.parseCommand5.0 <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                  idr_Main.parseCommand6.32.33.arity.1.0 <- pure #""
                  (CGrString idr_Main.parseCommand1.40.4.arity.1.0) <- fetch idr_Main.parse3_384.0.0
                  idris_str_eq3.4 <- _prim_string_eq idr_Main.parseCommand1.40.4.arity.1.0 idr_Main.parseCommand6.32.33.arity.1.0
                  ccp.2.4 <- case idris_str_eq3.4 of
                    #False ->
                      pure unboxed.CGrInt.45
                    #True ->
                      pure 1
                  idr_Main.parseCommand6_val_390.0 <- pure (CGrInt ccp.2.4)
                  idr_Main.parseCommand6_val_389.0 <- case idr_Main.parseCommand6_val_390.0 of
                    (CGrInt idr_Main.parseCommand_cpat_LInt64_0.0) ->
                      case idr_Main.parseCommand_cpat_LInt64_0.0 of
                        0 ->
                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  idr_Main.parseCommand6_394.0 <- store idr_Main.parseCommand6_val_389.0
                  idr_Main.parseCommand6_val_388.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
                    (Cidr_Prelude.Bool.True) ->
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.4" <- fetch idr_Main.parseCommand6_394.0
                      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.4" of
                        (Cidr_Prelude.Bool.False) ->
                          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                        (Cidr_Prelude.Bool.True) ->
                          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                  idr_Main.parseCommand6_val.0 <- case idr_Main.parseCommand6_val_388.0 of
                    (Cidr_Prelude.Basics.No) ->
                      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
                    (Cidr_Prelude.Basics.Yes) ->
                      idris_str_head2.9 <- _prim_string_head idr_Main.parseCommand1.40.4.arity.1.0
                      idr_Main.parseCommand7_val_397.0 <- pure (CGrInt idris_str_head2.9)
                      idr_Main.parseCommand7_398.0 <- store idr_Main.parseCommand7_val_397.0
                      idris_str_tail2.16 <- _prim_string_tail idr_Main.parseCommand1.40.4.arity.1.0
                      idr_Main.parseCommand9.32.35.arity.1.0 <- pure #""
                      idris_str_eq3.5 <- _prim_string_eq idris_str_tail2.16 idr_Main.parseCommand9.32.35.arity.1.0
                      ccp.2.5 <- case idris_str_eq3.5 of
                        #False ->
                          pure unboxed.CGrInt.45
                        #True ->
                          pure 1
                      idr_Main.parseCommand8_val_401.0 <- pure (CGrInt ccp.2.5)
                      idr_Main.parseCommand8_val_400.0 <- case idr_Main.parseCommand8_val_401.0 of
                        (CGrInt idr_Main.parseCommand_cpat_LInt64_0_405.0) ->
                          case idr_Main.parseCommand_cpat_LInt64_0_405.0 of
                            0 ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      idr_Main.parseCommand8_406.0 <- store idr_Main.parseCommand8_val_400.0
                      idr_Main.parseCommand8_val_399.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
                        (Cidr_Prelude.Bool.True) ->
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.5" <- fetch idr_Main.parseCommand8_406.0
                          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.5" of
                            (Cidr_Prelude.Bool.False) ->
                              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                            (Cidr_Prelude.Bool.True) ->
                              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                      idr_Main.parseCommand8_val.0 <- case idr_Main.parseCommand8_val_399.0 of
                        (Cidr_Prelude.Basics.No) ->
                          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
                        (Cidr_Prelude.Basics.Yes) ->
                          idris_str_tail2.17 <- _prim_string_tail idr_Main.parseCommand1.40.4.arity.1.0
                          idris_str_head2.10 <- _prim_string_head idris_str_tail2.17
                          idr_Main.parseCommand9_val_411.0 <- pure (CGrInt idris_str_head2.10)
                          idr_Main.parseCommand9_414.0 <- store idr_Main.parseCommand9_val_411.0
                          idris_str_tail2.18 <- _prim_string_tail idr_Main.parseCommand1.40.4.arity.1.0
                          idris_str_tail2.19 <- _prim_string_tail idris_str_tail2.18
                          idr_Main.parseCommand12.32.37.arity.1.0 <- pure #""
                          idris_str_eq3.6 <- _prim_string_eq idris_str_tail2.19 idr_Main.parseCommand12.32.37.arity.1.0
                          ccp.2.6 <- case idris_str_eq3.6 of
                            #False ->
                              pure unboxed.CGrInt.45
                            #True ->
                              pure 1
                          idr_Main.parseCommand11_val_418.0 <- pure (CGrInt ccp.2.6)
                          idr_Main.parseCommand11_val_417.0 <- case idr_Main.parseCommand11_val_418.0 of
                            (CGrInt idr_Main.parseCommand_cpat_LInt64_0_424.0) ->
                              case idr_Main.parseCommand_cpat_LInt64_0_424.0 of
                                0 ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          idr_Main.parseCommand11_425.0 <- store idr_Main.parseCommand11_val_417.0
                          idr_Main.parseCommand11_val_416.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
                            (Cidr_Prelude.Bool.True) ->
                              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.6" <- fetch idr_Main.parseCommand11_425.0
                              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.6" of
                                (Cidr_Prelude.Bool.False) ->
                                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                                (Cidr_Prelude.Bool.True) ->
                                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                          idr_Main.parseCommand11_val.0 <- case idr_Main.parseCommand11_val_416.0 of
                            (Cidr_Prelude.Basics.No) ->
                              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                            (Cidr_Prelude.Basics.Yes) ->
                              idris_str_tail2.20 <- _prim_string_tail idr_Main.parseCommand1.40.4.arity.1.0
                              idris_str_tail2.21 <- _prim_string_tail idris_str_tail2.20
                              idris_str_head2.11 <- _prim_string_head idris_str_tail2.21
                              idr_Main.parseCommand12_val_430.0 <- pure (CGrInt idris_str_head2.11)
                              idr_Main.parseCommand12_435.0 <- store idr_Main.parseCommand12_val_430.0
                              idris_str_tail2.22 <- _prim_string_tail idr_Main.parseCommand1.40.4.arity.1.0
                              idris_str_tail2.23 <- _prim_string_tail idris_str_tail2.22
                              idris_str_tail2.24 <- _prim_string_tail idris_str_tail2.23
                              idr_Main.parseCommand13_val.0 <- pure (CGrString idris_str_tail2.24)
                              idr_Main.parseCommand13_439.0 <- store idr_Main.parseCommand13_val.0
                              pure (Cidr_Prelude.Strings.StrCons idr_Main.parseCommand12_435.0 idr_Main.parseCommand13_439.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Main.parseCommand12_435.0 idr_Main.parseCommand13_439.0)
                          idr_Main.parseCommand11_440.0 <- store idr_Main.parseCommand11_val.0
                          idr_Main.parseCommand10_val.0 <- idr__Prelude.Strings.unpack_with_36 idr_Main.parseCommand11_440.0
                          idr_Main.parseCommand10_441.0 <- store idr_Main.parseCommand10_val.0
                          pure (Cidr_Prelude.List.:: idr_Main.parseCommand9_414.0 idr_Main.parseCommand10_441.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Main.parseCommand9_414.0 idr_Main.parseCommand10_441.0)
                      idr_Main.parseCommand8_442.0 <- store idr_Main.parseCommand8_val.0
                      pure (Cidr_Prelude.List.:: idr_Main.parseCommand7_398.0 idr_Main.parseCommand8_442.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Main.parseCommand7_398.0 idr_Main.parseCommand8_442.0)
                  idr_Main.parseCommand6_443.0 <- store idr_Main.parseCommand6_val.0
                  idr_Main.parseCommand2_val_385.0 <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:0" idr_Main.parseCommand4.0 idr_Main.parseCommand5.0 idr_Main.parseCommand6_443.0
                  case idr_Main.parseCommand2_val_385.0 of
                    (Cidr_Prelude.Bool.False) ->
                      pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
                    (Cidr_Prelude.Bool.True) ->
                      idris_str_int2.0 <- _prim_str_int idr_Main.parseCommand1.40.4.arity.1.0
                      idr_Main.parseCommand3_val_447.0 <- pure (CGrInt idris_str_int2.0)
                      idr_Main.parseCommand3_448.0 <- store idr_Main.parseCommand3_val_447.0
                      idr_Main.parseCommand3_val_446.0 <- pure (Cidr_Main.Get idr_Main.parseCommand3_448.0)
                      idr_Main.parseCommand3_449.0 <- store idr_Main.parseCommand3_val_446.0
                      pure (Cidr_Prelude.Maybe.Just idr_Main.parseCommand3_449.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.parseCommand3_449.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.parseCommand1.40.4.arity.1.0)
                #"quit" ->
                  idr_Main.parseCommand1_val.0 <- fetch idr_Main.parse3_384.0.0
                  case idr_Main.parseCommand1_val.0 of
                    (CGrString "idr_Main.parseCommand_cpat_LString_\"\".0") ->
                      case "idr_Main.parseCommand_cpat_LString_\"\".0" of
                        #"" ->
                          idr_Main.parseCommand2_val_450.0 <- pure (Cidr_Main.Quit)
                          idr_Main.parseCommand2_451.0 <- store idr_Main.parseCommand2_val_450.0
                          pure (Cidr_Prelude.Maybe.Just idr_Main.parseCommand2_451.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.parseCommand2_451.0)
                        #default ->
                          pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
                #"search" ->
                  idr_Main.parseCommand2_val_452.0 <- pure (Cidr_Main.Search idr_Main.parse3_384.0.0)
                  idr_Main.parseCommand2_453.0 <- store idr_Main.parseCommand2_val_452.0
                  pure (Cidr_Prelude.Maybe.Just idr_Main.parseCommand2_453.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.parseCommand2_453.0)
                #"size" ->
                  idr_Main.parseCommand1_val_454.0 <- fetch idr_Main.parse3_384.0.0
                  case idr_Main.parseCommand1_val_454.0 of
                    (CGrString "idr_Main.parseCommand_cpat_LString_\"\"_455.0") ->
                      case "idr_Main.parseCommand_cpat_LString_\"\"_455.0" of
                        #"" ->
                          idr_Main.parseCommand2_val_456.0 <- pure (Cidr_Main.Size)
                          idr_Main.parseCommand2_457.0 <- store idr_Main.parseCommand2_val_456.0
                          pure (Cidr_Prelude.Maybe.Just idr_Main.parseCommand2_457.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.parseCommand2_457.0)
                        #default ->
                          pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
                #default ->
                  pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
          case idr_Main.processInput2_val.0 of
            (Cidr_Prelude.Maybe.Just idr_Main.processInput3.0) ->
              idr_Main.processInput3_val.0 <- fetch idr_Main.processInput3.0
              case idr_Main.processInput3_val.0 of
                (Cidr_Main.Add idr_Main.processInput4.0) ->
                  idr_Main.processInput7_val.0 <- pure (C"idr_{U_prim__toStrBigInt_1}")
                  idr_Main.processInput7.0 <- store idr_Main.processInput7_val.0
                  idr_Main.processInput0_val.0 <- fetch "idr_{APPLY_0}2_633.8"
                  (Cidr_Main.MkData idr_Main.processInput9.0 idr_Main.processInput10.0) <- pure idr_Main.processInput0_val.0
                  idr_Main.processInput9_val.0 <- fetch idr_Main.processInput9.0
                  idr_Main.processInput9_503.0 <- store idr_Main.processInput9_val.0
                  "idr_{APPLY_0}0_val.6.0.0" <- fetch idr_Main.processInput7.0
                  idr_Prelude.Show.primNumShow4_val.0.0 <- case "idr_{APPLY_0}0_val.6.0.0" of
                    (C"idr_{U_prim__toStrBigInt_1}") ->
                      (CGrInt idris_int_str1_0.0.0) <- fetch idr_Main.processInput9_503.0
                      idris_int_str2.0.0 <- _prim_int_str idris_int_str1_0.0.0
                      pure (CGrString idris_int_str2.0.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_int_str2.0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.0.0)
                  idr_Prelude.Show.primNumShow2_val.0.0 <- pure (Cidr_Prelude.Show.Open)
                  ccp.4.0.0 <- case idr_Prelude.Show.primNumShow2_val.0.0 of
                    (Cidr_Prelude.Show.Open) ->
                      pure unboxed.CGrInt.45
                  idr_Prelude.Show.primNumShow5_val_460.0.0 <- pure (CGrInt ccp.4.0.0)
                  idr_Prelude.Show.primNumShow5.0.0 <- store idr_Prelude.Show.primNumShow5_val_460.0.0
                  idr_Prelude.Show.primNumShow6.0.0.48.1.arity.1 <- pure 5
                  (CGrInt idris_int_eq0_1.10.0) <- fetch idr_Prelude.Show.primNumShow5.0.0
                  idris_int_eq2.10.0 <- _prim_int_eq idris_int_eq0_1.10.0 idr_Prelude.Show.primNumShow6.0.0.48.1.arity.1
                  ccp.0.10.0 <- case idris_int_eq2.10.0 of
                    #False ->
                      pure unboxed.CGrInt.45
                    #True ->
                      pure 1
                  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0" <- pure (CGrInt ccp.0.10.0)
                  idr_Prelude.Show.primNumShow5_val_459.0.0 <- case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0" of
                    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0") ->
                      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0" of
                        0 ->
                          (CGrInt idris_int_lt0_1.1.0) <- fetch idr_Prelude.Show.primNumShow5.0.0
                          idris_int_lt2.1.0 <- _prim_int_lt idris_int_lt0_1.1.0 idr_Prelude.Show.primNumShow6.0.0.48.1.arity.1
                          ccp.1.1.0 <- case idris_int_lt2.1.0 of
                            #False ->
                              pure unboxed.CGrInt.45
                            #True ->
                              pure 1
                          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0" <- pure (CGrInt ccp.1.1.0)
                          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0" of
                            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_689.0") ->
                              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_689.0" of
                                0 ->
                                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                                #default ->
                                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_lt0_1.1.0)
                        #default ->
                          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
                  idr_Prelude.Show.primNumShow5_val_458.0.0 <- case idr_Prelude.Show.primNumShow5_val_459.0.0 of
                    (Cidr_Prelude.Interfaces.GT) ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                    #default ->
                      ccp.5.0.0 <- case idr_Prelude.Show.primNumShow2_val.0.0 of
                        (Cidr_Prelude.Show.Open) ->
                          pure unboxed.CGrInt.45
                      idr_Prelude.Show.primNumShow6_val_464.0.0 <- pure (CGrInt ccp.5.0.0)
                      idr_Prelude.Show.primNumShow6_466.0.0 <- store idr_Prelude.Show.primNumShow6_val_464.0.0
                      idr_Prelude.Show.primNumShow7.0.40.45.arity.1.0 <- pure 5
                      (CGrInt idris_int_eq0_1.4) <- fetch idr_Prelude.Show.primNumShow6_466.0.0
                      idris_int_eq2.4 <- _prim_int_eq idris_int_eq0_1.4 idr_Prelude.Show.primNumShow7.0.40.45.arity.1.0
                      ccp.0.4 <- case idris_int_eq2.4 of
                        #False ->
                          pure unboxed.CGrInt.45
                        #True ->
                          pure 1
                      idr_Prelude.Show.primNumShow6_val_463.0.0 <- pure (CGrInt ccp.0.4)
                      case idr_Prelude.Show.primNumShow6_val_463.0.0 of
                        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0.0.0) ->
                          case idr_Prelude.Show.primNumShow_cpat_LInt64_0.0.0 of
                            0 ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.4)
                  idr_Prelude.Show.primNumShow5_val.0.0 <- case idr_Prelude.Show.primNumShow5_val_458.0.0 of
                    (Cidr_Prelude.Bool.False) ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                    (Cidr_Prelude.Bool.True) ->
                      idr_Prelude.Show.primNumShow6_475.32.40.arity.1.0.0 <- pure #""
                      (CGrString idr_Prelude.Show.primNumShow4.0.40.46.arity.1.0) <- pure idr_Prelude.Show.primNumShow4_val.0.0
                      idris_str_eq3.7 <- _prim_string_eq idr_Prelude.Show.primNumShow4.0.40.46.arity.1.0 idr_Prelude.Show.primNumShow6_475.32.40.arity.1.0.0
                      ccp.2.7 <- case idris_str_eq3.7 of
                        #False ->
                          pure unboxed.CGrInt.45
                        #True ->
                          pure 1
                      idr_Prelude.Show.primNumShow6_val_473.0.0 <- pure (CGrInt ccp.2.7)
                      idr_Prelude.Show.primNumShow6_val_472.0.0 <- case idr_Prelude.Show.primNumShow6_val_473.0.0 of
                        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_478.0.0) ->
                          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_478.0.0 of
                            0 ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      idr_Prelude.Show.primNumShow6_479.0.0 <- store idr_Prelude.Show.primNumShow6_val_472.0.0
                      idr_Prelude.Show.primNumShow6_val_471.0.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
                        (Cidr_Prelude.Bool.True) ->
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.7" <- fetch idr_Prelude.Show.primNumShow6_479.0.0
                          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.7" of
                            (Cidr_Prelude.Bool.False) ->
                              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                            (Cidr_Prelude.Bool.True) ->
                              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                      case idr_Prelude.Show.primNumShow6_val_471.0.0 of
                        (Cidr_Prelude.Basics.No) ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                        (Cidr_Prelude.Basics.Yes) ->
                          (CGrString idr_Prelude.Show.primNumShow4.0.40.47.arity.1.0) <- pure idr_Prelude.Show.primNumShow4_val.0.0
                          idris_str_head2.12 <- _prim_string_head idr_Prelude.Show.primNumShow4.0.40.47.arity.1.0
                          idr_Prelude.Show.primNumShow7_val_485.0.0 <- pure (CGrInt idris_str_head2.12)
                          idr_Prelude.Show.primNumShow7_486.0.0 <- store idr_Prelude.Show.primNumShow7_val_485.0.0
                          idr_Prelude.Show.primNumShow8.0.40.48.arity.1.0 <- pure 45
                          (CGrInt idris_int_eq0_1.5) <- fetch idr_Prelude.Show.primNumShow7_486.0.0
                          idris_int_eq2.5 <- _prim_int_eq idris_int_eq0_1.5 idr_Prelude.Show.primNumShow8.0.40.48.arity.1.0
                          ccp.0.5 <- case idris_int_eq2.5 of
                            #False ->
                              pure unboxed.CGrInt.45
                            #True ->
                              pure 1
                          idr_Prelude.Show.primNumShow7_val_484.0.0 <- pure (CGrInt ccp.0.5)
                          case idr_Prelude.Show.primNumShow7_val_484.0.0 of
                            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_489.0.0) ->
                              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_489.0.0 of
                                0 ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                #default ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.5)
                  idr_Main.processInput6_val_501.0 <- case idr_Prelude.Show.primNumShow5_val.0.0 of
                    (Cidr_Prelude.Bool.False) ->
                      pure idr_Prelude.Show.primNumShow4_val.0.0
                    (Cidr_Prelude.Bool.True) ->
                      (CGrString idr_Prelude.Show.primNumShow4.0.40.49.arity.1.0) <- pure idr_Prelude.Show.primNumShow4_val.0.0
                      idr_Prelude.Show.primNumShow7_496.0.40.49.arity.1.0 <- pure #")"
                      idris_str_concat3.0 <- _prim_string_concat idr_Prelude.Show.primNumShow4.0.40.49.arity.1.0 idr_Prelude.Show.primNumShow7_496.0.40.49.arity.1.0
                      idr_Prelude.Show.primNumShow6_493.0.40.50.arity.1.0 <- pure #"("
                      idris_str_concat3.1 <- _prim_string_concat idr_Prelude.Show.primNumShow6_493.0.40.50.arity.1.0 idris_str_concat3.0
                      pure (CGrString idris_str_concat3.1) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_concat3.1)
                  (CGrString idr_Main.processInput6_504.40.51.arity.1.0) <- pure idr_Main.processInput6_val_501.0
                  idr_Main.processInput7_506.40.51.arity.1.0 <- pure #"\n"
                  idris_str_concat3.2 <- _prim_string_concat idr_Main.processInput6_504.40.51.arity.1.0 idr_Main.processInput7_506.40.51.arity.1.0
                  idr_Main.processInput5.40.52.arity.1.0 <- pure #"ID "
                  idris_str_concat3.3 <- _prim_string_concat idr_Main.processInput5.40.52.arity.1.0 idris_str_concat3.2
                  idr_Main.processInput5_val_499.0 <- pure (CGrString idris_str_concat3.3)
                  idr_Main.processInput5_508.0 <- store idr_Main.processInput5_val_499.0
                  (Cidr_Main.MkData idr_Main.processInput6_511.0 idr_Main.processInput7_512.0) <- pure idr_Main.processInput0_val.0
                  (CGrInt idr_Main.processInput6_511.32.43.arity.1.0) <- fetch idr_Main.processInput6_511.0
                  idr_Main.processInput8_515.32.43.arity.1.0 <- pure 1
                  idris_int_add2.1.0 <- _prim_int_add idr_Main.processInput6_511.32.43.arity.1.0 idr_Main.processInput8_515.32.43.arity.1.0
                  idr_Main.processInput8_val_513.0 <- pure (CGrInt idris_int_add2.1.0)
                  idr_Main.processInput8_516.0 <- store idr_Main.processInput8_val_513.0
                  idr_Main.processInput9_val_517.0 <- idr_Main.addToStore:addToData:0 idr_Main.processInput4.0 idr_Main.processInput7_512.0
                  idr_Main.processInput9_521.0 <- store idr_Main.processInput9_val_517.0
                  idr_Main.processInput6_val_509.0 <- pure (Cidr_Main.MkData idr_Main.processInput8_516.0 idr_Main.processInput9_521.0)
                  idr_Main.processInput6_522.0 <- store idr_Main.processInput6_val_509.0
                  idr_Main.processInput5_val.0 <- pure (Cidr_Builtins.MkPair idr_Main.processInput5_508.0 idr_Main.processInput6_522.0)
                  idr_Main.processInput5_523.0 <- store idr_Main.processInput5_val.0
                  pure (Cidr_Prelude.Maybe.Just idr_Main.processInput5_523.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.processInput5_523.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.processInput6_511.32.43.arity.1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.10.0)
                (Cidr_Main.Get idr_Main.processInput4_524.0) ->
                  idr_Main.getEntry1_val.0.0 <- fetch "idr_{APPLY_0}2_633.8"
                  (Cidr_Main.MkData idr_Main.getEntry2.0.0 idr_Main.getEntry3.0.0) <- pure idr_Main.getEntry1_val.0.0
                  idr_Main.getEntry2_val_13.0.0 <- fetch idr_Main.getEntry2.0.0
                  (CGrInt idr_Main.getEntry2_14.0.0.48.2.arity.1) <- pure idr_Main.getEntry2_val_13.0.0
                  idr_Data.Fin.integerToFin1_val.0 <- pure (CGrInt idr_Main.getEntry2_14.0.0.48.2.arity.1)
                  idr_Main.getEntry2_val.0.0 <- case idr_Data.Fin.integerToFin1_val.0 of
                    (CGrInt idr_Data.Fin.integerToFin_cpat_LInt64_0.0) ->
                      case idr_Data.Fin.integerToFin_cpat_LInt64_0.0 of
                        0 ->
                          pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
                        #default ->
                          idr_Data.Fin.integerToFin2.48.0.arity.1.0 <- pure 0
                          (CGrInt idris_int_eq0_1.10.1) <- fetch idr_Main.processInput4_524.0
                          idris_int_eq2.10.1 <- _prim_int_eq idris_int_eq0_1.10.1 idr_Data.Fin.integerToFin2.48.0.arity.1.0
                          ccp.0.10.1 <- case idris_int_eq2.10.1 of
                            #False ->
                              pure unboxed.CGrInt.45
                            #True ->
                              pure 1
                          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.1" <- pure (CGrInt ccp.0.10.1)
                          idr_Data.Fin.integerToFin2_val_65.0 <- case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.1" of
                            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.1") ->
                              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.1" of
                                0 ->
                                  (CGrInt idris_int_lt0_1.1.1) <- fetch idr_Main.processInput4_524.0
                                  idris_int_lt2.1.1 <- _prim_int_lt idris_int_lt0_1.1.1 idr_Data.Fin.integerToFin2.48.0.arity.1.0
                                  ccp.1.1.1 <- case idris_int_lt2.1.1 of
                                    #False ->
                                      pure unboxed.CGrInt.45
                                    #True ->
                                      pure 1
                                  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.1" <- pure (CGrInt ccp.1.1.1)
                                  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.1" of
                                    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_689.1") ->
                                      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_689.1" of
                                        0 ->
                                          pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                                        #default ->
                                          pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_lt0_1.1.1)
                                #default ->
                                  pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
                          idr_Data.Fin.integerToFin2_val.0 <- case idr_Data.Fin.integerToFin2_val_65.0 of
                            (Cidr_Prelude.Interfaces.GT) ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              idr_Data.Fin.integerToFin3.40.1.arity.1.0 <- pure 0
                              (CGrInt idris_int_eq0_1.6) <- fetch idr_Main.processInput4_524.0
                              idris_int_eq2.6 <- _prim_int_eq idris_int_eq0_1.6 idr_Data.Fin.integerToFin3.40.1.arity.1.0
                              ccp.0.6 <- case idris_int_eq2.6 of
                                #False ->
                                  pure unboxed.CGrInt.45
                                #True ->
                                  pure 1
                              idr_Data.Fin.integerToFin3_val.0 <- pure (CGrInt ccp.0.6)
                              case idr_Data.Fin.integerToFin3_val.0 of
                                (CGrInt idr_Data.Fin.integerToFin_cpat_LInt64_0_72.0) ->
                                  case idr_Data.Fin.integerToFin_cpat_LInt64_0_72.0 of
                                    0 ->
                                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.6)
                          case idr_Data.Fin.integerToFin2_val.0 of
                            (Cidr_Prelude.Bool.False) ->
                              pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
                            (Cidr_Prelude.Bool.True) ->
                              (CGrInt idr_Data.Fin.integerToFin0.40.2.arity.1.0) <- fetch idr_Main.processInput4_524.0
                              idr_Data.Fin.natToFin idr_Data.Fin.integerToFin0.40.2.arity.1.0 idr_Main.getEntry2_14.0.0.48.2.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Data.Fin.integerToFin0.40.2.arity.1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.10.1)
                  ccp.3.0.0 <- case idr_Main.getEntry2_val.0.0 of
                    (Cidr_Prelude.Maybe.Just idr_Main.getEntry3_17.0.0) ->
                      (Cidr_Main.MkData idr_Main.getEntry6.0.0 idr_Main.getEntry7.0.0) <- pure idr_Main.getEntry1_val.0.0
                      idr_Main.getEntry6_val.0.0 <- fetch idr_Main.getEntry7.0.0
                      idr_Main.getEntry6_22.0.0 <- store idr_Main.getEntry6_val.0.0
                      unboxed.CGrString.1.0.0 <- idr_Data.Vect.index.unboxed idr_Main.getEntry3_17.0.0 idr_Main.getEntry6_22.0.0
                      idr_Main.getEntry5_25.0.40.53.arity.1.0 <- pure #"\n"
                      idris_str_concat3.4 <- _prim_string_concat unboxed.CGrString.1.0.0 idr_Main.getEntry5_25.0.40.53.arity.1.0
                      idr_Main.getEntry4_val_18.0.0 <- pure (CGrString idris_str_concat3.4)
                      idr_Main.getEntry4_26.0.0 <- store idr_Main.getEntry4_val_18.0.0
                      idr_Main.getEntry4_val.0.0 <- pure (Cidr_Builtins.MkPair idr_Main.getEntry4_26.0.0 "idr_{APPLY_0}2_633.8")
                      idr_Main.getEntry4_27.0.0 <- store idr_Main.getEntry4_val.0.0
                      pure idr_Main.getEntry4_27.0.0
                    (Cidr_Prelude.Maybe.Nothing) ->
                      idr_Main.getEntry3_val_28.0.0 <- pure (CGrString #"Out of range\n")
                      idr_Main.getEntry3_29.0.0 <- store idr_Main.getEntry3_val_28.0.0
                      idr_Main.getEntry3_val.0.0 <- pure (Cidr_Builtins.MkPair idr_Main.getEntry3_29.0.0 "idr_{APPLY_0}2_633.8")
                      idr_Main.getEntry3_30.0.0 <- store idr_Main.getEntry3_val.0.0
                      pure idr_Main.getEntry3_30.0.0
                  pure (Cidr_Prelude.Maybe.Just ccp.3.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just ccp.3.0.0)
                (Cidr_Main.Quit) ->
                  pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
                (Cidr_Main.Search idr_Main.processInput4_525.0) ->
                  idr_Main.search0_val.0.0 <- fetch "idr_{APPLY_0}2_633.8"
                  (Cidr_Main.MkData idr_Main.search2.0.0 idr_Main.search3.0.0) <- pure idr_Main.search0_val.0.0
                  idr_Main.search2_val.0.0 <- fetch idr_Main.search3.0.0
                  idr_Main.search2_574.0.0 <- store idr_Main.search2_val.0.0
                  idr_Main.search6_val.0.0 <- pure (C"idr_{U_Main.{search_8}_2}" idr_Main.processInput4_525.0)
                  idr_Main.search6.0.0 <- store idr_Main.search6_val.0.0
                  idr_Main.search7.0.0 <- store idr_Prelude.Interactive.getLine'4_val.0
                  idr_Main.search8_val.0.0 <- pure (C"idr_{U_Main.{search_9}_1}")
                  idr_Main.search8.0.0 <- store idr_Main.search8_val.0.0
                  idr_Main.search13_val.0.0 <- pure (C"idr_{U_Main.{search_10}_2}")
                  idr_Main.search13.0.0 <- store idr_Main.search13_val.0.0
                  (Cidr_Main.MkData idr_Main.search14.0.0 idr_Main.search15.0.0) <- pure idr_Main.search0_val.0.0
                  idr_Main.search14_val_579.0.0 <- fetch idr_Main.search14.0.0
                  (CGrInt idr_Main.search14_581.0.40.54.arity.1.0) <- pure idr_Main.search14_val_579.0.0
                  idr_Main.search14_val.0.0 <- idr_Data.Vect.range idr_Main.search14_581.0.40.54.arity.1.0
                  idr_Main.search14_582.0.0 <- store idr_Main.search14_val.0.0
                  idr_Main.search9_val.0.0 <- idr_Data.Vect.zipWith idr_Main.search13.0.0 idr_Main.search14_582.0.0 idr_Main.search2_574.0.0
                  idr_Main.search9_583.0.0 <- store idr_Main.search9_val.0.0
                  unboxed.CGrString.9.1 <- idr_Data.Vect.foldrImpl.unboxed idr_Main.search6.0.0 idr_Main.search7.0.0 idr_Main.search8.0.0 idr_Main.search9_583.0.0
                  idr_Main.search3_val_575.0.0 <- pure (CGrString unboxed.CGrString.9.1)
                  idr_Main.search3_584.0.0 <- store idr_Main.search3_val_575.0.0
                  idr_Main.search3_val.0.0 <- pure (Cidr_Builtins.MkPair idr_Main.search3_584.0.0 "idr_{APPLY_0}2_633.8")
                  idr_Main.search3_585.0.0 <- store idr_Main.search3_val.0.0
                  pure (Cidr_Prelude.Maybe.Just idr_Main.search3_585.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.search3_585.0.0)
                (Cidr_Main.Size) ->
                  idr_Main.processInput0_val_531.0 <- fetch "idr_{APPLY_0}2_633.8"
                  (Cidr_Main.MkData idr_Main.processInput5_532.0 idr_Main.processInput6_533.0) <- pure idr_Main.processInput0_val_531.0
                  idr_Main.processInput5_val_530.0 <- fetch idr_Main.processInput5_532.0
                  idr_Main.processInput5_534.0 <- store idr_Main.processInput5_val_530.0
                  (CGrInt idris_int_str1_0.1.0) <- fetch idr_Main.processInput5_534.0
                  idris_int_str2.1.0 <- _prim_int_str idris_int_str1_0.1.0
                  idr_Main.processInput4_528.40.55.arity.1.0 <- pure #"Size of store: "
                  idris_str_concat3.5 <- _prim_string_concat idr_Main.processInput4_528.40.55.arity.1.0 idris_int_str2.1.0
                  idr_Main.processInput4_val_526.0 <- pure (CGrString idris_str_concat3.5)
                  idr_Main.processInput4_536.0 <- store idr_Main.processInput4_val_526.0
                  idr_Main.processInput4_val.0 <- pure (Cidr_Builtins.MkPair idr_Main.processInput4_536.0 "idr_{APPLY_0}2_633.8")
                  idr_Main.processInput4_537.0 <- store idr_Main.processInput4_val.0
                  pure (Cidr_Prelude.Maybe.Just idr_Main.processInput4_537.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.processInput4_537.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.1.0)
            (Cidr_Prelude.Maybe.Nothing) ->
              idr_Main.processInput3_val_539.0 <- pure (CGrString #"Invalid command\n")
              idr_Main.processInput3_540.0 <- store idr_Main.processInput3_val_539.0
              idr_Main.processInput3_val_538.0 <- pure (Cidr_Builtins.MkPair idr_Main.processInput3_540.0 "idr_{APPLY_0}2_633.8")
              idr_Main.processInput3_541.0 <- store idr_Main.processInput3_val_538.0
              pure (Cidr_Prelude.Maybe.Just idr_Main.processInput3_541.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.processInput3_541.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.parse2_383.32.32.arity.1.0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.parse0.0.40.19.arity.1.0)
      case idr_Prelude.Interactive.replWith8_val of
        (Cidr_Prelude.Maybe.Just idr_Prelude.Interactive.replWith9) ->
          idr_Prelude.Interactive.replWith9_val <- fetch idr_Prelude.Interactive.replWith9
          (Cidr_Builtins.MkPair idr_Prelude.Interactive.replWith10 idr_Prelude.Interactive.replWith11) <- pure idr_Prelude.Interactive.replWith9_val
          idr_Prelude.Interactive.replWith15_val <- pure (C"idr_{U_Prelude.Interactive.{replWith_6}_1}" idr_Prelude.Interactive.replWith10)
          idr_Prelude.Interactive.replWith15 <- store idr_Prelude.Interactive.replWith15_val
          idr_Prelude.Interactive.replWith16_val <- pure (C"idr_{U_Prelude.Interactive.{replWith_7}_1}" idr_Prelude.Interactive.replWith11 idr_Prelude.Interactive.replWith2 idr_Prelude.Interactive.replWith3)
          idr_Prelude.Interactive.replWith16 <- store idr_Prelude.Interactive.replWith16_val
          "idr_{APPLY_0}0_val.1.0" <- fetch idr_Prelude.Interactive.replWith15
          idr_io_bind6_val_89.0 <- case "idr_{APPLY_0}0_val.1.0" of
            (C"idr_{U_Prelude.Interactive.{replWith_6}_1}" "idr_{APPLY_0}2_641.1.0") ->
              (CGrString idris_write_str2_0.1.0) <- fetch "idr_{APPLY_0}2_641.1.0"
              _prim_string_print idris_write_str2_0.1.0
              pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_write_str2_0.1.0)
          "idr_{APPLY_0}0_val.2.0" <- fetch idr_Prelude.Interactive.replWith16
          idr_io_bind6_val.0 <- case "idr_{APPLY_0}0_val.2.0" of
            (C"idr_{U_Prelude.Interactive.{replWith_7}_1}" "idr_{APPLY_0}2_642.2.0" "idr_{APPLY_0}3_643.2.0" "idr_{APPLY_0}4_644.2.0") ->
              "idr_Prelude.Interactive.{replWith_7}4_val.0" <- pure (CErased)
              "idr_Prelude.Interactive.{replWith_7}4.0" <- store "idr_Prelude.Interactive.{replWith_7}4_val.0"
              pure (C"idr_{U_Prelude.Interactive.replWith_1}" "idr_Prelude.Interactive.{replWith_7}4.0" "idr_{APPLY_0}2_642.2.0" "idr_{APPLY_0}3_643.2.0" "idr_{APPLY_0}4_644.2.0") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Interactive.replWith_1}" "idr_Prelude.Interactive.{replWith_7}4.0" "idr_{APPLY_0}2_642.2.0" "idr_{APPLY_0}3_643.2.0" "idr_{APPLY_0}4_644.2.0")
          idr_io_bind6_90.0 <- store idr_io_bind6_val.0
          "idr_{APPLY_0}0_val.3.0" <- fetch idr_io_bind6_90.0
          case "idr_{APPLY_0}0_val.3.0" of
            (C"idr_{U_Prelude.Interactive.replWith_1}" "idr_{APPLY_0}2_638.3.0" "idr_{APPLY_0}3_639.3.0" "idr_{APPLY_0}4_640.3.0" "idr_{APPLY_0}5.3.0") ->
              idr_Prelude.Interactive.replWith "idr_{APPLY_0}3_639.3.0" "idr_{APPLY_0}4_640.3.0" "idr_{APPLY_0}5.3.0" idr_Prelude.Interactive.replWith4
        (Cidr_Prelude.Maybe.Nothing) ->
          pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_write_str2_0.0)
    (Cidr_Prelude.Bool.True) ->
      pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.File.fEOF0.0.40.57.arity.1)

idr_Prelude.List.tails idr_Prelude.List.tails1 =
  idr_Prelude.List.tails1_val <- fetch idr_Prelude.List.tails1
  idr_Prelude.List.tails2_val <- case idr_Prelude.List.tails1_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.tails2 idr_Prelude.List.tails3) ->
      idr_Prelude.List.tails idr_Prelude.List.tails3
    (Cidr_Prelude.List.Nil) ->
      pure idr_Prelude.List.tails1_val
  idr_Prelude.List.tails2_616 <- store idr_Prelude.List.tails2_val
  pure (Cidr_Prelude.List.:: idr_Prelude.List.tails1 idr_Prelude.List.tails2_616) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.List.tails1 idr_Prelude.List.tails2_616)

idr_Data.Vect.zipWith idr_Data.Vect.zipWith4 idr_Data.Vect.zipWith5 idr_Data.Vect.zipWith6 =
  idr_Data.Vect.zipWith6_val <- fetch idr_Data.Vect.zipWith6
  case idr_Data.Vect.zipWith6_val of
    (Cidr_Data.Vect.:: idr_Data.Vect.zipWith7 idr_Data.Vect.zipWith8) ->
      idr_Data.Vect.zipWith5_val <- fetch idr_Data.Vect.zipWith5
      -- LINT: Invalid pattern match for (Cidr_Data.Vect.:: idr_Data.Vect.zipWith9 idr_Data.Vect.zipWith10). Expected pattern of type: {Cidr_Data.Vect.::[{21,277}
                        ,{24,278}]}, but got: {Cidr_Data.Vect.::[{21,277}
                        ,{24,278}]
      ,Cidr_Data.Vect.Nil[]}
      (Cidr_Data.Vect.:: idr_Data.Vect.zipWith9 idr_Data.Vect.zipWith10) <- pure idr_Data.Vect.zipWith5_val
      "idr_{APPLY_0}0_val.9" <- fetch idr_Data.Vect.zipWith4
      idr_Data.Vect.zipWith11_val_629 <- case "idr_{APPLY_0}0_val.9" of
        (C"idr_{U_Main.{search_10}_2}") ->
          pure (C"idr_{U_Main.{search_10}_1}" idr_Data.Vect.zipWith9) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{search_10}_1}" idr_Data.Vect.zipWith9)
      idr_Data.Vect.zipWith11 <- store idr_Data.Vect.zipWith11_val_629
      "idr_{APPLY_0}0_val.10" <- fetch idr_Data.Vect.zipWith11
      idr_Data.Vect.zipWith11_val <- case "idr_{APPLY_0}0_val.10" of
        (C"idr_{U_Main.{search_10}_1}" "idr_{APPLY_0}2_635.10") ->
          pure (Cidr_Builtins.MkPair "idr_{APPLY_0}2_635.10" idr_Data.Vect.zipWith7) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair "idr_{APPLY_0}2_635.10" idr_Data.Vect.zipWith7)
      idr_Data.Vect.zipWith11_630 <- store idr_Data.Vect.zipWith11_val
      idr_Data.Vect.zipWith12_val <- idr_Data.Vect.zipWith idr_Data.Vect.zipWith4 idr_Data.Vect.zipWith10 idr_Data.Vect.zipWith8
      idr_Data.Vect.zipWith12_632 <- store idr_Data.Vect.zipWith12_val
      pure (Cidr_Data.Vect.:: idr_Data.Vect.zipWith11_630 idr_Data.Vect.zipWith12_632) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Data.Vect.zipWith11_630 idr_Data.Vect.zipWith12_632)
    (Cidr_Data.Vect.Nil) ->
      pure idr_Data.Vect.zipWith6_val

"idr_Data.Vect.{foldrImpl_2}.unboxed" "idr_Data.Vect.{foldrImpl_2}0" "idr_Data.Vect.{foldrImpl_2}1" "idr_Data.Vect.{foldrImpl_2}2" "idr_Data.Vect.{foldrImpl_2}3" =
  "idr_{APPLY_0}0_val.11" <- fetch "idr_Data.Vect.{foldrImpl_2}1"
  "idr_Data.Vect.{foldrImpl_2}4_val_660" <- case "idr_{APPLY_0}0_val.11" of
    (C"idr_{U_Main.{search_8}_2}" "idr_{APPLY_0}2_649.11") ->
      pure (C"idr_{U_Main.{search_8}_1}" "idr_{APPLY_0}2_649.11" "idr_Data.Vect.{foldrImpl_2}2") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{search_8}_1}" "idr_{APPLY_0}2_649.11" "idr_Data.Vect.{foldrImpl_2}2")
  "idr_Data.Vect.{foldrImpl_2}4" <- store "idr_Data.Vect.{foldrImpl_2}4_val_660"
  "idr_{APPLY_0}0_val.12" <- fetch "idr_Data.Vect.{foldrImpl_2}4"
  "idr_Data.Vect.{foldrImpl_2}4_val" <- case "idr_{APPLY_0}0_val.12" of
    (C"idr_{U_Main.{search_8}_1}" "idr_{APPLY_0}2_636.12" "idr_{APPLY_0}3_637.12") ->
      "idr_Main.{search_8}1_val.0" <- fetch "idr_{APPLY_0}3_637.12"
      -- LINT: Invalid pattern match for (Cidr_Builtins.MkPair "idr_Main.{search_8}3.0" "idr_Main.{search_8}4.0"). Expected pattern of type: {Cidr_Builtins.MkPair[{21,277}
                           ,{51,61,89,96,291,302}]}, but got: {CGrString[T_String]
      ,Cidr_Builtins.MkPair[{21,277}
                           ,{51,61,89,96,291,302}]}
      (Cidr_Builtins.MkPair "idr_Main.{search_8}3.0" "idr_Main.{search_8}4.0") <- pure "idr_Main.{search_8}1_val.0"
      idr_Prelude.Strings.isInfixOf2.32.11.arity.1.0.0 <- pure #""
      (CGrString idr_Prelude.Strings.isInfixOf0.0.40.69.arity.1.0) <- fetch "idr_{APPLY_0}2_636.12"
      idris_str_eq3.8 <- _prim_string_eq idr_Prelude.Strings.isInfixOf0.0.40.69.arity.1.0 idr_Prelude.Strings.isInfixOf2.32.11.arity.1.0.0
      ccp.2.8 <- case idris_str_eq3.8 of
        #False ->
          pure 0
        #True ->
          pure 1
      idr_Prelude.Strings.isInfixOf2_val_111.0.0 <- pure (CGrInt ccp.2.8)
      idr_Prelude.Strings.isInfixOf2_val_110.0.0 <- case idr_Prelude.Strings.isInfixOf2_val_111.0.0 of
        (CGrInt idr_Prelude.Strings.isInfixOf_cpat_LInt64_0.0.0) ->
          case idr_Prelude.Strings.isInfixOf_cpat_LInt64_0.0.0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Strings.isInfixOf2_115.0.0 <- store idr_Prelude.Strings.isInfixOf2_val_110.0.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.8" <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Strings.isInfixOf2_val_109.0.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.8" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.8" <- fetch idr_Prelude.Strings.isInfixOf2_115.0.0
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.8" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Prelude.Strings.isInfixOf2_val.0.0 <- case idr_Prelude.Strings.isInfixOf2_val_109.0.0 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_head2.13 <- _prim_string_head idr_Prelude.Strings.isInfixOf0.0.40.69.arity.1.0
          idr_Prelude.Strings.isInfixOf3_val_118.0.0 <- pure (CGrInt idris_str_head2.13)
          idr_Prelude.Strings.isInfixOf3_119.0.0 <- store idr_Prelude.Strings.isInfixOf3_val_118.0.0
          idris_str_tail2.25 <- _prim_string_tail idr_Prelude.Strings.isInfixOf0.0.40.69.arity.1.0
          idr_Prelude.Strings.isInfixOf6.32.13.arity.1.0.0 <- pure #""
          idris_str_eq3.9 <- _prim_string_eq idris_str_tail2.25 idr_Prelude.Strings.isInfixOf6.32.13.arity.1.0.0
          ccp.2.9 <- case idris_str_eq3.9 of
            #False ->
              pure 0
            #True ->
              pure 1
          idr_Prelude.Strings.isInfixOf5_val_123.0.0 <- pure (CGrInt ccp.2.9)
          idr_Prelude.Strings.isInfixOf5_val_122.0.0 <- case idr_Prelude.Strings.isInfixOf5_val_123.0.0 of
            (CGrInt idr_Prelude.Strings.isInfixOf_cpat_LInt64_0_127.0.0) ->
              case idr_Prelude.Strings.isInfixOf_cpat_LInt64_0_127.0.0 of
                0 ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.8"
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.isInfixOf5_128.0.0 <- store idr_Prelude.Strings.isInfixOf5_val_122.0.0
          idr_Prelude.Strings.isInfixOf5_val_121.0.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.8" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.9" <- fetch idr_Prelude.Strings.isInfixOf5_128.0.0
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.9" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          idr_Prelude.Strings.isInfixOf5_val.0.0 <- case idr_Prelude.Strings.isInfixOf5_val_121.0.0 of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
            (Cidr_Prelude.Basics.Yes) ->
              idris_str_tail2.26 <- _prim_string_tail idr_Prelude.Strings.isInfixOf0.0.40.69.arity.1.0
              idris_str_head2.14 <- _prim_string_head idris_str_tail2.26
              idr_Prelude.Strings.isInfixOf6_val_133.0.0 <- pure (CGrInt idris_str_head2.14)
              idr_Prelude.Strings.isInfixOf6_136.0.0 <- store idr_Prelude.Strings.isInfixOf6_val_133.0.0
              idris_str_tail2.27 <- _prim_string_tail idr_Prelude.Strings.isInfixOf0.0.40.69.arity.1.0
              idris_str_tail2.28 <- _prim_string_tail idris_str_tail2.27
              idr_Prelude.Strings.isInfixOf7_val.0.0 <- pure (CGrString idris_str_tail2.28)
              idr_Prelude.Strings.isInfixOf7_138.0.0 <- store idr_Prelude.Strings.isInfixOf7_val.0.0
              pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.isInfixOf6_136.0.0 idr_Prelude.Strings.isInfixOf7_138.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.isInfixOf6_136.0.0 idr_Prelude.Strings.isInfixOf7_138.0.0)
          idr_Prelude.Strings.isInfixOf5_139.0.0 <- store idr_Prelude.Strings.isInfixOf5_val.0.0
          idr_Prelude.Strings.isInfixOf4_val.0.0 <- idr__Prelude.Strings.unpack_with_36 idr_Prelude.Strings.isInfixOf5_139.0.0
          idr_Prelude.Strings.isInfixOf4_140.0.0 <- store idr_Prelude.Strings.isInfixOf4_val.0.0
          pure (Cidr_Prelude.List.:: idr_Prelude.Strings.isInfixOf3_119.0.0 idr_Prelude.Strings.isInfixOf4_140.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Strings.isInfixOf3_119.0.0 idr_Prelude.Strings.isInfixOf4_140.0.0)
      idr_Prelude.Strings.isInfixOf2_141.0.0 <- store idr_Prelude.Strings.isInfixOf2_val.0.0
      idr_Prelude.Strings.isInfixOf3_147.32.15.arity.1.0.0 <- pure #""
      (CGrString idr_Prelude.Strings.isInfixOf1.0.40.77.arity.1.0) <- fetch "idr_Main.{search_8}4.0"
      idris_str_eq3.10 <- _prim_string_eq idr_Prelude.Strings.isInfixOf1.0.40.77.arity.1.0 idr_Prelude.Strings.isInfixOf3_147.32.15.arity.1.0.0
      ccp.2.10 <- case idris_str_eq3.10 of
        #False ->
          pure 0
        #True ->
          pure 1
      idr_Prelude.Strings.isInfixOf3_val_145.0.0 <- pure (CGrInt ccp.2.10)
      idr_Prelude.Strings.isInfixOf3_val_144.0.0 <- case idr_Prelude.Strings.isInfixOf3_val_145.0.0 of
        (CGrInt idr_Prelude.Strings.isInfixOf_cpat_LInt64_0_150.0.0) ->
          case idr_Prelude.Strings.isInfixOf_cpat_LInt64_0_150.0.0 of
            0 ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.8"
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Strings.isInfixOf3_151.0.0 <- store idr_Prelude.Strings.isInfixOf3_val_144.0.0
      idr_Prelude.Strings.isInfixOf3_val_143.0.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.8" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.10" <- fetch idr_Prelude.Strings.isInfixOf3_151.0.0
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.10" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Prelude.Strings.isInfixOf3_val_142.0.0 <- case idr_Prelude.Strings.isInfixOf3_val_143.0.0 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_head2.15 <- _prim_string_head idr_Prelude.Strings.isInfixOf1.0.40.77.arity.1.0
          idr_Prelude.Strings.isInfixOf4_val_156.0.0 <- pure (CGrInt idris_str_head2.15)
          idr_Prelude.Strings.isInfixOf4_157.0.0 <- store idr_Prelude.Strings.isInfixOf4_val_156.0.0
          idris_str_tail2.29 <- _prim_string_tail idr_Prelude.Strings.isInfixOf1.0.40.77.arity.1.0
          idr_Prelude.Strings.isInfixOf7_168.32.17.arity.1.0.0 <- pure #""
          idris_str_eq3.11 <- _prim_string_eq idris_str_tail2.29 idr_Prelude.Strings.isInfixOf7_168.32.17.arity.1.0.0
          ccp.2.11 <- case idris_str_eq3.11 of
            #False ->
              pure 0
            #True ->
              pure 1
          idr_Prelude.Strings.isInfixOf6_val_164.0.0 <- pure (CGrInt ccp.2.11)
          idr_Prelude.Strings.isInfixOf6_val_163.0.0 <- case idr_Prelude.Strings.isInfixOf6_val_164.0.0 of
            (CGrInt idr_Prelude.Strings.isInfixOf_cpat_LInt64_0_171.0.0) ->
              case idr_Prelude.Strings.isInfixOf_cpat_LInt64_0_171.0.0 of
                0 ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.8"
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.isInfixOf6_172.0.0 <- store idr_Prelude.Strings.isInfixOf6_val_163.0.0
          idr_Prelude.Strings.isInfixOf6_val_162.0.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.8" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.11" <- fetch idr_Prelude.Strings.isInfixOf6_172.0.0
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.11" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          idr_Prelude.Strings.isInfixOf6_val_161.0.0 <- case idr_Prelude.Strings.isInfixOf6_val_162.0.0 of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
            (Cidr_Prelude.Basics.Yes) ->
              idris_str_tail2.30 <- _prim_string_tail idr_Prelude.Strings.isInfixOf1.0.40.77.arity.1.0
              idris_str_head2.16 <- _prim_string_head idris_str_tail2.30
              idr_Prelude.Strings.isInfixOf7_val_177.0.0 <- pure (CGrInt idris_str_head2.16)
              idr_Prelude.Strings.isInfixOf7_180.0.0 <- store idr_Prelude.Strings.isInfixOf7_val_177.0.0
              idris_str_tail2.31 <- _prim_string_tail idr_Prelude.Strings.isInfixOf1.0.40.77.arity.1.0
              idris_str_tail2.32 <- _prim_string_tail idris_str_tail2.31
              idr_Prelude.Strings.isInfixOf8_val.0.0 <- pure (CGrString idris_str_tail2.32)
              idr_Prelude.Strings.isInfixOf8_182.0.0 <- store idr_Prelude.Strings.isInfixOf8_val.0.0
              pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.isInfixOf7_180.0.0 idr_Prelude.Strings.isInfixOf8_182.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.isInfixOf7_180.0.0 idr_Prelude.Strings.isInfixOf8_182.0.0)
          idr_Prelude.Strings.isInfixOf6_183.0.0 <- store idr_Prelude.Strings.isInfixOf6_val_161.0.0
          idr_Prelude.Strings.isInfixOf5_val_158.0.0 <- idr__Prelude.Strings.unpack_with_36 idr_Prelude.Strings.isInfixOf6_183.0.0
          idr_Prelude.Strings.isInfixOf5_184.0.0 <- store idr_Prelude.Strings.isInfixOf5_val_158.0.0
          pure (Cidr_Prelude.List.:: idr_Prelude.Strings.isInfixOf4_157.0.0 idr_Prelude.Strings.isInfixOf5_184.0.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Strings.isInfixOf4_157.0.0 idr_Prelude.Strings.isInfixOf5_184.0.0)
      idr_Prelude.Strings.isInfixOf3_185.0.0 <- store idr_Prelude.Strings.isInfixOf3_val_142.0.0
      idr_PE_isInfixOf_22f242c84_val.0 <- pure (C"idr_{U_{PE_isInfixOf_22f242c8_1}_2}" idr_Prelude.Strings.isInfixOf2_141.0.0)
      idr_PE_isInfixOf_22f242c84.0 <- store idr_PE_isInfixOf_22f242c84_val.0
      idr_PE_isInfixOf_22f242c85_val.0 <- pure (Cidr_Prelude.Bool.False)
      idr_PE_isInfixOf_22f242c85.0 <- store idr_PE_isInfixOf_22f242c85_val.0
      idr_PE_isInfixOf_22f242c81_val.0 <- fetch idr_Prelude.Strings.isInfixOf3_185.0.0
      idr_PE_isInfixOf_22f242c86_val_1.0 <- case idr_PE_isInfixOf_22f242c81_val.0 of
        (Cidr_Prelude.List.:: idr_PE_isInfixOf_22f242c86.0 idr_PE_isInfixOf_22f242c87.0) ->
          idr_Prelude.List.tails idr_PE_isInfixOf_22f242c87.0
        (Cidr_Prelude.List.Nil) ->
          pure idr_PE_isInfixOf_22f242c81_val.0
      idr_PE_isInfixOf_22f242c86_2.0 <- store idr_PE_isInfixOf_22f242c86_val_1.0
      idr_PE_isInfixOf_22f242c86_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Strings.isInfixOf3_185.0.0 idr_PE_isInfixOf_22f242c86_2.0)
      idr_PE_isInfixOf_22f242c86_3.0 <- store idr_PE_isInfixOf_22f242c86_val.0
      "idr_Main.{search_8}5_val.0" <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:0" idr_PE_isInfixOf_22f242c84.0 idr_PE_isInfixOf_22f242c85.0 idr_PE_isInfixOf_22f242c86_3.0
      unboxed.CGrString.11 <- case "idr_Main.{search_8}5_val.0" of
        (Cidr_Prelude.Bool.False) ->
          (CGrString unboxed.CGrString.1.1) <- fetch "idr_Data.Vect.{foldrImpl_2}3"
          pure unboxed.CGrString.1.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString unboxed.CGrString.1.1)
        (Cidr_Prelude.Bool.True) ->
          unboxed.CGrInt.48.0 <- idr_Data.Fin.finToInteger.unboxed "idr_Main.{search_8}3.0"
          "idr_Main.{search_8}6_val_666.0" <- pure (CGrInt unboxed.CGrInt.48.0)
          "idr_Main.{search_8}6_668.0" <- store "idr_Main.{search_8}6_val_666.0"
          (CGrInt idris_int_str1_0.2.0) <- fetch "idr_Main.{search_8}6_668.0"
          idris_int_str2.2.0 <- _prim_int_str idris_int_str1_0.2.0
          "idr_Main.{search_8}8.40.85.arity.1.0" <- pure #"\n"
          (CGrString "idr_Main.{search_8}2.40.85.arity.1.0") <- fetch "idr_Data.Vect.{foldrImpl_2}3"
          idris_str_concat3.6 <- _prim_string_concat "idr_Main.{search_8}8.40.85.arity.1.0" "idr_Main.{search_8}2.40.85.arity.1.0"
          (CGrString "idr_Main.{search_8}4.40.86.arity.1.0") <- fetch "idr_Main.{search_8}4.0"
          idris_str_concat3.7 <- _prim_string_concat "idr_Main.{search_8}4.40.86.arity.1.0" idris_str_concat3.6
          "idr_Main.{search_8}7.40.87.arity.1.0" <- pure #": "
          idris_str_concat3.8 <- _prim_string_concat "idr_Main.{search_8}7.40.87.arity.1.0" idris_str_concat3.7
          idris_str_concat3.9 <- _prim_string_concat idris_int_str2.2.0 idris_str_concat3.8
          pure idris_str_concat3.9 -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Main.{search_8}4.40.86.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Main.{search_8}2.40.85.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.2.0)
      pure (CGrString unboxed.CGrString.11) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.11) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.isInfixOf1.0.40.77.arity.1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.isInfixOf0.0.40.69.arity.1.0)
  "idr_Data.Vect.{foldrImpl_2}4_661" <- store "idr_Data.Vect.{foldrImpl_2}4_val"
  "idr_{APPLY_0}0_val.13" <- fetch "idr_Data.Vect.{foldrImpl_2}0"
  case "idr_{APPLY_0}0_val.13" of
    (C"idr_{U_Data.Vect.{foldrImpl_2}_1}" "idr_{APPLY_0}2.13" "idr_{APPLY_0}3.13" "idr_{APPLY_0}4.13") ->
      "idr_Data.Vect.{foldrImpl_2}.unboxed" "idr_{APPLY_0}2.13" "idr_{APPLY_0}3.13" "idr_{APPLY_0}4.13" "idr_Data.Vect.{foldrImpl_2}4_661"
    (C"idr_{U_Main.{search_9}_1}") ->
      (CGrString "idr_{APPLY_0}1.13.40.65.arity.1") <- fetch "idr_Data.Vect.{foldrImpl_2}4_661"
      pure "idr_{APPLY_0}1.13.40.65.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_{APPLY_0}1.13.40.65.arity.1")

idr_Main.addToStore:addToData:0 idr_Main.addToStore:addToData:03 idr_Main.addToStore:addToData:04 =
  idr_Main.addToStore:addToData:04_val <- fetch idr_Main.addToStore:addToData:04
  case idr_Main.addToStore:addToData:04_val of
    (Cidr_Data.Vect.:: idr_Main.addToStore:addToData:05 idr_Main.addToStore:addToData:06) ->
      idr_Main.addToStore:addToData:07_val <- idr_Main.addToStore:addToData:0 idr_Main.addToStore:addToData:03 idr_Main.addToStore:addToData:06
      idr_Main.addToStore:addToData:07_677 <- store idr_Main.addToStore:addToData:07_val
      pure (Cidr_Data.Vect.:: idr_Main.addToStore:addToData:05 idr_Main.addToStore:addToData:07_677) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Main.addToStore:addToData:05 idr_Main.addToStore:addToData:07_677)
    (Cidr_Data.Vect.Nil) ->
      idr_Main.addToStore:addToData:05_val <- pure (Cidr_Data.Vect.Nil)
      idr_Main.addToStore:addToData:05_678 <- store idr_Main.addToStore:addToData:05_val
      pure (Cidr_Data.Vect.:: idr_Main.addToStore:addToData:03 idr_Main.addToStore:addToData:05_678) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Main.addToStore:addToData:03 idr_Main.addToStore:addToData:05_678)

"idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:0" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:03" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:04" =
  "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:04_val" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:04"
  case "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:05" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:06") ->
      "idr_{APPLY_0}0_val.14" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:02"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_val_680" <- case "idr_{APPLY_0}0_val.14" of
        (C"idr_{U_Main.{parseCommand_4}_2}") ->
          pure (C"idr_{U_Main.{parseCommand_4}_1}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:03") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{parseCommand_4}_1}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:03")
        (C"idr_{U_{PE_isInfixOf_22f242c8_1}_2}" "idr_{APPLY_0}2_650.14") ->
          pure (C"idr_{U_{PE_isInfixOf_22f242c8_1}_1}" "idr_{APPLY_0}2_650.14" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:03") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_{PE_isInfixOf_22f242c8_1}_1}" "idr_{APPLY_0}2_650.14" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:03")
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_val_680"
      "idr_{APPLY_0}0_val.15" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_val" <- case "idr_{APPLY_0}0_val.15" of
        (C"idr_{U_Main.{parseCommand_4}_1}" "idr_{APPLY_0}2_634.15") ->
          "idr_Main.{parseCommand_4}0_val.0" <- fetch "idr_{APPLY_0}2_634.15"
          case "idr_Main.{parseCommand_4}0_val.0" of
            (Cidr_Prelude.Bool.False) ->
              pure "idr_Main.{parseCommand_4}0_val.0"
            (Cidr_Prelude.Bool.True) ->
              idr_Prelude.Chars.isDigit1.0.0.48.3.arity.1 <- pure 48
              -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.9.0)
              -- LINT: Invalid pattern match for (CGrInt idris_int_eq0_1.9.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
              ,Cidr_Prelude.List.::[{121
                                    ,223
                                    ,233
                                    ,240
                                    ,283}
                                   ,{244,286}]
              ,Cidr_Prelude.List.Nil[]}
              (CGrInt idris_int_eq0_1.9.0) <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:05"
              idris_int_eq2.9.0 <- _prim_int_eq idris_int_eq0_1.9.0 idr_Prelude.Chars.isDigit1.0.0.48.3.arity.1
              ccp.0.9.0 <- case idris_int_eq2.9.0 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.0" <- pure (CGrInt ccp.0.9.0)
              idr_Prelude.Chars.isDigit1_val_91.0.0 <- case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.0" of
                (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.0") ->
                  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.0" of
                    0 ->
                      -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_lt0_1.0.0)
                      -- LINT: Invalid pattern match for (CGrInt idris_int_lt0_1.0.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
                      ,Cidr_Prelude.List.::[{121
                                            ,223
                                            ,233
                                            ,240
                                            ,283}
                                           ,{244,286}]
                      ,Cidr_Prelude.List.Nil[]}
                      (CGrInt idris_int_lt0_1.0.0) <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:05"
                      idris_int_lt2.0.0 <- _prim_int_lt idris_int_lt0_1.0.0 idr_Prelude.Chars.isDigit1.0.0.48.3.arity.1
                      ccp.1.0.0 <- case idris_int_lt2.0.0 of
                        #False ->
                          pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.0"
                        #True ->
                          pure 1
                      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.0" <- pure (CGrInt ccp.1.0.0)
                      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.0" of
                        (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_686.0") ->
                          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_686.0" of
                            0 ->
                              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                            #default ->
                              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
                    #default ->
                      pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
              idr_Prelude.Chars.isDigit1_val.0.0 <- case idr_Prelude.Chars.isDigit1_val_91.0.0 of
                (Cidr_Prelude.Interfaces.GT) ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  idr_Prelude.Chars.isDigit2.0.40.67.arity.1.0 <- pure 48
                  -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.7)
                  -- LINT: Invalid pattern match for (CGrInt idris_int_eq0_1.7). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
                  ,Cidr_Prelude.List.::[{121
                                        ,223
                                        ,233
                                        ,240
                                        ,283}
                                       ,{244,286}]
                  ,Cidr_Prelude.List.Nil[]}
                  (CGrInt idris_int_eq0_1.7) <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:05"
                  idris_int_eq2.7 <- _prim_int_eq idris_int_eq0_1.7 idr_Prelude.Chars.isDigit2.0.40.67.arity.1.0
                  ccp.0.7 <- case idris_int_eq2.7 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  idr_Prelude.Chars.isDigit2_val.0.0 <- pure (CGrInt ccp.0.7)
                  case idr_Prelude.Chars.isDigit2_val.0.0 of
                    (CGrInt idr_Prelude.Chars.isDigit_cpat_LInt64_0.0.0) ->
                      case idr_Prelude.Chars.isDigit_cpat_LInt64_0.0.0 of
                        0 ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                        #default ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
              case idr_Prelude.Chars.isDigit1_val.0.0 of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                (Cidr_Prelude.Bool.True) ->
                  idr_Prelude.Chars.isDigit2_102.0.0.48.4.arity.1 <- pure 57
                  -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.9.1)
                  -- LINT: Invalid pattern match for (CGrInt idris_int_eq0_1.9.1). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
                  ,Cidr_Prelude.List.::[{121
                                        ,223
                                        ,233
                                        ,240
                                        ,283}
                                       ,{244,286}]
                  ,Cidr_Prelude.List.Nil[]}
                  (CGrInt idris_int_eq0_1.9.1) <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:05"
                  idris_int_eq2.9.1 <- _prim_int_eq idris_int_eq0_1.9.1 idr_Prelude.Chars.isDigit2_102.0.0.48.4.arity.1
                  ccp.0.9.1 <- case idris_int_eq2.9.1 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.1" <- pure (CGrInt ccp.0.9.1)
                  idr_Prelude.Chars.isDigit2_val_100.0.0 <- case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.1" of
                    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.1") ->
                      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.1" of
                        0 ->
                          -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_lt0_1.0.1)
                          -- LINT: Invalid pattern match for (CGrInt idris_int_lt0_1.0.1). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
                          ,Cidr_Prelude.List.::[{121
                                                ,223
                                                ,233
                                                ,240
                                                ,283}
                                               ,{244,286}]
                          ,Cidr_Prelude.List.Nil[]}
                          (CGrInt idris_int_lt0_1.0.1) <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:05"
                          idris_int_lt2.0.1 <- _prim_int_lt idris_int_lt0_1.0.1 idr_Prelude.Chars.isDigit2_102.0.0.48.4.arity.1
                          ccp.1.0.1 <- case idris_int_lt2.0.1 of
                            #False ->
                              pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.1"
                            #True ->
                              pure 1
                          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.1" <- pure (CGrInt ccp.1.0.1)
                          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.1" of
                            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_686.1") ->
                              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_686.1" of
                                0 ->
                                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                                #default ->
                                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
                        #default ->
                          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
                  case idr_Prelude.Chars.isDigit2_val_100.0.0 of
                    (Cidr_Prelude.Interfaces.LT) ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      idr_Prelude.Chars.isDigit3.0.40.68.arity.1.0 <- pure 57
                      -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.8)
                      -- LINT: Invalid pattern match for (CGrInt idris_int_eq0_1.8). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
                      ,Cidr_Prelude.List.::[{121
                                            ,223
                                            ,233
                                            ,240
                                            ,283}
                                           ,{244,286}]
                      ,Cidr_Prelude.List.Nil[]}
                      (CGrInt idris_int_eq0_1.8) <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:05"
                      idris_int_eq2.8 <- _prim_int_eq idris_int_eq0_1.8 idr_Prelude.Chars.isDigit3.0.40.68.arity.1.0
                      ccp.0.8 <- case idris_int_eq2.8 of
                        #False ->
                          pure 0
                        #True ->
                          pure 1
                      idr_Prelude.Chars.isDigit3_val.0.0 <- pure (CGrInt ccp.0.8)
                      case idr_Prelude.Chars.isDigit3_val.0.0 of
                        (CGrInt idr_Prelude.Chars.isDigit_cpat_LInt64_0_108.0.0) ->
                          case idr_Prelude.Chars.isDigit_cpat_LInt64_0_108.0.0 of
                            0 ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                            #default ->
                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        (C"idr_{U_{PE_isInfixOf_22f242c8_1}_1}" "idr_{APPLY_0}2_647.15" "idr_{APPLY_0}3_648.15") ->
          "idr_{PE_isInfixOf_22f242c8_1}1_val.0" <- fetch "idr_{APPLY_0}3_648.15"
          case "idr_{PE_isInfixOf_22f242c8_1}1_val.0" of
            (Cidr_Prelude.Bool.False) ->
              "idr_{PE_isInfixOf_22f242c8_1}4_val.0" <- pure (C"idr_{U_{PE_isInfixOf_22f242c8_0}_2}")
              "idr_{PE_isInfixOf_22f242c8_1}4.0" <- store "idr_{PE_isInfixOf_22f242c8_1}4_val.0"
              idr_Prelude.List.isPrefixOfBy "idr_{PE_isInfixOf_22f242c8_1}4.0" "idr_{APPLY_0}2_647.15" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:05"
            (Cidr_Prelude.Bool.True) ->
              pure "idr_{PE_isInfixOf_22f242c8_1}1_val.0"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_681" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_val"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:0" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_681" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:06"
    (Cidr_Prelude.List.Nil) ->
      fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:03"

"idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:0" "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:03" "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:04" =
  "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:04_val" <- fetch "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:04"
  case "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:04_val" of
    (Cidr_Data.Vect.:: "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:05" "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:06") ->
      "idr_{APPLY_0}0_val.16" <- fetch "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:03"
      "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:07_val" <- case "idr_{APPLY_0}0_val.16" of
        (C"idr_{U_Data.Vect.{range_5}_1}") ->
          pure (Cidr_Data.Fin.FS "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:05") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Fin.FS "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:05")
      "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:07" <- store "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:07_val"
      "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:08_val" <- "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:0" "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:03" "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:06"
      "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:08_683" <- store "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:08_val"
      pure (Cidr_Data.Vect.:: "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:07" "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:08_683") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:07" "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:08_683")
    (Cidr_Data.Vect.Nil) ->
      pure "idr_Prelude.Functor.Data.Vect.@Prelude.Functor.Functor$Vect n:!map:04_val"

idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_361 =
  idr__Prelude.Strings.unpack_with_361_val <- fetch idr__Prelude.Strings.unpack_with_361
  case idr__Prelude.Strings.unpack_with_361_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_363) ->
      idr__Prelude.Strings.unpack_with_365.32.47.arity.1 <- pure #""
      (CGrString idr__Prelude.Strings.unpack_with_363.40.91.arity.1) <- fetch idr__Prelude.Strings.unpack_with_363
      idris_str_eq3.12 <- _prim_string_eq idr__Prelude.Strings.unpack_with_363.40.91.arity.1 idr__Prelude.Strings.unpack_with_365.32.47.arity.1
      ccp.2.12 <- case idris_str_eq3.12 of
        #False ->
          pure 0
        #True ->
          pure 1
      idr__Prelude.Strings.unpack_with_365_val_693 <- pure (CGrInt ccp.2.12)
      idr__Prelude.Strings.unpack_with_365_val_692 <- case idr__Prelude.Strings.unpack_with_365_val_693 of
        (CGrInt idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0) ->
          case idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr__Prelude.Strings.unpack_with_365_697 <- store idr__Prelude.Strings.unpack_with_365_val_692
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.12" <- pure (Cidr_Prelude.Bool.True)
      idr__Prelude.Strings.unpack_with_365_val_691 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.12" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.12" <- fetch idr__Prelude.Strings.unpack_with_365_697
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.12" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr__Prelude.Strings.unpack_with_365_val <- case idr__Prelude.Strings.unpack_with_365_val_691 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_head2.17 <- _prim_string_head idr__Prelude.Strings.unpack_with_363.40.91.arity.1
          idr__Prelude.Strings.unpack_with_366_val_700 <- pure (CGrInt idris_str_head2.17)
          idr__Prelude.Strings.unpack_with_366_701 <- store idr__Prelude.Strings.unpack_with_366_val_700
          idris_str_tail2.33 <- _prim_string_tail idr__Prelude.Strings.unpack_with_363.40.91.arity.1
          idr__Prelude.Strings.unpack_with_367_val <- pure (CGrString idris_str_tail2.33)
          idr__Prelude.Strings.unpack_with_367 <- store idr__Prelude.Strings.unpack_with_367_val
          pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_701 idr__Prelude.Strings.unpack_with_367) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_701 idr__Prelude.Strings.unpack_with_367)
      idr__Prelude.Strings.unpack_with_365_702 <- store idr__Prelude.Strings.unpack_with_365_val
      idr__Prelude.Strings.unpack_with_364_val <- idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_365_702
      idr__Prelude.Strings.unpack_with_364_703 <- store idr__Prelude.Strings.unpack_with_364_val
      pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_703) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_703) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.unpack_with_363.40.91.arity.1)
    (Cidr_Prelude.Strings.StrNil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)

idr__Prelude.Strings.span_with_50 idr__Prelude.Strings.span_with_500 idr__Prelude.Strings.span_with_502 =
  idr__Prelude.Strings.span_with_502_val <- fetch idr__Prelude.Strings.span_with_502
  case idr__Prelude.Strings.span_with_502_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.span_with_503 idr__Prelude.Strings.span_with_504) ->
      "idr_{APPLY_0}0_val.17" <- fetch idr__Prelude.Strings.span_with_500
      idr__Prelude.Strings.span_with_505_val <- case "idr_{APPLY_0}0_val.17" of
        (C"idr_{U_Main.{parse_3}_1}") ->
          "idr_Main.{parse_3}1.40.66.arity.1.0" <- pure 32
          (CGrInt idris_int_eq0_1.11) <- fetch idr__Prelude.Strings.span_with_503
          idris_int_eq2.11 <- _prim_int_eq idris_int_eq0_1.11 "idr_Main.{parse_3}1.40.66.arity.1.0"
          ccp.0.11 <- case idris_int_eq2.11 of
            #False ->
              pure 0
            #True ->
              pure 1
          "idr_Main.{parse_3}1_val.0" <- pure (CGrInt ccp.0.11)
          case "idr_Main.{parse_3}1_val.0" of
            (CGrInt "idr_Main.{parse_3}_cpat_LInt64_0.0") ->
              case "idr_Main.{parse_3}_cpat_LInt64_0.0" of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1.11)
      case idr__Prelude.Strings.span_with_505_val of
        (Cidr_Prelude.Bool.False) ->
          idr__Prelude.Strings.span_with_506_val <- pure (CGrString #"")
          idr__Prelude.Strings.span_with_506 <- store idr__Prelude.Strings.span_with_506_val
          (CGrInt idr__Prelude.Strings.span_with_503.32.49.arity.1) <- fetch idr__Prelude.Strings.span_with_503
          (CGrString idr__Prelude.Strings.span_with_504.32.49.arity.1) <- fetch idr__Prelude.Strings.span_with_504
          idris_str_cons3.5 <- _prim_string_cons idr__Prelude.Strings.span_with_503.32.49.arity.1 idr__Prelude.Strings.span_with_504.32.49.arity.1
          idr__Prelude.Strings.span_with_507_val <- pure (CGrString idris_str_cons3.5)
          idr__Prelude.Strings.span_with_507 <- store idr__Prelude.Strings.span_with_507_val
          pure (Cidr_Builtins.MkPair idr__Prelude.Strings.span_with_506 idr__Prelude.Strings.span_with_507) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr__Prelude.Strings.span_with_506 idr__Prelude.Strings.span_with_507) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.span_with_504.32.49.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr__Prelude.Strings.span_with_503.32.49.arity.1)
        (Cidr_Prelude.Bool.True) ->
          idr__Prelude.Strings.span_with_507_713.32.50.arity.1 <- pure #""
          (CGrString idr__Prelude.Strings.span_with_504.40.94.arity.1) <- fetch idr__Prelude.Strings.span_with_504
          idris_str_eq3.13 <- _prim_string_eq idr__Prelude.Strings.span_with_504.40.94.arity.1 idr__Prelude.Strings.span_with_507_713.32.50.arity.1
          ccp.2.13 <- case idris_str_eq3.13 of
            #False ->
              pure 0
            #True ->
              pure 1
          idr__Prelude.Strings.span_with_507_val_711 <- pure (CGrInt ccp.2.13)
          idr__Prelude.Strings.span_with_507_val_710 <- case idr__Prelude.Strings.span_with_507_val_711 of
            (CGrInt idr__Prelude.Strings.span_with_50_cpat_LInt64_0) ->
              case idr__Prelude.Strings.span_with_50_cpat_LInt64_0 of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr__Prelude.Strings.span_with_507_716 <- store idr__Prelude.Strings.span_with_507_val_710
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.13" <- pure (Cidr_Prelude.Bool.True)
          idr__Prelude.Strings.span_with_507_val_709 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.13" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.13" <- fetch idr__Prelude.Strings.span_with_507_716
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_679.13" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          idr__Prelude.Strings.span_with_507_val_708 <- case idr__Prelude.Strings.span_with_507_val_709 of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
            (Cidr_Prelude.Basics.Yes) ->
              idris_str_head2.18 <- _prim_string_head idr__Prelude.Strings.span_with_504.40.94.arity.1
              idr__Prelude.Strings.span_with_508_val_719 <- pure (CGrInt idris_str_head2.18)
              idr__Prelude.Strings.span_with_508_720 <- store idr__Prelude.Strings.span_with_508_val_719
              idris_str_tail2.34 <- _prim_string_tail idr__Prelude.Strings.span_with_504.40.94.arity.1
              idr__Prelude.Strings.span_with_509_val <- pure (CGrString idris_str_tail2.34)
              idr__Prelude.Strings.span_with_509 <- store idr__Prelude.Strings.span_with_509_val
              pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.span_with_508_720 idr__Prelude.Strings.span_with_509) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.span_with_508_720 idr__Prelude.Strings.span_with_509)
          idr__Prelude.Strings.span_with_507_721 <- store idr__Prelude.Strings.span_with_507_val_708
          idr__Prelude.Strings.span_with_506_val_705 <- idr__Prelude.Strings.span_with_50 idr__Prelude.Strings.span_with_500 idr__Prelude.Strings.span_with_507_721
          (Cidr_Builtins.MkPair idr__Prelude.Strings.span_with_507_724 idr__Prelude.Strings.span_with_508_725) <- pure idr__Prelude.Strings.span_with_506_val_705
          (CGrInt idr__Prelude.Strings.span_with_503.32.52.arity.1) <- fetch idr__Prelude.Strings.span_with_503
          (CGrString idr__Prelude.Strings.span_with_507_724.32.52.arity.1) <- fetch idr__Prelude.Strings.span_with_507_724
          idris_str_cons3.6 <- _prim_string_cons idr__Prelude.Strings.span_with_503.32.52.arity.1 idr__Prelude.Strings.span_with_507_724.32.52.arity.1
          idr__Prelude.Strings.span_with_509_val_726 <- pure (CGrString idris_str_cons3.6)
          idr__Prelude.Strings.span_with_509_727 <- store idr__Prelude.Strings.span_with_509_val_726
          pure (Cidr_Builtins.MkPair idr__Prelude.Strings.span_with_509_727 idr__Prelude.Strings.span_with_508_725) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr__Prelude.Strings.span_with_509_727 idr__Prelude.Strings.span_with_508_725) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.span_with_507_724.32.52.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr__Prelude.Strings.span_with_503.32.52.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.span_with_504.40.94.arity.1)
    (Cidr_Prelude.Strings.StrNil) ->
      idr__Prelude.Strings.span_with_503_val <- pure (CGrString #"")
      idr__Prelude.Strings.span_with_503_728 <- store idr__Prelude.Strings.span_with_503_val
      idr__Prelude.Strings.span_with_504_729 <- store idr__Prelude.Strings.span_with_503_val
      pure (Cidr_Builtins.MkPair idr__Prelude.Strings.span_with_503_728 idr__Prelude.Strings.span_with_504_729) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr__Prelude.Strings.span_with_503_728 idr__Prelude.Strings.span_with_504_729)
