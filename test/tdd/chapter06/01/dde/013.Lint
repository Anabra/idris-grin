idris_int_eq.unboxed idris_int_eq0 idris_int_eq1.41.arity.1 =
  (CGrInt idris_int_eq0_1) <- fetch idris_int_eq0
  (CGrInt idris_int_eq1_1) <- pure (CGrInt idris_int_eq1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_eq2 <- _prim_int_eq idris_int_eq0_1 idris_int_eq1_1
  ccp.0 <- case idris_int_eq2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1)

idris_int_lt.unboxed idris_int_lt0 idris_int_lt1.41.arity.1 =
  (CGrInt idris_int_lt0_1) <- fetch idris_int_lt0
  (CGrInt idris_int_lt1_1) <- pure (CGrInt idris_int_lt1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_lt2 <- _prim_int_lt idris_int_lt0_1 idris_int_lt1_1
  ccp.1 <- case idris_int_lt2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_lt0_1)

idris_write_str idris_write_str2.41.arity.1 =
  (CGrString idris_write_str2_0) <- pure (CGrString idris_write_str2.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0
  pure (CUnit) -- LINT: Last return expressions can only return non-node values: pure (CUnit)

idris_str_concat idris_str_concat1 idris_str_concat2 =
  (CGrString idris_str_concat1_0) <- fetch idris_str_concat1
  (CGrString idris_str_concat2_0) <- fetch idris_str_concat2
  idris_str_concat3 <- _prim_string_concat idris_str_concat1_0 idris_str_concat2_0
  pure (CGrString idris_str_concat3) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_concat3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0)

idris_str_eq.unboxed idris_str_eq1 idris_str_eq2.41.arity.1 =
  (CGrString idris_str_eq1_0) <- fetch idris_str_eq1
  (CGrString idris_str_eq2_0) <- pure (CGrString idris_str_eq2.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_eq3 <- _prim_string_eq idris_str_eq1_0 idris_str_eq2_0
  ccp.2 <- case idris_str_eq3 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0)

idris_str_rev.unboxed idris_str_rev1.41.arity.1 =
  (CGrString idris_str_rev1_0) <- pure (CGrString idris_str_rev1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_rev2 <- _prim_string_reverse idris_str_rev1_0
  pure idris_str_rev2

idris_str_head.unboxed idris_str_head1 =
  (CGrString idris_str_head1_0) <- fetch idris_str_head1
  idris_str_head2 <- _prim_string_head idris_str_head1_0
  pure idris_str_head2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0)

idris_str_tail.unboxed idris_str_tail1 =
  (CGrString idris_str_tail1_0) <- fetch idris_str_tail1
  idris_str_tail2 <- _prim_string_tail idris_str_tail1_0
  pure idris_str_tail2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0)

idris_str_cons idris_str_cons1.41.arity.1 idris_str_cons2 =
  (CGrInt idris_str_cons1_0) <- pure (CGrInt idris_str_cons1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrString idris_str_cons2_0) <- fetch idris_str_cons2
  idris_str_cons3 <- _prim_string_cons idris_str_cons1_0 idris_str_cons2_0
  pure (CGrString idris_str_cons3) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_cons3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_cons2_0)

idris_ls_ext.unboxed idris_ls_ext1.41.arity.1 =
  (CGrInt idris_ls_ext2) <- pure (CGrInt idris_ls_ext1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_ls_ext3 <- _prim_int_add idris_ls_ext2 0
  pure idris_ls_ext3

idris_ch_int.unboxed idris_ch_int1.41.arity.1 =
  do
    (CGrInt unboxed.CGrInt.0) <- pure (CGrInt idris_ch_int1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
    pure unboxed.CGrInt.0

grinMain =
  r <- do
    "idr_{runMain_0}0_val_1460.0" <- pure (CErased)
    "idr_{runMain_0}0.0" <- store "idr_{runMain_0}0_val_1460.0"
    "idr_{runMain_0}0_val.0" <- idr_Main.main
    "idr_{runMain_0}0_1461.0" <- store "idr_{runMain_0}0_val.0"
    do
      "idr_{EVAL_0}0.0.0" <- pure "idr_{runMain_0}0_1461.0"
      "idr_{EVAL_0}0_val.0.0" <- fetch "idr_{EVAL_0}0.0.0"
      fetch "idr_{EVAL_0}0.0.0"
  pure ()

idr_Main.adder idr_Main.adder1 idr_Main.adder2 idr_Main.adder3 =
  idr_Main.adder2_val <- fetch idr_Main.adder2
  case idr_Main.adder2_val of
    (CGrInt idr_Main.adder_cpat_LInt64_0) ->
      case idr_Main.adder_cpat_LInt64_0 of
        0 ->
          fetch idr_Main.adder3
        #default ->
          idr_Main.adder4_val_1 <- pure (CGrInt 1)
          idr_Main.adder4 <- store idr_Main.adder4_val_1
          idr_Main.adder4_val <- do
            unboxed.CGrInt.1 <- do
              (CGrInt idr_Main.adder2.41.0.arity.1) <- fetch idr_Main.adder2
              (CGrInt idr_Main.adder4.41.0.arity.1) <- fetch idr_Main.adder4
              do
                idris_int_sub0.41.arity.1.0 <- pure idr_Main.adder2.41.0.arity.1
                idris_int_sub1.41.arity.1.0 <- pure idr_Main.adder4.41.0.arity.1
                (CGrInt idris_int_sub0_1.0) <- pure (CGrInt idris_int_sub0.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                (CGrInt idris_int_sub1_1.0) <- pure (CGrInt idris_int_sub1.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                idris_int_sub2.0 <- _prim_int_sub idris_int_sub0_1.0 idris_int_sub1_1.0
                pure idris_int_sub2.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.adder4.41.0.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.adder2.41.0.arity.1)
            pure (CGrInt unboxed.CGrInt.1) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.1)
          idr_Main.adder4_2 <- store idr_Main.adder4_val
          pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1 idr_Main.adder4_2 idr_Main.adder3) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1 idr_Main.adder4_2 idr_Main.adder3)

idr_Data.Vect.foldrImpl idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl4 idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl6 =
  idr_Data.Vect.foldrImpl6_val <- fetch idr_Data.Vect.foldrImpl6
  case idr_Data.Vect.foldrImpl6_val of
    (Cidr_Data.Vect.:: idr_Data.Vect.foldrImpl7 idr_Data.Vect.foldrImpl8) ->
      idr_Data.Vect.foldrImpl9_val <- pure (CErased)
      idr_Data.Vect.foldrImpl9 <- store idr_Data.Vect.foldrImpl9_val
      idr_Data.Vect.foldrImpl10_val <- pure (CErased)
      idr_Data.Vect.foldrImpl10 <- store idr_Data.Vect.foldrImpl10_val
      idr_Data.Vect.foldrImpl11_val <- pure (CErased)
      idr_Data.Vect.foldrImpl11 <- store idr_Data.Vect.foldrImpl11_val
      idr_Data.Vect.foldrImpl12_val <- pure (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl7)
      idr_Data.Vect.foldrImpl12 <- store idr_Data.Vect.foldrImpl12_val
      idr_Data.Vect.foldrImpl idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl4 idr_Data.Vect.foldrImpl12 idr_Data.Vect.foldrImpl8
    (Cidr_Data.Vect.Nil) ->
      do
        "idr_{APPLY_0}0.0" <- pure idr_Data.Vect.foldrImpl5
        "idr_{APPLY_0}1.0" <- pure idr_Data.Vect.foldrImpl4
        "idr_{APPLY_0}0_val.0" <- fetch "idr_{APPLY_0}0.0"
        case "idr_{APPLY_0}0_val.0" of
          (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.0" "idr_{APPLY_0}3.0" "idr_{APPLY_0}4.0") ->
            "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.0" "idr_{APPLY_0}3.0" "idr_{APPLY_0}4.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.0" "idr_{APPLY_0}3_1445.0" "idr_{APPLY_0}4_1446.0") ->
            "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.0" "idr_{APPLY_0}3_1445.0" "idr_{APPLY_0}4_1446.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{main_2}_1}") ->
            "idr_Main.{main_2}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{main_3}_1}") ->
            "idr_Main.{main_3}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{main_4}_1}") ->
            "idr_Main.{main_4}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{main_5}_1}") ->
            "idr_Main.{main_5}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{main_6}_1}") ->
            "idr_Main.{main_6}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{main_8}_1}") ->
            "idr_Main.{main_8}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.0") ->
            "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.0" "idr_{APPLY_0}3_1449.0") ->
            "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.0" "idr_{APPLY_0}3_1449.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.0" "idr_{APPLY_0}3_1451.0") ->
            "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.0" "idr_{APPLY_0}3_1451.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Chars.isDigit_1}") ->
            idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.0" "idr_{APPLY_0}3_1453.0") ->
            idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.0" "idr_{APPLY_0}3_1453.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.0") ->
            "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
            "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
            "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
            "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
            "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
            "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
            "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
            "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
            "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
            "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
            "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
            "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.0") ->
            "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.0") ->
            "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_prim__floatToStr_1}") ->
            idr_prim__floatToStr "idr_{APPLY_0}1.0"
          (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.0") ->
            idr_prim__strCons "idr_{APPLY_0}2_1457.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_prim__toStrInt_1}") ->
            idr_prim__toStrInt "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{main_9}_2}") ->
            pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.0") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.0")
          (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
            pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.0") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.0")
          #default ->
            pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)

idr_Prelude.Chars.isDigit idr_Prelude.Chars.isDigit0 =
  idr_Prelude.Chars.isDigit1_val_10 <- pure (CGrInt 48)
  idr_Prelude.Chars.isDigit1 <- store idr_Prelude.Chars.isDigit1_val_10
  idr_Prelude.Chars.isDigit1_val_9 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit1
  idr_Prelude.Chars.isDigit1_11 <- store idr_Prelude.Chars.isDigit1_val_9
  idr_Prelude.Chars.isDigit1_val_12 <- fetch idr_Prelude.Chars.isDigit1_11
  idr_Prelude.Chars.isDigit1_val <- case idr_Prelude.Chars.isDigit1_val_12 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Chars.isDigit2_val_13 <- pure (CGrInt 48)
      idr_Prelude.Chars.isDigit2 <- store idr_Prelude.Chars.isDigit2_val_13
      idr_Prelude.Chars.isDigit2_val <- do
        unboxed.CGrInt.2 <- do
          (CGrInt idr_Prelude.Chars.isDigit2.41.1.arity.1) <- fetch idr_Prelude.Chars.isDigit2
          idris_int_eq.unboxed idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit2.41.1.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isDigit2.41.1.arity.1)
        pure (CGrInt unboxed.CGrInt.2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.2)
      idr_Prelude.Chars.isDigit2_14 <- store idr_Prelude.Chars.isDigit2_val
      idr_Prelude.Chars.isDigit2_val_15 <- fetch idr_Prelude.Chars.isDigit2_14
      case idr_Prelude.Chars.isDigit2_val_15 of
        (CGrInt idr_Prelude.Chars.isDigit_cpat_LInt64_0) ->
          case idr_Prelude.Chars.isDigit_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Chars.isDigit1_16 <- store idr_Prelude.Chars.isDigit1_val
  idr_Prelude.Chars.isDigit1_val_17 <- fetch idr_Prelude.Chars.isDigit1_16
  case idr_Prelude.Chars.isDigit1_val_17 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Chars.isDigit2_val_19 <- pure (CGrInt 57)
      idr_Prelude.Chars.isDigit2_20 <- store idr_Prelude.Chars.isDigit2_val_19
      idr_Prelude.Chars.isDigit2_val_18 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit2_20
      idr_Prelude.Chars.isDigit2_21 <- store idr_Prelude.Chars.isDigit2_val_18
      idr_Prelude.Chars.isDigit2_val_22 <- fetch idr_Prelude.Chars.isDigit2_21
      case idr_Prelude.Chars.isDigit2_val_22 of
        (Cidr_Prelude.Interfaces.LT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idr_Prelude.Chars.isDigit3_val_23 <- pure (CGrInt 57)
          idr_Prelude.Chars.isDigit3 <- store idr_Prelude.Chars.isDigit3_val_23
          idr_Prelude.Chars.isDigit3_val <- do
            unboxed.CGrInt.3 <- do
              (CGrInt idr_Prelude.Chars.isDigit3.41.2.arity.1) <- fetch idr_Prelude.Chars.isDigit3
              idris_int_eq.unboxed idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit3.41.2.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isDigit3.41.2.arity.1)
            pure (CGrInt unboxed.CGrInt.3) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.3)
          idr_Prelude.Chars.isDigit3_24 <- store idr_Prelude.Chars.isDigit3_val
          idr_Prelude.Chars.isDigit3_val_25 <- fetch idr_Prelude.Chars.isDigit3_24
          case idr_Prelude.Chars.isDigit3_val_25 of
            (CGrInt idr_Prelude.Chars.isDigit_cpat_LInt64_0_26) ->
              case idr_Prelude.Chars.isDigit_cpat_LInt64_0_26 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)

idr_Prelude.Chars.isSpace idr_Prelude.Chars.isSpace0 =
  idr_Prelude.Chars.isSpace1_val_27 <- pure (CGrInt 32)
  idr_Prelude.Chars.isSpace1 <- store idr_Prelude.Chars.isSpace1_val_27
  idr_Prelude.Chars.isSpace1_val <- do
    unboxed.CGrInt.4 <- do
      (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1) <- fetch idr_Prelude.Chars.isSpace1
      idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace1.41.3.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1)
    pure (CGrInt unboxed.CGrInt.4) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.4)
  idr_Prelude.Chars.isSpace1_28 <- store idr_Prelude.Chars.isSpace1_val
  idr_Prelude.Chars.isSpace1_val_29 <- fetch idr_Prelude.Chars.isSpace1_28
  case idr_Prelude.Chars.isSpace1_val_29 of
    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0) ->
      case idr_Prelude.Chars.isSpace_cpat_LInt64_0 of
        0 ->
          idr_Prelude.Chars.isSpace2_val_30 <- pure (CGrInt 9)
          idr_Prelude.Chars.isSpace2 <- store idr_Prelude.Chars.isSpace2_val_30
          idr_Prelude.Chars.isSpace2_val <- do
            unboxed.CGrInt.5 <- do
              (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1) <- fetch idr_Prelude.Chars.isSpace2
              idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace2.41.4.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1)
            pure (CGrInt unboxed.CGrInt.5) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.5)
          idr_Prelude.Chars.isSpace2_31 <- store idr_Prelude.Chars.isSpace2_val
          idr_Prelude.Chars.isSpace2_val_32 <- fetch idr_Prelude.Chars.isSpace2_31
          case idr_Prelude.Chars.isSpace2_val_32 of
            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33) ->
              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33 of
                0 ->
                  idr_Prelude.Chars.isSpace3_val_34 <- pure (CGrInt 13)
                  idr_Prelude.Chars.isSpace3 <- store idr_Prelude.Chars.isSpace3_val_34
                  idr_Prelude.Chars.isSpace3_val <- do
                    unboxed.CGrInt.6 <- do
                      (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1) <- fetch idr_Prelude.Chars.isSpace3
                      idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace3.41.5.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1)
                    pure (CGrInt unboxed.CGrInt.6) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.6)
                  idr_Prelude.Chars.isSpace3_35 <- store idr_Prelude.Chars.isSpace3_val
                  idr_Prelude.Chars.isSpace3_val_36 <- fetch idr_Prelude.Chars.isSpace3_35
                  case idr_Prelude.Chars.isSpace3_val_36 of
                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37) ->
                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37 of
                        0 ->
                          idr_Prelude.Chars.isSpace4_val_38 <- pure (CGrInt 10)
                          idr_Prelude.Chars.isSpace4 <- store idr_Prelude.Chars.isSpace4_val_38
                          idr_Prelude.Chars.isSpace4_val <- do
                            unboxed.CGrInt.7 <- do
                              (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1) <- fetch idr_Prelude.Chars.isSpace4
                              idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace4.41.6.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1)
                            pure (CGrInt unboxed.CGrInt.7) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.7)
                          idr_Prelude.Chars.isSpace4_39 <- store idr_Prelude.Chars.isSpace4_val
                          idr_Prelude.Chars.isSpace4_val_40 <- fetch idr_Prelude.Chars.isSpace4_39
                          case idr_Prelude.Chars.isSpace4_val_40 of
                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41) ->
                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41 of
                                0 ->
                                  idr_Prelude.Chars.isSpace5_val_42 <- pure (CGrInt 12)
                                  idr_Prelude.Chars.isSpace5 <- store idr_Prelude.Chars.isSpace5_val_42
                                  idr_Prelude.Chars.isSpace5_val <- do
                                    unboxed.CGrInt.8 <- do
                                      (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1) <- fetch idr_Prelude.Chars.isSpace5
                                      idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace5.41.7.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1)
                                    pure (CGrInt unboxed.CGrInt.8) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.8)
                                  idr_Prelude.Chars.isSpace5_43 <- store idr_Prelude.Chars.isSpace5_val
                                  idr_Prelude.Chars.isSpace5_val_44 <- fetch idr_Prelude.Chars.isSpace5_43
                                  case idr_Prelude.Chars.isSpace5_val_44 of
                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45) ->
                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45 of
                                        0 ->
                                          idr_Prelude.Chars.isSpace6_val_46 <- pure (CGrInt 11)
                                          idr_Prelude.Chars.isSpace6 <- store idr_Prelude.Chars.isSpace6_val_46
                                          idr_Prelude.Chars.isSpace6_val <- do
                                            unboxed.CGrInt.9 <- do
                                              (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1) <- fetch idr_Prelude.Chars.isSpace6
                                              idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace6.41.8.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1)
                                            pure (CGrInt unboxed.CGrInt.9) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.9)
                                          idr_Prelude.Chars.isSpace6_47 <- store idr_Prelude.Chars.isSpace6_val
                                          idr_Prelude.Chars.isSpace6_val_48 <- fetch idr_Prelude.Chars.isSpace6_47
                                          case idr_Prelude.Chars.isSpace6_val_48 of
                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49) ->
                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49 of
                                                0 ->
                                                  idr_Prelude.Chars.isSpace7_val_50 <- pure (CGrInt 160)
                                                  idr_Prelude.Chars.isSpace7 <- store idr_Prelude.Chars.isSpace7_val_50
                                                  idr_Prelude.Chars.isSpace7_val <- do
                                                    unboxed.CGrInt.10 <- do
                                                      (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1) <- fetch idr_Prelude.Chars.isSpace7
                                                      idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace7.41.9.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1)
                                                    pure (CGrInt unboxed.CGrInt.10) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.10)
                                                  idr_Prelude.Chars.isSpace7_51 <- store idr_Prelude.Chars.isSpace7_val
                                                  idr_Prelude.Chars.isSpace7_val_52 <- fetch idr_Prelude.Chars.isSpace7_51
                                                  case idr_Prelude.Chars.isSpace7_val_52 of
                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53) ->
                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53 of
                                                        0 ->
                                                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                        #default ->
                                                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                                #default ->
                                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                        #default ->
                                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                #default ->
                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)

idr_Main.main =
  idr_Main.main1_val_69 <- pure (CErased)
  idr_Main.main1 <- store idr_Main.main1_val_69
  idr_Main.main2_val <- pure (CErased)
  idr_Main.main2 <- store idr_Main.main2_val
  idr_Main.main3_val <- pure (C"idr_{U_Main.{main_3}_1}")
  idr_Main.main3 <- store idr_Main.main3_val
  idr_Main.main4_val <- idr_Main.tri
  idr_Main.main4 <- store idr_Main.main4_val
  idr_Main.main1_val <- idr_Prelude.Interactive.printLn' idr_Main.main3 idr_Main.main4
  idr_Main.main1_70 <- store idr_Main.main1_val
  idr_Main.main2_val_72 <- pure (CErased)
  idr_Main.main2_73 <- store idr_Main.main2_val_72
  idr_Main.main3_val_74 <- pure (CErased)
  idr_Main.main3_75 <- store idr_Main.main3_val_74
  idr_Main.main4_val_76 <- pure (C"idr_{U_Main.{main_5}_1}")
  idr_Main.main4_77 <- store idr_Main.main4_val_76
  idr_Main.main5_val <- idr_Main.tri2
  idr_Main.main5 <- store idr_Main.main5_val
  idr_Main.main2_val_71 <- idr_Prelude.Interactive.printLn' idr_Main.main4_77 idr_Main.main5
  idr_Main.main2_78 <- store idr_Main.main2_val_71
  idr_Main.main3_val_80 <- pure (CErased)
  idr_Main.main3_81 <- store idr_Main.main3_val_80
  idr_Main.main4_val_82 <- pure (CErased)
  idr_Main.main4_83 <- store idr_Main.main4_val_82
  idr_Main.main5_val_84 <- pure (C"idr_{U_Main.{main_6}_1}")
  idr_Main.main5_85 <- store idr_Main.main5_val_84
  idr_Main.main6_val_86 <- pure (CGrString #"  string  ")
  idr_Main.main6 <- store idr_Main.main6_val_86
  idr_Main.main6_val <- do
    unboxed.CGrString.4 <- idr_Prelude.Strings.trim.unboxed idr_Main.main6
    pure (CGrString unboxed.CGrString.4) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.4)
  idr_Main.main6_87 <- store idr_Main.main6_val
  idr_Main.main3_val_79 <- idr_Prelude.Interactive.printLn' idr_Main.main5_85 idr_Main.main6_87
  idr_Main.main3_88 <- store idr_Main.main3_val_79
  idr_Main.main4_val_90 <- pure (CErased)
  idr_Main.main4_91 <- store idr_Main.main4_val_90
  idr_Main.main5_val_92 <- pure (CErased)
  idr_Main.main5_93 <- store idr_Main.main5_val_92
  idr_Main.main6_val_94 <- pure (C"idr_{U_Main.{main_6}_1}")
  idr_Main.main6_95 <- store idr_Main.main6_val_94
  idr_Main.main7_val <- pure (CGrString #"42")
  idr_Main.main7 <- store idr_Main.main7_val
  idr_Main.main4_val_89 <- idr_Prelude.Interactive.printLn' idr_Main.main6_95 idr_Main.main7
  idr_Main.main4_96 <- store idr_Main.main4_val_89
  idr_Main.main5_val_98 <- pure (CErased)
  idr_Main.main5_99 <- store idr_Main.main5_val_98
  idr_Main.main6_val_100 <- pure (CErased)
  idr_Main.main6_101 <- store idr_Main.main6_val_100
  idr_Main.main7_val_102 <- pure (C"idr_{U_Main.{main_8}_1}")
  idr_Main.main7_103 <- store idr_Main.main7_val_102
  idr_Main.main8_val_104 <- pure (CErased)
  idr_Main.main8 <- store idr_Main.main8_val_104
  idr_Main.main9_val <- pure (C"idr_{U_Main.{main_9}_2}")
  idr_Main.main9 <- store idr_Main.main9_val
  idr_Main.main10_val <- pure (CGrInt 0)
  idr_Main.main10 <- store idr_Main.main10_val
  idr_Main.main11_val <- pure (CGrInt 10)
  idr_Main.main11 <- store idr_Main.main11_val
  idr_Main.main8_val <- idr_Main.adder idr_Main.main9 idr_Main.main10 idr_Main.main11
  idr_Main.main8_105 <- store idr_Main.main8_val
  idr_Main.main5_val_97 <- idr_Prelude.Interactive.printLn' idr_Main.main7_103 idr_Main.main8_105
  idr_Main.main5_106 <- store idr_Main.main5_val_97
  idr_Main.main6_val_108 <- pure (CErased)
  idr_Main.main6_109 <- store idr_Main.main6_val_108
  idr_Main.main7_val_110 <- pure (CErased)
  idr_Main.main7_111 <- store idr_Main.main7_val_110
  idr_Main.main8_val_112 <- pure (C"idr_{U_Main.{main_8}_1}")
  idr_Main.main8_113 <- store idr_Main.main8_val_112
  idr_Main.main9_val_116 <- pure (CErased)
  idr_Main.main9_117 <- store idr_Main.main9_val_116
  idr_Main.main10_val_118 <- pure (C"idr_{U_Main.{main_9}_2}")
  idr_Main.main10_119 <- store idr_Main.main10_val_118
  idr_Main.main11_val_120 <- pure (CGrInt 1)
  idr_Main.main11_121 <- store idr_Main.main11_val_120
  idr_Main.main12_val <- pure (CGrInt 10)
  idr_Main.main12 <- store idr_Main.main12_val
  idr_Main.main9_val_115 <- idr_Main.adder idr_Main.main10_119 idr_Main.main11_121 idr_Main.main12
  idr_Main.main9_122 <- store idr_Main.main9_val_115
  idr_Main.main10_val_123 <- pure (CGrInt 15)
  idr_Main.main10_124 <- store idr_Main.main10_val_123
  idr_Main.main9_val_114 <- do
    "idr_{APPLY_0}0.1" <- pure idr_Main.main9_122
    "idr_{APPLY_0}1.1" <- pure idr_Main.main10_124
    "idr_{APPLY_0}0_val.1" <- fetch "idr_{APPLY_0}0.1"
    case "idr_{APPLY_0}0_val.1" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.1" "idr_{APPLY_0}3.1" "idr_{APPLY_0}4.1") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.1" "idr_{APPLY_0}3.1" "idr_{APPLY_0}4.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.1" "idr_{APPLY_0}3_1445.1" "idr_{APPLY_0}4_1446.1") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.1" "idr_{APPLY_0}3_1445.1" "idr_{APPLY_0}4_1446.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.1") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.1" "idr_{APPLY_0}3_1449.1") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.1" "idr_{APPLY_0}3_1449.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.1" "idr_{APPLY_0}3_1451.1") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.1" "idr_{APPLY_0}3_1451.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.1" "idr_{APPLY_0}3_1453.1") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.1" "idr_{APPLY_0}3_1453.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.1") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.1") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.1") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.1"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.1") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.1")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.1")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main9_125 <- store idr_Main.main9_val_114
  idr_Main.main6_val_107 <- idr_Prelude.Interactive.printLn' idr_Main.main8_113 idr_Main.main9_125
  idr_Main.main6_126 <- store idr_Main.main6_val_107
  idr_Main.main7_val_128 <- pure (CErased)
  idr_Main.main7_129 <- store idr_Main.main7_val_128
  idr_Main.main8_val_130 <- pure (CErased)
  idr_Main.main8_131 <- store idr_Main.main8_val_130
  idr_Main.main9_val_132 <- pure (C"idr_{U_Main.{main_8}_1}")
  idr_Main.main9_133 <- store idr_Main.main9_val_132
  idr_Main.main10_val_137 <- pure (CErased)
  idr_Main.main10_138 <- store idr_Main.main10_val_137
  idr_Main.main11_val_139 <- pure (C"idr_{U_Main.{main_9}_2}")
  idr_Main.main11_140 <- store idr_Main.main11_val_139
  idr_Main.main12_val_141 <- pure (CGrInt 2)
  idr_Main.main12_142 <- store idr_Main.main12_val_141
  idr_Main.main13_val <- pure (CGrInt 1)
  idr_Main.main13 <- store idr_Main.main13_val
  idr_Main.main10_val_136 <- idr_Main.adder idr_Main.main11_140 idr_Main.main12_142 idr_Main.main13
  idr_Main.main10_143 <- store idr_Main.main10_val_136
  idr_Main.main11_val_144 <- pure (CGrInt 4)
  idr_Main.main11_145 <- store idr_Main.main11_val_144
  idr_Main.main10_val_135 <- do
    "idr_{APPLY_0}0.2" <- pure idr_Main.main10_143
    "idr_{APPLY_0}1.2" <- pure idr_Main.main11_145
    "idr_{APPLY_0}0_val.2" <- fetch "idr_{APPLY_0}0.2"
    case "idr_{APPLY_0}0_val.2" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.2" "idr_{APPLY_0}3.2" "idr_{APPLY_0}4.2") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.2" "idr_{APPLY_0}3.2" "idr_{APPLY_0}4.2" "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.2" "idr_{APPLY_0}3_1445.2" "idr_{APPLY_0}4_1446.2") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.2" "idr_{APPLY_0}3_1445.2" "idr_{APPLY_0}4_1446.2" "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.2") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.2" "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.2" "idr_{APPLY_0}3_1449.2") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.2" "idr_{APPLY_0}3_1449.2" "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.2" "idr_{APPLY_0}3_1451.2") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.2" "idr_{APPLY_0}3_1451.2" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.2" "idr_{APPLY_0}3_1453.2") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.2" "idr_{APPLY_0}3_1453.2" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.2") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.2" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.2") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.2" "idr_{APPLY_0}1.2"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.2") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.2" "idr_{APPLY_0}1.2"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.2"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.2") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.2" "idr_{APPLY_0}1.2"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.2"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.2") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.2")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.2") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.2")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main10_146 <- store idr_Main.main10_val_135
  idr_Main.main11_val_147 <- pure (CGrInt 7)
  idr_Main.main11_148 <- store idr_Main.main11_val_147
  idr_Main.main10_val_134 <- do
    "idr_{APPLY_0}0.3" <- pure idr_Main.main10_146
    "idr_{APPLY_0}1.3" <- pure idr_Main.main11_148
    "idr_{APPLY_0}0_val.3" <- fetch "idr_{APPLY_0}0.3"
    case "idr_{APPLY_0}0_val.3" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.3" "idr_{APPLY_0}3.3" "idr_{APPLY_0}4.3") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.3" "idr_{APPLY_0}3.3" "idr_{APPLY_0}4.3" "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.3" "idr_{APPLY_0}3_1445.3" "idr_{APPLY_0}4_1446.3") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.3" "idr_{APPLY_0}3_1445.3" "idr_{APPLY_0}4_1446.3" "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.3") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.3" "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.3" "idr_{APPLY_0}3_1449.3") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.3" "idr_{APPLY_0}3_1449.3" "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.3" "idr_{APPLY_0}3_1451.3") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.3" "idr_{APPLY_0}3_1451.3" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.3" "idr_{APPLY_0}3_1453.3") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.3" "idr_{APPLY_0}3_1453.3" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.3") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.3" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.3") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.3" "idr_{APPLY_0}1.3"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.3") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.3" "idr_{APPLY_0}1.3"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.3"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.3") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.3" "idr_{APPLY_0}1.3"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.3"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.3") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.3")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.3") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.3")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main10_149 <- store idr_Main.main10_val_134
  idr_Main.main7_val_127 <- idr_Prelude.Interactive.printLn' idr_Main.main9_133 idr_Main.main10_149
  idr_Main.main7_150 <- store idr_Main.main7_val_127
  idr_Main.main8_val_158 <- pure (Cidr_Prelude.Bool.True)
  idr_Main.main8_159 <- store idr_Main.main8_val_158
  idr_Main.main9_val_160 <- pure (Cidr_Prelude.Bool.True)
  idr_Main.main9_161 <- store idr_Main.main9_val_160
  idr_Main.main8_val_157 <- do
    (Cidr_Prelude.Bool.True) <- fetch idr_Main.main9_161
    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Main.main8_159 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
  idr_Main.main8_162 <- store idr_Main.main8_val_157
  idr_Main.main8_val_163 <- fetch idr_Main.main8_162
  idr_Main.main8_val_156 <- case idr_Main.main8_val_163 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      idr_Main.main9_val_165 <- pure (CGrString #"Hello!")
      idr_Main.main9_166 <- store idr_Main.main9_val_165
      idr_Main.main9_val_164 <- do
        unboxed.CGrInt.11 <- idris_str_head.unboxed idr_Main.main9_166
        pure (CGrInt unboxed.CGrInt.11) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.11)
      idr_Main.main9_167 <- store idr_Main.main9_val_164
      idr_Main.main10_val_169 <- pure (CErased)
      idr_Main.main10_170 <- store idr_Main.main10_val_169
      idr_Main.main11_val_176 <- pure (CGrString #"Hello!")
      idr_Main.main11_177 <- store idr_Main.main11_val_176
      idr_Main.main11_val_175 <- do
        unboxed.CGrString.5 <- idris_str_tail.unboxed idr_Main.main11_177
        pure (CGrString unboxed.CGrString.5) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.5)
      idr_Main.main11_178 <- store idr_Main.main11_val_175
      idr_Main.main12_val_179 <- pure (CGrString #"")
      idr_Main.main12_180 <- store idr_Main.main12_val_179
      idr_Main.main11_val_174 <- do
        unboxed.CGrInt.12 <- do
          (CGrString idr_Main.main12_180.41.11.arity.1) <- fetch idr_Main.main12_180
          idris_str_eq.unboxed idr_Main.main11_178 idr_Main.main12_180.41.11.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main12_180.41.11.arity.1)
        pure (CGrInt unboxed.CGrInt.12) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.12)
      idr_Main.main11_181 <- store idr_Main.main11_val_174
      idr_Main.main11_val_182 <- fetch idr_Main.main11_181
      idr_Main.main11_val_173 <- case idr_Main.main11_val_182 of
        (CGrInt idr_Main.main_cpat_LInt64_0) ->
          case idr_Main.main_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Main.main11_183 <- store idr_Main.main11_val_173
      idr_Main.main12_val_184 <- pure (Cidr_Prelude.Bool.True)
      idr_Main.main12_185 <- store idr_Main.main12_val_184
      idr_Main.main11_val_172 <- do
        (Cidr_Prelude.Bool.True) <- fetch idr_Main.main12_185
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Main.main11_183 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
      idr_Main.main11_186 <- store idr_Main.main11_val_172
      idr_Main.main11_val_187 <- fetch idr_Main.main11_186
      idr_Main.main11_val_171 <- case idr_Main.main11_val_187 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Main.main12_val_190 <- pure (CGrString #"Hello!")
          idr_Main.main12_191 <- store idr_Main.main12_val_190
          idr_Main.main12_val_189 <- do
            unboxed.CGrString.6 <- idris_str_tail.unboxed idr_Main.main12_191
            pure (CGrString unboxed.CGrString.6) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.6)
          idr_Main.main12_192 <- store idr_Main.main12_val_189
          idr_Main.main12_val_188 <- do
            unboxed.CGrInt.13 <- idris_str_head.unboxed idr_Main.main12_192
            pure (CGrInt unboxed.CGrInt.13) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.13)
          idr_Main.main12_193 <- store idr_Main.main12_val_188
          idr_Main.main13_val_196 <- pure (CGrString #"Hello!")
          idr_Main.main13_197 <- store idr_Main.main13_val_196
          idr_Main.main13_val_195 <- do
            unboxed.CGrString.7 <- idris_str_tail.unboxed idr_Main.main13_197
            pure (CGrString unboxed.CGrString.7) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.7)
          idr_Main.main13_198 <- store idr_Main.main13_val_195
          idr_Main.main13_val_194 <- do
            unboxed.CGrString.8 <- idris_str_tail.unboxed idr_Main.main13_198
            pure (CGrString unboxed.CGrString.8) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.8)
          idr_Main.main13_199 <- store idr_Main.main13_val_194
          pure (Cidr_Prelude.Strings.StrCons idr_Main.main12_193 idr_Main.main13_199) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Main.main12_193 idr_Main.main13_199)
      idr_Main.main11_200 <- store idr_Main.main11_val_171
      idr_Main.main10_val_168 <- idr__Prelude.Strings.unpack_with_36 idr_Main.main11_200
      idr_Main.main10_201 <- store idr_Main.main10_val_168
      pure (Cidr_Prelude.List.:: idr_Main.main9_167 idr_Main.main10_201) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Main.main9_167 idr_Main.main10_201)
  idr_Main.main8_202 <- store idr_Main.main8_val_156
  idr_Main.main8_val_155 <- idr_Main.toFormat idr_Main.main8_202
  idr_Main.main8_203 <- store idr_Main.main8_val_155
  idr_Main.main9_val_204 <- pure (CGrString #"")
  idr_Main.main9_205 <- store idr_Main.main9_val_204
  idr_Main.main8_val_154 <- idr_Main.printFmt idr_Main.main8_203 idr_Main.main9_205
  idr_Main.main8_206 <- store idr_Main.main8_val_154
  idr_Main.main9_val_207 <- pure (CGrString #"\n")
  idr_Main.main9_208 <- store idr_Main.main9_val_207
  idr_Main.main8_val_153 <- idris_str_concat idr_Main.main8_206 idr_Main.main9_208
  idr_Main.main8_209 <- store idr_Main.main8_val_153
  idr_Main.main8_val_152 <- do
    (CGrString idr_Main.main8_209.41.13.arity.1) <- fetch idr_Main.main8_209
    idris_write_str idr_Main.main8_209.41.13.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main8_209.41.13.arity.1)
  idr_Main.main8_210 <- store idr_Main.main8_val_152
  idr_Main.main8_val_151 <- pure (Cidr_MkUnit)
  idr_Main.main8_211 <- store idr_Main.main8_val_151
  idr_Main.main9_val_220 <- pure (Cidr_Prelude.Bool.True)
  idr_Main.main9_221 <- store idr_Main.main9_val_220
  idr_Main.main10_val_222 <- pure (Cidr_Prelude.Bool.True)
  idr_Main.main10_223 <- store idr_Main.main10_val_222
  idr_Main.main9_val_219 <- do
    (Cidr_Prelude.Bool.True) <- fetch idr_Main.main10_223
    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Main.main9_221 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
  idr_Main.main9_224 <- store idr_Main.main9_val_219
  idr_Main.main9_val_225 <- fetch idr_Main.main9_224
  idr_Main.main9_val_218 <- case idr_Main.main9_val_225 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      idr_Main.main10_val_227 <- pure (CGrString #"Answer : %d")
      idr_Main.main10_228 <- store idr_Main.main10_val_227
      idr_Main.main10_val_226 <- do
        unboxed.CGrInt.14 <- idris_str_head.unboxed idr_Main.main10_228
        pure (CGrInt unboxed.CGrInt.14) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.14)
      idr_Main.main10_229 <- store idr_Main.main10_val_226
      idr_Main.main11_val_231 <- pure (CErased)
      idr_Main.main11_232 <- store idr_Main.main11_val_231
      idr_Main.main12_val_238 <- pure (CGrString #"Answer : %d")
      idr_Main.main12_239 <- store idr_Main.main12_val_238
      idr_Main.main12_val_237 <- do
        unboxed.CGrString.9 <- idris_str_tail.unboxed idr_Main.main12_239
        pure (CGrString unboxed.CGrString.9) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.9)
      idr_Main.main12_240 <- store idr_Main.main12_val_237
      idr_Main.main13_val_241 <- pure (CGrString #"")
      idr_Main.main13_242 <- store idr_Main.main13_val_241
      idr_Main.main12_val_236 <- do
        unboxed.CGrInt.15 <- do
          (CGrString idr_Main.main13_242.41.15.arity.1) <- fetch idr_Main.main13_242
          idris_str_eq.unboxed idr_Main.main12_240 idr_Main.main13_242.41.15.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main13_242.41.15.arity.1)
        pure (CGrInt unboxed.CGrInt.15) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.15)
      idr_Main.main12_243 <- store idr_Main.main12_val_236
      idr_Main.main12_val_244 <- fetch idr_Main.main12_243
      idr_Main.main12_val_235 <- case idr_Main.main12_val_244 of
        (CGrInt idr_Main.main_cpat_LInt64_0_245) ->
          case idr_Main.main_cpat_LInt64_0_245 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Main.main12_246 <- store idr_Main.main12_val_235
      idr_Main.main13_val_247 <- pure (Cidr_Prelude.Bool.True)
      idr_Main.main13_248 <- store idr_Main.main13_val_247
      idr_Main.main12_val_234 <- do
        (Cidr_Prelude.Bool.True) <- fetch idr_Main.main13_248
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Main.main12_246 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
      idr_Main.main12_249 <- store idr_Main.main12_val_234
      idr_Main.main12_val_250 <- fetch idr_Main.main12_249
      idr_Main.main12_val_233 <- case idr_Main.main12_val_250 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Main.main13_val_253 <- pure (CGrString #"Answer : %d")
          idr_Main.main13_254 <- store idr_Main.main13_val_253
          idr_Main.main13_val_252 <- do
            unboxed.CGrString.10 <- idris_str_tail.unboxed idr_Main.main13_254
            pure (CGrString unboxed.CGrString.10) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.10)
          idr_Main.main13_255 <- store idr_Main.main13_val_252
          idr_Main.main13_val_251 <- do
            unboxed.CGrInt.16 <- idris_str_head.unboxed idr_Main.main13_255
            pure (CGrInt unboxed.CGrInt.16) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.16)
          idr_Main.main13_256 <- store idr_Main.main13_val_251
          idr_Main.main14_val_258 <- pure (CGrString #"Answer : %d")
          idr_Main.main14 <- store idr_Main.main14_val_258
          idr_Main.main14_val_257 <- do
            unboxed.CGrString.11 <- idris_str_tail.unboxed idr_Main.main14
            pure (CGrString unboxed.CGrString.11) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.11)
          idr_Main.main14_259 <- store idr_Main.main14_val_257
          idr_Main.main14_val <- do
            unboxed.CGrString.12 <- idris_str_tail.unboxed idr_Main.main14_259
            pure (CGrString unboxed.CGrString.12) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.12)
          idr_Main.main14_260 <- store idr_Main.main14_val
          pure (Cidr_Prelude.Strings.StrCons idr_Main.main13_256 idr_Main.main14_260) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Main.main13_256 idr_Main.main14_260)
      idr_Main.main12_261 <- store idr_Main.main12_val_233
      idr_Main.main11_val_230 <- idr__Prelude.Strings.unpack_with_36 idr_Main.main12_261
      idr_Main.main11_262 <- store idr_Main.main11_val_230
      pure (Cidr_Prelude.List.:: idr_Main.main10_229 idr_Main.main11_262) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Main.main10_229 idr_Main.main11_262)
  idr_Main.main9_263 <- store idr_Main.main9_val_218
  idr_Main.main9_val_217 <- idr_Main.toFormat idr_Main.main9_263
  idr_Main.main9_264 <- store idr_Main.main9_val_217
  idr_Main.main10_val_265 <- pure (CGrString #"")
  idr_Main.main10_266 <- store idr_Main.main10_val_265
  idr_Main.main9_val_216 <- idr_Main.printFmt idr_Main.main9_264 idr_Main.main10_266
  idr_Main.main9_267 <- store idr_Main.main9_val_216
  idr_Main.main10_val_268 <- pure (CGrInt 42)
  idr_Main.main10_269 <- store idr_Main.main10_val_268
  idr_Main.main9_val_215 <- do
    "idr_{APPLY_0}0.4" <- pure idr_Main.main9_267
    "idr_{APPLY_0}1.4" <- pure idr_Main.main10_269
    "idr_{APPLY_0}0_val.4" <- fetch "idr_{APPLY_0}0.4"
    case "idr_{APPLY_0}0_val.4" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.4" "idr_{APPLY_0}3.4" "idr_{APPLY_0}4.4") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.4" "idr_{APPLY_0}3.4" "idr_{APPLY_0}4.4" "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.4" "idr_{APPLY_0}3_1445.4" "idr_{APPLY_0}4_1446.4") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.4" "idr_{APPLY_0}3_1445.4" "idr_{APPLY_0}4_1446.4" "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.4") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.4" "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.4" "idr_{APPLY_0}3_1449.4") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.4" "idr_{APPLY_0}3_1449.4" "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.4" "idr_{APPLY_0}3_1451.4") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.4" "idr_{APPLY_0}3_1451.4" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.4" "idr_{APPLY_0}3_1453.4") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.4" "idr_{APPLY_0}3_1453.4" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.4") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.4" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.4") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.4" "idr_{APPLY_0}1.4"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.4") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.4" "idr_{APPLY_0}1.4"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.4"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.4") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.4" "idr_{APPLY_0}1.4"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.4"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.4") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.4")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.4") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.4")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main9_270 <- store idr_Main.main9_val_215
  idr_Main.main10_val_271 <- pure (CGrString #"\n")
  idr_Main.main10_272 <- store idr_Main.main10_val_271
  idr_Main.main9_val_214 <- idris_str_concat idr_Main.main9_270 idr_Main.main10_272
  idr_Main.main9_273 <- store idr_Main.main9_val_214
  idr_Main.main9_val_213 <- do
    (CGrString idr_Main.main9_273.41.17.arity.1) <- fetch idr_Main.main9_273
    idris_write_str idr_Main.main9_273.41.17.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main9_273.41.17.arity.1)
  idr_Main.main9_274 <- store idr_Main.main9_val_213
  idr_Main.main9_val_212 <- pure (Cidr_MkUnit)
  idr_Main.main9_275 <- store idr_Main.main9_val_212
  idr_Main.main10_val_284 <- pure (Cidr_Prelude.Bool.True)
  idr_Main.main10_285 <- store idr_Main.main10_val_284
  idr_Main.main11_val_286 <- pure (Cidr_Prelude.Bool.True)
  idr_Main.main11_287 <- store idr_Main.main11_val_286
  idr_Main.main10_val_283 <- do
    (Cidr_Prelude.Bool.True) <- fetch idr_Main.main11_287
    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Main.main10_285 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
  idr_Main.main10_288 <- store idr_Main.main10_val_283
  idr_Main.main10_val_289 <- fetch idr_Main.main10_288
  idr_Main.main10_val_282 <- case idr_Main.main10_val_289 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      idr_Main.main11_val_291 <- pure (CGrString #"%s numner %d")
      idr_Main.main11_292 <- store idr_Main.main11_val_291
      idr_Main.main11_val_290 <- do
        unboxed.CGrInt.17 <- idris_str_head.unboxed idr_Main.main11_292
        pure (CGrInt unboxed.CGrInt.17) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.17)
      idr_Main.main11_293 <- store idr_Main.main11_val_290
      idr_Main.main12_val_295 <- pure (CErased)
      idr_Main.main12_296 <- store idr_Main.main12_val_295
      idr_Main.main13_val_302 <- pure (CGrString #"%s numner %d")
      idr_Main.main13_303 <- store idr_Main.main13_val_302
      idr_Main.main13_val_301 <- do
        unboxed.CGrString.13 <- idris_str_tail.unboxed idr_Main.main13_303
        pure (CGrString unboxed.CGrString.13) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.13)
      idr_Main.main13_304 <- store idr_Main.main13_val_301
      idr_Main.main14_val_305 <- pure (CGrString #"")
      idr_Main.main14_306 <- store idr_Main.main14_val_305
      idr_Main.main13_val_300 <- do
        unboxed.CGrInt.18 <- do
          (CGrString idr_Main.main14_306.41.19.arity.1) <- fetch idr_Main.main14_306
          idris_str_eq.unboxed idr_Main.main13_304 idr_Main.main14_306.41.19.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main14_306.41.19.arity.1)
        pure (CGrInt unboxed.CGrInt.18) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.18)
      idr_Main.main13_307 <- store idr_Main.main13_val_300
      idr_Main.main13_val_308 <- fetch idr_Main.main13_307
      idr_Main.main13_val_299 <- case idr_Main.main13_val_308 of
        (CGrInt idr_Main.main_cpat_LInt64_0_309) ->
          case idr_Main.main_cpat_LInt64_0_309 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Main.main13_310 <- store idr_Main.main13_val_299
      idr_Main.main14_val_311 <- pure (Cidr_Prelude.Bool.True)
      idr_Main.main14_312 <- store idr_Main.main14_val_311
      idr_Main.main13_val_298 <- do
        (Cidr_Prelude.Bool.True) <- fetch idr_Main.main14_312
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Main.main13_310 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
      idr_Main.main13_313 <- store idr_Main.main13_val_298
      idr_Main.main13_val_314 <- fetch idr_Main.main13_313
      idr_Main.main13_val_297 <- case idr_Main.main13_val_314 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Main.main14_val_317 <- pure (CGrString #"%s numner %d")
          idr_Main.main14_318 <- store idr_Main.main14_val_317
          idr_Main.main14_val_316 <- do
            unboxed.CGrString.14 <- idris_str_tail.unboxed idr_Main.main14_318
            pure (CGrString unboxed.CGrString.14) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.14)
          idr_Main.main14_319 <- store idr_Main.main14_val_316
          idr_Main.main14_val_315 <- do
            unboxed.CGrInt.19 <- idris_str_head.unboxed idr_Main.main14_319
            pure (CGrInt unboxed.CGrInt.19) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.19)
          idr_Main.main14_320 <- store idr_Main.main14_val_315
          idr_Main.main15_val_322 <- pure (CGrString #"%s numner %d")
          idr_Main.main15 <- store idr_Main.main15_val_322
          idr_Main.main15_val_321 <- do
            unboxed.CGrString.15 <- idris_str_tail.unboxed idr_Main.main15
            pure (CGrString unboxed.CGrString.15) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.15)
          idr_Main.main15_323 <- store idr_Main.main15_val_321
          idr_Main.main15_val <- do
            unboxed.CGrString.16 <- idris_str_tail.unboxed idr_Main.main15_323
            pure (CGrString unboxed.CGrString.16) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.16)
          idr_Main.main15_324 <- store idr_Main.main15_val
          pure (Cidr_Prelude.Strings.StrCons idr_Main.main14_320 idr_Main.main15_324) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Main.main14_320 idr_Main.main15_324)
      idr_Main.main13_325 <- store idr_Main.main13_val_297
      idr_Main.main12_val_294 <- idr__Prelude.Strings.unpack_with_36 idr_Main.main13_325
      idr_Main.main12_326 <- store idr_Main.main12_val_294
      pure (Cidr_Prelude.List.:: idr_Main.main11_293 idr_Main.main12_326) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Main.main11_293 idr_Main.main12_326)
  idr_Main.main10_327 <- store idr_Main.main10_val_282
  idr_Main.main10_val_281 <- idr_Main.toFormat idr_Main.main10_327
  idr_Main.main10_328 <- store idr_Main.main10_val_281
  idr_Main.main11_val_329 <- pure (CGrString #"")
  idr_Main.main11_330 <- store idr_Main.main11_val_329
  idr_Main.main10_val_280 <- idr_Main.printFmt idr_Main.main10_328 idr_Main.main11_330
  idr_Main.main10_331 <- store idr_Main.main10_val_280
  idr_Main.main11_val_332 <- pure (CGrString #"Page")
  idr_Main.main11_333 <- store idr_Main.main11_val_332
  idr_Main.main10_val_279 <- do
    "idr_{APPLY_0}0.5" <- pure idr_Main.main10_331
    "idr_{APPLY_0}1.5" <- pure idr_Main.main11_333
    "idr_{APPLY_0}0_val.5" <- fetch "idr_{APPLY_0}0.5"
    case "idr_{APPLY_0}0_val.5" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.5" "idr_{APPLY_0}3.5" "idr_{APPLY_0}4.5") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.5" "idr_{APPLY_0}3.5" "idr_{APPLY_0}4.5" "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.5" "idr_{APPLY_0}3_1445.5" "idr_{APPLY_0}4_1446.5") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.5" "idr_{APPLY_0}3_1445.5" "idr_{APPLY_0}4_1446.5" "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.5") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.5" "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.5" "idr_{APPLY_0}3_1449.5") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.5" "idr_{APPLY_0}3_1449.5" "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.5" "idr_{APPLY_0}3_1451.5") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.5" "idr_{APPLY_0}3_1451.5" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.5" "idr_{APPLY_0}3_1453.5") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.5" "idr_{APPLY_0}3_1453.5" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.5") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.5" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.5") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.5" "idr_{APPLY_0}1.5"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.5") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.5" "idr_{APPLY_0}1.5"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.5"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.5") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.5" "idr_{APPLY_0}1.5"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.5"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.5") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.5")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.5") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.5")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main10_334 <- store idr_Main.main10_val_279
  idr_Main.main11_val_335 <- pure (CGrInt 97)
  idr_Main.main11_336 <- store idr_Main.main11_val_335
  idr_Main.main10_val_278 <- do
    "idr_{APPLY_0}0.6" <- pure idr_Main.main10_334
    "idr_{APPLY_0}1.6" <- pure idr_Main.main11_336
    "idr_{APPLY_0}0_val.6" <- fetch "idr_{APPLY_0}0.6"
    case "idr_{APPLY_0}0_val.6" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.6" "idr_{APPLY_0}3.6" "idr_{APPLY_0}4.6") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.6" "idr_{APPLY_0}3.6" "idr_{APPLY_0}4.6" "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.6" "idr_{APPLY_0}3_1445.6" "idr_{APPLY_0}4_1446.6") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.6" "idr_{APPLY_0}3_1445.6" "idr_{APPLY_0}4_1446.6" "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.6") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.6" "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.6" "idr_{APPLY_0}3_1449.6") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.6" "idr_{APPLY_0}3_1449.6" "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.6" "idr_{APPLY_0}3_1451.6") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.6" "idr_{APPLY_0}3_1451.6" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.6" "idr_{APPLY_0}3_1453.6") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.6" "idr_{APPLY_0}3_1453.6" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.6") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.6" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.6") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.6" "idr_{APPLY_0}1.6"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.6") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.6" "idr_{APPLY_0}1.6"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.6"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.6") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.6" "idr_{APPLY_0}1.6"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.6"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.6") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.6")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.6") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.6")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main10_337 <- store idr_Main.main10_val_278
  idr_Main.main11_val_338 <- pure (CGrString #"\n")
  idr_Main.main11_339 <- store idr_Main.main11_val_338
  idr_Main.main10_val_277 <- idris_str_concat idr_Main.main10_337 idr_Main.main11_339
  idr_Main.main10_340 <- store idr_Main.main10_val_277
  idr_Main.main10_val_276 <- do
    (CGrString idr_Main.main10_340.41.21.arity.1) <- fetch idr_Main.main10_340
    idris_write_str idr_Main.main10_340.41.21.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main10_340.41.21.arity.1)
  idr_Main.main10_341 <- store idr_Main.main10_val_276
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

idr_Prelude.Show.primNumShow idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3 =
  idr_Prelude.Show.primNumShow4_val <- do
    "idr_{APPLY_0}0.7" <- pure idr_Prelude.Show.primNumShow1
    "idr_{APPLY_0}1.7" <- pure idr_Prelude.Show.primNumShow3
    "idr_{APPLY_0}0_val.7" <- fetch "idr_{APPLY_0}0.7"
    case "idr_{APPLY_0}0_val.7" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.7" "idr_{APPLY_0}3.7" "idr_{APPLY_0}4.7") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.7" "idr_{APPLY_0}3.7" "idr_{APPLY_0}4.7" "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.7" "idr_{APPLY_0}3_1445.7" "idr_{APPLY_0}4_1446.7") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.7" "idr_{APPLY_0}3_1445.7" "idr_{APPLY_0}4_1446.7" "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.7") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.7" "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.7" "idr_{APPLY_0}3_1449.7") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.7" "idr_{APPLY_0}3_1449.7" "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.7" "idr_{APPLY_0}3_1451.7") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.7" "idr_{APPLY_0}3_1451.7" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.7" "idr_{APPLY_0}3_1453.7") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.7" "idr_{APPLY_0}3_1453.7" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.7") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.7" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.7") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.7" "idr_{APPLY_0}1.7"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.7") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.7" "idr_{APPLY_0}1.7"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.7"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.7") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.7" "idr_{APPLY_0}1.7"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.7"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.7") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.7")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.7") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.7")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- pure (Cidr_Prelude.Show.Open)
  ccp.3 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.Open) ->
      pure 0
  idr_Prelude.Show.primNumShow5_val_344 <- pure (CGrInt ccp.3)
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_344
  idr_Prelude.Show.primNumShow6_val <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6 <- store idr_Prelude.Show.primNumShow6_val
  idr_Prelude.Show.primNumShow5_val_343 <- do
    "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0" <- pure idr_Prelude.Show.primNumShow5
    "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0" <- pure idr_Prelude.Show.primNumShow6
    "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0" <- do
      unboxed.CGrInt.103.0 <- do
        (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.212.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0"
        idris_int_eq.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.212.arity.1.0" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.212.arity.1.0")
      pure (CGrInt unboxed.CGrInt.103.0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.103.0)
    "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02.0" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0"
    "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_1554.0" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02.0"
    case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_1554.0" of
      (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0") ->
        case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0" of
          0 ->
            "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0" <- do
              unboxed.CGrInt.104.0 <- do
                (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.213.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0"
                idris_int_lt.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.213.arity.1.0" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.213.arity.1.0")
              pure (CGrInt unboxed.CGrInt.104.0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.104.0)
            "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03.0" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0"
            "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_1555.0" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03.0"
            case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_1555.0" of
              (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_1556.0") ->
                case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_1556.0" of
                  0 ->
                    pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                  #default ->
                    pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
          #default ->
            pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
  idr_Prelude.Show.primNumShow5_345 <- store idr_Prelude.Show.primNumShow5_val_343
  idr_Prelude.Show.primNumShow5_val_346 <- fetch idr_Prelude.Show.primNumShow5_345
  idr_Prelude.Show.primNumShow5_val_342 <- case idr_Prelude.Show.primNumShow5_val_346 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Show.primNumShow2_val_349 <- pure (Cidr_Prelude.Show.Open)
      ccp.4 <- case idr_Prelude.Show.primNumShow2_val_349 of
        (Cidr_Prelude.Show.Open) ->
          pure 0
      idr_Prelude.Show.primNumShow6_val_348 <- pure (CGrInt ccp.4)
      idr_Prelude.Show.primNumShow6_350 <- store idr_Prelude.Show.primNumShow6_val_348
      idr_Prelude.Show.primNumShow7_val <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7 <- store idr_Prelude.Show.primNumShow7_val
      idr_Prelude.Show.primNumShow6_val_347 <- do
        unboxed.CGrInt.20 <- do
          (CGrInt idr_Prelude.Show.primNumShow7.41.22.arity.1) <- fetch idr_Prelude.Show.primNumShow7
          idris_int_eq.unboxed idr_Prelude.Show.primNumShow6_350 idr_Prelude.Show.primNumShow7.41.22.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow7.41.22.arity.1)
        pure (CGrInt unboxed.CGrInt.20) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.20)
      idr_Prelude.Show.primNumShow6_351 <- store idr_Prelude.Show.primNumShow6_val_347
      idr_Prelude.Show.primNumShow6_val_352 <- fetch idr_Prelude.Show.primNumShow6_351
      case idr_Prelude.Show.primNumShow6_val_352 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_353 <- store idr_Prelude.Show.primNumShow5_val_342
  idr_Prelude.Show.primNumShow5_val_354 <- fetch idr_Prelude.Show.primNumShow5_353
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_354 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_358 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_359 <- store idr_Prelude.Show.primNumShow6_val_358
      idr_Prelude.Show.primNumShow6_val_357 <- do
        unboxed.CGrInt.21 <- do
          (CGrString idr_Prelude.Show.primNumShow6_359.41.23.arity.1) <- fetch idr_Prelude.Show.primNumShow6_359
          idris_str_eq.unboxed idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow6_359.41.23.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow6_359.41.23.arity.1)
        pure (CGrInt unboxed.CGrInt.21) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.21)
      idr_Prelude.Show.primNumShow6_360 <- store idr_Prelude.Show.primNumShow6_val_357
      idr_Prelude.Show.primNumShow6_val_361 <- fetch idr_Prelude.Show.primNumShow6_360
      idr_Prelude.Show.primNumShow6_val_356 <- case idr_Prelude.Show.primNumShow6_val_361 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_362) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_362 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Show.primNumShow6_363 <- store idr_Prelude.Show.primNumShow6_val_356
      idr_Prelude.Show.primNumShow7_val_364 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_365 <- store idr_Prelude.Show.primNumShow7_val_364
      idr_Prelude.Show.primNumShow6_val_355 <- do
        (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Show.primNumShow7_365
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Show.primNumShow6_363 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow6_366 <- store idr_Prelude.Show.primNumShow6_val_355
      idr_Prelude.Show.primNumShow6_val_367 <- fetch idr_Prelude.Show.primNumShow6_366
      case idr_Prelude.Show.primNumShow6_val_367 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Prelude.Show.primNumShow7_val_369 <- do
            unboxed.CGrInt.22 <- idris_str_head.unboxed idr_Prelude.Show.primNumShow4
            pure (CGrInt unboxed.CGrInt.22) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.22)
          idr_Prelude.Show.primNumShow7_370 <- store idr_Prelude.Show.primNumShow7_val_369
          idr_Prelude.Show.primNumShow8_val <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8 <- store idr_Prelude.Show.primNumShow8_val
          idr_Prelude.Show.primNumShow7_val_368 <- do
            unboxed.CGrInt.23 <- do
              (CGrInt idr_Prelude.Show.primNumShow8.41.25.arity.1) <- fetch idr_Prelude.Show.primNumShow8
              idris_int_eq.unboxed idr_Prelude.Show.primNumShow7_370 idr_Prelude.Show.primNumShow8.41.25.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow8.41.25.arity.1)
            pure (CGrInt unboxed.CGrInt.23) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.23)
          idr_Prelude.Show.primNumShow7_371 <- store idr_Prelude.Show.primNumShow7_val_368
          idr_Prelude.Show.primNumShow7_val_372 <- fetch idr_Prelude.Show.primNumShow7_371
          case idr_Prelude.Show.primNumShow7_val_372 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_373) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_373 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_374 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_375 <- fetch idr_Prelude.Show.primNumShow5_374
  case idr_Prelude.Show.primNumShow5_val_375 of
    (Cidr_Prelude.Bool.False) ->
      fetch idr_Prelude.Show.primNumShow4
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_376 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_377 <- store idr_Prelude.Show.primNumShow6_val_376
      idr_Prelude.Show.primNumShow7_val_379 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_380 <- store idr_Prelude.Show.primNumShow7_val_379
      idr_Prelude.Show.primNumShow7_val_378 <- idris_str_concat idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow7_380
      idr_Prelude.Show.primNumShow7_381 <- store idr_Prelude.Show.primNumShow7_val_378
      idris_str_concat idr_Prelude.Show.primNumShow6_377 idr_Prelude.Show.primNumShow7_381

idr_prim__floatToStr idr_prim__floatToStr0 =
  do
    idris_float_str1.0 <- pure idr_prim__floatToStr0
    (CGrFloat idris_float_str1_0.0) <- fetch idris_float_str1.0
    idris_float_str2.0 <- _prim_float_string idris_float_str1_0.0
    pure (CGrString idris_float_str2.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_float_str2.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrFloat idris_float_str1_0.0)

idr_prim__strCons idr_prim__strCons0 idr_prim__strCons1 =
  do
    (CGrInt idr_prim__strCons0.41.26.arity.1) <- fetch idr_prim__strCons0
    idris_str_cons idr_prim__strCons0.41.26.arity.1 idr_prim__strCons1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_prim__strCons0.41.26.arity.1)

idr_prim__toStrInt idr_prim__toStrInt0 =
  do
    idris_int_str1.0 <- pure idr_prim__toStrInt0
    (CGrInt idris_int_str1_0.0) <- fetch idris_int_str1.0
    idris_int_str2.0 <- _prim_int_str idris_int_str1_0.0
    pure (CGrString idris_int_str2.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_int_str2.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.0)

idr_Main.printFmt idr_Main.printFmt0 idr_Main.printFmt1 =
  idr_Main.printFmt0_val <- fetch idr_Main.printFmt0
  case idr_Main.printFmt0_val of
    (Cidr_Main.End) ->
      fetch idr_Main.printFmt1
    (Cidr_Main.Lit idr_Main.printFmt2 idr_Main.printFmt3) ->
      idr_Main.printFmt4_val <- idris_str_concat idr_Main.printFmt1 idr_Main.printFmt2
      idr_Main.printFmt4 <- store idr_Main.printFmt4_val
      idr_Main.printFmt idr_Main.printFmt3 idr_Main.printFmt4
    (Cidr_Main.Number idr_Main.printFmt2_382) ->
      pure (C"idr_{U_Main.{printFmt_14}_1}" idr_Main.printFmt2_382 idr_Main.printFmt1) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{printFmt_14}_1}" idr_Main.printFmt2_382 idr_Main.printFmt1)
    (Cidr_Main.Str idr_Main.printFmt2_383) ->
      pure (C"idr_{U_Main.{printFmt_15}_1}" idr_Main.printFmt2_383 idr_Main.printFmt1) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{printFmt_15}_1}" idr_Main.printFmt2_383 idr_Main.printFmt1)

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  idr_Prelude.Interactive.printLn'5_val_385 <- do
    "idr_{APPLY_0}0.8" <- pure idr_Prelude.Interactive.printLn'2
    "idr_{APPLY_0}1.8" <- pure idr_Prelude.Interactive.printLn'3
    "idr_{APPLY_0}0_val.8" <- fetch "idr_{APPLY_0}0.8"
    case "idr_{APPLY_0}0_val.8" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.8" "idr_{APPLY_0}3.8" "idr_{APPLY_0}4.8") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.8" "idr_{APPLY_0}3.8" "idr_{APPLY_0}4.8" "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.8" "idr_{APPLY_0}3_1445.8" "idr_{APPLY_0}4_1446.8") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.8" "idr_{APPLY_0}3_1445.8" "idr_{APPLY_0}4_1446.8" "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.8") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.8" "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.8" "idr_{APPLY_0}3_1449.8") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.8" "idr_{APPLY_0}3_1449.8" "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.8" "idr_{APPLY_0}3_1451.8") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.8" "idr_{APPLY_0}3_1451.8" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.8" "idr_{APPLY_0}3_1453.8") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.8" "idr_{APPLY_0}3_1453.8" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.8") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.8" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.8") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.8" "idr_{APPLY_0}1.8"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.8") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.8" "idr_{APPLY_0}1.8"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.8"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.8") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.8" "idr_{APPLY_0}1.8"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.8"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.8") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.8")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.8") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.8")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_385
  idr_Prelude.Interactive.printLn'6_val <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6 <- store idr_Prelude.Interactive.printLn'6_val
  idr_Prelude.Interactive.printLn'5_val_384 <- idris_str_concat idr_Prelude.Interactive.printLn'5 idr_Prelude.Interactive.printLn'6
  idr_Prelude.Interactive.printLn'5_386 <- store idr_Prelude.Interactive.printLn'5_val_384
  idr_Prelude.Interactive.printLn'5_val <- do
    (CGrString idr_Prelude.Interactive.printLn'5_386.41.27.arity.1) <- fetch idr_Prelude.Interactive.printLn'5_386
    idris_write_str idr_Prelude.Interactive.printLn'5_386.41.27.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Interactive.printLn'5_386.41.27.arity.1)
  idr_Prelude.Interactive.printLn'5_387 <- store idr_Prelude.Interactive.printLn'5_val
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

idr_Prelude.Show.protectEsc idr_Prelude.Show.protectEsc0 idr_Prelude.Show.protectEsc1 idr_Prelude.Show.protectEsc2 =
  idr_Prelude.Show.protectEsc3_val_393 <- pure (CGrString #"")
  idr_Prelude.Show.protectEsc3 <- store idr_Prelude.Show.protectEsc3_val_393
  idr_Prelude.Show.protectEsc3_val_392 <- do
    unboxed.CGrInt.24 <- do
      (CGrString idr_Prelude.Show.protectEsc3.41.28.arity.1) <- fetch idr_Prelude.Show.protectEsc3
      idris_str_eq.unboxed idr_Prelude.Show.protectEsc2 idr_Prelude.Show.protectEsc3.41.28.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.protectEsc3.41.28.arity.1)
    pure (CGrInt unboxed.CGrInt.24) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.24)
  idr_Prelude.Show.protectEsc3_394 <- store idr_Prelude.Show.protectEsc3_val_392
  idr_Prelude.Show.protectEsc3_val_395 <- fetch idr_Prelude.Show.protectEsc3_394
  idr_Prelude.Show.protectEsc3_val_391 <- case idr_Prelude.Show.protectEsc3_val_395 of
    (CGrInt idr_Prelude.Show.protectEsc_cpat_LInt64_0) ->
      case idr_Prelude.Show.protectEsc_cpat_LInt64_0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Show.protectEsc3_396 <- store idr_Prelude.Show.protectEsc3_val_391
  idr_Prelude.Show.protectEsc4_val <- pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.protectEsc4 <- store idr_Prelude.Show.protectEsc4_val
  idr_Prelude.Show.protectEsc3_val_390 <- do
    (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Show.protectEsc4
    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Show.protectEsc3_396 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.protectEsc3_397 <- store idr_Prelude.Show.protectEsc3_val_390
  idr_Prelude.Show.protectEsc3_val_398 <- fetch idr_Prelude.Show.protectEsc3_397
  idr_Prelude.Show.protectEsc3_val_389 <- case idr_Prelude.Show.protectEsc3_val_398 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Basics.Yes) ->
      idr_Prelude.Show.protectEsc4_val_399 <- do
        unboxed.CGrInt.25 <- idris_str_head.unboxed idr_Prelude.Show.protectEsc2
        pure (CGrInt unboxed.CGrInt.25) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.25)
      idr_Prelude.Show.protectEsc4_400 <- store idr_Prelude.Show.protectEsc4_val_399
      do
        "idr_{APPLY_0}0.9" <- pure idr_Prelude.Show.protectEsc0
        "idr_{APPLY_0}1.9" <- pure idr_Prelude.Show.protectEsc4_400
        "idr_{APPLY_0}0_val.9" <- fetch "idr_{APPLY_0}0.9"
        case "idr_{APPLY_0}0_val.9" of
          (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.9" "idr_{APPLY_0}3.9" "idr_{APPLY_0}4.9") ->
            "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.9" "idr_{APPLY_0}3.9" "idr_{APPLY_0}4.9" "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.9" "idr_{APPLY_0}3_1445.9" "idr_{APPLY_0}4_1446.9") ->
            "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.9" "idr_{APPLY_0}3_1445.9" "idr_{APPLY_0}4_1446.9" "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{main_2}_1}") ->
            "idr_Main.{main_2}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{main_3}_1}") ->
            "idr_Main.{main_3}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{main_4}_1}") ->
            "idr_Main.{main_4}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{main_5}_1}") ->
            "idr_Main.{main_5}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{main_6}_1}") ->
            "idr_Main.{main_6}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{main_8}_1}") ->
            "idr_Main.{main_8}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.9") ->
            "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.9" "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.9" "idr_{APPLY_0}3_1449.9") ->
            "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.9" "idr_{APPLY_0}3_1449.9" "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.9" "idr_{APPLY_0}3_1451.9") ->
            "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.9" "idr_{APPLY_0}3_1451.9" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Chars.isDigit_1}") ->
            idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.9" "idr_{APPLY_0}3_1453.9") ->
            idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.9" "idr_{APPLY_0}3_1453.9" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.9") ->
            "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.9" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
            "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
            "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
            "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
            "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
            "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
            "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
            "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
            "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
            "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
            "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
            "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.9") ->
            "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.9" "idr_{APPLY_0}1.9"
          (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.9") ->
            "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.9" "idr_{APPLY_0}1.9"
          (C"idr_{U_prim__floatToStr_1}") ->
            idr_prim__floatToStr "idr_{APPLY_0}1.9"
          (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.9") ->
            idr_prim__strCons "idr_{APPLY_0}2_1457.9" "idr_{APPLY_0}1.9"
          (C"idr_{U_prim__toStrInt_1}") ->
            idr_prim__toStrInt "idr_{APPLY_0}1.9"
          (C"idr_{U_Main.{main_9}_2}") ->
            pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.9") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.9")
          (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
            pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.9") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.9")
          #default ->
            pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Prelude.Show.protectEsc3_401 <- store idr_Prelude.Show.protectEsc3_val_389
  idr_Prelude.Show.protectEsc3_val_402 <- fetch idr_Prelude.Show.protectEsc3_401
  ccp.5 <- case idr_Prelude.Show.protectEsc3_val_402 of
    (Cidr_Prelude.Bool.False) ->
      pure #""
    (Cidr_Prelude.Bool.True) ->
      pure #"\\&"
  idr_Prelude.Show.protectEsc3_val_388 <- pure (CGrString ccp.5)
  idr_Prelude.Show.protectEsc3_403 <- store idr_Prelude.Show.protectEsc3_val_388
  idr_Prelude.Show.protectEsc3_val <- idris_str_concat idr_Prelude.Show.protectEsc3_403 idr_Prelude.Show.protectEsc2
  idr_Prelude.Show.protectEsc3_404 <- store idr_Prelude.Show.protectEsc3_val
  idris_str_concat idr_Prelude.Show.protectEsc1 idr_Prelude.Show.protectEsc3_404

idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString0 idr_Prelude.Show.showLitString1.41.arity.1 =
  idr_Prelude.Show.showLitString0_val <- fetch idr_Prelude.Show.showLitString0
  case idr_Prelude.Show.showLitString0_val of
    (Cidr_Prelude.List.:: idr_Prelude.Show.showLitString2 idr_Prelude.Show.showLitString3) ->
      idr_Prelude.Show.showLitString2_val <- fetch idr_Prelude.Show.showLitString2
      case idr_Prelude.Show.showLitString2_val of
        (CGrInt idr_Prelude.Show.showLitString_cpat_LInt64_34) ->
          case idr_Prelude.Show.showLitString_cpat_LInt64_34 of
            34 ->
              idr_Prelude.Show.showLitString4_val <- pure (CGrString #"\\\"")
              idr_Prelude.Show.showLitString4 <- store idr_Prelude.Show.showLitString4_val
              idr_Prelude.Show.showLitString5_val <- idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1.41.arity.1
              idr_Prelude.Show.showLitString5 <- store idr_Prelude.Show.showLitString5_val
              idris_str_concat idr_Prelude.Show.showLitString4 idr_Prelude.Show.showLitString5
            #default ->
              idr_Prelude.Show.showLitString4_val_441 <- do
                idr_Prelude.Show.showLitChar0.0 <- pure idr_Prelude.Show.showLitString2
                idr_Prelude.Show.showLitChar0_val.0 <- fetch idr_Prelude.Show.showLitChar0.0
                case idr_Prelude.Show.showLitChar0_val.0 of
                  (CGrInt idr_Prelude.Show.showLitChar_cpat_LInt64_7.0) ->
                    case idr_Prelude.Show.showLitChar_cpat_LInt64_7.0 of
                      7 ->
                        pure (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_16}_1}")
                      8 ->
                        pure (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_17}_1}")
                      9 ->
                        pure (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_18}_1}")
                      10 ->
                        pure (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_19}_1}")
                      11 ->
                        pure (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_20}_1}")
                      12 ->
                        pure (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_21}_1}")
                      13 ->
                        pure (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_22}_1}")
                      14 ->
                        idr_Prelude.Show.showLitChar1_val.0 <- pure (C"idr_{U_Prelude.Show.{showLitChar_23}_1}")
                        idr_Prelude.Show.showLitChar1.0 <- store idr_Prelude.Show.showLitChar1_val.0
                        idr_Prelude.Show.showLitChar2_val.0 <- pure (CGrString #"\\SO")
                        idr_Prelude.Show.showLitChar2.0 <- store idr_Prelude.Show.showLitChar2_val.0
                        pure (C"idr_{U_Prelude.Show.protectEsc_1}" idr_Prelude.Show.showLitChar1.0 idr_Prelude.Show.showLitChar2.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.protectEsc_1}" idr_Prelude.Show.showLitChar1.0 idr_Prelude.Show.showLitChar2.0)
                      92 ->
                        pure (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_24}_1}")
                      127 ->
                        pure (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_25}_1}")
                      #default ->
                        idr_Prelude.Show.showLitChar1_val_406.0 <- pure (CErased)
                        idr_Prelude.Show.showLitChar1_407.0 <- store idr_Prelude.Show.showLitChar1_val_406.0
                        idr_Prelude.Show.showLitChar2_val_409.0 <- do
                          unboxed.CGrInt.26.0 <- do
                            (CGrInt idr_Prelude.Show.showLitChar0.41.30.arity.1.0) <- fetch idr_Prelude.Show.showLitChar0.0
                            idris_ch_int.unboxed idr_Prelude.Show.showLitChar0.41.30.arity.1.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.showLitChar0.41.30.arity.1.0)
                          pure (CGrInt unboxed.CGrInt.26.0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.26.0)
                        idr_Prelude.Show.showLitChar2_410.0 <- store idr_Prelude.Show.showLitChar2_val_409.0
                        idr_Prelude.Show.showLitChar2_val_408.0 <- do
                          unboxed.CGrInt.27.0 <- do
                            (CGrInt idr_Prelude.Show.showLitChar2_410.41.31.arity.1.0) <- fetch idr_Prelude.Show.showLitChar2_410.0
                            idris_ls_ext.unboxed idr_Prelude.Show.showLitChar2_410.41.31.arity.1.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.showLitChar2_410.41.31.arity.1.0)
                          pure (CGrInt unboxed.CGrInt.27.0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.27.0)
                        idr_Prelude.Show.showLitChar2_411.0 <- store idr_Prelude.Show.showLitChar2_val_408.0
                        idr_Prelude.Show.showLitChar3_val_412.0 <- pure (CErased)
                        idr_Prelude.Show.showLitChar3.0 <- store idr_Prelude.Show.showLitChar3_val_412.0
                        idr_Prelude.Show.showLitChar3_val.0 <- idr_Prelude.Show.showLitChar:asciiTab:10
                        idr_Prelude.Show.showLitChar3_413.0 <- store idr_Prelude.Show.showLitChar3_val.0
                        idr_Prelude.Show.showLitChar1_val_405.0 <- idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar2_411.0 idr_Prelude.Show.showLitChar3_413.0
                        idr_Prelude.Show.showLitChar1_414.0 <- store idr_Prelude.Show.showLitChar1_val_405.0
                        idr_Prelude.Show.showLitChar1_val_415.0 <- fetch idr_Prelude.Show.showLitChar1_414.0
                        case idr_Prelude.Show.showLitChar1_val_415.0 of
                          (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar2_416.0) ->
                            pure (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" idr_Prelude.Show.showLitChar2_416.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" idr_Prelude.Show.showLitChar2_416.0)
                          (Cidr_Prelude.Maybe.Nothing) ->
                            idr_Prelude.Show.showLitChar2_val_418.0 <- pure (CGrInt 127)
                            idr_Prelude.Show.showLitChar2_419.0 <- store idr_Prelude.Show.showLitChar2_val_418.0
                            idr_Prelude.Show.showLitChar2_val_417.0 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Show.showLitChar0.0 idr_Prelude.Show.showLitChar2_419.0
                            idr_Prelude.Show.showLitChar2_420.0 <- store idr_Prelude.Show.showLitChar2_val_417.0
                            idr_Prelude.Show.showLitChar2_val_421.0 <- fetch idr_Prelude.Show.showLitChar2_420.0
                            case idr_Prelude.Show.showLitChar2_val_421.0 of
                              (Cidr_Prelude.Interfaces.GT) ->
                                pure (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" idr_Prelude.Show.showLitChar0.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" idr_Prelude.Show.showLitChar0.0)
                              #default ->
                                pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0.0)
              idr_Prelude.Show.showLitString4_442 <- store idr_Prelude.Show.showLitString4_val_441
              idr_Prelude.Show.showLitString5_val_443 <- idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1.41.arity.1
              idr_Prelude.Show.showLitString5_444 <- store idr_Prelude.Show.showLitString5_val_443
              do
                "idr_{APPLY_0}0.10" <- pure idr_Prelude.Show.showLitString4_442
                "idr_{APPLY_0}1.10" <- pure idr_Prelude.Show.showLitString5_444
                "idr_{APPLY_0}0_val.10" <- fetch "idr_{APPLY_0}0.10"
                case "idr_{APPLY_0}0_val.10" of
                  (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.10" "idr_{APPLY_0}3.10" "idr_{APPLY_0}4.10") ->
                    "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.10" "idr_{APPLY_0}3.10" "idr_{APPLY_0}4.10" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.10" "idr_{APPLY_0}3_1445.10" "idr_{APPLY_0}4_1446.10") ->
                    "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.10" "idr_{APPLY_0}3_1445.10" "idr_{APPLY_0}4_1446.10" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{main_2}_1}") ->
                    "idr_Main.{main_2}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{main_3}_1}") ->
                    "idr_Main.{main_3}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{main_4}_1}") ->
                    "idr_Main.{main_4}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{main_5}_1}") ->
                    "idr_Main.{main_5}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{main_6}_1}") ->
                    "idr_Main.{main_6}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{main_8}_1}") ->
                    "idr_Main.{main_8}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.10") ->
                    "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.10" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.10" "idr_{APPLY_0}3_1449.10") ->
                    "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.10" "idr_{APPLY_0}3_1449.10" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.10" "idr_{APPLY_0}3_1451.10") ->
                    "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.10" "idr_{APPLY_0}3_1451.10" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Chars.isDigit_1}") ->
                    idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.10" "idr_{APPLY_0}3_1453.10") ->
                    idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.10" "idr_{APPLY_0}3_1453.10" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.10") ->
                    "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.10" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
                    "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
                    "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
                    "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
                    "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
                    "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
                    "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
                    "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
                    "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
                    "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
                    "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
                    "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.10") ->
                    "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.10" "idr_{APPLY_0}1.10"
                  (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.10") ->
                    "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.10" "idr_{APPLY_0}1.10"
                  (C"idr_{U_prim__floatToStr_1}") ->
                    idr_prim__floatToStr "idr_{APPLY_0}1.10"
                  (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.10") ->
                    idr_prim__strCons "idr_{APPLY_0}2_1457.10" "idr_{APPLY_0}1.10"
                  (C"idr_{U_prim__toStrInt_1}") ->
                    idr_prim__toStrInt "idr_{APPLY_0}1.10"
                  (C"idr_{U_Main.{main_9}_2}") ->
                    pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.10") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.10")
                  (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
                    pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.10") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.10")
                  #default ->
                    pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
    (Cidr_Prelude.List.Nil) ->
      pure (CGrString idr_Prelude.Show.showLitString1.41.arity.1) -- LINT: Last return expressions can only return non-node values: pure (CGrString idr_Prelude.Show.showLitString1.41.arity.1)

idr_Main.toFormat idr_Main.toFormat0 =
  idr_Main.toFormat0_val <- fetch idr_Main.toFormat0
  case idr_Main.toFormat0_val of
    (Cidr_Prelude.List.:: idr_Main.toFormat1 idr_Main.toFormat2) ->
      idr_Main.toFormat1_val <- fetch idr_Main.toFormat1
      case idr_Main.toFormat1_val of
        (CGrInt idr_Main.toFormat_cpat_LInt64_37) ->
          case idr_Main.toFormat_cpat_LInt64_37 of
            37 ->
              idr_Main.toFormat2_val <- fetch idr_Main.toFormat2
              case idr_Main.toFormat2_val of
                (Cidr_Prelude.List.:: idr_Main.toFormat3 idr_Main.toFormat4) ->
                  idr_Main.toFormat3_val <- fetch idr_Main.toFormat3
                  case idr_Main.toFormat3_val of
                    (CGrInt idr_Main.toFormat_cpat_LInt64_100) ->
                      case idr_Main.toFormat_cpat_LInt64_100 of
                        100 ->
                          idr_Main.toFormat5_val <- idr_Main.toFormat idr_Main.toFormat4
                          idr_Main.toFormat5 <- store idr_Main.toFormat5_val
                          pure (Cidr_Main.Number idr_Main.toFormat5) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Number idr_Main.toFormat5)
                        115 ->
                          idr_Main.toFormat5_val_451 <- idr_Main.toFormat idr_Main.toFormat4
                          idr_Main.toFormat5_452 <- store idr_Main.toFormat5_val_451
                          pure (Cidr_Main.Str idr_Main.toFormat5_452) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Str idr_Main.toFormat5_452)
                        #default ->
                          idr_Main.toFormat5_val_453 <- pure (CGrString #"%")
                          idr_Main.toFormat5_454 <- store idr_Main.toFormat5_val_453
                          idr_Main.toFormat6_val <- idr_Main.toFormat idr_Main.toFormat2
                          idr_Main.toFormat6 <- store idr_Main.toFormat6_val
                          pure (Cidr_Main.Lit idr_Main.toFormat5_454 idr_Main.toFormat6) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Lit idr_Main.toFormat5_454 idr_Main.toFormat6)
                #default ->
                  idr_Main.toFormat3_val_459 <- pure (CGrString #"%")
                  idr_Main.toFormat3_460 <- store idr_Main.toFormat3_val_459
                  idr_Main.toFormat4_val <- idr_Main.toFormat idr_Main.toFormat2
                  idr_Main.toFormat4_461 <- store idr_Main.toFormat4_val
                  pure (Cidr_Main.Lit idr_Main.toFormat3_460 idr_Main.toFormat4_461) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Lit idr_Main.toFormat3_460 idr_Main.toFormat4_461)
            #default ->
              idr_Main.toFormat3_val_462 <- idr_Main.toFormat idr_Main.toFormat2
              idr_Main.toFormat3_463 <- store idr_Main.toFormat3_val_462
              idr_Main.toFormat3_val_464 <- fetch idr_Main.toFormat3_463
              case idr_Main.toFormat3_val_464 of
                (Cidr_Main.Lit idr_Main.toFormat4_465 idr_Main.toFormat5_466) ->
                  idr_Main.toFormat6_val_467 <- do
                    (CGrInt idr_Main.toFormat1.41.34.arity.1) <- fetch idr_Main.toFormat1
                    idris_str_cons idr_Main.toFormat1.41.34.arity.1 idr_Main.toFormat4_465 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.toFormat1.41.34.arity.1)
                  idr_Main.toFormat6_468 <- store idr_Main.toFormat6_val_467
                  pure (Cidr_Main.Lit idr_Main.toFormat6_468 idr_Main.toFormat5_466) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Lit idr_Main.toFormat6_468 idr_Main.toFormat5_466)
                #default ->
                  idr_Main.toFormat4_val_470 <- pure (CGrString #"")
                  idr_Main.toFormat4_471 <- store idr_Main.toFormat4_val_470
                  idr_Main.toFormat4_val_469 <- do
                    (CGrInt idr_Main.toFormat1.41.35.arity.1) <- fetch idr_Main.toFormat1
                    idris_str_cons idr_Main.toFormat1.41.35.arity.1 idr_Main.toFormat4_471 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.toFormat1.41.35.arity.1)
                  idr_Main.toFormat4_472 <- store idr_Main.toFormat4_val_469
                  idr_Main.toFormat5_val_473 <- idr_Main.toFormat idr_Main.toFormat2
                  idr_Main.toFormat5_474 <- store idr_Main.toFormat5_val_473
                  pure (Cidr_Main.Lit idr_Main.toFormat4_472 idr_Main.toFormat5_474) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Lit idr_Main.toFormat4_472 idr_Main.toFormat5_474)
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Main.End) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.End)

idr_Main.tri =
  idr_Main.tri0_val_488 <- pure (CGrFloat 0.0)
  idr_Main.tri0 <- store idr_Main.tri0_val_488
  idr_Main.tri1_val <- pure (CGrFloat 0.0)
  idr_Main.tri1 <- store idr_Main.tri1_val
  idr_Main.tri0_val <- pure (Cidr_Builtins.MkPair idr_Main.tri0 idr_Main.tri1)
  idr_Main.tri0_489 <- store idr_Main.tri0_val
  idr_Main.tri1_val_492 <- pure (CGrFloat 3.0)
  idr_Main.tri1_493 <- store idr_Main.tri1_val_492
  idr_Main.tri2_val <- pure (CGrFloat 0.0)
  idr_Main.tri2_494 <- store idr_Main.tri2_val
  idr_Main.tri1_val_491 <- pure (Cidr_Builtins.MkPair idr_Main.tri1_493 idr_Main.tri2_494)
  idr_Main.tri1_495 <- store idr_Main.tri1_val_491
  idr_Main.tri2_val_498 <- pure (CGrFloat 0.0)
  idr_Main.tri2_499 <- store idr_Main.tri2_val_498
  idr_Main.tri3_val <- pure (CGrFloat 4.0)
  idr_Main.tri3 <- store idr_Main.tri3_val
  idr_Main.tri2_val_497 <- pure (Cidr_Builtins.MkPair idr_Main.tri2_499 idr_Main.tri3)
  idr_Main.tri2_500 <- store idr_Main.tri2_val_497
  idr_Main.tri3_val_501 <- pure (Cidr_Data.Vect.Nil)
  idr_Main.tri3_502 <- store idr_Main.tri3_val_501
  idr_Main.tri2_val_496 <- pure (Cidr_Data.Vect.:: idr_Main.tri2_500 idr_Main.tri3_502)
  idr_Main.tri2_503 <- store idr_Main.tri2_val_496
  idr_Main.tri1_val_490 <- pure (Cidr_Data.Vect.:: idr_Main.tri1_495 idr_Main.tri2_503)
  idr_Main.tri1_504 <- store idr_Main.tri1_val_490
  pure (Cidr_Data.Vect.:: idr_Main.tri0_489 idr_Main.tri1_504) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Main.tri0_489 idr_Main.tri1_504)

idr_Main.tri2 =
  idr_Main.tri20_val_505 <- pure (CGrFloat 0.0)
  idr_Main.tri20 <- store idr_Main.tri20_val_505
  idr_Main.tri21_val <- pure (CGrFloat 0.0)
  idr_Main.tri21 <- store idr_Main.tri21_val
  idr_Main.tri20_val <- pure (Cidr_Builtins.MkPair idr_Main.tri20 idr_Main.tri21)
  idr_Main.tri20_506 <- store idr_Main.tri20_val
  idr_Main.tri21_val_509 <- pure (CGrFloat 0.0)
  idr_Main.tri21_510 <- store idr_Main.tri21_val_509
  idr_Main.tri22_val <- pure (CGrFloat 0.0)
  idr_Main.tri22 <- store idr_Main.tri22_val
  idr_Main.tri21_val_508 <- pure (Cidr_Builtins.MkPair idr_Main.tri21_510 idr_Main.tri22)
  idr_Main.tri21_511 <- store idr_Main.tri21_val_508
  idr_Main.tri22_val_514 <- pure (CGrFloat 0.0)
  idr_Main.tri22_515 <- store idr_Main.tri22_val_514
  idr_Main.tri23_val <- pure (CGrFloat 0.0)
  idr_Main.tri23 <- store idr_Main.tri23_val
  idr_Main.tri22_val_513 <- pure (Cidr_Builtins.MkPair idr_Main.tri22_515 idr_Main.tri23)
  idr_Main.tri22_516 <- store idr_Main.tri22_val_513
  idr_Main.tri23_val_517 <- pure (Cidr_Data.Vect.Nil)
  idr_Main.tri23_518 <- store idr_Main.tri23_val_517
  idr_Main.tri22_val_512 <- pure (Cidr_Data.Vect.:: idr_Main.tri22_516 idr_Main.tri23_518)
  idr_Main.tri22_519 <- store idr_Main.tri22_val_512
  idr_Main.tri21_val_507 <- pure (Cidr_Data.Vect.:: idr_Main.tri21_511 idr_Main.tri22_519)
  idr_Main.tri21_520 <- store idr_Main.tri21_val_507
  pure (Cidr_Data.Vect.:: idr_Main.tri20_506 idr_Main.tri21_520) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Main.tri20_506 idr_Main.tri21_520)

idr_Prelude.Strings.trim.unboxed idr_Prelude.Strings.trim0 =
  idr_Prelude.Strings.trim1_val_528 <- do
    unboxed.CGrString.17 <- do
      (CGrString idr_Prelude.Strings.trim0.41.36.arity.1) <- fetch idr_Prelude.Strings.trim0
      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.36.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.36.arity.1)
    pure (CGrString unboxed.CGrString.17) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.17)
  idr_Prelude.Strings.trim1 <- store idr_Prelude.Strings.trim1_val_528
  idr_Prelude.Strings.trim2_val <- pure (CGrString #"")
  idr_Prelude.Strings.trim2 <- store idr_Prelude.Strings.trim2_val
  idr_Prelude.Strings.trim1_val_527 <- do
    unboxed.CGrInt.28 <- do
      (CGrString idr_Prelude.Strings.trim2.41.37.arity.1) <- fetch idr_Prelude.Strings.trim2
      idris_str_eq.unboxed idr_Prelude.Strings.trim1 idr_Prelude.Strings.trim2.41.37.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim2.41.37.arity.1)
    pure (CGrInt unboxed.CGrInt.28) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.28)
  idr_Prelude.Strings.trim1_529 <- store idr_Prelude.Strings.trim1_val_527
  idr_Prelude.Strings.trim1_val_530 <- fetch idr_Prelude.Strings.trim1_529
  idr_Prelude.Strings.trim1_val_526 <- case idr_Prelude.Strings.trim1_val_530 of
    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0) ->
      case idr_Prelude.Strings.trim_cpat_LInt64_0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Strings.trim1_531 <- store idr_Prelude.Strings.trim1_val_526
  idr_Prelude.Strings.trim2_val_532 <- pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Strings.trim2_533 <- store idr_Prelude.Strings.trim2_val_532
  idr_Prelude.Strings.trim1_val_525 <- do
    (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim2_533
    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim1_531 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
  idr_Prelude.Strings.trim1_534 <- store idr_Prelude.Strings.trim1_val_525
  idr_Prelude.Strings.trim1_val_535 <- fetch idr_Prelude.Strings.trim1_534
  idr_Prelude.Strings.trim1_val_524 <- case idr_Prelude.Strings.trim1_val_535 of
    (Cidr_Prelude.Basics.No) ->
      pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
    (Cidr_Prelude.Basics.Yes) ->
      idr_Prelude.Strings.trim2_val_538 <- do
        unboxed.CGrString.18 <- do
          (CGrString idr_Prelude.Strings.trim0.41.39.arity.1) <- fetch idr_Prelude.Strings.trim0
          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.39.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.39.arity.1)
        pure (CGrString unboxed.CGrString.18) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.18)
      idr_Prelude.Strings.trim2_539 <- store idr_Prelude.Strings.trim2_val_538
      idr_Prelude.Strings.trim2_val_537 <- do
        unboxed.CGrInt.29 <- idris_str_head.unboxed idr_Prelude.Strings.trim2_539
        pure (CGrInt unboxed.CGrInt.29) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.29)
      idr_Prelude.Strings.trim2_540 <- store idr_Prelude.Strings.trim2_val_537
      idr_Prelude.Strings.trim2_val_536 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim2_540
      idr_Prelude.Strings.trim2_541 <- store idr_Prelude.Strings.trim2_val_536
      idr_Prelude.Strings.trim2_val_542 <- fetch idr_Prelude.Strings.trim2_541
      case idr_Prelude.Strings.trim2_val_542 of
        (Cidr_Prelude.Bool.False) ->
          idr_Prelude.Strings.trim3_val_543 <- do
            unboxed.CGrString.19 <- do
              (CGrString idr_Prelude.Strings.trim0.41.40.arity.1) <- fetch idr_Prelude.Strings.trim0
              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.40.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.40.arity.1)
            pure (CGrString unboxed.CGrString.19) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.19)
          idr_Prelude.Strings.trim3 <- store idr_Prelude.Strings.trim3_val_543
          idr_Prelude.Strings.trim3_val <- do
            unboxed.CGrInt.30 <- idris_str_head.unboxed idr_Prelude.Strings.trim3
            pure (CGrInt unboxed.CGrInt.30) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.30)
          idr_Prelude.Strings.trim3_544 <- store idr_Prelude.Strings.trim3_val
          idr_Prelude.Strings.trim4_val_545 <- do
            unboxed.CGrString.20 <- do
              (CGrString idr_Prelude.Strings.trim0.41.41.arity.1) <- fetch idr_Prelude.Strings.trim0
              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.41.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.41.arity.1)
            pure (CGrString unboxed.CGrString.20) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.20)
          idr_Prelude.Strings.trim4 <- store idr_Prelude.Strings.trim4_val_545
          idr_Prelude.Strings.trim4_val <- do
            unboxed.CGrString.21 <- idris_str_tail.unboxed idr_Prelude.Strings.trim4
            pure (CGrString unboxed.CGrString.21) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.21)
          idr_Prelude.Strings.trim4_546 <- store idr_Prelude.Strings.trim4_val
          do
            (CGrInt idr_Prelude.Strings.trim3_544.41.42.arity.1) <- fetch idr_Prelude.Strings.trim3_544
            idris_str_cons idr_Prelude.Strings.trim3_544.41.42.arity.1 idr_Prelude.Strings.trim4_546 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim3_544.41.42.arity.1)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Strings.trim3_val_551 <- do
            unboxed.CGrString.22 <- do
              (CGrString idr_Prelude.Strings.trim0.41.43.arity.1) <- fetch idr_Prelude.Strings.trim0
              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.43.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.43.arity.1)
            pure (CGrString unboxed.CGrString.22) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.22)
          idr_Prelude.Strings.trim3_552 <- store idr_Prelude.Strings.trim3_val_551
          idr_Prelude.Strings.trim3_val_550 <- do
            unboxed.CGrString.23 <- idris_str_tail.unboxed idr_Prelude.Strings.trim3_552
            pure (CGrString unboxed.CGrString.23) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.23)
          idr_Prelude.Strings.trim3_553 <- store idr_Prelude.Strings.trim3_val_550
          idr_Prelude.Strings.trim4_val_554 <- pure (CGrString #"")
          idr_Prelude.Strings.trim4_555 <- store idr_Prelude.Strings.trim4_val_554
          idr_Prelude.Strings.trim3_val_549 <- do
            unboxed.CGrInt.31 <- do
              (CGrString idr_Prelude.Strings.trim4_555.41.44.arity.1) <- fetch idr_Prelude.Strings.trim4_555
              idris_str_eq.unboxed idr_Prelude.Strings.trim3_553 idr_Prelude.Strings.trim4_555.41.44.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim4_555.41.44.arity.1)
            pure (CGrInt unboxed.CGrInt.31) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.31)
          idr_Prelude.Strings.trim3_556 <- store idr_Prelude.Strings.trim3_val_549
          idr_Prelude.Strings.trim3_val_557 <- fetch idr_Prelude.Strings.trim3_556
          idr_Prelude.Strings.trim3_val_548 <- case idr_Prelude.Strings.trim3_val_557 of
            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_558) ->
              case idr_Prelude.Strings.trim_cpat_LInt64_0_558 of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.trim3_559 <- store idr_Prelude.Strings.trim3_val_548
          idr_Prelude.Strings.trim4_val_560 <- pure (Cidr_Prelude.Bool.True)
          idr_Prelude.Strings.trim4_561 <- store idr_Prelude.Strings.trim4_val_560
          idr_Prelude.Strings.trim3_val_547 <- do
            (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim4_561
            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim3_559 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
          idr_Prelude.Strings.trim3_562 <- store idr_Prelude.Strings.trim3_val_547
          idr_Prelude.Strings.trim3_val_563 <- fetch idr_Prelude.Strings.trim3_562
          case idr_Prelude.Strings.trim3_val_563 of
            (Cidr_Prelude.Basics.No) ->
              pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
            (Cidr_Prelude.Basics.Yes) ->
              idr_Prelude.Strings.trim4_val_567 <- do
                unboxed.CGrString.24 <- do
                  (CGrString idr_Prelude.Strings.trim0.41.46.arity.1) <- fetch idr_Prelude.Strings.trim0
                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.46.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.46.arity.1)
                pure (CGrString unboxed.CGrString.24) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.24)
              idr_Prelude.Strings.trim4_568 <- store idr_Prelude.Strings.trim4_val_567
              idr_Prelude.Strings.trim4_val_566 <- do
                unboxed.CGrString.25 <- idris_str_tail.unboxed idr_Prelude.Strings.trim4_568
                pure (CGrString unboxed.CGrString.25) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.25)
              idr_Prelude.Strings.trim4_569 <- store idr_Prelude.Strings.trim4_val_566
              idr_Prelude.Strings.trim4_val_565 <- do
                unboxed.CGrInt.32 <- idris_str_head.unboxed idr_Prelude.Strings.trim4_569
                pure (CGrInt unboxed.CGrInt.32) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.32)
              idr_Prelude.Strings.trim4_570 <- store idr_Prelude.Strings.trim4_val_565
              idr_Prelude.Strings.trim4_val_564 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim4_570
              idr_Prelude.Strings.trim4_571 <- store idr_Prelude.Strings.trim4_val_564
              idr_Prelude.Strings.trim4_val_572 <- fetch idr_Prelude.Strings.trim4_571
              case idr_Prelude.Strings.trim4_val_572 of
                (Cidr_Prelude.Bool.False) ->
                  idr_Prelude.Strings.trim5_val_574 <- do
                    unboxed.CGrString.26 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.47.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.47.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.47.arity.1)
                    pure (CGrString unboxed.CGrString.26) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.26)
                  idr_Prelude.Strings.trim5 <- store idr_Prelude.Strings.trim5_val_574
                  idr_Prelude.Strings.trim5_val_573 <- do
                    unboxed.CGrString.27 <- idris_str_tail.unboxed idr_Prelude.Strings.trim5
                    pure (CGrString unboxed.CGrString.27) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.27)
                  idr_Prelude.Strings.trim5_575 <- store idr_Prelude.Strings.trim5_val_573
                  idr_Prelude.Strings.trim5_val <- do
                    unboxed.CGrInt.33 <- idris_str_head.unboxed idr_Prelude.Strings.trim5_575
                    pure (CGrInt unboxed.CGrInt.33) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.33)
                  idr_Prelude.Strings.trim5_576 <- store idr_Prelude.Strings.trim5_val
                  idr_Prelude.Strings.trim6_val_578 <- do
                    unboxed.CGrString.28 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.48.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.48.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.48.arity.1)
                    pure (CGrString unboxed.CGrString.28) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.28)
                  idr_Prelude.Strings.trim6 <- store idr_Prelude.Strings.trim6_val_578
                  idr_Prelude.Strings.trim6_val_577 <- do
                    unboxed.CGrString.29 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6
                    pure (CGrString unboxed.CGrString.29) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.29)
                  idr_Prelude.Strings.trim6_579 <- store idr_Prelude.Strings.trim6_val_577
                  idr_Prelude.Strings.trim6_val <- do
                    unboxed.CGrString.30 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6_579
                    pure (CGrString unboxed.CGrString.30) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.30)
                  idr_Prelude.Strings.trim6_580 <- store idr_Prelude.Strings.trim6_val
                  do
                    (CGrInt idr_Prelude.Strings.trim5_576.41.49.arity.1) <- fetch idr_Prelude.Strings.trim5_576
                    idris_str_cons idr_Prelude.Strings.trim5_576.41.49.arity.1 idr_Prelude.Strings.trim6_580 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim5_576.41.49.arity.1)
                (Cidr_Prelude.Bool.True) ->
                  idr_Prelude.Strings.trim5_val_586 <- do
                    unboxed.CGrString.31 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.50.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.50.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.50.arity.1)
                    pure (CGrString unboxed.CGrString.31) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.31)
                  idr_Prelude.Strings.trim5_587 <- store idr_Prelude.Strings.trim5_val_586
                  idr_Prelude.Strings.trim5_val_585 <- do
                    unboxed.CGrString.32 <- idris_str_tail.unboxed idr_Prelude.Strings.trim5_587
                    pure (CGrString unboxed.CGrString.32) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.32)
                  idr_Prelude.Strings.trim5_588 <- store idr_Prelude.Strings.trim5_val_585
                  idr_Prelude.Strings.trim5_val_584 <- do
                    unboxed.CGrString.33 <- idris_str_tail.unboxed idr_Prelude.Strings.trim5_588
                    pure (CGrString unboxed.CGrString.33) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.33)
                  idr_Prelude.Strings.trim5_589 <- store idr_Prelude.Strings.trim5_val_584
                  idr_Prelude.Strings.trim6_val_590 <- pure (CGrString #"")
                  idr_Prelude.Strings.trim6_591 <- store idr_Prelude.Strings.trim6_val_590
                  idr_Prelude.Strings.trim5_val_583 <- do
                    unboxed.CGrInt.34 <- do
                      (CGrString idr_Prelude.Strings.trim6_591.41.51.arity.1) <- fetch idr_Prelude.Strings.trim6_591
                      idris_str_eq.unboxed idr_Prelude.Strings.trim5_589 idr_Prelude.Strings.trim6_591.41.51.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim6_591.41.51.arity.1)
                    pure (CGrInt unboxed.CGrInt.34) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.34)
                  idr_Prelude.Strings.trim5_592 <- store idr_Prelude.Strings.trim5_val_583
                  idr_Prelude.Strings.trim5_val_593 <- fetch idr_Prelude.Strings.trim5_592
                  idr_Prelude.Strings.trim5_val_582 <- case idr_Prelude.Strings.trim5_val_593 of
                    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_594) ->
                      case idr_Prelude.Strings.trim_cpat_LInt64_0_594 of
                        0 ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  idr_Prelude.Strings.trim5_595 <- store idr_Prelude.Strings.trim5_val_582
                  idr_Prelude.Strings.trim6_val_596 <- pure (Cidr_Prelude.Bool.True)
                  idr_Prelude.Strings.trim6_597 <- store idr_Prelude.Strings.trim6_val_596
                  idr_Prelude.Strings.trim5_val_581 <- do
                    (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim6_597
                    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim5_595 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                  idr_Prelude.Strings.trim5_598 <- store idr_Prelude.Strings.trim5_val_581
                  idr_Prelude.Strings.trim5_val_599 <- fetch idr_Prelude.Strings.trim5_598
                  case idr_Prelude.Strings.trim5_val_599 of
                    (Cidr_Prelude.Basics.No) ->
                      pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
                    (Cidr_Prelude.Basics.Yes) ->
                      idr_Prelude.Strings.trim6_val_604 <- do
                        unboxed.CGrString.34 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.53.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.53.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.53.arity.1)
                        pure (CGrString unboxed.CGrString.34) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.34)
                      idr_Prelude.Strings.trim6_605 <- store idr_Prelude.Strings.trim6_val_604
                      idr_Prelude.Strings.trim6_val_603 <- do
                        unboxed.CGrString.35 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6_605
                        pure (CGrString unboxed.CGrString.35) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.35)
                      idr_Prelude.Strings.trim6_606 <- store idr_Prelude.Strings.trim6_val_603
                      idr_Prelude.Strings.trim6_val_602 <- do
                        unboxed.CGrString.36 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6_606
                        pure (CGrString unboxed.CGrString.36) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.36)
                      idr_Prelude.Strings.trim6_607 <- store idr_Prelude.Strings.trim6_val_602
                      idr_Prelude.Strings.trim6_val_601 <- do
                        unboxed.CGrInt.35 <- idris_str_head.unboxed idr_Prelude.Strings.trim6_607
                        pure (CGrInt unboxed.CGrInt.35) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.35)
                      idr_Prelude.Strings.trim6_608 <- store idr_Prelude.Strings.trim6_val_601
                      idr_Prelude.Strings.trim6_val_600 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim6_608
                      idr_Prelude.Strings.trim6_609 <- store idr_Prelude.Strings.trim6_val_600
                      idr_Prelude.Strings.trim6_val_610 <- fetch idr_Prelude.Strings.trim6_609
                      case idr_Prelude.Strings.trim6_val_610 of
                        (Cidr_Prelude.Bool.False) ->
                          idr_Prelude.Strings.trim7_val_613 <- do
                            unboxed.CGrString.37 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.54.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.54.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.54.arity.1)
                            pure (CGrString unboxed.CGrString.37) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.37)
                          idr_Prelude.Strings.trim7 <- store idr_Prelude.Strings.trim7_val_613
                          idr_Prelude.Strings.trim7_val_612 <- do
                            unboxed.CGrString.38 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7
                            pure (CGrString unboxed.CGrString.38) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.38)
                          idr_Prelude.Strings.trim7_614 <- store idr_Prelude.Strings.trim7_val_612
                          idr_Prelude.Strings.trim7_val_611 <- do
                            unboxed.CGrString.39 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_614
                            pure (CGrString unboxed.CGrString.39) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.39)
                          idr_Prelude.Strings.trim7_615 <- store idr_Prelude.Strings.trim7_val_611
                          idr_Prelude.Strings.trim7_val <- do
                            unboxed.CGrInt.36 <- idris_str_head.unboxed idr_Prelude.Strings.trim7_615
                            pure (CGrInt unboxed.CGrInt.36) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.36)
                          idr_Prelude.Strings.trim7_616 <- store idr_Prelude.Strings.trim7_val
                          idr_Prelude.Strings.trim8_val_619 <- do
                            unboxed.CGrString.40 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.55.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.55.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.55.arity.1)
                            pure (CGrString unboxed.CGrString.40) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.40)
                          idr_Prelude.Strings.trim8 <- store idr_Prelude.Strings.trim8_val_619
                          idr_Prelude.Strings.trim8_val_618 <- do
                            unboxed.CGrString.41 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8
                            pure (CGrString unboxed.CGrString.41) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.41)
                          idr_Prelude.Strings.trim8_620 <- store idr_Prelude.Strings.trim8_val_618
                          idr_Prelude.Strings.trim8_val_617 <- do
                            unboxed.CGrString.42 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_620
                            pure (CGrString unboxed.CGrString.42) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.42)
                          idr_Prelude.Strings.trim8_621 <- store idr_Prelude.Strings.trim8_val_617
                          idr_Prelude.Strings.trim8_val <- do
                            unboxed.CGrString.43 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_621
                            pure (CGrString unboxed.CGrString.43) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.43)
                          idr_Prelude.Strings.trim8_622 <- store idr_Prelude.Strings.trim8_val
                          do
                            (CGrInt idr_Prelude.Strings.trim7_616.41.56.arity.1) <- fetch idr_Prelude.Strings.trim7_616
                            idris_str_cons idr_Prelude.Strings.trim7_616.41.56.arity.1 idr_Prelude.Strings.trim8_622 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim7_616.41.56.arity.1)
                        (Cidr_Prelude.Bool.True) ->
                          idr_Prelude.Strings.trim7_val_629 <- do
                            unboxed.CGrString.44 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.57.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.57.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.57.arity.1)
                            pure (CGrString unboxed.CGrString.44) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.44)
                          idr_Prelude.Strings.trim7_630 <- store idr_Prelude.Strings.trim7_val_629
                          idr_Prelude.Strings.trim7_val_628 <- do
                            unboxed.CGrString.45 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_630
                            pure (CGrString unboxed.CGrString.45) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.45)
                          idr_Prelude.Strings.trim7_631 <- store idr_Prelude.Strings.trim7_val_628
                          idr_Prelude.Strings.trim7_val_627 <- do
                            unboxed.CGrString.46 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_631
                            pure (CGrString unboxed.CGrString.46) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.46)
                          idr_Prelude.Strings.trim7_632 <- store idr_Prelude.Strings.trim7_val_627
                          idr_Prelude.Strings.trim7_val_626 <- do
                            unboxed.CGrString.47 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_632
                            pure (CGrString unboxed.CGrString.47) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.47)
                          idr_Prelude.Strings.trim7_633 <- store idr_Prelude.Strings.trim7_val_626
                          idr_Prelude.Strings.trim8_val_634 <- pure (CGrString #"")
                          idr_Prelude.Strings.trim8_635 <- store idr_Prelude.Strings.trim8_val_634
                          idr_Prelude.Strings.trim7_val_625 <- do
                            unboxed.CGrInt.37 <- do
                              (CGrString idr_Prelude.Strings.trim8_635.41.58.arity.1) <- fetch idr_Prelude.Strings.trim8_635
                              idris_str_eq.unboxed idr_Prelude.Strings.trim7_633 idr_Prelude.Strings.trim8_635.41.58.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim8_635.41.58.arity.1)
                            pure (CGrInt unboxed.CGrInt.37) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.37)
                          idr_Prelude.Strings.trim7_636 <- store idr_Prelude.Strings.trim7_val_625
                          idr_Prelude.Strings.trim7_val_637 <- fetch idr_Prelude.Strings.trim7_636
                          idr_Prelude.Strings.trim7_val_624 <- case idr_Prelude.Strings.trim7_val_637 of
                            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_638) ->
                              case idr_Prelude.Strings.trim_cpat_LInt64_0_638 of
                                0 ->
                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          idr_Prelude.Strings.trim7_639 <- store idr_Prelude.Strings.trim7_val_624
                          idr_Prelude.Strings.trim8_val_640 <- pure (Cidr_Prelude.Bool.True)
                          idr_Prelude.Strings.trim8_641 <- store idr_Prelude.Strings.trim8_val_640
                          idr_Prelude.Strings.trim7_val_623 <- do
                            (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim8_641
                            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim7_639 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                          idr_Prelude.Strings.trim7_642 <- store idr_Prelude.Strings.trim7_val_623
                          idr_Prelude.Strings.trim7_val_643 <- fetch idr_Prelude.Strings.trim7_642
                          case idr_Prelude.Strings.trim7_val_643 of
                            (Cidr_Prelude.Basics.No) ->
                              pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
                            (Cidr_Prelude.Basics.Yes) ->
                              idr_Prelude.Strings.trim8_val_649 <- do
                                unboxed.CGrString.48 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.60.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.60.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.60.arity.1)
                                pure (CGrString unboxed.CGrString.48) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.48)
                              idr_Prelude.Strings.trim8_650 <- store idr_Prelude.Strings.trim8_val_649
                              idr_Prelude.Strings.trim8_val_648 <- do
                                unboxed.CGrString.49 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_650
                                pure (CGrString unboxed.CGrString.49) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.49)
                              idr_Prelude.Strings.trim8_651 <- store idr_Prelude.Strings.trim8_val_648
                              idr_Prelude.Strings.trim8_val_647 <- do
                                unboxed.CGrString.50 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_651
                                pure (CGrString unboxed.CGrString.50) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.50)
                              idr_Prelude.Strings.trim8_652 <- store idr_Prelude.Strings.trim8_val_647
                              idr_Prelude.Strings.trim8_val_646 <- do
                                unboxed.CGrString.51 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_652
                                pure (CGrString unboxed.CGrString.51) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.51)
                              idr_Prelude.Strings.trim8_653 <- store idr_Prelude.Strings.trim8_val_646
                              idr_Prelude.Strings.trim8_val_645 <- do
                                unboxed.CGrInt.38 <- idris_str_head.unboxed idr_Prelude.Strings.trim8_653
                                pure (CGrInt unboxed.CGrInt.38) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.38)
                              idr_Prelude.Strings.trim8_654 <- store idr_Prelude.Strings.trim8_val_645
                              idr_Prelude.Strings.trim8_val_644 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim8_654
                              idr_Prelude.Strings.trim8_655 <- store idr_Prelude.Strings.trim8_val_644
                              idr_Prelude.Strings.trim8_val_656 <- fetch idr_Prelude.Strings.trim8_655
                              case idr_Prelude.Strings.trim8_val_656 of
                                (Cidr_Prelude.Bool.False) ->
                                  idr_Prelude.Strings.trim9_val_660 <- do
                                    unboxed.CGrString.52 <- do
                                      (CGrString idr_Prelude.Strings.trim0.41.61.arity.1) <- fetch idr_Prelude.Strings.trim0
                                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.61.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.61.arity.1)
                                    pure (CGrString unboxed.CGrString.52) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.52)
                                  idr_Prelude.Strings.trim9 <- store idr_Prelude.Strings.trim9_val_660
                                  idr_Prelude.Strings.trim9_val_659 <- do
                                    unboxed.CGrString.53 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9
                                    pure (CGrString unboxed.CGrString.53) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.53)
                                  idr_Prelude.Strings.trim9_661 <- store idr_Prelude.Strings.trim9_val_659
                                  idr_Prelude.Strings.trim9_val_658 <- do
                                    unboxed.CGrString.54 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_661
                                    pure (CGrString unboxed.CGrString.54) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.54)
                                  idr_Prelude.Strings.trim9_662 <- store idr_Prelude.Strings.trim9_val_658
                                  idr_Prelude.Strings.trim9_val_657 <- do
                                    unboxed.CGrString.55 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_662
                                    pure (CGrString unboxed.CGrString.55) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.55)
                                  idr_Prelude.Strings.trim9_663 <- store idr_Prelude.Strings.trim9_val_657
                                  idr_Prelude.Strings.trim9_val <- do
                                    unboxed.CGrInt.39 <- idris_str_head.unboxed idr_Prelude.Strings.trim9_663
                                    pure (CGrInt unboxed.CGrInt.39) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.39)
                                  idr_Prelude.Strings.trim9_664 <- store idr_Prelude.Strings.trim9_val
                                  idr_Prelude.Strings.trim10_val_668 <- do
                                    unboxed.CGrString.56 <- do
                                      (CGrString idr_Prelude.Strings.trim0.41.62.arity.1) <- fetch idr_Prelude.Strings.trim0
                                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.62.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.62.arity.1)
                                    pure (CGrString unboxed.CGrString.56) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.56)
                                  idr_Prelude.Strings.trim10 <- store idr_Prelude.Strings.trim10_val_668
                                  idr_Prelude.Strings.trim10_val_667 <- do
                                    unboxed.CGrString.57 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10
                                    pure (CGrString unboxed.CGrString.57) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.57)
                                  idr_Prelude.Strings.trim10_669 <- store idr_Prelude.Strings.trim10_val_667
                                  idr_Prelude.Strings.trim10_val_666 <- do
                                    unboxed.CGrString.58 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_669
                                    pure (CGrString unboxed.CGrString.58) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.58)
                                  idr_Prelude.Strings.trim10_670 <- store idr_Prelude.Strings.trim10_val_666
                                  idr_Prelude.Strings.trim10_val_665 <- do
                                    unboxed.CGrString.59 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_670
                                    pure (CGrString unboxed.CGrString.59) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.59)
                                  idr_Prelude.Strings.trim10_671 <- store idr_Prelude.Strings.trim10_val_665
                                  idr_Prelude.Strings.trim10_val <- do
                                    unboxed.CGrString.60 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_671
                                    pure (CGrString unboxed.CGrString.60) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.60)
                                  idr_Prelude.Strings.trim10_672 <- store idr_Prelude.Strings.trim10_val
                                  do
                                    (CGrInt idr_Prelude.Strings.trim9_664.41.63.arity.1) <- fetch idr_Prelude.Strings.trim9_664
                                    idris_str_cons idr_Prelude.Strings.trim9_664.41.63.arity.1 idr_Prelude.Strings.trim10_672 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim9_664.41.63.arity.1)
                                (Cidr_Prelude.Bool.True) ->
                                  idr_Prelude.Strings.trim9_val_673 <- pure (CErased)
                                  idr_Prelude.Strings.trim9_674 <- store idr_Prelude.Strings.trim9_val_673
                                  idr_Prelude.Strings.trim10_val_683 <- do
                                    unboxed.CGrString.61 <- do
                                      (CGrString idr_Prelude.Strings.trim0.41.64.arity.1) <- fetch idr_Prelude.Strings.trim0
                                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.64.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.64.arity.1)
                                    pure (CGrString unboxed.CGrString.61) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.61)
                                  idr_Prelude.Strings.trim10_684 <- store idr_Prelude.Strings.trim10_val_683
                                  idr_Prelude.Strings.trim10_val_682 <- do
                                    unboxed.CGrString.62 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_684
                                    pure (CGrString unboxed.CGrString.62) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.62)
                                  idr_Prelude.Strings.trim10_685 <- store idr_Prelude.Strings.trim10_val_682
                                  idr_Prelude.Strings.trim10_val_681 <- do
                                    unboxed.CGrString.63 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_685
                                    pure (CGrString unboxed.CGrString.63) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.63)
                                  idr_Prelude.Strings.trim10_686 <- store idr_Prelude.Strings.trim10_val_681
                                  idr_Prelude.Strings.trim10_val_680 <- do
                                    unboxed.CGrString.64 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_686
                                    pure (CGrString unboxed.CGrString.64) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.64)
                                  idr_Prelude.Strings.trim10_687 <- store idr_Prelude.Strings.trim10_val_680
                                  idr_Prelude.Strings.trim10_val_679 <- do
                                    unboxed.CGrString.65 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_687
                                    pure (CGrString unboxed.CGrString.65) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.65)
                                  idr_Prelude.Strings.trim10_688 <- store idr_Prelude.Strings.trim10_val_679
                                  idr_Prelude.Strings.trim11_val <- pure (CGrString #"")
                                  idr_Prelude.Strings.trim11 <- store idr_Prelude.Strings.trim11_val
                                  idr_Prelude.Strings.trim10_val_678 <- do
                                    unboxed.CGrInt.40 <- do
                                      (CGrString idr_Prelude.Strings.trim11.41.65.arity.1) <- fetch idr_Prelude.Strings.trim11
                                      idris_str_eq.unboxed idr_Prelude.Strings.trim10_688 idr_Prelude.Strings.trim11.41.65.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim11.41.65.arity.1)
                                    pure (CGrInt unboxed.CGrInt.40) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.40)
                                  idr_Prelude.Strings.trim10_689 <- store idr_Prelude.Strings.trim10_val_678
                                  idr_Prelude.Strings.trim10_val_690 <- fetch idr_Prelude.Strings.trim10_689
                                  idr_Prelude.Strings.trim10_val_677 <- case idr_Prelude.Strings.trim10_val_690 of
                                    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_691) ->
                                      case idr_Prelude.Strings.trim_cpat_LInt64_0_691 of
                                        0 ->
                                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                        #default ->
                                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                  idr_Prelude.Strings.trim10_692 <- store idr_Prelude.Strings.trim10_val_677
                                  idr_Prelude.Strings.trim11_val_693 <- pure (Cidr_Prelude.Bool.True)
                                  idr_Prelude.Strings.trim11_694 <- store idr_Prelude.Strings.trim11_val_693
                                  idr_Prelude.Strings.trim10_val_676 <- do
                                    (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim11_694
                                    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim10_692 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                                  idr_Prelude.Strings.trim10_695 <- store idr_Prelude.Strings.trim10_val_676
                                  idr_Prelude.Strings.trim10_val_696 <- fetch idr_Prelude.Strings.trim10_695
                                  idr_Prelude.Strings.trim10_val_675 <- case idr_Prelude.Strings.trim10_val_696 of
                                    (Cidr_Prelude.Basics.No) ->
                                      pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                                    (Cidr_Prelude.Basics.Yes) ->
                                      idr_Prelude.Strings.trim11_val_702 <- do
                                        unboxed.CGrString.66 <- do
                                          (CGrString idr_Prelude.Strings.trim0.41.67.arity.1) <- fetch idr_Prelude.Strings.trim0
                                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.67.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.67.arity.1)
                                        pure (CGrString unboxed.CGrString.66) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.66)
                                      idr_Prelude.Strings.trim11_703 <- store idr_Prelude.Strings.trim11_val_702
                                      idr_Prelude.Strings.trim11_val_701 <- do
                                        unboxed.CGrString.67 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_703
                                        pure (CGrString unboxed.CGrString.67) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.67)
                                      idr_Prelude.Strings.trim11_704 <- store idr_Prelude.Strings.trim11_val_701
                                      idr_Prelude.Strings.trim11_val_700 <- do
                                        unboxed.CGrString.68 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_704
                                        pure (CGrString unboxed.CGrString.68) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.68)
                                      idr_Prelude.Strings.trim11_705 <- store idr_Prelude.Strings.trim11_val_700
                                      idr_Prelude.Strings.trim11_val_699 <- do
                                        unboxed.CGrString.69 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_705
                                        pure (CGrString unboxed.CGrString.69) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.69)
                                      idr_Prelude.Strings.trim11_706 <- store idr_Prelude.Strings.trim11_val_699
                                      idr_Prelude.Strings.trim11_val_698 <- do
                                        unboxed.CGrString.70 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_706
                                        pure (CGrString unboxed.CGrString.70) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.70)
                                      idr_Prelude.Strings.trim11_707 <- store idr_Prelude.Strings.trim11_val_698
                                      idr_Prelude.Strings.trim11_val_697 <- do
                                        unboxed.CGrInt.41 <- idris_str_head.unboxed idr_Prelude.Strings.trim11_707
                                        pure (CGrInt unboxed.CGrInt.41) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.41)
                                      idr_Prelude.Strings.trim11_708 <- store idr_Prelude.Strings.trim11_val_697
                                      idr_Prelude.Strings.trim12_val_713 <- do
                                        unboxed.CGrString.71 <- do
                                          (CGrString idr_Prelude.Strings.trim0.41.68.arity.1) <- fetch idr_Prelude.Strings.trim0
                                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.68.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.68.arity.1)
                                        pure (CGrString unboxed.CGrString.71) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.71)
                                      idr_Prelude.Strings.trim12 <- store idr_Prelude.Strings.trim12_val_713
                                      idr_Prelude.Strings.trim12_val_712 <- do
                                        unboxed.CGrString.72 <- idris_str_tail.unboxed idr_Prelude.Strings.trim12
                                        pure (CGrString unboxed.CGrString.72) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.72)
                                      idr_Prelude.Strings.trim12_714 <- store idr_Prelude.Strings.trim12_val_712
                                      idr_Prelude.Strings.trim12_val_711 <- do
                                        unboxed.CGrString.73 <- idris_str_tail.unboxed idr_Prelude.Strings.trim12_714
                                        pure (CGrString unboxed.CGrString.73) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.73)
                                      idr_Prelude.Strings.trim12_715 <- store idr_Prelude.Strings.trim12_val_711
                                      idr_Prelude.Strings.trim12_val_710 <- do
                                        unboxed.CGrString.74 <- idris_str_tail.unboxed idr_Prelude.Strings.trim12_715
                                        pure (CGrString unboxed.CGrString.74) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.74)
                                      idr_Prelude.Strings.trim12_716 <- store idr_Prelude.Strings.trim12_val_710
                                      idr_Prelude.Strings.trim12_val_709 <- do
                                        unboxed.CGrString.75 <- idris_str_tail.unboxed idr_Prelude.Strings.trim12_716
                                        pure (CGrString unboxed.CGrString.75) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.75)
                                      idr_Prelude.Strings.trim12_717 <- store idr_Prelude.Strings.trim12_val_709
                                      idr_Prelude.Strings.trim12_val <- do
                                        unboxed.CGrString.76 <- idris_str_tail.unboxed idr_Prelude.Strings.trim12_717
                                        pure (CGrString unboxed.CGrString.76) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.76)
                                      idr_Prelude.Strings.trim12_718 <- store idr_Prelude.Strings.trim12_val
                                      pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim11_708 idr_Prelude.Strings.trim12_718) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim11_708 idr_Prelude.Strings.trim12_718)
                                  idr_Prelude.Strings.trim10_719 <- store idr_Prelude.Strings.trim10_val_675
                                  do
                                    unboxed.CGrString.77 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim10_719
                                    pure (CGrString unboxed.CGrString.77) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.77)
  idr_Prelude.Strings.trim1_720 <- store idr_Prelude.Strings.trim1_val_524
  idr_Prelude.Strings.trim1_val_523 <- do
    unboxed.CGrString.78 <- do
      (CGrString idr_Prelude.Strings.trim1_720.41.69.arity.1) <- fetch idr_Prelude.Strings.trim1_720
      idris_str_rev.unboxed idr_Prelude.Strings.trim1_720.41.69.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim1_720.41.69.arity.1)
    pure (CGrString unboxed.CGrString.78) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.78)
  idr_Prelude.Strings.trim1_721 <- store idr_Prelude.Strings.trim1_val_523
  idr_Prelude.Strings.trim2_val_722 <- pure (CGrString #"")
  idr_Prelude.Strings.trim2_723 <- store idr_Prelude.Strings.trim2_val_722
  idr_Prelude.Strings.trim1_val_522 <- do
    unboxed.CGrInt.42 <- do
      (CGrString idr_Prelude.Strings.trim2_723.41.70.arity.1) <- fetch idr_Prelude.Strings.trim2_723
      idris_str_eq.unboxed idr_Prelude.Strings.trim1_721 idr_Prelude.Strings.trim2_723.41.70.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim2_723.41.70.arity.1)
    pure (CGrInt unboxed.CGrInt.42) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.42)
  idr_Prelude.Strings.trim1_724 <- store idr_Prelude.Strings.trim1_val_522
  idr_Prelude.Strings.trim1_val_725 <- fetch idr_Prelude.Strings.trim1_724
  idr_Prelude.Strings.trim1_val_521 <- case idr_Prelude.Strings.trim1_val_725 of
    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_726) ->
      case idr_Prelude.Strings.trim_cpat_LInt64_0_726 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Strings.trim1_727 <- store idr_Prelude.Strings.trim1_val_521
  idr_Prelude.Strings.trim2_val_728 <- pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Strings.trim2_729 <- store idr_Prelude.Strings.trim2_val_728
  idr_Prelude.Strings.trim1_val <- do
    (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim2_729
    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim1_727 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
  idr_Prelude.Strings.trim1_730 <- store idr_Prelude.Strings.trim1_val
  idr_Prelude.Strings.trim1_val_731 <- fetch idr_Prelude.Strings.trim1_730
  case idr_Prelude.Strings.trim1_val_731 of
    (Cidr_Prelude.Basics.No) ->
      pure #""
    (Cidr_Prelude.Basics.Yes) ->
      idr_Prelude.Strings.trim2_val_739 <- do
        unboxed.CGrString.79 <- do
          (CGrString idr_Prelude.Strings.trim0.41.72.arity.1) <- fetch idr_Prelude.Strings.trim0
          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.72.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.72.arity.1)
        pure (CGrString unboxed.CGrString.79) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.79)
      idr_Prelude.Strings.trim2_740 <- store idr_Prelude.Strings.trim2_val_739
      idr_Prelude.Strings.trim3_val_741 <- pure (CGrString #"")
      idr_Prelude.Strings.trim3_742 <- store idr_Prelude.Strings.trim3_val_741
      idr_Prelude.Strings.trim2_val_738 <- do
        unboxed.CGrInt.43 <- do
          (CGrString idr_Prelude.Strings.trim3_742.41.73.arity.1) <- fetch idr_Prelude.Strings.trim3_742
          idris_str_eq.unboxed idr_Prelude.Strings.trim2_740 idr_Prelude.Strings.trim3_742.41.73.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim3_742.41.73.arity.1)
        pure (CGrInt unboxed.CGrInt.43) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.43)
      idr_Prelude.Strings.trim2_743 <- store idr_Prelude.Strings.trim2_val_738
      idr_Prelude.Strings.trim2_val_744 <- fetch idr_Prelude.Strings.trim2_743
      idr_Prelude.Strings.trim2_val_737 <- case idr_Prelude.Strings.trim2_val_744 of
        (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_745) ->
          case idr_Prelude.Strings.trim_cpat_LInt64_0_745 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Strings.trim2_746 <- store idr_Prelude.Strings.trim2_val_737
      idr_Prelude.Strings.trim3_val_747 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Strings.trim3_748 <- store idr_Prelude.Strings.trim3_val_747
      idr_Prelude.Strings.trim2_val_736 <- do
        (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim3_748
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim2_746 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
      idr_Prelude.Strings.trim2_749 <- store idr_Prelude.Strings.trim2_val_736
      idr_Prelude.Strings.trim2_val_750 <- fetch idr_Prelude.Strings.trim2_749
      idr_Prelude.Strings.trim2_val_735 <- case idr_Prelude.Strings.trim2_val_750 of
        (Cidr_Prelude.Basics.No) ->
          pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
        (Cidr_Prelude.Basics.Yes) ->
          idr_Prelude.Strings.trim3_val_753 <- do
            unboxed.CGrString.80 <- do
              (CGrString idr_Prelude.Strings.trim0.41.75.arity.1) <- fetch idr_Prelude.Strings.trim0
              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.75.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.75.arity.1)
            pure (CGrString unboxed.CGrString.80) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.80)
          idr_Prelude.Strings.trim3_754 <- store idr_Prelude.Strings.trim3_val_753
          idr_Prelude.Strings.trim3_val_752 <- do
            unboxed.CGrInt.44 <- idris_str_head.unboxed idr_Prelude.Strings.trim3_754
            pure (CGrInt unboxed.CGrInt.44) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.44)
          idr_Prelude.Strings.trim3_755 <- store idr_Prelude.Strings.trim3_val_752
          idr_Prelude.Strings.trim3_val_751 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim3_755
          idr_Prelude.Strings.trim3_756 <- store idr_Prelude.Strings.trim3_val_751
          idr_Prelude.Strings.trim3_val_757 <- fetch idr_Prelude.Strings.trim3_756
          case idr_Prelude.Strings.trim3_val_757 of
            (Cidr_Prelude.Bool.False) ->
              idr_Prelude.Strings.trim4_val_759 <- do
                unboxed.CGrString.81 <- do
                  (CGrString idr_Prelude.Strings.trim0.41.76.arity.1) <- fetch idr_Prelude.Strings.trim0
                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.76.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.76.arity.1)
                pure (CGrString unboxed.CGrString.81) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.81)
              idr_Prelude.Strings.trim4_760 <- store idr_Prelude.Strings.trim4_val_759
              idr_Prelude.Strings.trim4_val_758 <- do
                unboxed.CGrInt.45 <- idris_str_head.unboxed idr_Prelude.Strings.trim4_760
                pure (CGrInt unboxed.CGrInt.45) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.45)
              idr_Prelude.Strings.trim4_761 <- store idr_Prelude.Strings.trim4_val_758
              idr_Prelude.Strings.trim5_val_763 <- do
                unboxed.CGrString.82 <- do
                  (CGrString idr_Prelude.Strings.trim0.41.77.arity.1) <- fetch idr_Prelude.Strings.trim0
                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.77.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.77.arity.1)
                pure (CGrString unboxed.CGrString.82) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.82)
              idr_Prelude.Strings.trim5_764 <- store idr_Prelude.Strings.trim5_val_763
              idr_Prelude.Strings.trim5_val_762 <- do
                unboxed.CGrString.83 <- idris_str_tail.unboxed idr_Prelude.Strings.trim5_764
                pure (CGrString unboxed.CGrString.83) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.83)
              idr_Prelude.Strings.trim5_765 <- store idr_Prelude.Strings.trim5_val_762
              do
                (CGrInt idr_Prelude.Strings.trim4_761.41.78.arity.1) <- fetch idr_Prelude.Strings.trim4_761
                idris_str_cons idr_Prelude.Strings.trim4_761.41.78.arity.1 idr_Prelude.Strings.trim5_765 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim4_761.41.78.arity.1)
            (Cidr_Prelude.Bool.True) ->
              idr_Prelude.Strings.trim4_val_770 <- do
                unboxed.CGrString.84 <- do
                  (CGrString idr_Prelude.Strings.trim0.41.79.arity.1) <- fetch idr_Prelude.Strings.trim0
                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.79.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.79.arity.1)
                pure (CGrString unboxed.CGrString.84) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.84)
              idr_Prelude.Strings.trim4_771 <- store idr_Prelude.Strings.trim4_val_770
              idr_Prelude.Strings.trim4_val_769 <- do
                unboxed.CGrString.85 <- idris_str_tail.unboxed idr_Prelude.Strings.trim4_771
                pure (CGrString unboxed.CGrString.85) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.85)
              idr_Prelude.Strings.trim4_772 <- store idr_Prelude.Strings.trim4_val_769
              idr_Prelude.Strings.trim5_val_773 <- pure (CGrString #"")
              idr_Prelude.Strings.trim5_774 <- store idr_Prelude.Strings.trim5_val_773
              idr_Prelude.Strings.trim4_val_768 <- do
                unboxed.CGrInt.46 <- do
                  (CGrString idr_Prelude.Strings.trim5_774.41.80.arity.1) <- fetch idr_Prelude.Strings.trim5_774
                  idris_str_eq.unboxed idr_Prelude.Strings.trim4_772 idr_Prelude.Strings.trim5_774.41.80.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim5_774.41.80.arity.1)
                pure (CGrInt unboxed.CGrInt.46) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.46)
              idr_Prelude.Strings.trim4_775 <- store idr_Prelude.Strings.trim4_val_768
              idr_Prelude.Strings.trim4_val_776 <- fetch idr_Prelude.Strings.trim4_775
              idr_Prelude.Strings.trim4_val_767 <- case idr_Prelude.Strings.trim4_val_776 of
                (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_777) ->
                  case idr_Prelude.Strings.trim_cpat_LInt64_0_777 of
                    0 ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              idr_Prelude.Strings.trim4_778 <- store idr_Prelude.Strings.trim4_val_767
              idr_Prelude.Strings.trim5_val_779 <- pure (Cidr_Prelude.Bool.True)
              idr_Prelude.Strings.trim5_780 <- store idr_Prelude.Strings.trim5_val_779
              idr_Prelude.Strings.trim4_val_766 <- do
                (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim5_780
                "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim4_778 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
              idr_Prelude.Strings.trim4_781 <- store idr_Prelude.Strings.trim4_val_766
              idr_Prelude.Strings.trim4_val_782 <- fetch idr_Prelude.Strings.trim4_781
              case idr_Prelude.Strings.trim4_val_782 of
                (Cidr_Prelude.Basics.No) ->
                  pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
                (Cidr_Prelude.Basics.Yes) ->
                  idr_Prelude.Strings.trim5_val_786 <- do
                    unboxed.CGrString.86 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.82.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.82.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.82.arity.1)
                    pure (CGrString unboxed.CGrString.86) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.86)
                  idr_Prelude.Strings.trim5_787 <- store idr_Prelude.Strings.trim5_val_786
                  idr_Prelude.Strings.trim5_val_785 <- do
                    unboxed.CGrString.87 <- idris_str_tail.unboxed idr_Prelude.Strings.trim5_787
                    pure (CGrString unboxed.CGrString.87) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.87)
                  idr_Prelude.Strings.trim5_788 <- store idr_Prelude.Strings.trim5_val_785
                  idr_Prelude.Strings.trim5_val_784 <- do
                    unboxed.CGrInt.47 <- idris_str_head.unboxed idr_Prelude.Strings.trim5_788
                    pure (CGrInt unboxed.CGrInt.47) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.47)
                  idr_Prelude.Strings.trim5_789 <- store idr_Prelude.Strings.trim5_val_784
                  idr_Prelude.Strings.trim5_val_783 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim5_789
                  idr_Prelude.Strings.trim5_790 <- store idr_Prelude.Strings.trim5_val_783
                  idr_Prelude.Strings.trim5_val_791 <- fetch idr_Prelude.Strings.trim5_790
                  case idr_Prelude.Strings.trim5_val_791 of
                    (Cidr_Prelude.Bool.False) ->
                      idr_Prelude.Strings.trim6_val_794 <- do
                        unboxed.CGrString.88 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.83.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.83.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.83.arity.1)
                        pure (CGrString unboxed.CGrString.88) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.88)
                      idr_Prelude.Strings.trim6_795 <- store idr_Prelude.Strings.trim6_val_794
                      idr_Prelude.Strings.trim6_val_793 <- do
                        unboxed.CGrString.89 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6_795
                        pure (CGrString unboxed.CGrString.89) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.89)
                      idr_Prelude.Strings.trim6_796 <- store idr_Prelude.Strings.trim6_val_793
                      idr_Prelude.Strings.trim6_val_792 <- do
                        unboxed.CGrInt.48 <- idris_str_head.unboxed idr_Prelude.Strings.trim6_796
                        pure (CGrInt unboxed.CGrInt.48) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.48)
                      idr_Prelude.Strings.trim6_797 <- store idr_Prelude.Strings.trim6_val_792
                      idr_Prelude.Strings.trim7_val_800 <- do
                        unboxed.CGrString.90 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.84.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.84.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.84.arity.1)
                        pure (CGrString unboxed.CGrString.90) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.90)
                      idr_Prelude.Strings.trim7_801 <- store idr_Prelude.Strings.trim7_val_800
                      idr_Prelude.Strings.trim7_val_799 <- do
                        unboxed.CGrString.91 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_801
                        pure (CGrString unboxed.CGrString.91) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.91)
                      idr_Prelude.Strings.trim7_802 <- store idr_Prelude.Strings.trim7_val_799
                      idr_Prelude.Strings.trim7_val_798 <- do
                        unboxed.CGrString.92 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_802
                        pure (CGrString unboxed.CGrString.92) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.92)
                      idr_Prelude.Strings.trim7_803 <- store idr_Prelude.Strings.trim7_val_798
                      do
                        (CGrInt idr_Prelude.Strings.trim6_797.41.85.arity.1) <- fetch idr_Prelude.Strings.trim6_797
                        idris_str_cons idr_Prelude.Strings.trim6_797.41.85.arity.1 idr_Prelude.Strings.trim7_803 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim6_797.41.85.arity.1)
                    (Cidr_Prelude.Bool.True) ->
                      idr_Prelude.Strings.trim6_val_804 <- pure (CErased)
                      idr_Prelude.Strings.trim6_805 <- store idr_Prelude.Strings.trim6_val_804
                      idr_Prelude.Strings.trim7_val_812 <- do
                        unboxed.CGrString.93 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.86.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.86.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.86.arity.1)
                        pure (CGrString unboxed.CGrString.93) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.93)
                      idr_Prelude.Strings.trim7_813 <- store idr_Prelude.Strings.trim7_val_812
                      idr_Prelude.Strings.trim7_val_811 <- do
                        unboxed.CGrString.94 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_813
                        pure (CGrString unboxed.CGrString.94) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.94)
                      idr_Prelude.Strings.trim7_814 <- store idr_Prelude.Strings.trim7_val_811
                      idr_Prelude.Strings.trim7_val_810 <- do
                        unboxed.CGrString.95 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_814
                        pure (CGrString unboxed.CGrString.95) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.95)
                      idr_Prelude.Strings.trim7_815 <- store idr_Prelude.Strings.trim7_val_810
                      idr_Prelude.Strings.trim8_val_816 <- pure (CGrString #"")
                      idr_Prelude.Strings.trim8_817 <- store idr_Prelude.Strings.trim8_val_816
                      idr_Prelude.Strings.trim7_val_809 <- do
                        unboxed.CGrInt.49 <- do
                          (CGrString idr_Prelude.Strings.trim8_817.41.87.arity.1) <- fetch idr_Prelude.Strings.trim8_817
                          idris_str_eq.unboxed idr_Prelude.Strings.trim7_815 idr_Prelude.Strings.trim8_817.41.87.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim8_817.41.87.arity.1)
                        pure (CGrInt unboxed.CGrInt.49) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.49)
                      idr_Prelude.Strings.trim7_818 <- store idr_Prelude.Strings.trim7_val_809
                      idr_Prelude.Strings.trim7_val_819 <- fetch idr_Prelude.Strings.trim7_818
                      idr_Prelude.Strings.trim7_val_808 <- case idr_Prelude.Strings.trim7_val_819 of
                        (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_820) ->
                          case idr_Prelude.Strings.trim_cpat_LInt64_0_820 of
                            0 ->
                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      idr_Prelude.Strings.trim7_821 <- store idr_Prelude.Strings.trim7_val_808
                      idr_Prelude.Strings.trim8_val_822 <- pure (Cidr_Prelude.Bool.True)
                      idr_Prelude.Strings.trim8_823 <- store idr_Prelude.Strings.trim8_val_822
                      idr_Prelude.Strings.trim7_val_807 <- do
                        (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim8_823
                        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim7_821 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                      idr_Prelude.Strings.trim7_824 <- store idr_Prelude.Strings.trim7_val_807
                      idr_Prelude.Strings.trim7_val_825 <- fetch idr_Prelude.Strings.trim7_824
                      idr_Prelude.Strings.trim7_val_806 <- case idr_Prelude.Strings.trim7_val_825 of
                        (Cidr_Prelude.Basics.No) ->
                          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                        (Cidr_Prelude.Basics.Yes) ->
                          idr_Prelude.Strings.trim8_val_829 <- do
                            unboxed.CGrString.96 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.89.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.89.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.89.arity.1)
                            pure (CGrString unboxed.CGrString.96) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.96)
                          idr_Prelude.Strings.trim8_830 <- store idr_Prelude.Strings.trim8_val_829
                          idr_Prelude.Strings.trim8_val_828 <- do
                            unboxed.CGrString.97 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_830
                            pure (CGrString unboxed.CGrString.97) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.97)
                          idr_Prelude.Strings.trim8_831 <- store idr_Prelude.Strings.trim8_val_828
                          idr_Prelude.Strings.trim8_val_827 <- do
                            unboxed.CGrString.98 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_831
                            pure (CGrString unboxed.CGrString.98) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.98)
                          idr_Prelude.Strings.trim8_832 <- store idr_Prelude.Strings.trim8_val_827
                          idr_Prelude.Strings.trim8_val_826 <- do
                            unboxed.CGrInt.50 <- idris_str_head.unboxed idr_Prelude.Strings.trim8_832
                            pure (CGrInt unboxed.CGrInt.50) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.50)
                          idr_Prelude.Strings.trim8_833 <- store idr_Prelude.Strings.trim8_val_826
                          idr_Prelude.Strings.trim9_val_837 <- do
                            unboxed.CGrString.99 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.90.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.90.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.90.arity.1)
                            pure (CGrString unboxed.CGrString.99) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.99)
                          idr_Prelude.Strings.trim9_838 <- store idr_Prelude.Strings.trim9_val_837
                          idr_Prelude.Strings.trim9_val_836 <- do
                            unboxed.CGrString.100 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_838
                            pure (CGrString unboxed.CGrString.100) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.100)
                          idr_Prelude.Strings.trim9_839 <- store idr_Prelude.Strings.trim9_val_836
                          idr_Prelude.Strings.trim9_val_835 <- do
                            unboxed.CGrString.101 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_839
                            pure (CGrString unboxed.CGrString.101) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.101)
                          idr_Prelude.Strings.trim9_840 <- store idr_Prelude.Strings.trim9_val_835
                          idr_Prelude.Strings.trim9_val_834 <- do
                            unboxed.CGrString.102 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_840
                            pure (CGrString unboxed.CGrString.102) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.102)
                          idr_Prelude.Strings.trim9_841 <- store idr_Prelude.Strings.trim9_val_834
                          pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim8_833 idr_Prelude.Strings.trim9_841) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim8_833 idr_Prelude.Strings.trim9_841)
                      idr_Prelude.Strings.trim7_842 <- store idr_Prelude.Strings.trim7_val_806
                      do
                        unboxed.CGrString.103 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim7_842
                        pure (CGrString unboxed.CGrString.103) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.103)
      idr_Prelude.Strings.trim2_843 <- store idr_Prelude.Strings.trim2_val_735
      idr_Prelude.Strings.trim2_val_734 <- do
        unboxed.CGrString.104 <- do
          (CGrString idr_Prelude.Strings.trim2_843.41.91.arity.1) <- fetch idr_Prelude.Strings.trim2_843
          idris_str_rev.unboxed idr_Prelude.Strings.trim2_843.41.91.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim2_843.41.91.arity.1)
        pure (CGrString unboxed.CGrString.104) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.104)
      idr_Prelude.Strings.trim2_844 <- store idr_Prelude.Strings.trim2_val_734
      idr_Prelude.Strings.trim2_val_733 <- do
        unboxed.CGrInt.51 <- idris_str_head.unboxed idr_Prelude.Strings.trim2_844
        pure (CGrInt unboxed.CGrInt.51) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.51)
      idr_Prelude.Strings.trim2_845 <- store idr_Prelude.Strings.trim2_val_733
      idr_Prelude.Strings.trim2_val_732 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim2_845
      idr_Prelude.Strings.trim2_846 <- store idr_Prelude.Strings.trim2_val_732
      idr_Prelude.Strings.trim2_val_847 <- fetch idr_Prelude.Strings.trim2_846
      case idr_Prelude.Strings.trim2_val_847 of
        (Cidr_Prelude.Bool.False) ->
          idr_Prelude.Strings.trim3_val_854 <- do
            unboxed.CGrString.105 <- do
              (CGrString idr_Prelude.Strings.trim0.41.92.arity.1) <- fetch idr_Prelude.Strings.trim0
              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.92.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.92.arity.1)
            pure (CGrString unboxed.CGrString.105) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.105)
          idr_Prelude.Strings.trim3_855 <- store idr_Prelude.Strings.trim3_val_854
          idr_Prelude.Strings.trim4_val_856 <- pure (CGrString #"")
          idr_Prelude.Strings.trim4_857 <- store idr_Prelude.Strings.trim4_val_856
          idr_Prelude.Strings.trim3_val_853 <- do
            unboxed.CGrInt.52 <- do
              (CGrString idr_Prelude.Strings.trim4_857.41.93.arity.1) <- fetch idr_Prelude.Strings.trim4_857
              idris_str_eq.unboxed idr_Prelude.Strings.trim3_855 idr_Prelude.Strings.trim4_857.41.93.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim4_857.41.93.arity.1)
            pure (CGrInt unboxed.CGrInt.52) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.52)
          idr_Prelude.Strings.trim3_858 <- store idr_Prelude.Strings.trim3_val_853
          idr_Prelude.Strings.trim3_val_859 <- fetch idr_Prelude.Strings.trim3_858
          idr_Prelude.Strings.trim3_val_852 <- case idr_Prelude.Strings.trim3_val_859 of
            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_860) ->
              case idr_Prelude.Strings.trim_cpat_LInt64_0_860 of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.trim3_861 <- store idr_Prelude.Strings.trim3_val_852
          idr_Prelude.Strings.trim4_val_862 <- pure (Cidr_Prelude.Bool.True)
          idr_Prelude.Strings.trim4_863 <- store idr_Prelude.Strings.trim4_val_862
          idr_Prelude.Strings.trim3_val_851 <- do
            (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim4_863
            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim3_861 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
          idr_Prelude.Strings.trim3_864 <- store idr_Prelude.Strings.trim3_val_851
          idr_Prelude.Strings.trim3_val_865 <- fetch idr_Prelude.Strings.trim3_864
          idr_Prelude.Strings.trim3_val_850 <- case idr_Prelude.Strings.trim3_val_865 of
            (Cidr_Prelude.Basics.No) ->
              pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
            (Cidr_Prelude.Basics.Yes) ->
              idr_Prelude.Strings.trim4_val_868 <- do
                unboxed.CGrString.106 <- do
                  (CGrString idr_Prelude.Strings.trim0.41.95.arity.1) <- fetch idr_Prelude.Strings.trim0
                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.95.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.95.arity.1)
                pure (CGrString unboxed.CGrString.106) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.106)
              idr_Prelude.Strings.trim4_869 <- store idr_Prelude.Strings.trim4_val_868
              idr_Prelude.Strings.trim4_val_867 <- do
                unboxed.CGrInt.53 <- idris_str_head.unboxed idr_Prelude.Strings.trim4_869
                pure (CGrInt unboxed.CGrInt.53) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.53)
              idr_Prelude.Strings.trim4_870 <- store idr_Prelude.Strings.trim4_val_867
              idr_Prelude.Strings.trim4_val_866 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim4_870
              idr_Prelude.Strings.trim4_871 <- store idr_Prelude.Strings.trim4_val_866
              idr_Prelude.Strings.trim4_val_872 <- fetch idr_Prelude.Strings.trim4_871
              case idr_Prelude.Strings.trim4_val_872 of
                (Cidr_Prelude.Bool.False) ->
                  idr_Prelude.Strings.trim5_val_874 <- do
                    unboxed.CGrString.107 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.96.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.96.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.96.arity.1)
                    pure (CGrString unboxed.CGrString.107) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.107)
                  idr_Prelude.Strings.trim5_875 <- store idr_Prelude.Strings.trim5_val_874
                  idr_Prelude.Strings.trim5_val_873 <- do
                    unboxed.CGrInt.54 <- idris_str_head.unboxed idr_Prelude.Strings.trim5_875
                    pure (CGrInt unboxed.CGrInt.54) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.54)
                  idr_Prelude.Strings.trim5_876 <- store idr_Prelude.Strings.trim5_val_873
                  idr_Prelude.Strings.trim6_val_878 <- do
                    unboxed.CGrString.108 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.97.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.97.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.97.arity.1)
                    pure (CGrString unboxed.CGrString.108) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.108)
                  idr_Prelude.Strings.trim6_879 <- store idr_Prelude.Strings.trim6_val_878
                  idr_Prelude.Strings.trim6_val_877 <- do
                    unboxed.CGrString.109 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6_879
                    pure (CGrString unboxed.CGrString.109) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.109)
                  idr_Prelude.Strings.trim6_880 <- store idr_Prelude.Strings.trim6_val_877
                  do
                    (CGrInt idr_Prelude.Strings.trim5_876.41.98.arity.1) <- fetch idr_Prelude.Strings.trim5_876
                    idris_str_cons idr_Prelude.Strings.trim5_876.41.98.arity.1 idr_Prelude.Strings.trim6_880 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim5_876.41.98.arity.1)
                (Cidr_Prelude.Bool.True) ->
                  idr_Prelude.Strings.trim5_val_885 <- do
                    unboxed.CGrString.110 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.99.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.99.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.99.arity.1)
                    pure (CGrString unboxed.CGrString.110) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.110)
                  idr_Prelude.Strings.trim5_886 <- store idr_Prelude.Strings.trim5_val_885
                  idr_Prelude.Strings.trim5_val_884 <- do
                    unboxed.CGrString.111 <- idris_str_tail.unboxed idr_Prelude.Strings.trim5_886
                    pure (CGrString unboxed.CGrString.111) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.111)
                  idr_Prelude.Strings.trim5_887 <- store idr_Prelude.Strings.trim5_val_884
                  idr_Prelude.Strings.trim6_val_888 <- pure (CGrString #"")
                  idr_Prelude.Strings.trim6_889 <- store idr_Prelude.Strings.trim6_val_888
                  idr_Prelude.Strings.trim5_val_883 <- do
                    unboxed.CGrInt.55 <- do
                      (CGrString idr_Prelude.Strings.trim6_889.41.100.arity.1) <- fetch idr_Prelude.Strings.trim6_889
                      idris_str_eq.unboxed idr_Prelude.Strings.trim5_887 idr_Prelude.Strings.trim6_889.41.100.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim6_889.41.100.arity.1)
                    pure (CGrInt unboxed.CGrInt.55) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.55)
                  idr_Prelude.Strings.trim5_890 <- store idr_Prelude.Strings.trim5_val_883
                  idr_Prelude.Strings.trim5_val_891 <- fetch idr_Prelude.Strings.trim5_890
                  idr_Prelude.Strings.trim5_val_882 <- case idr_Prelude.Strings.trim5_val_891 of
                    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_892) ->
                      case idr_Prelude.Strings.trim_cpat_LInt64_0_892 of
                        0 ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  idr_Prelude.Strings.trim5_893 <- store idr_Prelude.Strings.trim5_val_882
                  idr_Prelude.Strings.trim6_val_894 <- pure (Cidr_Prelude.Bool.True)
                  idr_Prelude.Strings.trim6_895 <- store idr_Prelude.Strings.trim6_val_894
                  idr_Prelude.Strings.trim5_val_881 <- do
                    (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim6_895
                    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim5_893 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                  idr_Prelude.Strings.trim5_896 <- store idr_Prelude.Strings.trim5_val_881
                  idr_Prelude.Strings.trim5_val_897 <- fetch idr_Prelude.Strings.trim5_896
                  case idr_Prelude.Strings.trim5_val_897 of
                    (Cidr_Prelude.Basics.No) ->
                      pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
                    (Cidr_Prelude.Basics.Yes) ->
                      idr_Prelude.Strings.trim6_val_901 <- do
                        unboxed.CGrString.112 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.102.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.102.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.102.arity.1)
                        pure (CGrString unboxed.CGrString.112) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.112)
                      idr_Prelude.Strings.trim6_902 <- store idr_Prelude.Strings.trim6_val_901
                      idr_Prelude.Strings.trim6_val_900 <- do
                        unboxed.CGrString.113 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6_902
                        pure (CGrString unboxed.CGrString.113) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.113)
                      idr_Prelude.Strings.trim6_903 <- store idr_Prelude.Strings.trim6_val_900
                      idr_Prelude.Strings.trim6_val_899 <- do
                        unboxed.CGrInt.56 <- idris_str_head.unboxed idr_Prelude.Strings.trim6_903
                        pure (CGrInt unboxed.CGrInt.56) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.56)
                      idr_Prelude.Strings.trim6_904 <- store idr_Prelude.Strings.trim6_val_899
                      idr_Prelude.Strings.trim6_val_898 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim6_904
                      idr_Prelude.Strings.trim6_905 <- store idr_Prelude.Strings.trim6_val_898
                      idr_Prelude.Strings.trim6_val_906 <- fetch idr_Prelude.Strings.trim6_905
                      case idr_Prelude.Strings.trim6_val_906 of
                        (Cidr_Prelude.Bool.False) ->
                          idr_Prelude.Strings.trim7_val_909 <- do
                            unboxed.CGrString.114 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.103.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.103.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.103.arity.1)
                            pure (CGrString unboxed.CGrString.114) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.114)
                          idr_Prelude.Strings.trim7_910 <- store idr_Prelude.Strings.trim7_val_909
                          idr_Prelude.Strings.trim7_val_908 <- do
                            unboxed.CGrString.115 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_910
                            pure (CGrString unboxed.CGrString.115) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.115)
                          idr_Prelude.Strings.trim7_911 <- store idr_Prelude.Strings.trim7_val_908
                          idr_Prelude.Strings.trim7_val_907 <- do
                            unboxed.CGrInt.57 <- idris_str_head.unboxed idr_Prelude.Strings.trim7_911
                            pure (CGrInt unboxed.CGrInt.57) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.57)
                          idr_Prelude.Strings.trim7_912 <- store idr_Prelude.Strings.trim7_val_907
                          idr_Prelude.Strings.trim8_val_915 <- do
                            unboxed.CGrString.116 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.104.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.104.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.104.arity.1)
                            pure (CGrString unboxed.CGrString.116) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.116)
                          idr_Prelude.Strings.trim8_916 <- store idr_Prelude.Strings.trim8_val_915
                          idr_Prelude.Strings.trim8_val_914 <- do
                            unboxed.CGrString.117 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_916
                            pure (CGrString unboxed.CGrString.117) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.117)
                          idr_Prelude.Strings.trim8_917 <- store idr_Prelude.Strings.trim8_val_914
                          idr_Prelude.Strings.trim8_val_913 <- do
                            unboxed.CGrString.118 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_917
                            pure (CGrString unboxed.CGrString.118) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.118)
                          idr_Prelude.Strings.trim8_918 <- store idr_Prelude.Strings.trim8_val_913
                          do
                            (CGrInt idr_Prelude.Strings.trim7_912.41.105.arity.1) <- fetch idr_Prelude.Strings.trim7_912
                            idris_str_cons idr_Prelude.Strings.trim7_912.41.105.arity.1 idr_Prelude.Strings.trim8_918 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim7_912.41.105.arity.1)
                        (Cidr_Prelude.Bool.True) ->
                          idr_Prelude.Strings.trim7_val_919 <- pure (CErased)
                          idr_Prelude.Strings.trim7_920 <- store idr_Prelude.Strings.trim7_val_919
                          idr_Prelude.Strings.trim8_val_927 <- do
                            unboxed.CGrString.119 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.106.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.106.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.106.arity.1)
                            pure (CGrString unboxed.CGrString.119) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.119)
                          idr_Prelude.Strings.trim8_928 <- store idr_Prelude.Strings.trim8_val_927
                          idr_Prelude.Strings.trim8_val_926 <- do
                            unboxed.CGrString.120 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_928
                            pure (CGrString unboxed.CGrString.120) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.120)
                          idr_Prelude.Strings.trim8_929 <- store idr_Prelude.Strings.trim8_val_926
                          idr_Prelude.Strings.trim8_val_925 <- do
                            unboxed.CGrString.121 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_929
                            pure (CGrString unboxed.CGrString.121) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.121)
                          idr_Prelude.Strings.trim8_930 <- store idr_Prelude.Strings.trim8_val_925
                          idr_Prelude.Strings.trim9_val_931 <- pure (CGrString #"")
                          idr_Prelude.Strings.trim9_932 <- store idr_Prelude.Strings.trim9_val_931
                          idr_Prelude.Strings.trim8_val_924 <- do
                            unboxed.CGrInt.58 <- do
                              (CGrString idr_Prelude.Strings.trim9_932.41.107.arity.1) <- fetch idr_Prelude.Strings.trim9_932
                              idris_str_eq.unboxed idr_Prelude.Strings.trim8_930 idr_Prelude.Strings.trim9_932.41.107.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim9_932.41.107.arity.1)
                            pure (CGrInt unboxed.CGrInt.58) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.58)
                          idr_Prelude.Strings.trim8_933 <- store idr_Prelude.Strings.trim8_val_924
                          idr_Prelude.Strings.trim8_val_934 <- fetch idr_Prelude.Strings.trim8_933
                          idr_Prelude.Strings.trim8_val_923 <- case idr_Prelude.Strings.trim8_val_934 of
                            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_935) ->
                              case idr_Prelude.Strings.trim_cpat_LInt64_0_935 of
                                0 ->
                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          idr_Prelude.Strings.trim8_936 <- store idr_Prelude.Strings.trim8_val_923
                          idr_Prelude.Strings.trim9_val_937 <- pure (Cidr_Prelude.Bool.True)
                          idr_Prelude.Strings.trim9_938 <- store idr_Prelude.Strings.trim9_val_937
                          idr_Prelude.Strings.trim8_val_922 <- do
                            (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim9_938
                            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim8_936 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                          idr_Prelude.Strings.trim8_939 <- store idr_Prelude.Strings.trim8_val_922
                          idr_Prelude.Strings.trim8_val_940 <- fetch idr_Prelude.Strings.trim8_939
                          idr_Prelude.Strings.trim8_val_921 <- case idr_Prelude.Strings.trim8_val_940 of
                            (Cidr_Prelude.Basics.No) ->
                              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                            (Cidr_Prelude.Basics.Yes) ->
                              idr_Prelude.Strings.trim9_val_944 <- do
                                unboxed.CGrString.122 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.109.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.109.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.109.arity.1)
                                pure (CGrString unboxed.CGrString.122) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.122)
                              idr_Prelude.Strings.trim9_945 <- store idr_Prelude.Strings.trim9_val_944
                              idr_Prelude.Strings.trim9_val_943 <- do
                                unboxed.CGrString.123 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_945
                                pure (CGrString unboxed.CGrString.123) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.123)
                              idr_Prelude.Strings.trim9_946 <- store idr_Prelude.Strings.trim9_val_943
                              idr_Prelude.Strings.trim9_val_942 <- do
                                unboxed.CGrString.124 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_946
                                pure (CGrString unboxed.CGrString.124) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.124)
                              idr_Prelude.Strings.trim9_947 <- store idr_Prelude.Strings.trim9_val_942
                              idr_Prelude.Strings.trim9_val_941 <- do
                                unboxed.CGrInt.59 <- idris_str_head.unboxed idr_Prelude.Strings.trim9_947
                                pure (CGrInt unboxed.CGrInt.59) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.59)
                              idr_Prelude.Strings.trim9_948 <- store idr_Prelude.Strings.trim9_val_941
                              idr_Prelude.Strings.trim10_val_952 <- do
                                unboxed.CGrString.125 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.110.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.110.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.110.arity.1)
                                pure (CGrString unboxed.CGrString.125) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.125)
                              idr_Prelude.Strings.trim10_953 <- store idr_Prelude.Strings.trim10_val_952
                              idr_Prelude.Strings.trim10_val_951 <- do
                                unboxed.CGrString.126 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_953
                                pure (CGrString unboxed.CGrString.126) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.126)
                              idr_Prelude.Strings.trim10_954 <- store idr_Prelude.Strings.trim10_val_951
                              idr_Prelude.Strings.trim10_val_950 <- do
                                unboxed.CGrString.127 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_954
                                pure (CGrString unboxed.CGrString.127) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.127)
                              idr_Prelude.Strings.trim10_955 <- store idr_Prelude.Strings.trim10_val_950
                              idr_Prelude.Strings.trim10_val_949 <- do
                                unboxed.CGrString.128 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_955
                                pure (CGrString unboxed.CGrString.128) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.128)
                              idr_Prelude.Strings.trim10_956 <- store idr_Prelude.Strings.trim10_val_949
                              pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim9_948 idr_Prelude.Strings.trim10_956) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim9_948 idr_Prelude.Strings.trim10_956)
                          idr_Prelude.Strings.trim8_957 <- store idr_Prelude.Strings.trim8_val_921
                          do
                            unboxed.CGrString.129 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim8_957
                            pure (CGrString unboxed.CGrString.129) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.129)
          idr_Prelude.Strings.trim3_958 <- store idr_Prelude.Strings.trim3_val_850
          idr_Prelude.Strings.trim3_val_849 <- do
            unboxed.CGrString.130 <- do
              (CGrString idr_Prelude.Strings.trim3_958.41.111.arity.1) <- fetch idr_Prelude.Strings.trim3_958
              idris_str_rev.unboxed idr_Prelude.Strings.trim3_958.41.111.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim3_958.41.111.arity.1)
            pure (CGrString unboxed.CGrString.130) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.130)
          idr_Prelude.Strings.trim3_959 <- store idr_Prelude.Strings.trim3_val_849
          idr_Prelude.Strings.trim3_val_848 <- do
            unboxed.CGrInt.60 <- idris_str_head.unboxed idr_Prelude.Strings.trim3_959
            pure (CGrInt unboxed.CGrInt.60) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.60)
          idr_Prelude.Strings.trim3_960 <- store idr_Prelude.Strings.trim3_val_848
          idr_Prelude.Strings.trim4_val_967 <- do
            unboxed.CGrString.131 <- do
              (CGrString idr_Prelude.Strings.trim0.41.112.arity.1) <- fetch idr_Prelude.Strings.trim0
              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.112.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.112.arity.1)
            pure (CGrString unboxed.CGrString.131) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.131)
          idr_Prelude.Strings.trim4_968 <- store idr_Prelude.Strings.trim4_val_967
          idr_Prelude.Strings.trim5_val_969 <- pure (CGrString #"")
          idr_Prelude.Strings.trim5_970 <- store idr_Prelude.Strings.trim5_val_969
          idr_Prelude.Strings.trim4_val_966 <- do
            unboxed.CGrInt.61 <- do
              (CGrString idr_Prelude.Strings.trim5_970.41.113.arity.1) <- fetch idr_Prelude.Strings.trim5_970
              idris_str_eq.unboxed idr_Prelude.Strings.trim4_968 idr_Prelude.Strings.trim5_970.41.113.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim5_970.41.113.arity.1)
            pure (CGrInt unboxed.CGrInt.61) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.61)
          idr_Prelude.Strings.trim4_971 <- store idr_Prelude.Strings.trim4_val_966
          idr_Prelude.Strings.trim4_val_972 <- fetch idr_Prelude.Strings.trim4_971
          idr_Prelude.Strings.trim4_val_965 <- case idr_Prelude.Strings.trim4_val_972 of
            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_973) ->
              case idr_Prelude.Strings.trim_cpat_LInt64_0_973 of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.trim4_974 <- store idr_Prelude.Strings.trim4_val_965
          idr_Prelude.Strings.trim5_val_975 <- pure (Cidr_Prelude.Bool.True)
          idr_Prelude.Strings.trim5_976 <- store idr_Prelude.Strings.trim5_val_975
          idr_Prelude.Strings.trim4_val_964 <- do
            (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim5_976
            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim4_974 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
          idr_Prelude.Strings.trim4_977 <- store idr_Prelude.Strings.trim4_val_964
          idr_Prelude.Strings.trim4_val_978 <- fetch idr_Prelude.Strings.trim4_977
          idr_Prelude.Strings.trim4_val_963 <- case idr_Prelude.Strings.trim4_val_978 of
            (Cidr_Prelude.Basics.No) ->
              pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
            (Cidr_Prelude.Basics.Yes) ->
              idr_Prelude.Strings.trim5_val_981 <- do
                unboxed.CGrString.132 <- do
                  (CGrString idr_Prelude.Strings.trim0.41.115.arity.1) <- fetch idr_Prelude.Strings.trim0
                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.115.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.115.arity.1)
                pure (CGrString unboxed.CGrString.132) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.132)
              idr_Prelude.Strings.trim5_982 <- store idr_Prelude.Strings.trim5_val_981
              idr_Prelude.Strings.trim5_val_980 <- do
                unboxed.CGrInt.62 <- idris_str_head.unboxed idr_Prelude.Strings.trim5_982
                pure (CGrInt unboxed.CGrInt.62) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.62)
              idr_Prelude.Strings.trim5_983 <- store idr_Prelude.Strings.trim5_val_980
              idr_Prelude.Strings.trim5_val_979 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim5_983
              idr_Prelude.Strings.trim5_984 <- store idr_Prelude.Strings.trim5_val_979
              idr_Prelude.Strings.trim5_val_985 <- fetch idr_Prelude.Strings.trim5_984
              case idr_Prelude.Strings.trim5_val_985 of
                (Cidr_Prelude.Bool.False) ->
                  idr_Prelude.Strings.trim6_val_987 <- do
                    unboxed.CGrString.133 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.116.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.116.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.116.arity.1)
                    pure (CGrString unboxed.CGrString.133) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.133)
                  idr_Prelude.Strings.trim6_988 <- store idr_Prelude.Strings.trim6_val_987
                  idr_Prelude.Strings.trim6_val_986 <- do
                    unboxed.CGrInt.63 <- idris_str_head.unboxed idr_Prelude.Strings.trim6_988
                    pure (CGrInt unboxed.CGrInt.63) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.63)
                  idr_Prelude.Strings.trim6_989 <- store idr_Prelude.Strings.trim6_val_986
                  idr_Prelude.Strings.trim7_val_991 <- do
                    unboxed.CGrString.134 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.117.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.117.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.117.arity.1)
                    pure (CGrString unboxed.CGrString.134) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.134)
                  idr_Prelude.Strings.trim7_992 <- store idr_Prelude.Strings.trim7_val_991
                  idr_Prelude.Strings.trim7_val_990 <- do
                    unboxed.CGrString.135 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_992
                    pure (CGrString unboxed.CGrString.135) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.135)
                  idr_Prelude.Strings.trim7_993 <- store idr_Prelude.Strings.trim7_val_990
                  do
                    (CGrInt idr_Prelude.Strings.trim6_989.41.118.arity.1) <- fetch idr_Prelude.Strings.trim6_989
                    idris_str_cons idr_Prelude.Strings.trim6_989.41.118.arity.1 idr_Prelude.Strings.trim7_993 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim6_989.41.118.arity.1)
                (Cidr_Prelude.Bool.True) ->
                  idr_Prelude.Strings.trim6_val_998 <- do
                    unboxed.CGrString.136 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.119.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.119.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.119.arity.1)
                    pure (CGrString unboxed.CGrString.136) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.136)
                  idr_Prelude.Strings.trim6_999 <- store idr_Prelude.Strings.trim6_val_998
                  idr_Prelude.Strings.trim6_val_997 <- do
                    unboxed.CGrString.137 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6_999
                    pure (CGrString unboxed.CGrString.137) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.137)
                  idr_Prelude.Strings.trim6_1000 <- store idr_Prelude.Strings.trim6_val_997
                  idr_Prelude.Strings.trim7_val_1001 <- pure (CGrString #"")
                  idr_Prelude.Strings.trim7_1002 <- store idr_Prelude.Strings.trim7_val_1001
                  idr_Prelude.Strings.trim6_val_996 <- do
                    unboxed.CGrInt.64 <- do
                      (CGrString idr_Prelude.Strings.trim7_1002.41.120.arity.1) <- fetch idr_Prelude.Strings.trim7_1002
                      idris_str_eq.unboxed idr_Prelude.Strings.trim6_1000 idr_Prelude.Strings.trim7_1002.41.120.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim7_1002.41.120.arity.1)
                    pure (CGrInt unboxed.CGrInt.64) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.64)
                  idr_Prelude.Strings.trim6_1003 <- store idr_Prelude.Strings.trim6_val_996
                  idr_Prelude.Strings.trim6_val_1004 <- fetch idr_Prelude.Strings.trim6_1003
                  idr_Prelude.Strings.trim6_val_995 <- case idr_Prelude.Strings.trim6_val_1004 of
                    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1005) ->
                      case idr_Prelude.Strings.trim_cpat_LInt64_0_1005 of
                        0 ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  idr_Prelude.Strings.trim6_1006 <- store idr_Prelude.Strings.trim6_val_995
                  idr_Prelude.Strings.trim7_val_1007 <- pure (Cidr_Prelude.Bool.True)
                  idr_Prelude.Strings.trim7_1008 <- store idr_Prelude.Strings.trim7_val_1007
                  idr_Prelude.Strings.trim6_val_994 <- do
                    (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim7_1008
                    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim6_1006 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                  idr_Prelude.Strings.trim6_1009 <- store idr_Prelude.Strings.trim6_val_994
                  idr_Prelude.Strings.trim6_val_1010 <- fetch idr_Prelude.Strings.trim6_1009
                  case idr_Prelude.Strings.trim6_val_1010 of
                    (Cidr_Prelude.Basics.No) ->
                      pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
                    (Cidr_Prelude.Basics.Yes) ->
                      idr_Prelude.Strings.trim7_val_1014 <- do
                        unboxed.CGrString.138 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.122.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.122.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.122.arity.1)
                        pure (CGrString unboxed.CGrString.138) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.138)
                      idr_Prelude.Strings.trim7_1015 <- store idr_Prelude.Strings.trim7_val_1014
                      idr_Prelude.Strings.trim7_val_1013 <- do
                        unboxed.CGrString.139 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_1015
                        pure (CGrString unboxed.CGrString.139) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.139)
                      idr_Prelude.Strings.trim7_1016 <- store idr_Prelude.Strings.trim7_val_1013
                      idr_Prelude.Strings.trim7_val_1012 <- do
                        unboxed.CGrInt.65 <- idris_str_head.unboxed idr_Prelude.Strings.trim7_1016
                        pure (CGrInt unboxed.CGrInt.65) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.65)
                      idr_Prelude.Strings.trim7_1017 <- store idr_Prelude.Strings.trim7_val_1012
                      idr_Prelude.Strings.trim7_val_1011 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim7_1017
                      idr_Prelude.Strings.trim7_1018 <- store idr_Prelude.Strings.trim7_val_1011
                      idr_Prelude.Strings.trim7_val_1019 <- fetch idr_Prelude.Strings.trim7_1018
                      case idr_Prelude.Strings.trim7_val_1019 of
                        (Cidr_Prelude.Bool.False) ->
                          idr_Prelude.Strings.trim8_val_1022 <- do
                            unboxed.CGrString.140 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.123.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.123.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.123.arity.1)
                            pure (CGrString unboxed.CGrString.140) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.140)
                          idr_Prelude.Strings.trim8_1023 <- store idr_Prelude.Strings.trim8_val_1022
                          idr_Prelude.Strings.trim8_val_1021 <- do
                            unboxed.CGrString.141 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_1023
                            pure (CGrString unboxed.CGrString.141) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.141)
                          idr_Prelude.Strings.trim8_1024 <- store idr_Prelude.Strings.trim8_val_1021
                          idr_Prelude.Strings.trim8_val_1020 <- do
                            unboxed.CGrInt.66 <- idris_str_head.unboxed idr_Prelude.Strings.trim8_1024
                            pure (CGrInt unboxed.CGrInt.66) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.66)
                          idr_Prelude.Strings.trim8_1025 <- store idr_Prelude.Strings.trim8_val_1020
                          idr_Prelude.Strings.trim9_val_1028 <- do
                            unboxed.CGrString.142 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.124.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.124.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.124.arity.1)
                            pure (CGrString unboxed.CGrString.142) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.142)
                          idr_Prelude.Strings.trim9_1029 <- store idr_Prelude.Strings.trim9_val_1028
                          idr_Prelude.Strings.trim9_val_1027 <- do
                            unboxed.CGrString.143 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1029
                            pure (CGrString unboxed.CGrString.143) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.143)
                          idr_Prelude.Strings.trim9_1030 <- store idr_Prelude.Strings.trim9_val_1027
                          idr_Prelude.Strings.trim9_val_1026 <- do
                            unboxed.CGrString.144 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1030
                            pure (CGrString unboxed.CGrString.144) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.144)
                          idr_Prelude.Strings.trim9_1031 <- store idr_Prelude.Strings.trim9_val_1026
                          do
                            (CGrInt idr_Prelude.Strings.trim8_1025.41.125.arity.1) <- fetch idr_Prelude.Strings.trim8_1025
                            idris_str_cons idr_Prelude.Strings.trim8_1025.41.125.arity.1 idr_Prelude.Strings.trim9_1031 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim8_1025.41.125.arity.1)
                        (Cidr_Prelude.Bool.True) ->
                          idr_Prelude.Strings.trim8_val_1032 <- pure (CErased)
                          idr_Prelude.Strings.trim8_1033 <- store idr_Prelude.Strings.trim8_val_1032
                          idr_Prelude.Strings.trim9_val_1040 <- do
                            unboxed.CGrString.145 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.126.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.126.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.126.arity.1)
                            pure (CGrString unboxed.CGrString.145) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.145)
                          idr_Prelude.Strings.trim9_1041 <- store idr_Prelude.Strings.trim9_val_1040
                          idr_Prelude.Strings.trim9_val_1039 <- do
                            unboxed.CGrString.146 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1041
                            pure (CGrString unboxed.CGrString.146) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.146)
                          idr_Prelude.Strings.trim9_1042 <- store idr_Prelude.Strings.trim9_val_1039
                          idr_Prelude.Strings.trim9_val_1038 <- do
                            unboxed.CGrString.147 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1042
                            pure (CGrString unboxed.CGrString.147) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.147)
                          idr_Prelude.Strings.trim9_1043 <- store idr_Prelude.Strings.trim9_val_1038
                          idr_Prelude.Strings.trim10_val_1044 <- pure (CGrString #"")
                          idr_Prelude.Strings.trim10_1045 <- store idr_Prelude.Strings.trim10_val_1044
                          idr_Prelude.Strings.trim9_val_1037 <- do
                            unboxed.CGrInt.67 <- do
                              (CGrString idr_Prelude.Strings.trim10_1045.41.127.arity.1) <- fetch idr_Prelude.Strings.trim10_1045
                              idris_str_eq.unboxed idr_Prelude.Strings.trim9_1043 idr_Prelude.Strings.trim10_1045.41.127.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim10_1045.41.127.arity.1)
                            pure (CGrInt unboxed.CGrInt.67) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.67)
                          idr_Prelude.Strings.trim9_1046 <- store idr_Prelude.Strings.trim9_val_1037
                          idr_Prelude.Strings.trim9_val_1047 <- fetch idr_Prelude.Strings.trim9_1046
                          idr_Prelude.Strings.trim9_val_1036 <- case idr_Prelude.Strings.trim9_val_1047 of
                            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1048) ->
                              case idr_Prelude.Strings.trim_cpat_LInt64_0_1048 of
                                0 ->
                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          idr_Prelude.Strings.trim9_1049 <- store idr_Prelude.Strings.trim9_val_1036
                          idr_Prelude.Strings.trim10_val_1050 <- pure (Cidr_Prelude.Bool.True)
                          idr_Prelude.Strings.trim10_1051 <- store idr_Prelude.Strings.trim10_val_1050
                          idr_Prelude.Strings.trim9_val_1035 <- do
                            (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim10_1051
                            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim9_1049 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                          idr_Prelude.Strings.trim9_1052 <- store idr_Prelude.Strings.trim9_val_1035
                          idr_Prelude.Strings.trim9_val_1053 <- fetch idr_Prelude.Strings.trim9_1052
                          idr_Prelude.Strings.trim9_val_1034 <- case idr_Prelude.Strings.trim9_val_1053 of
                            (Cidr_Prelude.Basics.No) ->
                              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                            (Cidr_Prelude.Basics.Yes) ->
                              idr_Prelude.Strings.trim10_val_1057 <- do
                                unboxed.CGrString.148 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.129.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.129.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.129.arity.1)
                                pure (CGrString unboxed.CGrString.148) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.148)
                              idr_Prelude.Strings.trim10_1058 <- store idr_Prelude.Strings.trim10_val_1057
                              idr_Prelude.Strings.trim10_val_1056 <- do
                                unboxed.CGrString.149 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_1058
                                pure (CGrString unboxed.CGrString.149) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.149)
                              idr_Prelude.Strings.trim10_1059 <- store idr_Prelude.Strings.trim10_val_1056
                              idr_Prelude.Strings.trim10_val_1055 <- do
                                unboxed.CGrString.150 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_1059
                                pure (CGrString unboxed.CGrString.150) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.150)
                              idr_Prelude.Strings.trim10_1060 <- store idr_Prelude.Strings.trim10_val_1055
                              idr_Prelude.Strings.trim10_val_1054 <- do
                                unboxed.CGrInt.68 <- idris_str_head.unboxed idr_Prelude.Strings.trim10_1060
                                pure (CGrInt unboxed.CGrInt.68) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.68)
                              idr_Prelude.Strings.trim10_1061 <- store idr_Prelude.Strings.trim10_val_1054
                              idr_Prelude.Strings.trim11_val_1065 <- do
                                unboxed.CGrString.151 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.130.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.130.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.130.arity.1)
                                pure (CGrString unboxed.CGrString.151) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.151)
                              idr_Prelude.Strings.trim11_1066 <- store idr_Prelude.Strings.trim11_val_1065
                              idr_Prelude.Strings.trim11_val_1064 <- do
                                unboxed.CGrString.152 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1066
                                pure (CGrString unboxed.CGrString.152) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.152)
                              idr_Prelude.Strings.trim11_1067 <- store idr_Prelude.Strings.trim11_val_1064
                              idr_Prelude.Strings.trim11_val_1063 <- do
                                unboxed.CGrString.153 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1067
                                pure (CGrString unboxed.CGrString.153) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.153)
                              idr_Prelude.Strings.trim11_1068 <- store idr_Prelude.Strings.trim11_val_1063
                              idr_Prelude.Strings.trim11_val_1062 <- do
                                unboxed.CGrString.154 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1068
                                pure (CGrString unboxed.CGrString.154) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.154)
                              idr_Prelude.Strings.trim11_1069 <- store idr_Prelude.Strings.trim11_val_1062
                              pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim10_1061 idr_Prelude.Strings.trim11_1069) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim10_1061 idr_Prelude.Strings.trim11_1069)
                          idr_Prelude.Strings.trim9_1070 <- store idr_Prelude.Strings.trim9_val_1034
                          do
                            unboxed.CGrString.155 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim9_1070
                            pure (CGrString unboxed.CGrString.155) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.155)
          idr_Prelude.Strings.trim4_1071 <- store idr_Prelude.Strings.trim4_val_963
          idr_Prelude.Strings.trim4_val_962 <- do
            unboxed.CGrString.156 <- do
              (CGrString idr_Prelude.Strings.trim4_1071.41.131.arity.1) <- fetch idr_Prelude.Strings.trim4_1071
              idris_str_rev.unboxed idr_Prelude.Strings.trim4_1071.41.131.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim4_1071.41.131.arity.1)
            pure (CGrString unboxed.CGrString.156) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.156)
          idr_Prelude.Strings.trim4_1072 <- store idr_Prelude.Strings.trim4_val_962
          idr_Prelude.Strings.trim4_val_961 <- do
            unboxed.CGrString.157 <- idris_str_tail.unboxed idr_Prelude.Strings.trim4_1072
            pure (CGrString unboxed.CGrString.157) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.157)
          idr_Prelude.Strings.trim4_1073 <- store idr_Prelude.Strings.trim4_val_961
          do
            (CGrString unboxed.CGrString.0) <- do
              (CGrInt idr_Prelude.Strings.trim3_960.41.132.arity.1) <- fetch idr_Prelude.Strings.trim3_960
              idris_str_cons idr_Prelude.Strings.trim3_960.41.132.arity.1 idr_Prelude.Strings.trim4_1073 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim3_960.41.132.arity.1)
            pure unboxed.CGrString.0
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Strings.trim3_val_1074 <- pure (CErased)
          idr_Prelude.Strings.trim3_1075 <- store idr_Prelude.Strings.trim3_val_1074
          idr_Prelude.Strings.trim4_val_1086 <- do
            unboxed.CGrString.158 <- do
              (CGrString idr_Prelude.Strings.trim0.41.133.arity.1) <- fetch idr_Prelude.Strings.trim0
              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.133.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.133.arity.1)
            pure (CGrString unboxed.CGrString.158) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.158)
          idr_Prelude.Strings.trim4_1087 <- store idr_Prelude.Strings.trim4_val_1086
          idr_Prelude.Strings.trim5_val_1088 <- pure (CGrString #"")
          idr_Prelude.Strings.trim5_1089 <- store idr_Prelude.Strings.trim5_val_1088
          idr_Prelude.Strings.trim4_val_1085 <- do
            unboxed.CGrInt.69 <- do
              (CGrString idr_Prelude.Strings.trim5_1089.41.134.arity.1) <- fetch idr_Prelude.Strings.trim5_1089
              idris_str_eq.unboxed idr_Prelude.Strings.trim4_1087 idr_Prelude.Strings.trim5_1089.41.134.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim5_1089.41.134.arity.1)
            pure (CGrInt unboxed.CGrInt.69) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.69)
          idr_Prelude.Strings.trim4_1090 <- store idr_Prelude.Strings.trim4_val_1085
          idr_Prelude.Strings.trim4_val_1091 <- fetch idr_Prelude.Strings.trim4_1090
          idr_Prelude.Strings.trim4_val_1084 <- case idr_Prelude.Strings.trim4_val_1091 of
            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1092) ->
              case idr_Prelude.Strings.trim_cpat_LInt64_0_1092 of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.trim4_1093 <- store idr_Prelude.Strings.trim4_val_1084
          idr_Prelude.Strings.trim5_val_1094 <- pure (Cidr_Prelude.Bool.True)
          idr_Prelude.Strings.trim5_1095 <- store idr_Prelude.Strings.trim5_val_1094
          idr_Prelude.Strings.trim4_val_1083 <- do
            (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim5_1095
            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim4_1093 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
          idr_Prelude.Strings.trim4_1096 <- store idr_Prelude.Strings.trim4_val_1083
          idr_Prelude.Strings.trim4_val_1097 <- fetch idr_Prelude.Strings.trim4_1096
          idr_Prelude.Strings.trim4_val_1082 <- case idr_Prelude.Strings.trim4_val_1097 of
            (Cidr_Prelude.Basics.No) ->
              pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
            (Cidr_Prelude.Basics.Yes) ->
              idr_Prelude.Strings.trim5_val_1100 <- do
                unboxed.CGrString.159 <- do
                  (CGrString idr_Prelude.Strings.trim0.41.136.arity.1) <- fetch idr_Prelude.Strings.trim0
                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.136.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.136.arity.1)
                pure (CGrString unboxed.CGrString.159) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.159)
              idr_Prelude.Strings.trim5_1101 <- store idr_Prelude.Strings.trim5_val_1100
              idr_Prelude.Strings.trim5_val_1099 <- do
                unboxed.CGrInt.70 <- idris_str_head.unboxed idr_Prelude.Strings.trim5_1101
                pure (CGrInt unboxed.CGrInt.70) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.70)
              idr_Prelude.Strings.trim5_1102 <- store idr_Prelude.Strings.trim5_val_1099
              idr_Prelude.Strings.trim5_val_1098 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim5_1102
              idr_Prelude.Strings.trim5_1103 <- store idr_Prelude.Strings.trim5_val_1098
              idr_Prelude.Strings.trim5_val_1104 <- fetch idr_Prelude.Strings.trim5_1103
              case idr_Prelude.Strings.trim5_val_1104 of
                (Cidr_Prelude.Bool.False) ->
                  idr_Prelude.Strings.trim6_val_1106 <- do
                    unboxed.CGrString.160 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.137.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.137.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.137.arity.1)
                    pure (CGrString unboxed.CGrString.160) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.160)
                  idr_Prelude.Strings.trim6_1107 <- store idr_Prelude.Strings.trim6_val_1106
                  idr_Prelude.Strings.trim6_val_1105 <- do
                    unboxed.CGrInt.71 <- idris_str_head.unboxed idr_Prelude.Strings.trim6_1107
                    pure (CGrInt unboxed.CGrInt.71) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.71)
                  idr_Prelude.Strings.trim6_1108 <- store idr_Prelude.Strings.trim6_val_1105
                  idr_Prelude.Strings.trim7_val_1110 <- do
                    unboxed.CGrString.161 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.138.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.138.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.138.arity.1)
                    pure (CGrString unboxed.CGrString.161) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.161)
                  idr_Prelude.Strings.trim7_1111 <- store idr_Prelude.Strings.trim7_val_1110
                  idr_Prelude.Strings.trim7_val_1109 <- do
                    unboxed.CGrString.162 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_1111
                    pure (CGrString unboxed.CGrString.162) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.162)
                  idr_Prelude.Strings.trim7_1112 <- store idr_Prelude.Strings.trim7_val_1109
                  do
                    (CGrInt idr_Prelude.Strings.trim6_1108.41.139.arity.1) <- fetch idr_Prelude.Strings.trim6_1108
                    idris_str_cons idr_Prelude.Strings.trim6_1108.41.139.arity.1 idr_Prelude.Strings.trim7_1112 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim6_1108.41.139.arity.1)
                (Cidr_Prelude.Bool.True) ->
                  idr_Prelude.Strings.trim6_val_1117 <- do
                    unboxed.CGrString.163 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.140.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.140.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.140.arity.1)
                    pure (CGrString unboxed.CGrString.163) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.163)
                  idr_Prelude.Strings.trim6_1118 <- store idr_Prelude.Strings.trim6_val_1117
                  idr_Prelude.Strings.trim6_val_1116 <- do
                    unboxed.CGrString.164 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6_1118
                    pure (CGrString unboxed.CGrString.164) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.164)
                  idr_Prelude.Strings.trim6_1119 <- store idr_Prelude.Strings.trim6_val_1116
                  idr_Prelude.Strings.trim7_val_1120 <- pure (CGrString #"")
                  idr_Prelude.Strings.trim7_1121 <- store idr_Prelude.Strings.trim7_val_1120
                  idr_Prelude.Strings.trim6_val_1115 <- do
                    unboxed.CGrInt.72 <- do
                      (CGrString idr_Prelude.Strings.trim7_1121.41.141.arity.1) <- fetch idr_Prelude.Strings.trim7_1121
                      idris_str_eq.unboxed idr_Prelude.Strings.trim6_1119 idr_Prelude.Strings.trim7_1121.41.141.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim7_1121.41.141.arity.1)
                    pure (CGrInt unboxed.CGrInt.72) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.72)
                  idr_Prelude.Strings.trim6_1122 <- store idr_Prelude.Strings.trim6_val_1115
                  idr_Prelude.Strings.trim6_val_1123 <- fetch idr_Prelude.Strings.trim6_1122
                  idr_Prelude.Strings.trim6_val_1114 <- case idr_Prelude.Strings.trim6_val_1123 of
                    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1124) ->
                      case idr_Prelude.Strings.trim_cpat_LInt64_0_1124 of
                        0 ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  idr_Prelude.Strings.trim6_1125 <- store idr_Prelude.Strings.trim6_val_1114
                  idr_Prelude.Strings.trim7_val_1126 <- pure (Cidr_Prelude.Bool.True)
                  idr_Prelude.Strings.trim7_1127 <- store idr_Prelude.Strings.trim7_val_1126
                  idr_Prelude.Strings.trim6_val_1113 <- do
                    (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim7_1127
                    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim6_1125 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                  idr_Prelude.Strings.trim6_1128 <- store idr_Prelude.Strings.trim6_val_1113
                  idr_Prelude.Strings.trim6_val_1129 <- fetch idr_Prelude.Strings.trim6_1128
                  case idr_Prelude.Strings.trim6_val_1129 of
                    (Cidr_Prelude.Basics.No) ->
                      pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
                    (Cidr_Prelude.Basics.Yes) ->
                      idr_Prelude.Strings.trim7_val_1133 <- do
                        unboxed.CGrString.165 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.143.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.143.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.143.arity.1)
                        pure (CGrString unboxed.CGrString.165) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.165)
                      idr_Prelude.Strings.trim7_1134 <- store idr_Prelude.Strings.trim7_val_1133
                      idr_Prelude.Strings.trim7_val_1132 <- do
                        unboxed.CGrString.166 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_1134
                        pure (CGrString unboxed.CGrString.166) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.166)
                      idr_Prelude.Strings.trim7_1135 <- store idr_Prelude.Strings.trim7_val_1132
                      idr_Prelude.Strings.trim7_val_1131 <- do
                        unboxed.CGrInt.73 <- idris_str_head.unboxed idr_Prelude.Strings.trim7_1135
                        pure (CGrInt unboxed.CGrInt.73) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.73)
                      idr_Prelude.Strings.trim7_1136 <- store idr_Prelude.Strings.trim7_val_1131
                      idr_Prelude.Strings.trim7_val_1130 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim7_1136
                      idr_Prelude.Strings.trim7_1137 <- store idr_Prelude.Strings.trim7_val_1130
                      idr_Prelude.Strings.trim7_val_1138 <- fetch idr_Prelude.Strings.trim7_1137
                      case idr_Prelude.Strings.trim7_val_1138 of
                        (Cidr_Prelude.Bool.False) ->
                          idr_Prelude.Strings.trim8_val_1141 <- do
                            unboxed.CGrString.167 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.144.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.144.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.144.arity.1)
                            pure (CGrString unboxed.CGrString.167) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.167)
                          idr_Prelude.Strings.trim8_1142 <- store idr_Prelude.Strings.trim8_val_1141
                          idr_Prelude.Strings.trim8_val_1140 <- do
                            unboxed.CGrString.168 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_1142
                            pure (CGrString unboxed.CGrString.168) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.168)
                          idr_Prelude.Strings.trim8_1143 <- store idr_Prelude.Strings.trim8_val_1140
                          idr_Prelude.Strings.trim8_val_1139 <- do
                            unboxed.CGrInt.74 <- idris_str_head.unboxed idr_Prelude.Strings.trim8_1143
                            pure (CGrInt unboxed.CGrInt.74) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.74)
                          idr_Prelude.Strings.trim8_1144 <- store idr_Prelude.Strings.trim8_val_1139
                          idr_Prelude.Strings.trim9_val_1147 <- do
                            unboxed.CGrString.169 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.145.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.145.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.145.arity.1)
                            pure (CGrString unboxed.CGrString.169) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.169)
                          idr_Prelude.Strings.trim9_1148 <- store idr_Prelude.Strings.trim9_val_1147
                          idr_Prelude.Strings.trim9_val_1146 <- do
                            unboxed.CGrString.170 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1148
                            pure (CGrString unboxed.CGrString.170) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.170)
                          idr_Prelude.Strings.trim9_1149 <- store idr_Prelude.Strings.trim9_val_1146
                          idr_Prelude.Strings.trim9_val_1145 <- do
                            unboxed.CGrString.171 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1149
                            pure (CGrString unboxed.CGrString.171) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.171)
                          idr_Prelude.Strings.trim9_1150 <- store idr_Prelude.Strings.trim9_val_1145
                          do
                            (CGrInt idr_Prelude.Strings.trim8_1144.41.146.arity.1) <- fetch idr_Prelude.Strings.trim8_1144
                            idris_str_cons idr_Prelude.Strings.trim8_1144.41.146.arity.1 idr_Prelude.Strings.trim9_1150 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim8_1144.41.146.arity.1)
                        (Cidr_Prelude.Bool.True) ->
                          idr_Prelude.Strings.trim8_val_1151 <- pure (CErased)
                          idr_Prelude.Strings.trim8_1152 <- store idr_Prelude.Strings.trim8_val_1151
                          idr_Prelude.Strings.trim9_val_1159 <- do
                            unboxed.CGrString.172 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.147.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.147.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.147.arity.1)
                            pure (CGrString unboxed.CGrString.172) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.172)
                          idr_Prelude.Strings.trim9_1160 <- store idr_Prelude.Strings.trim9_val_1159
                          idr_Prelude.Strings.trim9_val_1158 <- do
                            unboxed.CGrString.173 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1160
                            pure (CGrString unboxed.CGrString.173) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.173)
                          idr_Prelude.Strings.trim9_1161 <- store idr_Prelude.Strings.trim9_val_1158
                          idr_Prelude.Strings.trim9_val_1157 <- do
                            unboxed.CGrString.174 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1161
                            pure (CGrString unboxed.CGrString.174) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.174)
                          idr_Prelude.Strings.trim9_1162 <- store idr_Prelude.Strings.trim9_val_1157
                          idr_Prelude.Strings.trim10_val_1163 <- pure (CGrString #"")
                          idr_Prelude.Strings.trim10_1164 <- store idr_Prelude.Strings.trim10_val_1163
                          idr_Prelude.Strings.trim9_val_1156 <- do
                            unboxed.CGrInt.75 <- do
                              (CGrString idr_Prelude.Strings.trim10_1164.41.148.arity.1) <- fetch idr_Prelude.Strings.trim10_1164
                              idris_str_eq.unboxed idr_Prelude.Strings.trim9_1162 idr_Prelude.Strings.trim10_1164.41.148.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim10_1164.41.148.arity.1)
                            pure (CGrInt unboxed.CGrInt.75) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.75)
                          idr_Prelude.Strings.trim9_1165 <- store idr_Prelude.Strings.trim9_val_1156
                          idr_Prelude.Strings.trim9_val_1166 <- fetch idr_Prelude.Strings.trim9_1165
                          idr_Prelude.Strings.trim9_val_1155 <- case idr_Prelude.Strings.trim9_val_1166 of
                            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1167) ->
                              case idr_Prelude.Strings.trim_cpat_LInt64_0_1167 of
                                0 ->
                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          idr_Prelude.Strings.trim9_1168 <- store idr_Prelude.Strings.trim9_val_1155
                          idr_Prelude.Strings.trim10_val_1169 <- pure (Cidr_Prelude.Bool.True)
                          idr_Prelude.Strings.trim10_1170 <- store idr_Prelude.Strings.trim10_val_1169
                          idr_Prelude.Strings.trim9_val_1154 <- do
                            (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim10_1170
                            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim9_1168 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                          idr_Prelude.Strings.trim9_1171 <- store idr_Prelude.Strings.trim9_val_1154
                          idr_Prelude.Strings.trim9_val_1172 <- fetch idr_Prelude.Strings.trim9_1171
                          idr_Prelude.Strings.trim9_val_1153 <- case idr_Prelude.Strings.trim9_val_1172 of
                            (Cidr_Prelude.Basics.No) ->
                              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                            (Cidr_Prelude.Basics.Yes) ->
                              idr_Prelude.Strings.trim10_val_1176 <- do
                                unboxed.CGrString.175 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.150.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.150.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.150.arity.1)
                                pure (CGrString unboxed.CGrString.175) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.175)
                              idr_Prelude.Strings.trim10_1177 <- store idr_Prelude.Strings.trim10_val_1176
                              idr_Prelude.Strings.trim10_val_1175 <- do
                                unboxed.CGrString.176 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_1177
                                pure (CGrString unboxed.CGrString.176) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.176)
                              idr_Prelude.Strings.trim10_1178 <- store idr_Prelude.Strings.trim10_val_1175
                              idr_Prelude.Strings.trim10_val_1174 <- do
                                unboxed.CGrString.177 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_1178
                                pure (CGrString unboxed.CGrString.177) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.177)
                              idr_Prelude.Strings.trim10_1179 <- store idr_Prelude.Strings.trim10_val_1174
                              idr_Prelude.Strings.trim10_val_1173 <- do
                                unboxed.CGrInt.76 <- idris_str_head.unboxed idr_Prelude.Strings.trim10_1179
                                pure (CGrInt unboxed.CGrInt.76) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.76)
                              idr_Prelude.Strings.trim10_1180 <- store idr_Prelude.Strings.trim10_val_1173
                              idr_Prelude.Strings.trim11_val_1184 <- do
                                unboxed.CGrString.178 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.151.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.151.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.151.arity.1)
                                pure (CGrString unboxed.CGrString.178) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.178)
                              idr_Prelude.Strings.trim11_1185 <- store idr_Prelude.Strings.trim11_val_1184
                              idr_Prelude.Strings.trim11_val_1183 <- do
                                unboxed.CGrString.179 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1185
                                pure (CGrString unboxed.CGrString.179) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.179)
                              idr_Prelude.Strings.trim11_1186 <- store idr_Prelude.Strings.trim11_val_1183
                              idr_Prelude.Strings.trim11_val_1182 <- do
                                unboxed.CGrString.180 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1186
                                pure (CGrString unboxed.CGrString.180) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.180)
                              idr_Prelude.Strings.trim11_1187 <- store idr_Prelude.Strings.trim11_val_1182
                              idr_Prelude.Strings.trim11_val_1181 <- do
                                unboxed.CGrString.181 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1187
                                pure (CGrString unboxed.CGrString.181) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.181)
                              idr_Prelude.Strings.trim11_1188 <- store idr_Prelude.Strings.trim11_val_1181
                              pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim10_1180 idr_Prelude.Strings.trim11_1188) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim10_1180 idr_Prelude.Strings.trim11_1188)
                          idr_Prelude.Strings.trim9_1189 <- store idr_Prelude.Strings.trim9_val_1153
                          do
                            unboxed.CGrString.182 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim9_1189
                            pure (CGrString unboxed.CGrString.182) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.182)
          idr_Prelude.Strings.trim4_1190 <- store idr_Prelude.Strings.trim4_val_1082
          idr_Prelude.Strings.trim4_val_1081 <- do
            unboxed.CGrString.183 <- do
              (CGrString idr_Prelude.Strings.trim4_1190.41.152.arity.1) <- fetch idr_Prelude.Strings.trim4_1190
              idris_str_rev.unboxed idr_Prelude.Strings.trim4_1190.41.152.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim4_1190.41.152.arity.1)
            pure (CGrString unboxed.CGrString.183) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.183)
          idr_Prelude.Strings.trim4_1191 <- store idr_Prelude.Strings.trim4_val_1081
          idr_Prelude.Strings.trim4_val_1080 <- do
            unboxed.CGrString.184 <- idris_str_tail.unboxed idr_Prelude.Strings.trim4_1191
            pure (CGrString unboxed.CGrString.184) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.184)
          idr_Prelude.Strings.trim4_1192 <- store idr_Prelude.Strings.trim4_val_1080
          idr_Prelude.Strings.trim5_val_1193 <- pure (CGrString #"")
          idr_Prelude.Strings.trim5_1194 <- store idr_Prelude.Strings.trim5_val_1193
          idr_Prelude.Strings.trim4_val_1079 <- do
            unboxed.CGrInt.77 <- do
              (CGrString idr_Prelude.Strings.trim5_1194.41.153.arity.1) <- fetch idr_Prelude.Strings.trim5_1194
              idris_str_eq.unboxed idr_Prelude.Strings.trim4_1192 idr_Prelude.Strings.trim5_1194.41.153.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim5_1194.41.153.arity.1)
            pure (CGrInt unboxed.CGrInt.77) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.77)
          idr_Prelude.Strings.trim4_1195 <- store idr_Prelude.Strings.trim4_val_1079
          idr_Prelude.Strings.trim4_val_1196 <- fetch idr_Prelude.Strings.trim4_1195
          idr_Prelude.Strings.trim4_val_1078 <- case idr_Prelude.Strings.trim4_val_1196 of
            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1197) ->
              case idr_Prelude.Strings.trim_cpat_LInt64_0_1197 of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.trim4_1198 <- store idr_Prelude.Strings.trim4_val_1078
          idr_Prelude.Strings.trim5_val_1199 <- pure (Cidr_Prelude.Bool.True)
          idr_Prelude.Strings.trim5_1200 <- store idr_Prelude.Strings.trim5_val_1199
          idr_Prelude.Strings.trim4_val_1077 <- do
            (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim5_1200
            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim4_1198 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
          idr_Prelude.Strings.trim4_1201 <- store idr_Prelude.Strings.trim4_val_1077
          idr_Prelude.Strings.trim4_val_1202 <- fetch idr_Prelude.Strings.trim4_1201
          idr_Prelude.Strings.trim4_val_1076 <- case idr_Prelude.Strings.trim4_val_1202 of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
            (Cidr_Prelude.Basics.Yes) ->
              idr_Prelude.Strings.trim5_val_1210 <- do
                unboxed.CGrString.185 <- do
                  (CGrString idr_Prelude.Strings.trim0.41.155.arity.1) <- fetch idr_Prelude.Strings.trim0
                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.155.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.155.arity.1)
                pure (CGrString unboxed.CGrString.185) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.185)
              idr_Prelude.Strings.trim5_1211 <- store idr_Prelude.Strings.trim5_val_1210
              idr_Prelude.Strings.trim6_val_1212 <- pure (CGrString #"")
              idr_Prelude.Strings.trim6_1213 <- store idr_Prelude.Strings.trim6_val_1212
              idr_Prelude.Strings.trim5_val_1209 <- do
                unboxed.CGrInt.78 <- do
                  (CGrString idr_Prelude.Strings.trim6_1213.41.156.arity.1) <- fetch idr_Prelude.Strings.trim6_1213
                  idris_str_eq.unboxed idr_Prelude.Strings.trim5_1211 idr_Prelude.Strings.trim6_1213.41.156.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim6_1213.41.156.arity.1)
                pure (CGrInt unboxed.CGrInt.78) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.78)
              idr_Prelude.Strings.trim5_1214 <- store idr_Prelude.Strings.trim5_val_1209
              idr_Prelude.Strings.trim5_val_1215 <- fetch idr_Prelude.Strings.trim5_1214
              idr_Prelude.Strings.trim5_val_1208 <- case idr_Prelude.Strings.trim5_val_1215 of
                (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1216) ->
                  case idr_Prelude.Strings.trim_cpat_LInt64_0_1216 of
                    0 ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              idr_Prelude.Strings.trim5_1217 <- store idr_Prelude.Strings.trim5_val_1208
              idr_Prelude.Strings.trim6_val_1218 <- pure (Cidr_Prelude.Bool.True)
              idr_Prelude.Strings.trim6_1219 <- store idr_Prelude.Strings.trim6_val_1218
              idr_Prelude.Strings.trim5_val_1207 <- do
                (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim6_1219
                "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim5_1217 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
              idr_Prelude.Strings.trim5_1220 <- store idr_Prelude.Strings.trim5_val_1207
              idr_Prelude.Strings.trim5_val_1221 <- fetch idr_Prelude.Strings.trim5_1220
              idr_Prelude.Strings.trim5_val_1206 <- case idr_Prelude.Strings.trim5_val_1221 of
                (Cidr_Prelude.Basics.No) ->
                  pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
                (Cidr_Prelude.Basics.Yes) ->
                  idr_Prelude.Strings.trim6_val_1224 <- do
                    unboxed.CGrString.186 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.158.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.158.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.158.arity.1)
                    pure (CGrString unboxed.CGrString.186) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.186)
                  idr_Prelude.Strings.trim6_1225 <- store idr_Prelude.Strings.trim6_val_1224
                  idr_Prelude.Strings.trim6_val_1223 <- do
                    unboxed.CGrInt.79 <- idris_str_head.unboxed idr_Prelude.Strings.trim6_1225
                    pure (CGrInt unboxed.CGrInt.79) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.79)
                  idr_Prelude.Strings.trim6_1226 <- store idr_Prelude.Strings.trim6_val_1223
                  idr_Prelude.Strings.trim6_val_1222 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim6_1226
                  idr_Prelude.Strings.trim6_1227 <- store idr_Prelude.Strings.trim6_val_1222
                  idr_Prelude.Strings.trim6_val_1228 <- fetch idr_Prelude.Strings.trim6_1227
                  case idr_Prelude.Strings.trim6_val_1228 of
                    (Cidr_Prelude.Bool.False) ->
                      idr_Prelude.Strings.trim7_val_1230 <- do
                        unboxed.CGrString.187 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.159.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.159.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.159.arity.1)
                        pure (CGrString unboxed.CGrString.187) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.187)
                      idr_Prelude.Strings.trim7_1231 <- store idr_Prelude.Strings.trim7_val_1230
                      idr_Prelude.Strings.trim7_val_1229 <- do
                        unboxed.CGrInt.80 <- idris_str_head.unboxed idr_Prelude.Strings.trim7_1231
                        pure (CGrInt unboxed.CGrInt.80) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.80)
                      idr_Prelude.Strings.trim7_1232 <- store idr_Prelude.Strings.trim7_val_1229
                      idr_Prelude.Strings.trim8_val_1234 <- do
                        unboxed.CGrString.188 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.160.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.160.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.160.arity.1)
                        pure (CGrString unboxed.CGrString.188) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.188)
                      idr_Prelude.Strings.trim8_1235 <- store idr_Prelude.Strings.trim8_val_1234
                      idr_Prelude.Strings.trim8_val_1233 <- do
                        unboxed.CGrString.189 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_1235
                        pure (CGrString unboxed.CGrString.189) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.189)
                      idr_Prelude.Strings.trim8_1236 <- store idr_Prelude.Strings.trim8_val_1233
                      do
                        (CGrInt idr_Prelude.Strings.trim7_1232.41.161.arity.1) <- fetch idr_Prelude.Strings.trim7_1232
                        idris_str_cons idr_Prelude.Strings.trim7_1232.41.161.arity.1 idr_Prelude.Strings.trim8_1236 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim7_1232.41.161.arity.1)
                    (Cidr_Prelude.Bool.True) ->
                      idr_Prelude.Strings.trim7_val_1241 <- do
                        unboxed.CGrString.190 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.162.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.162.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.162.arity.1)
                        pure (CGrString unboxed.CGrString.190) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.190)
                      idr_Prelude.Strings.trim7_1242 <- store idr_Prelude.Strings.trim7_val_1241
                      idr_Prelude.Strings.trim7_val_1240 <- do
                        unboxed.CGrString.191 <- idris_str_tail.unboxed idr_Prelude.Strings.trim7_1242
                        pure (CGrString unboxed.CGrString.191) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.191)
                      idr_Prelude.Strings.trim7_1243 <- store idr_Prelude.Strings.trim7_val_1240
                      idr_Prelude.Strings.trim8_val_1244 <- pure (CGrString #"")
                      idr_Prelude.Strings.trim8_1245 <- store idr_Prelude.Strings.trim8_val_1244
                      idr_Prelude.Strings.trim7_val_1239 <- do
                        unboxed.CGrInt.81 <- do
                          (CGrString idr_Prelude.Strings.trim8_1245.41.163.arity.1) <- fetch idr_Prelude.Strings.trim8_1245
                          idris_str_eq.unboxed idr_Prelude.Strings.trim7_1243 idr_Prelude.Strings.trim8_1245.41.163.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim8_1245.41.163.arity.1)
                        pure (CGrInt unboxed.CGrInt.81) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.81)
                      idr_Prelude.Strings.trim7_1246 <- store idr_Prelude.Strings.trim7_val_1239
                      idr_Prelude.Strings.trim7_val_1247 <- fetch idr_Prelude.Strings.trim7_1246
                      idr_Prelude.Strings.trim7_val_1238 <- case idr_Prelude.Strings.trim7_val_1247 of
                        (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1248) ->
                          case idr_Prelude.Strings.trim_cpat_LInt64_0_1248 of
                            0 ->
                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      idr_Prelude.Strings.trim7_1249 <- store idr_Prelude.Strings.trim7_val_1238
                      idr_Prelude.Strings.trim8_val_1250 <- pure (Cidr_Prelude.Bool.True)
                      idr_Prelude.Strings.trim8_1251 <- store idr_Prelude.Strings.trim8_val_1250
                      idr_Prelude.Strings.trim7_val_1237 <- do
                        (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim8_1251
                        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim7_1249 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                      idr_Prelude.Strings.trim7_1252 <- store idr_Prelude.Strings.trim7_val_1237
                      idr_Prelude.Strings.trim7_val_1253 <- fetch idr_Prelude.Strings.trim7_1252
                      case idr_Prelude.Strings.trim7_val_1253 of
                        (Cidr_Prelude.Basics.No) ->
                          pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
                        (Cidr_Prelude.Basics.Yes) ->
                          idr_Prelude.Strings.trim8_val_1257 <- do
                            unboxed.CGrString.192 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.165.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.165.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.165.arity.1)
                            pure (CGrString unboxed.CGrString.192) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.192)
                          idr_Prelude.Strings.trim8_1258 <- store idr_Prelude.Strings.trim8_val_1257
                          idr_Prelude.Strings.trim8_val_1256 <- do
                            unboxed.CGrString.193 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_1258
                            pure (CGrString unboxed.CGrString.193) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.193)
                          idr_Prelude.Strings.trim8_1259 <- store idr_Prelude.Strings.trim8_val_1256
                          idr_Prelude.Strings.trim8_val_1255 <- do
                            unboxed.CGrInt.82 <- idris_str_head.unboxed idr_Prelude.Strings.trim8_1259
                            pure (CGrInt unboxed.CGrInt.82) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.82)
                          idr_Prelude.Strings.trim8_1260 <- store idr_Prelude.Strings.trim8_val_1255
                          idr_Prelude.Strings.trim8_val_1254 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim8_1260
                          idr_Prelude.Strings.trim8_1261 <- store idr_Prelude.Strings.trim8_val_1254
                          idr_Prelude.Strings.trim8_val_1262 <- fetch idr_Prelude.Strings.trim8_1261
                          case idr_Prelude.Strings.trim8_val_1262 of
                            (Cidr_Prelude.Bool.False) ->
                              idr_Prelude.Strings.trim9_val_1265 <- do
                                unboxed.CGrString.194 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.166.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.166.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.166.arity.1)
                                pure (CGrString unboxed.CGrString.194) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.194)
                              idr_Prelude.Strings.trim9_1266 <- store idr_Prelude.Strings.trim9_val_1265
                              idr_Prelude.Strings.trim9_val_1264 <- do
                                unboxed.CGrString.195 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1266
                                pure (CGrString unboxed.CGrString.195) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.195)
                              idr_Prelude.Strings.trim9_1267 <- store idr_Prelude.Strings.trim9_val_1264
                              idr_Prelude.Strings.trim9_val_1263 <- do
                                unboxed.CGrInt.83 <- idris_str_head.unboxed idr_Prelude.Strings.trim9_1267
                                pure (CGrInt unboxed.CGrInt.83) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.83)
                              idr_Prelude.Strings.trim9_1268 <- store idr_Prelude.Strings.trim9_val_1263
                              idr_Prelude.Strings.trim10_val_1271 <- do
                                unboxed.CGrString.196 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.167.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.167.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.167.arity.1)
                                pure (CGrString unboxed.CGrString.196) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.196)
                              idr_Prelude.Strings.trim10_1272 <- store idr_Prelude.Strings.trim10_val_1271
                              idr_Prelude.Strings.trim10_val_1270 <- do
                                unboxed.CGrString.197 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_1272
                                pure (CGrString unboxed.CGrString.197) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.197)
                              idr_Prelude.Strings.trim10_1273 <- store idr_Prelude.Strings.trim10_val_1270
                              idr_Prelude.Strings.trim10_val_1269 <- do
                                unboxed.CGrString.198 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_1273
                                pure (CGrString unboxed.CGrString.198) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.198)
                              idr_Prelude.Strings.trim10_1274 <- store idr_Prelude.Strings.trim10_val_1269
                              do
                                (CGrInt idr_Prelude.Strings.trim9_1268.41.168.arity.1) <- fetch idr_Prelude.Strings.trim9_1268
                                idris_str_cons idr_Prelude.Strings.trim9_1268.41.168.arity.1 idr_Prelude.Strings.trim10_1274 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim9_1268.41.168.arity.1)
                            (Cidr_Prelude.Bool.True) ->
                              idr_Prelude.Strings.trim9_val_1275 <- pure (CErased)
                              idr_Prelude.Strings.trim9_1276 <- store idr_Prelude.Strings.trim9_val_1275
                              idr_Prelude.Strings.trim10_val_1283 <- do
                                unboxed.CGrString.199 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.169.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.169.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.169.arity.1)
                                pure (CGrString unboxed.CGrString.199) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.199)
                              idr_Prelude.Strings.trim10_1284 <- store idr_Prelude.Strings.trim10_val_1283
                              idr_Prelude.Strings.trim10_val_1282 <- do
                                unboxed.CGrString.200 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_1284
                                pure (CGrString unboxed.CGrString.200) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.200)
                              idr_Prelude.Strings.trim10_1285 <- store idr_Prelude.Strings.trim10_val_1282
                              idr_Prelude.Strings.trim10_val_1281 <- do
                                unboxed.CGrString.201 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_1285
                                pure (CGrString unboxed.CGrString.201) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.201)
                              idr_Prelude.Strings.trim10_1286 <- store idr_Prelude.Strings.trim10_val_1281
                              idr_Prelude.Strings.trim11_val_1287 <- pure (CGrString #"")
                              idr_Prelude.Strings.trim11_1288 <- store idr_Prelude.Strings.trim11_val_1287
                              idr_Prelude.Strings.trim10_val_1280 <- do
                                unboxed.CGrInt.84 <- do
                                  (CGrString idr_Prelude.Strings.trim11_1288.41.170.arity.1) <- fetch idr_Prelude.Strings.trim11_1288
                                  idris_str_eq.unboxed idr_Prelude.Strings.trim10_1286 idr_Prelude.Strings.trim11_1288.41.170.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim11_1288.41.170.arity.1)
                                pure (CGrInt unboxed.CGrInt.84) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.84)
                              idr_Prelude.Strings.trim10_1289 <- store idr_Prelude.Strings.trim10_val_1280
                              idr_Prelude.Strings.trim10_val_1290 <- fetch idr_Prelude.Strings.trim10_1289
                              idr_Prelude.Strings.trim10_val_1279 <- case idr_Prelude.Strings.trim10_val_1290 of
                                (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1291) ->
                                  case idr_Prelude.Strings.trim_cpat_LInt64_0_1291 of
                                    0 ->
                                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                    #default ->
                                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                              idr_Prelude.Strings.trim10_1292 <- store idr_Prelude.Strings.trim10_val_1279
                              idr_Prelude.Strings.trim11_val_1293 <- pure (Cidr_Prelude.Bool.True)
                              idr_Prelude.Strings.trim11_1294 <- store idr_Prelude.Strings.trim11_val_1293
                              idr_Prelude.Strings.trim10_val_1278 <- do
                                (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim11_1294
                                "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim10_1292 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                              idr_Prelude.Strings.trim10_1295 <- store idr_Prelude.Strings.trim10_val_1278
                              idr_Prelude.Strings.trim10_val_1296 <- fetch idr_Prelude.Strings.trim10_1295
                              idr_Prelude.Strings.trim10_val_1277 <- case idr_Prelude.Strings.trim10_val_1296 of
                                (Cidr_Prelude.Basics.No) ->
                                  pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                                (Cidr_Prelude.Basics.Yes) ->
                                  idr_Prelude.Strings.trim11_val_1300 <- do
                                    unboxed.CGrString.202 <- do
                                      (CGrString idr_Prelude.Strings.trim0.41.172.arity.1) <- fetch idr_Prelude.Strings.trim0
                                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.172.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.172.arity.1)
                                    pure (CGrString unboxed.CGrString.202) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.202)
                                  idr_Prelude.Strings.trim11_1301 <- store idr_Prelude.Strings.trim11_val_1300
                                  idr_Prelude.Strings.trim11_val_1299 <- do
                                    unboxed.CGrString.203 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1301
                                    pure (CGrString unboxed.CGrString.203) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.203)
                                  idr_Prelude.Strings.trim11_1302 <- store idr_Prelude.Strings.trim11_val_1299
                                  idr_Prelude.Strings.trim11_val_1298 <- do
                                    unboxed.CGrString.204 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1302
                                    pure (CGrString unboxed.CGrString.204) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.204)
                                  idr_Prelude.Strings.trim11_1303 <- store idr_Prelude.Strings.trim11_val_1298
                                  idr_Prelude.Strings.trim11_val_1297 <- do
                                    unboxed.CGrInt.85 <- idris_str_head.unboxed idr_Prelude.Strings.trim11_1303
                                    pure (CGrInt unboxed.CGrInt.85) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.85)
                                  idr_Prelude.Strings.trim11_1304 <- store idr_Prelude.Strings.trim11_val_1297
                                  idr_Prelude.Strings.trim12_val_1308 <- do
                                    unboxed.CGrString.205 <- do
                                      (CGrString idr_Prelude.Strings.trim0.41.173.arity.1) <- fetch idr_Prelude.Strings.trim0
                                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.173.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.173.arity.1)
                                    pure (CGrString unboxed.CGrString.205) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.205)
                                  idr_Prelude.Strings.trim12_1309 <- store idr_Prelude.Strings.trim12_val_1308
                                  idr_Prelude.Strings.trim12_val_1307 <- do
                                    unboxed.CGrString.206 <- idris_str_tail.unboxed idr_Prelude.Strings.trim12_1309
                                    pure (CGrString unboxed.CGrString.206) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.206)
                                  idr_Prelude.Strings.trim12_1310 <- store idr_Prelude.Strings.trim12_val_1307
                                  idr_Prelude.Strings.trim12_val_1306 <- do
                                    unboxed.CGrString.207 <- idris_str_tail.unboxed idr_Prelude.Strings.trim12_1310
                                    pure (CGrString unboxed.CGrString.207) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.207)
                                  idr_Prelude.Strings.trim12_1311 <- store idr_Prelude.Strings.trim12_val_1306
                                  idr_Prelude.Strings.trim12_val_1305 <- do
                                    unboxed.CGrString.208 <- idris_str_tail.unboxed idr_Prelude.Strings.trim12_1311
                                    pure (CGrString unboxed.CGrString.208) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.208)
                                  idr_Prelude.Strings.trim12_1312 <- store idr_Prelude.Strings.trim12_val_1305
                                  pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim11_1304 idr_Prelude.Strings.trim12_1312) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim11_1304 idr_Prelude.Strings.trim12_1312)
                              idr_Prelude.Strings.trim10_1313 <- store idr_Prelude.Strings.trim10_val_1277
                              do
                                unboxed.CGrString.209 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim10_1313
                                pure (CGrString unboxed.CGrString.209) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.209)
              idr_Prelude.Strings.trim5_1314 <- store idr_Prelude.Strings.trim5_val_1206
              idr_Prelude.Strings.trim5_val_1205 <- do
                unboxed.CGrString.210 <- do
                  (CGrString idr_Prelude.Strings.trim5_1314.41.174.arity.1) <- fetch idr_Prelude.Strings.trim5_1314
                  idris_str_rev.unboxed idr_Prelude.Strings.trim5_1314.41.174.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim5_1314.41.174.arity.1)
                pure (CGrString unboxed.CGrString.210) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.210)
              idr_Prelude.Strings.trim5_1315 <- store idr_Prelude.Strings.trim5_val_1205
              idr_Prelude.Strings.trim5_val_1204 <- do
                unboxed.CGrString.211 <- idris_str_tail.unboxed idr_Prelude.Strings.trim5_1315
                pure (CGrString unboxed.CGrString.211) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.211)
              idr_Prelude.Strings.trim5_1316 <- store idr_Prelude.Strings.trim5_val_1204
              idr_Prelude.Strings.trim5_val_1203 <- do
                unboxed.CGrInt.86 <- idris_str_head.unboxed idr_Prelude.Strings.trim5_1316
                pure (CGrInt unboxed.CGrInt.86) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.86)
              idr_Prelude.Strings.trim5_1317 <- store idr_Prelude.Strings.trim5_val_1203
              idr_Prelude.Strings.trim6_val_1325 <- do
                unboxed.CGrString.212 <- do
                  (CGrString idr_Prelude.Strings.trim0.41.175.arity.1) <- fetch idr_Prelude.Strings.trim0
                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.175.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.175.arity.1)
                pure (CGrString unboxed.CGrString.212) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.212)
              idr_Prelude.Strings.trim6_1326 <- store idr_Prelude.Strings.trim6_val_1325
              idr_Prelude.Strings.trim7_val_1327 <- pure (CGrString #"")
              idr_Prelude.Strings.trim7_1328 <- store idr_Prelude.Strings.trim7_val_1327
              idr_Prelude.Strings.trim6_val_1324 <- do
                unboxed.CGrInt.87 <- do
                  (CGrString idr_Prelude.Strings.trim7_1328.41.176.arity.1) <- fetch idr_Prelude.Strings.trim7_1328
                  idris_str_eq.unboxed idr_Prelude.Strings.trim6_1326 idr_Prelude.Strings.trim7_1328.41.176.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim7_1328.41.176.arity.1)
                pure (CGrInt unboxed.CGrInt.87) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.87)
              idr_Prelude.Strings.trim6_1329 <- store idr_Prelude.Strings.trim6_val_1324
              idr_Prelude.Strings.trim6_val_1330 <- fetch idr_Prelude.Strings.trim6_1329
              idr_Prelude.Strings.trim6_val_1323 <- case idr_Prelude.Strings.trim6_val_1330 of
                (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1331) ->
                  case idr_Prelude.Strings.trim_cpat_LInt64_0_1331 of
                    0 ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              idr_Prelude.Strings.trim6_1332 <- store idr_Prelude.Strings.trim6_val_1323
              idr_Prelude.Strings.trim7_val_1333 <- pure (Cidr_Prelude.Bool.True)
              idr_Prelude.Strings.trim7_1334 <- store idr_Prelude.Strings.trim7_val_1333
              idr_Prelude.Strings.trim6_val_1322 <- do
                (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim7_1334
                "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim6_1332 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
              idr_Prelude.Strings.trim6_1335 <- store idr_Prelude.Strings.trim6_val_1322
              idr_Prelude.Strings.trim6_val_1336 <- fetch idr_Prelude.Strings.trim6_1335
              idr_Prelude.Strings.trim6_val_1321 <- case idr_Prelude.Strings.trim6_val_1336 of
                (Cidr_Prelude.Basics.No) ->
                  pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
                (Cidr_Prelude.Basics.Yes) ->
                  idr_Prelude.Strings.trim7_val_1339 <- do
                    unboxed.CGrString.213 <- do
                      (CGrString idr_Prelude.Strings.trim0.41.178.arity.1) <- fetch idr_Prelude.Strings.trim0
                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.178.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.178.arity.1)
                    pure (CGrString unboxed.CGrString.213) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.213)
                  idr_Prelude.Strings.trim7_1340 <- store idr_Prelude.Strings.trim7_val_1339
                  idr_Prelude.Strings.trim7_val_1338 <- do
                    unboxed.CGrInt.88 <- idris_str_head.unboxed idr_Prelude.Strings.trim7_1340
                    pure (CGrInt unboxed.CGrInt.88) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.88)
                  idr_Prelude.Strings.trim7_1341 <- store idr_Prelude.Strings.trim7_val_1338
                  idr_Prelude.Strings.trim7_val_1337 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim7_1341
                  idr_Prelude.Strings.trim7_1342 <- store idr_Prelude.Strings.trim7_val_1337
                  idr_Prelude.Strings.trim7_val_1343 <- fetch idr_Prelude.Strings.trim7_1342
                  case idr_Prelude.Strings.trim7_val_1343 of
                    (Cidr_Prelude.Bool.False) ->
                      idr_Prelude.Strings.trim8_val_1345 <- do
                        unboxed.CGrString.214 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.179.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.179.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.179.arity.1)
                        pure (CGrString unboxed.CGrString.214) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.214)
                      idr_Prelude.Strings.trim8_1346 <- store idr_Prelude.Strings.trim8_val_1345
                      idr_Prelude.Strings.trim8_val_1344 <- do
                        unboxed.CGrInt.89 <- idris_str_head.unboxed idr_Prelude.Strings.trim8_1346
                        pure (CGrInt unboxed.CGrInt.89) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.89)
                      idr_Prelude.Strings.trim8_1347 <- store idr_Prelude.Strings.trim8_val_1344
                      idr_Prelude.Strings.trim9_val_1349 <- do
                        unboxed.CGrString.215 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.180.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.180.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.180.arity.1)
                        pure (CGrString unboxed.CGrString.215) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.215)
                      idr_Prelude.Strings.trim9_1350 <- store idr_Prelude.Strings.trim9_val_1349
                      idr_Prelude.Strings.trim9_val_1348 <- do
                        unboxed.CGrString.216 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1350
                        pure (CGrString unboxed.CGrString.216) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.216)
                      idr_Prelude.Strings.trim9_1351 <- store idr_Prelude.Strings.trim9_val_1348
                      do
                        (CGrInt idr_Prelude.Strings.trim8_1347.41.181.arity.1) <- fetch idr_Prelude.Strings.trim8_1347
                        idris_str_cons idr_Prelude.Strings.trim8_1347.41.181.arity.1 idr_Prelude.Strings.trim9_1351 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim8_1347.41.181.arity.1)
                    (Cidr_Prelude.Bool.True) ->
                      idr_Prelude.Strings.trim8_val_1356 <- do
                        unboxed.CGrString.217 <- do
                          (CGrString idr_Prelude.Strings.trim0.41.182.arity.1) <- fetch idr_Prelude.Strings.trim0
                          idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.182.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.182.arity.1)
                        pure (CGrString unboxed.CGrString.217) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.217)
                      idr_Prelude.Strings.trim8_1357 <- store idr_Prelude.Strings.trim8_val_1356
                      idr_Prelude.Strings.trim8_val_1355 <- do
                        unboxed.CGrString.218 <- idris_str_tail.unboxed idr_Prelude.Strings.trim8_1357
                        pure (CGrString unboxed.CGrString.218) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.218)
                      idr_Prelude.Strings.trim8_1358 <- store idr_Prelude.Strings.trim8_val_1355
                      idr_Prelude.Strings.trim9_val_1359 <- pure (CGrString #"")
                      idr_Prelude.Strings.trim9_1360 <- store idr_Prelude.Strings.trim9_val_1359
                      idr_Prelude.Strings.trim8_val_1354 <- do
                        unboxed.CGrInt.90 <- do
                          (CGrString idr_Prelude.Strings.trim9_1360.41.183.arity.1) <- fetch idr_Prelude.Strings.trim9_1360
                          idris_str_eq.unboxed idr_Prelude.Strings.trim8_1358 idr_Prelude.Strings.trim9_1360.41.183.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim9_1360.41.183.arity.1)
                        pure (CGrInt unboxed.CGrInt.90) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.90)
                      idr_Prelude.Strings.trim8_1361 <- store idr_Prelude.Strings.trim8_val_1354
                      idr_Prelude.Strings.trim8_val_1362 <- fetch idr_Prelude.Strings.trim8_1361
                      idr_Prelude.Strings.trim8_val_1353 <- case idr_Prelude.Strings.trim8_val_1362 of
                        (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1363) ->
                          case idr_Prelude.Strings.trim_cpat_LInt64_0_1363 of
                            0 ->
                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      idr_Prelude.Strings.trim8_1364 <- store idr_Prelude.Strings.trim8_val_1353
                      idr_Prelude.Strings.trim9_val_1365 <- pure (Cidr_Prelude.Bool.True)
                      idr_Prelude.Strings.trim9_1366 <- store idr_Prelude.Strings.trim9_val_1365
                      idr_Prelude.Strings.trim8_val_1352 <- do
                        (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim9_1366
                        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim8_1364 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                      idr_Prelude.Strings.trim8_1367 <- store idr_Prelude.Strings.trim8_val_1352
                      idr_Prelude.Strings.trim8_val_1368 <- fetch idr_Prelude.Strings.trim8_1367
                      case idr_Prelude.Strings.trim8_val_1368 of
                        (Cidr_Prelude.Basics.No) ->
                          pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
                        (Cidr_Prelude.Basics.Yes) ->
                          idr_Prelude.Strings.trim9_val_1372 <- do
                            unboxed.CGrString.219 <- do
                              (CGrString idr_Prelude.Strings.trim0.41.185.arity.1) <- fetch idr_Prelude.Strings.trim0
                              idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.185.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.185.arity.1)
                            pure (CGrString unboxed.CGrString.219) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.219)
                          idr_Prelude.Strings.trim9_1373 <- store idr_Prelude.Strings.trim9_val_1372
                          idr_Prelude.Strings.trim9_val_1371 <- do
                            unboxed.CGrString.220 <- idris_str_tail.unboxed idr_Prelude.Strings.trim9_1373
                            pure (CGrString unboxed.CGrString.220) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.220)
                          idr_Prelude.Strings.trim9_1374 <- store idr_Prelude.Strings.trim9_val_1371
                          idr_Prelude.Strings.trim9_val_1370 <- do
                            unboxed.CGrInt.91 <- idris_str_head.unboxed idr_Prelude.Strings.trim9_1374
                            pure (CGrInt unboxed.CGrInt.91) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.91)
                          idr_Prelude.Strings.trim9_1375 <- store idr_Prelude.Strings.trim9_val_1370
                          idr_Prelude.Strings.trim9_val_1369 <- idr_Prelude.Chars.isSpace idr_Prelude.Strings.trim9_1375
                          idr_Prelude.Strings.trim9_1376 <- store idr_Prelude.Strings.trim9_val_1369
                          idr_Prelude.Strings.trim9_val_1377 <- fetch idr_Prelude.Strings.trim9_1376
                          case idr_Prelude.Strings.trim9_val_1377 of
                            (Cidr_Prelude.Bool.False) ->
                              idr_Prelude.Strings.trim10_val_1380 <- do
                                unboxed.CGrString.221 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.186.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.186.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.186.arity.1)
                                pure (CGrString unboxed.CGrString.221) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.221)
                              idr_Prelude.Strings.trim10_1381 <- store idr_Prelude.Strings.trim10_val_1380
                              idr_Prelude.Strings.trim10_val_1379 <- do
                                unboxed.CGrString.222 <- idris_str_tail.unboxed idr_Prelude.Strings.trim10_1381
                                pure (CGrString unboxed.CGrString.222) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.222)
                              idr_Prelude.Strings.trim10_1382 <- store idr_Prelude.Strings.trim10_val_1379
                              idr_Prelude.Strings.trim10_val_1378 <- do
                                unboxed.CGrInt.92 <- idris_str_head.unboxed idr_Prelude.Strings.trim10_1382
                                pure (CGrInt unboxed.CGrInt.92) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.92)
                              idr_Prelude.Strings.trim10_1383 <- store idr_Prelude.Strings.trim10_val_1378
                              idr_Prelude.Strings.trim11_val_1386 <- do
                                unboxed.CGrString.223 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.187.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.187.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.187.arity.1)
                                pure (CGrString unboxed.CGrString.223) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.223)
                              idr_Prelude.Strings.trim11_1387 <- store idr_Prelude.Strings.trim11_val_1386
                              idr_Prelude.Strings.trim11_val_1385 <- do
                                unboxed.CGrString.224 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1387
                                pure (CGrString unboxed.CGrString.224) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.224)
                              idr_Prelude.Strings.trim11_1388 <- store idr_Prelude.Strings.trim11_val_1385
                              idr_Prelude.Strings.trim11_val_1384 <- do
                                unboxed.CGrString.225 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1388
                                pure (CGrString unboxed.CGrString.225) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.225)
                              idr_Prelude.Strings.trim11_1389 <- store idr_Prelude.Strings.trim11_val_1384
                              do
                                (CGrInt idr_Prelude.Strings.trim10_1383.41.188.arity.1) <- fetch idr_Prelude.Strings.trim10_1383
                                idris_str_cons idr_Prelude.Strings.trim10_1383.41.188.arity.1 idr_Prelude.Strings.trim11_1389 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Strings.trim10_1383.41.188.arity.1)
                            (Cidr_Prelude.Bool.True) ->
                              idr_Prelude.Strings.trim10_val_1390 <- pure (CErased)
                              idr_Prelude.Strings.trim10_1391 <- store idr_Prelude.Strings.trim10_val_1390
                              idr_Prelude.Strings.trim11_val_1398 <- do
                                unboxed.CGrString.226 <- do
                                  (CGrString idr_Prelude.Strings.trim0.41.189.arity.1) <- fetch idr_Prelude.Strings.trim0
                                  idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.189.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.189.arity.1)
                                pure (CGrString unboxed.CGrString.226) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.226)
                              idr_Prelude.Strings.trim11_1399 <- store idr_Prelude.Strings.trim11_val_1398
                              idr_Prelude.Strings.trim11_val_1397 <- do
                                unboxed.CGrString.227 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1399
                                pure (CGrString unboxed.CGrString.227) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.227)
                              idr_Prelude.Strings.trim11_1400 <- store idr_Prelude.Strings.trim11_val_1397
                              idr_Prelude.Strings.trim11_val_1396 <- do
                                unboxed.CGrString.228 <- idris_str_tail.unboxed idr_Prelude.Strings.trim11_1400
                                pure (CGrString unboxed.CGrString.228) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.228)
                              idr_Prelude.Strings.trim11_1401 <- store idr_Prelude.Strings.trim11_val_1396
                              idr_Prelude.Strings.trim12_val_1402 <- pure (CGrString #"")
                              idr_Prelude.Strings.trim12_1403 <- store idr_Prelude.Strings.trim12_val_1402
                              idr_Prelude.Strings.trim11_val_1395 <- do
                                unboxed.CGrInt.93 <- do
                                  (CGrString idr_Prelude.Strings.trim12_1403.41.190.arity.1) <- fetch idr_Prelude.Strings.trim12_1403
                                  idris_str_eq.unboxed idr_Prelude.Strings.trim11_1401 idr_Prelude.Strings.trim12_1403.41.190.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim12_1403.41.190.arity.1)
                                pure (CGrInt unboxed.CGrInt.93) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.93)
                              idr_Prelude.Strings.trim11_1404 <- store idr_Prelude.Strings.trim11_val_1395
                              idr_Prelude.Strings.trim11_val_1405 <- fetch idr_Prelude.Strings.trim11_1404
                              idr_Prelude.Strings.trim11_val_1394 <- case idr_Prelude.Strings.trim11_val_1405 of
                                (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1406) ->
                                  case idr_Prelude.Strings.trim_cpat_LInt64_0_1406 of
                                    0 ->
                                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                    #default ->
                                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                              idr_Prelude.Strings.trim11_1407 <- store idr_Prelude.Strings.trim11_val_1394
                              idr_Prelude.Strings.trim12_val_1408 <- pure (Cidr_Prelude.Bool.True)
                              idr_Prelude.Strings.trim12_1409 <- store idr_Prelude.Strings.trim12_val_1408
                              idr_Prelude.Strings.trim11_val_1393 <- do
                                (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.trim12_1409
                                "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.trim11_1407 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
                              idr_Prelude.Strings.trim11_1410 <- store idr_Prelude.Strings.trim11_val_1393
                              idr_Prelude.Strings.trim11_val_1411 <- fetch idr_Prelude.Strings.trim11_1410
                              idr_Prelude.Strings.trim11_val_1392 <- case idr_Prelude.Strings.trim11_val_1411 of
                                (Cidr_Prelude.Basics.No) ->
                                  pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                                (Cidr_Prelude.Basics.Yes) ->
                                  idr_Prelude.Strings.trim12_val_1415 <- do
                                    unboxed.CGrString.229 <- do
                                      (CGrString idr_Prelude.Strings.trim0.41.192.arity.1) <- fetch idr_Prelude.Strings.trim0
                                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.192.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.192.arity.1)
                                    pure (CGrString unboxed.CGrString.229) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.229)
                                  idr_Prelude.Strings.trim12_1416 <- store idr_Prelude.Strings.trim12_val_1415
                                  idr_Prelude.Strings.trim12_val_1414 <- do
                                    unboxed.CGrString.230 <- idris_str_tail.unboxed idr_Prelude.Strings.trim12_1416
                                    pure (CGrString unboxed.CGrString.230) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.230)
                                  idr_Prelude.Strings.trim12_1417 <- store idr_Prelude.Strings.trim12_val_1414
                                  idr_Prelude.Strings.trim12_val_1413 <- do
                                    unboxed.CGrString.231 <- idris_str_tail.unboxed idr_Prelude.Strings.trim12_1417
                                    pure (CGrString unboxed.CGrString.231) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.231)
                                  idr_Prelude.Strings.trim12_1418 <- store idr_Prelude.Strings.trim12_val_1413
                                  idr_Prelude.Strings.trim12_val_1412 <- do
                                    unboxed.CGrInt.94 <- idris_str_head.unboxed idr_Prelude.Strings.trim12_1418
                                    pure (CGrInt unboxed.CGrInt.94) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.94)
                                  idr_Prelude.Strings.trim12_1419 <- store idr_Prelude.Strings.trim12_val_1412
                                  idr_Prelude.Strings.trim13_val_1422 <- do
                                    unboxed.CGrString.232 <- do
                                      (CGrString idr_Prelude.Strings.trim0.41.193.arity.1) <- fetch idr_Prelude.Strings.trim0
                                      idris_str_rev.unboxed idr_Prelude.Strings.trim0.41.193.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim0.41.193.arity.1)
                                    pure (CGrString unboxed.CGrString.232) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.232)
                                  idr_Prelude.Strings.trim13 <- store idr_Prelude.Strings.trim13_val_1422
                                  idr_Prelude.Strings.trim13_val_1421 <- do
                                    unboxed.CGrString.233 <- idris_str_tail.unboxed idr_Prelude.Strings.trim13
                                    pure (CGrString unboxed.CGrString.233) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.233)
                                  idr_Prelude.Strings.trim13_1423 <- store idr_Prelude.Strings.trim13_val_1421
                                  idr_Prelude.Strings.trim13_val_1420 <- do
                                    unboxed.CGrString.234 <- idris_str_tail.unboxed idr_Prelude.Strings.trim13_1423
                                    pure (CGrString unboxed.CGrString.234) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.234)
                                  idr_Prelude.Strings.trim13_1424 <- store idr_Prelude.Strings.trim13_val_1420
                                  idr_Prelude.Strings.trim13_val <- do
                                    unboxed.CGrString.235 <- idris_str_tail.unboxed idr_Prelude.Strings.trim13_1424
                                    pure (CGrString unboxed.CGrString.235) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.235)
                                  idr_Prelude.Strings.trim13_1425 <- store idr_Prelude.Strings.trim13_val
                                  pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim12_1419 idr_Prelude.Strings.trim13_1425) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim12_1419 idr_Prelude.Strings.trim13_1425)
                              idr_Prelude.Strings.trim11_1426 <- store idr_Prelude.Strings.trim11_val_1392
                              do
                                unboxed.CGrString.236 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim11_1426
                                pure (CGrString unboxed.CGrString.236) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.236)
              idr_Prelude.Strings.trim6_1427 <- store idr_Prelude.Strings.trim6_val_1321
              idr_Prelude.Strings.trim6_val_1320 <- do
                unboxed.CGrString.237 <- do
                  (CGrString idr_Prelude.Strings.trim6_1427.41.194.arity.1) <- fetch idr_Prelude.Strings.trim6_1427
                  idris_str_rev.unboxed idr_Prelude.Strings.trim6_1427.41.194.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.trim6_1427.41.194.arity.1)
                pure (CGrString unboxed.CGrString.237) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.237)
              idr_Prelude.Strings.trim6_1428 <- store idr_Prelude.Strings.trim6_val_1320
              idr_Prelude.Strings.trim6_val_1319 <- do
                unboxed.CGrString.238 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6_1428
                pure (CGrString unboxed.CGrString.238) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.238)
              idr_Prelude.Strings.trim6_1429 <- store idr_Prelude.Strings.trim6_val_1319
              idr_Prelude.Strings.trim6_val_1318 <- do
                unboxed.CGrString.239 <- idris_str_tail.unboxed idr_Prelude.Strings.trim6_1429
                pure (CGrString unboxed.CGrString.239) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.239)
              idr_Prelude.Strings.trim6_1430 <- store idr_Prelude.Strings.trim6_val_1318
              pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim5_1317 idr_Prelude.Strings.trim6_1430) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim5_1317 idr_Prelude.Strings.trim6_1430)
          idr_Prelude.Strings.trim4_1431 <- store idr_Prelude.Strings.trim4_val_1076
          idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim4_1431

"idr_Main.{adder_0}" "idr_Main.{adder_0}0" "idr_Main.{adder_0}1" "idr_Main.{adder_0}2" "idr_Main.{adder_0}3" =
  "idr_Main.{adder_0}4_val" <- pure (CErased)
  "idr_Main.{adder_0}4" <- store "idr_Main.{adder_0}4_val"
  "idr_Main.{adder_0}5_val_1458" <- do
    "idr_{APPLY_0}0.11" <- pure "idr_Main.{adder_0}0"
    "idr_{APPLY_0}1.11" <- pure "idr_Main.{adder_0}3"
    "idr_{APPLY_0}0_val.11" <- fetch "idr_{APPLY_0}0.11"
    case "idr_{APPLY_0}0_val.11" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.11" "idr_{APPLY_0}3.11" "idr_{APPLY_0}4.11") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.11" "idr_{APPLY_0}3.11" "idr_{APPLY_0}4.11" "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.11" "idr_{APPLY_0}3_1445.11" "idr_{APPLY_0}4_1446.11") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.11" "idr_{APPLY_0}3_1445.11" "idr_{APPLY_0}4_1446.11" "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.11") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.11" "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.11" "idr_{APPLY_0}3_1449.11") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.11" "idr_{APPLY_0}3_1449.11" "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.11" "idr_{APPLY_0}3_1451.11") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.11" "idr_{APPLY_0}3_1451.11" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.11" "idr_{APPLY_0}3_1453.11") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.11" "idr_{APPLY_0}3_1453.11" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.11") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.11" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.11") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.11" "idr_{APPLY_0}1.11"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.11") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.11" "idr_{APPLY_0}1.11"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.11"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.11") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.11" "idr_{APPLY_0}1.11"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.11"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.11") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.11")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.11") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.11")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  "idr_Main.{adder_0}5" <- store "idr_Main.{adder_0}5_val_1458"
  "idr_Main.{adder_0}5_val" <- do
    "idr_{APPLY_0}0.12" <- pure "idr_Main.{adder_0}5"
    "idr_{APPLY_0}1.12" <- pure "idr_Main.{adder_0}2"
    "idr_{APPLY_0}0_val.12" <- fetch "idr_{APPLY_0}0.12"
    case "idr_{APPLY_0}0_val.12" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.12" "idr_{APPLY_0}3.12" "idr_{APPLY_0}4.12") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.12" "idr_{APPLY_0}3.12" "idr_{APPLY_0}4.12" "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.12" "idr_{APPLY_0}3_1445.12" "idr_{APPLY_0}4_1446.12") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.12" "idr_{APPLY_0}3_1445.12" "idr_{APPLY_0}4_1446.12" "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.12") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.12" "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.12" "idr_{APPLY_0}3_1449.12") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.12" "idr_{APPLY_0}3_1449.12" "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.12" "idr_{APPLY_0}3_1451.12") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.12" "idr_{APPLY_0}3_1451.12" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.12" "idr_{APPLY_0}3_1453.12") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.12" "idr_{APPLY_0}3_1453.12" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.12") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.12" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.12") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.12" "idr_{APPLY_0}1.12"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.12") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.12" "idr_{APPLY_0}1.12"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.12"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.12") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.12" "idr_{APPLY_0}1.12"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.12"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.12") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.12")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.12") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.12")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  "idr_Main.{adder_0}5_1459" <- store "idr_Main.{adder_0}5_val"
  idr_Main.adder "idr_Main.{adder_0}0" "idr_Main.{adder_0}1" "idr_Main.{adder_0}5_1459"

"idr_Data.Vect.{foldrImpl_1}" "idr_Data.Vect.{foldrImpl_1}0" "idr_Data.Vect.{foldrImpl_1}1" "idr_Data.Vect.{foldrImpl_1}2" "idr_Data.Vect.{foldrImpl_1}3" =
  "idr_Data.Vect.{foldrImpl_1}4_val_1462" <- do
    "idr_{APPLY_0}0.13" <- pure "idr_Data.Vect.{foldrImpl_1}1"
    "idr_{APPLY_0}1.13" <- pure "idr_Data.Vect.{foldrImpl_1}2"
    "idr_{APPLY_0}0_val.13" <- fetch "idr_{APPLY_0}0.13"
    case "idr_{APPLY_0}0_val.13" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.13" "idr_{APPLY_0}3.13" "idr_{APPLY_0}4.13") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.13" "idr_{APPLY_0}3.13" "idr_{APPLY_0}4.13" "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.13" "idr_{APPLY_0}3_1445.13" "idr_{APPLY_0}4_1446.13") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.13" "idr_{APPLY_0}3_1445.13" "idr_{APPLY_0}4_1446.13" "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.13") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.13" "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.13" "idr_{APPLY_0}3_1449.13") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.13" "idr_{APPLY_0}3_1449.13" "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.13" "idr_{APPLY_0}3_1451.13") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.13" "idr_{APPLY_0}3_1451.13" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.13" "idr_{APPLY_0}3_1453.13") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.13" "idr_{APPLY_0}3_1453.13" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.13") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.13" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.13") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.13" "idr_{APPLY_0}1.13"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.13") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.13" "idr_{APPLY_0}1.13"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.13"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.13") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.13" "idr_{APPLY_0}1.13"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.13"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.13") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.13")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.13") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.13")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  "idr_Data.Vect.{foldrImpl_1}4" <- store "idr_Data.Vect.{foldrImpl_1}4_val_1462"
  "idr_Data.Vect.{foldrImpl_1}4_val" <- do
    "idr_{APPLY_0}0.14" <- pure "idr_Data.Vect.{foldrImpl_1}4"
    "idr_{APPLY_0}1.14" <- pure "idr_Data.Vect.{foldrImpl_1}3"
    "idr_{APPLY_0}0_val.14" <- fetch "idr_{APPLY_0}0.14"
    case "idr_{APPLY_0}0_val.14" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.14" "idr_{APPLY_0}3.14" "idr_{APPLY_0}4.14") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.14" "idr_{APPLY_0}3.14" "idr_{APPLY_0}4.14" "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.14" "idr_{APPLY_0}3_1445.14" "idr_{APPLY_0}4_1446.14") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.14" "idr_{APPLY_0}3_1445.14" "idr_{APPLY_0}4_1446.14" "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.14") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.14" "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.14" "idr_{APPLY_0}3_1449.14") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.14" "idr_{APPLY_0}3_1449.14" "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.14" "idr_{APPLY_0}3_1451.14") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.14" "idr_{APPLY_0}3_1451.14" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.14" "idr_{APPLY_0}3_1453.14") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.14" "idr_{APPLY_0}3_1453.14" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.14") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.14" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.14") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.14" "idr_{APPLY_0}1.14"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.14") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.14" "idr_{APPLY_0}1.14"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.14"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.14") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.14" "idr_{APPLY_0}1.14"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.14"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.14") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.14")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.14") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.14")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  "idr_Data.Vect.{foldrImpl_1}4_1463" <- store "idr_Data.Vect.{foldrImpl_1}4_val"
  do
    "idr_{APPLY_0}0.15" <- pure "idr_Data.Vect.{foldrImpl_1}0"
    "idr_{APPLY_0}1.15" <- pure "idr_Data.Vect.{foldrImpl_1}4_1463"
    "idr_{APPLY_0}0_val.15" <- fetch "idr_{APPLY_0}0.15"
    case "idr_{APPLY_0}0_val.15" of
      (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.15" "idr_{APPLY_0}3.15" "idr_{APPLY_0}4.15") ->
        "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.15" "idr_{APPLY_0}3.15" "idr_{APPLY_0}4.15" "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.15" "idr_{APPLY_0}3_1445.15" "idr_{APPLY_0}4_1446.15") ->
        "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.15" "idr_{APPLY_0}3_1445.15" "idr_{APPLY_0}4_1446.15" "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{main_2}_1}") ->
        "idr_Main.{main_2}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{main_3}_1}") ->
        "idr_Main.{main_3}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{main_4}_1}") ->
        "idr_Main.{main_4}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{main_5}_1}") ->
        "idr_Main.{main_5}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{main_6}_1}") ->
        "idr_Main.{main_6}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{main_8}_1}") ->
        "idr_Main.{main_8}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.15") ->
        "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.15" "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.15" "idr_{APPLY_0}3_1449.15") ->
        "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.15" "idr_{APPLY_0}3_1449.15" "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.15" "idr_{APPLY_0}3_1451.15") ->
        "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.15" "idr_{APPLY_0}3_1451.15" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Chars.isDigit_1}") ->
        idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.15" "idr_{APPLY_0}3_1453.15") ->
        idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.15" "idr_{APPLY_0}3_1453.15" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.15") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.15" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
        "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
        "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
        "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
        "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
        "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
        "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
        "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
        "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
        "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
        "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
        "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.15") ->
        "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.15" "idr_{APPLY_0}1.15"
      (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.15") ->
        "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.15" "idr_{APPLY_0}1.15"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.15"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.15") ->
        idr_prim__strCons "idr_{APPLY_0}2_1457.15" "idr_{APPLY_0}1.15"
      (C"idr_{U_prim__toStrInt_1}") ->
        idr_prim__toStrInt "idr_{APPLY_0}1.15"
      (C"idr_{U_Main.{main_9}_2}") ->
        pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.15") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.15")
      (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
        pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.15") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.15")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)

"idr_Main.{main_2}" "idr_Main.{main_2}0" =
  "idr_Main.{main_2}0_val" <- fetch "idr_Main.{main_2}0"
  (Cidr_Builtins.MkPair "idr_Main.{main_2}1" "idr_Main.{main_2}2") <- pure "idr_Main.{main_2}0_val"
  "idr_Main.{main_2}3_val" <- pure (CGrString #"(")
  "idr_Main.{main_2}3" <- store "idr_Main.{main_2}3_val"
  "idr_Main.{main_2}4_val_1465" <- pure (CErased)
  "idr_Main.{main_2}4" <- store "idr_Main.{main_2}4_val_1465"
  "idr_Main.{main_2}5_val" <- pure (C"idr_{U_prim__floatToStr_1}")
  "idr_Main.{main_2}5" <- store "idr_Main.{main_2}5_val"
  "idr_Main.{main_2}6_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_2}6" <- store "idr_Main.{main_2}6_val"
  "idr_Main.{main_2}4_val_1464" <- do
    (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_2}6"
    idr_Prelude.Show.primNumShow "idr_Main.{main_2}5" "idr_Main.{main_2}1" -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)
  "idr_Main.{main_2}4_1466" <- store "idr_Main.{main_2}4_val_1464"
  "idr_Main.{main_2}5_val_1468" <- pure (CGrString #", ")
  "idr_Main.{main_2}5_1469" <- store "idr_Main.{main_2}5_val_1468"
  "idr_Main.{main_2}6_val_1472" <- pure (CErased)
  "idr_Main.{main_2}6_1473" <- store "idr_Main.{main_2}6_val_1472"
  "idr_Main.{main_2}7_val" <- pure (C"idr_{U_prim__floatToStr_1}")
  "idr_Main.{main_2}7" <- store "idr_Main.{main_2}7_val"
  "idr_Main.{main_2}8_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_2}8" <- store "idr_Main.{main_2}8_val"
  "idr_Main.{main_2}6_val_1471" <- do
    (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_2}8"
    idr_Prelude.Show.primNumShow "idr_Main.{main_2}7" "idr_Main.{main_2}2" -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)
  "idr_Main.{main_2}6_1474" <- store "idr_Main.{main_2}6_val_1471"
  "idr_Main.{main_2}7_val_1475" <- pure (CGrString #")")
  "idr_Main.{main_2}7_1476" <- store "idr_Main.{main_2}7_val_1475"
  "idr_Main.{main_2}6_val_1470" <- idris_str_concat "idr_Main.{main_2}6_1474" "idr_Main.{main_2}7_1476"
  "idr_Main.{main_2}6_1477" <- store "idr_Main.{main_2}6_val_1470"
  "idr_Main.{main_2}5_val_1467" <- idris_str_concat "idr_Main.{main_2}5_1469" "idr_Main.{main_2}6_1477"
  "idr_Main.{main_2}5_1478" <- store "idr_Main.{main_2}5_val_1467"
  "idr_Main.{main_2}4_val" <- idris_str_concat "idr_Main.{main_2}4_1466" "idr_Main.{main_2}5_1478"
  "idr_Main.{main_2}4_1479" <- store "idr_Main.{main_2}4_val"
  idris_str_concat "idr_Main.{main_2}3" "idr_Main.{main_2}4_1479"

"idr_Main.{main_3}" "idr_Main.{main_3}0" =
  "idr_Main.{main_3}1_val" <- pure (CErased)
  "idr_Main.{main_3}1" <- store "idr_Main.{main_3}1_val"
  "idr_Main.{main_3}2_val" <- pure (CErased)
  "idr_Main.{main_3}2" <- store "idr_Main.{main_3}2_val"
  "idr_Main.{main_3}3_val" <- pure (C"idr_{U_Main.{main_2}_1}")
  "idr_Main.{main_3}3" <- store "idr_Main.{main_3}3_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0" "idr_Main.{main_3}3" "idr_Main.{main_3}0"

"idr_Main.{main_4}" "idr_Main.{main_4}0" =
  "idr_Main.{main_4}0_val" <- fetch "idr_Main.{main_4}0"
  (Cidr_Builtins.MkPair "idr_Main.{main_4}1" "idr_Main.{main_4}2") <- pure "idr_Main.{main_4}0_val"
  "idr_Main.{main_4}3_val" <- pure (CGrString #"(")
  "idr_Main.{main_4}3" <- store "idr_Main.{main_4}3_val"
  "idr_Main.{main_4}4_val_1481" <- pure (CErased)
  "idr_Main.{main_4}4" <- store "idr_Main.{main_4}4_val_1481"
  "idr_Main.{main_4}5_val" <- pure (C"idr_{U_prim__floatToStr_1}")
  "idr_Main.{main_4}5" <- store "idr_Main.{main_4}5_val"
  "idr_Main.{main_4}6_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_4}6" <- store "idr_Main.{main_4}6_val"
  "idr_Main.{main_4}4_val_1480" <- do
    (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_4}6"
    idr_Prelude.Show.primNumShow "idr_Main.{main_4}5" "idr_Main.{main_4}1" -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)
  "idr_Main.{main_4}4_1482" <- store "idr_Main.{main_4}4_val_1480"
  "idr_Main.{main_4}5_val_1484" <- pure (CGrString #", ")
  "idr_Main.{main_4}5_1485" <- store "idr_Main.{main_4}5_val_1484"
  "idr_Main.{main_4}6_val_1488" <- pure (CErased)
  "idr_Main.{main_4}6_1489" <- store "idr_Main.{main_4}6_val_1488"
  "idr_Main.{main_4}7_val" <- pure (C"idr_{U_prim__floatToStr_1}")
  "idr_Main.{main_4}7" <- store "idr_Main.{main_4}7_val"
  "idr_Main.{main_4}8_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_4}8" <- store "idr_Main.{main_4}8_val"
  "idr_Main.{main_4}6_val_1487" <- do
    (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_4}8"
    idr_Prelude.Show.primNumShow "idr_Main.{main_4}7" "idr_Main.{main_4}2" -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)
  "idr_Main.{main_4}6_1490" <- store "idr_Main.{main_4}6_val_1487"
  "idr_Main.{main_4}7_val_1491" <- pure (CGrString #")")
  "idr_Main.{main_4}7_1492" <- store "idr_Main.{main_4}7_val_1491"
  "idr_Main.{main_4}6_val_1486" <- idris_str_concat "idr_Main.{main_4}6_1490" "idr_Main.{main_4}7_1492"
  "idr_Main.{main_4}6_1493" <- store "idr_Main.{main_4}6_val_1486"
  "idr_Main.{main_4}5_val_1483" <- idris_str_concat "idr_Main.{main_4}5_1485" "idr_Main.{main_4}6_1493"
  "idr_Main.{main_4}5_1494" <- store "idr_Main.{main_4}5_val_1483"
  "idr_Main.{main_4}4_val" <- idris_str_concat "idr_Main.{main_4}4_1482" "idr_Main.{main_4}5_1494"
  "idr_Main.{main_4}4_1495" <- store "idr_Main.{main_4}4_val"
  idris_str_concat "idr_Main.{main_4}3" "idr_Main.{main_4}4_1495"

"idr_Main.{main_5}" "idr_Main.{main_5}0" =
  "idr_Main.{main_5}1_val" <- pure (CErased)
  "idr_Main.{main_5}1" <- store "idr_Main.{main_5}1_val"
  "idr_Main.{main_5}2_val" <- pure (CErased)
  "idr_Main.{main_5}2" <- store "idr_Main.{main_5}2_val"
  "idr_Main.{main_5}3_val" <- pure (C"idr_{U_Main.{main_4}_1}")
  "idr_Main.{main_5}3" <- store "idr_Main.{main_5}3_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0" "idr_Main.{main_5}3" "idr_Main.{main_5}0"

"idr_Main.{main_6}" "idr_Main.{main_6}0" =
  "idr_Main.{main_6}1_val" <- pure (CGrInt 34)
  "idr_Main.{main_6}1" <- store "idr_Main.{main_6}1_val"
  "idr_Main.{main_6}2_val_1500" <- pure (CGrString #"")
  "idr_Main.{main_6}2" <- store "idr_Main.{main_6}2_val_1500"
  "idr_Main.{main_6}2_val_1499" <- do
    unboxed.CGrInt.95 <- do
      (CGrString "idr_Main.{main_6}2.41.199.arity.1") <- fetch "idr_Main.{main_6}2"
      idris_str_eq.unboxed "idr_Main.{main_6}0" "idr_Main.{main_6}2.41.199.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Main.{main_6}2.41.199.arity.1")
    pure (CGrInt unboxed.CGrInt.95) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.95)
  "idr_Main.{main_6}2_1501" <- store "idr_Main.{main_6}2_val_1499"
  "idr_Main.{main_6}2_val_1502" <- fetch "idr_Main.{main_6}2_1501"
  "idr_Main.{main_6}2_val_1498" <- case "idr_Main.{main_6}2_val_1502" of
    (CGrInt "idr_Main.{main_6}_cpat_LInt64_0") ->
      case "idr_Main.{main_6}_cpat_LInt64_0" of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  "idr_Main.{main_6}2_1503" <- store "idr_Main.{main_6}2_val_1498"
  "idr_Main.{main_6}3_val" <- pure (Cidr_Prelude.Bool.True)
  "idr_Main.{main_6}3" <- store "idr_Main.{main_6}3_val"
  "idr_Main.{main_6}2_val_1497" <- do
    (Cidr_Prelude.Bool.True) <- fetch "idr_Main.{main_6}3"
    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{main_6}2_1503" -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
  "idr_Main.{main_6}2_1504" <- store "idr_Main.{main_6}2_val_1497"
  "idr_Main.{main_6}2_val_1505" <- fetch "idr_Main.{main_6}2_1504"
  "idr_Main.{main_6}2_val_1496" <- case "idr_Main.{main_6}2_val_1505" of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      "idr_Main.{main_6}3_val_1506" <- do
        unboxed.CGrInt.96 <- idris_str_head.unboxed "idr_Main.{main_6}0"
        pure (CGrInt unboxed.CGrInt.96) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.96)
      "idr_Main.{main_6}3_1507" <- store "idr_Main.{main_6}3_val_1506"
      "idr_Main.{main_6}4_val_1508" <- pure (CErased)
      "idr_Main.{main_6}4" <- store "idr_Main.{main_6}4_val_1508"
      "idr_Main.{main_6}5_val_1512" <- do
        unboxed.CGrString.240 <- idris_str_tail.unboxed "idr_Main.{main_6}0"
        pure (CGrString unboxed.CGrString.240) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.240)
      "idr_Main.{main_6}5" <- store "idr_Main.{main_6}5_val_1512"
      "idr_Main.{main_6}6_val" <- pure (CGrString #"")
      "idr_Main.{main_6}6" <- store "idr_Main.{main_6}6_val"
      "idr_Main.{main_6}5_val_1511" <- do
        unboxed.CGrInt.97 <- do
          (CGrString "idr_Main.{main_6}6.41.201.arity.1") <- fetch "idr_Main.{main_6}6"
          idris_str_eq.unboxed "idr_Main.{main_6}5" "idr_Main.{main_6}6.41.201.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Main.{main_6}6.41.201.arity.1")
        pure (CGrInt unboxed.CGrInt.97) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.97)
      "idr_Main.{main_6}5_1513" <- store "idr_Main.{main_6}5_val_1511"
      "idr_Main.{main_6}5_val_1514" <- fetch "idr_Main.{main_6}5_1513"
      "idr_Main.{main_6}5_val_1510" <- case "idr_Main.{main_6}5_val_1514" of
        (CGrInt "idr_Main.{main_6}_cpat_LInt64_0_1515") ->
          case "idr_Main.{main_6}_cpat_LInt64_0_1515" of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Main.{main_6}5_1516" <- store "idr_Main.{main_6}5_val_1510"
      "idr_Main.{main_6}6_val_1517" <- pure (Cidr_Prelude.Bool.True)
      "idr_Main.{main_6}6_1518" <- store "idr_Main.{main_6}6_val_1517"
      "idr_Main.{main_6}5_val_1509" <- do
        (Cidr_Prelude.Bool.True) <- fetch "idr_Main.{main_6}6_1518"
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{main_6}5_1516" -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
      "idr_Main.{main_6}5_1519" <- store "idr_Main.{main_6}5_val_1509"
      "idr_Main.{main_6}5_val_1520" <- fetch "idr_Main.{main_6}5_1519"
      "idr_Main.{main_6}5_val" <- case "idr_Main.{main_6}5_val_1520" of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          "idr_Main.{main_6}6_val_1522" <- do
            unboxed.CGrString.241 <- idris_str_tail.unboxed "idr_Main.{main_6}0"
            pure (CGrString unboxed.CGrString.241) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.241)
          "idr_Main.{main_6}6_1523" <- store "idr_Main.{main_6}6_val_1522"
          "idr_Main.{main_6}6_val_1521" <- do
            unboxed.CGrInt.98 <- idris_str_head.unboxed "idr_Main.{main_6}6_1523"
            pure (CGrInt unboxed.CGrInt.98) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.98)
          "idr_Main.{main_6}6_1524" <- store "idr_Main.{main_6}6_val_1521"
          "idr_Main.{main_6}7_val_1525" <- do
            unboxed.CGrString.242 <- idris_str_tail.unboxed "idr_Main.{main_6}0"
            pure (CGrString unboxed.CGrString.242) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.242)
          "idr_Main.{main_6}7" <- store "idr_Main.{main_6}7_val_1525"
          "idr_Main.{main_6}7_val" <- do
            unboxed.CGrString.243 <- idris_str_tail.unboxed "idr_Main.{main_6}7"
            pure (CGrString unboxed.CGrString.243) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.243)
          "idr_Main.{main_6}7_1526" <- store "idr_Main.{main_6}7_val"
          pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_6}6_1524" "idr_Main.{main_6}7_1526") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_6}6_1524" "idr_Main.{main_6}7_1526")
      "idr_Main.{main_6}5_1527" <- store "idr_Main.{main_6}5_val"
      "idr_Main.{main_6}4_val" <- idr__Prelude.Strings.unpack_with_36 "idr_Main.{main_6}5_1527"
      "idr_Main.{main_6}4_1528" <- store "idr_Main.{main_6}4_val"
      pure (Cidr_Prelude.List.:: "idr_Main.{main_6}3_1507" "idr_Main.{main_6}4_1528") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{main_6}3_1507" "idr_Main.{main_6}4_1528")
  "idr_Main.{main_6}2_1529" <- store "idr_Main.{main_6}2_val_1496"
  "idr_Main.{main_6}3_val_1530" <- pure (CGrString #"\"")
  "idr_Main.{main_6}3_1531" <- store "idr_Main.{main_6}3_val_1530"
  "idr_Main.{main_6}2_val" <- do
    (CGrString "idr_Main.{main_6}3_1531.41.203.arity.1") <- fetch "idr_Main.{main_6}3_1531"
    idr_Prelude.Show.showLitString "idr_Main.{main_6}2_1529" "idr_Main.{main_6}3_1531.41.203.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Main.{main_6}3_1531.41.203.arity.1")
  "idr_Main.{main_6}2_1532" <- store "idr_Main.{main_6}2_val"
  do
    (CGrInt "idr_Main.{main_6}1.41.204.arity.1") <- fetch "idr_Main.{main_6}1"
    idris_str_cons "idr_Main.{main_6}1.41.204.arity.1" "idr_Main.{main_6}2_1532" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Main.{main_6}1.41.204.arity.1")

"idr_Main.{main_8}" "idr_Main.{main_8}0" =
  "idr_Main.{main_8}1_val" <- pure (CErased)
  "idr_Main.{main_8}1" <- store "idr_Main.{main_8}1_val"
  "idr_Main.{main_8}2_val" <- pure (C"idr_{U_prim__toStrInt_1}")
  "idr_Main.{main_8}2" <- store "idr_Main.{main_8}2_val"
  "idr_Main.{main_8}3_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_8}3" <- store "idr_Main.{main_8}3_val"
  do
    (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_8}3"
    idr_Prelude.Show.primNumShow "idr_Main.{main_8}2" "idr_Main.{main_8}0" -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)

"idr_Main.{main_9}" "idr_Main.{main_9}0" "idr_Main.{main_9}1" =
  do
    idris_int_add0.0 <- pure "idr_Main.{main_9}0"
    idris_int_add1.0 <- pure "idr_Main.{main_9}1"
    (CGrInt idris_int_add0_1.0) <- fetch idris_int_add0.0
    (CGrInt idris_int_add1_1.0) <- fetch idris_int_add1.0
    idris_int_add2.0 <- _prim_int_add idris_int_add0_1.0 idris_int_add1_1.0
    pure (CGrInt idris_int_add2.0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_int_add2.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1.0)

"idr_Main.{printFmt_14}" "idr_Main.{printFmt_14}0" "idr_Main.{printFmt_14}1" "idr_Main.{printFmt_14}2" =
  "idr_Main.{printFmt_14}3_val_1534" <- pure (CErased)
  "idr_Main.{printFmt_14}3" <- store "idr_Main.{printFmt_14}3_val_1534"
  "idr_Main.{printFmt_14}4_val" <- pure (C"idr_{U_prim__toStrInt_1}")
  "idr_Main.{printFmt_14}4" <- store "idr_Main.{printFmt_14}4_val"
  "idr_Main.{printFmt_14}5_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{printFmt_14}5" <- store "idr_Main.{printFmt_14}5_val"
  "idr_Main.{printFmt_14}3_val_1533" <- do
    (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{printFmt_14}5"
    idr_Prelude.Show.primNumShow "idr_Main.{printFmt_14}4" "idr_Main.{printFmt_14}2" -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)
  "idr_Main.{printFmt_14}3_1535" <- store "idr_Main.{printFmt_14}3_val_1533"
  "idr_Main.{printFmt_14}3_val" <- idris_str_concat "idr_Main.{printFmt_14}1" "idr_Main.{printFmt_14}3_1535"
  "idr_Main.{printFmt_14}3_1536" <- store "idr_Main.{printFmt_14}3_val"
  idr_Main.printFmt "idr_Main.{printFmt_14}0" "idr_Main.{printFmt_14}3_1536"

"idr_Main.{printFmt_15}" "idr_Main.{printFmt_15}0" "idr_Main.{printFmt_15}1" "idr_Main.{printFmt_15}2" =
  "idr_Main.{printFmt_15}3_val" <- idris_str_concat "idr_Main.{printFmt_15}1" "idr_Main.{printFmt_15}2"
  "idr_Main.{printFmt_15}3" <- store "idr_Main.{printFmt_15}3_val"
  idr_Main.printFmt "idr_Main.{printFmt_15}0" "idr_Main.{printFmt_15}3"

"idr_Prelude.Show.{showLitChar_16}" "idr_Prelude.Show.{showLitChar_16}0" =
  "idr_Prelude.Show.{showLitChar_16}1_val" <- pure (CGrString #"\\a")
  "idr_Prelude.Show.{showLitChar_16}1" <- store "idr_Prelude.Show.{showLitChar_16}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_16}1" "idr_Prelude.Show.{showLitChar_16}0"

"idr_Prelude.Show.{showLitChar_17}" "idr_Prelude.Show.{showLitChar_17}0" =
  "idr_Prelude.Show.{showLitChar_17}1_val" <- pure (CGrString #"\\b")
  "idr_Prelude.Show.{showLitChar_17}1" <- store "idr_Prelude.Show.{showLitChar_17}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_17}1" "idr_Prelude.Show.{showLitChar_17}0"

"idr_Prelude.Show.{showLitChar_18}" "idr_Prelude.Show.{showLitChar_18}0" =
  "idr_Prelude.Show.{showLitChar_18}1_val" <- pure (CGrString #"\\t")
  "idr_Prelude.Show.{showLitChar_18}1" <- store "idr_Prelude.Show.{showLitChar_18}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_18}1" "idr_Prelude.Show.{showLitChar_18}0"

"idr_Prelude.Show.{showLitChar_19}" "idr_Prelude.Show.{showLitChar_19}0" =
  "idr_Prelude.Show.{showLitChar_19}1_val" <- pure (CGrString #"\\n")
  "idr_Prelude.Show.{showLitChar_19}1" <- store "idr_Prelude.Show.{showLitChar_19}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_19}1" "idr_Prelude.Show.{showLitChar_19}0"

"idr_Prelude.Show.{showLitChar_20}" "idr_Prelude.Show.{showLitChar_20}0" =
  "idr_Prelude.Show.{showLitChar_20}1_val" <- pure (CGrString #"\\v")
  "idr_Prelude.Show.{showLitChar_20}1" <- store "idr_Prelude.Show.{showLitChar_20}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_20}1" "idr_Prelude.Show.{showLitChar_20}0"

"idr_Prelude.Show.{showLitChar_21}" "idr_Prelude.Show.{showLitChar_21}0" =
  "idr_Prelude.Show.{showLitChar_21}1_val" <- pure (CGrString #"\\f")
  "idr_Prelude.Show.{showLitChar_21}1" <- store "idr_Prelude.Show.{showLitChar_21}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_21}1" "idr_Prelude.Show.{showLitChar_21}0"

"idr_Prelude.Show.{showLitChar_22}" "idr_Prelude.Show.{showLitChar_22}0" =
  "idr_Prelude.Show.{showLitChar_22}1_val" <- pure (CGrString #"\\r")
  "idr_Prelude.Show.{showLitChar_22}1" <- store "idr_Prelude.Show.{showLitChar_22}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_22}1" "idr_Prelude.Show.{showLitChar_22}0"

"idr_Prelude.Show.{showLitChar_23}" "idr_Prelude.Show.{showLitChar_23}0" =
  "idr_Prelude.Show.{showLitChar_23}1_val_1537" <- pure (CGrInt 72)
  "idr_Prelude.Show.{showLitChar_23}1" <- store "idr_Prelude.Show.{showLitChar_23}1_val_1537"
  "idr_Prelude.Show.{showLitChar_23}1_val" <- do
    unboxed.CGrInt.99 <- do
      (CGrInt "idr_Prelude.Show.{showLitChar_23}1.41.207.arity.1") <- fetch "idr_Prelude.Show.{showLitChar_23}1"
      idris_int_eq.unboxed "idr_Prelude.Show.{showLitChar_23}0" "idr_Prelude.Show.{showLitChar_23}1.41.207.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Show.{showLitChar_23}1.41.207.arity.1")
    pure (CGrInt unboxed.CGrInt.99) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.99)
  "idr_Prelude.Show.{showLitChar_23}1_1538" <- store "idr_Prelude.Show.{showLitChar_23}1_val"
  "idr_Prelude.Show.{showLitChar_23}1_val_1539" <- fetch "idr_Prelude.Show.{showLitChar_23}1_1538"
  case "idr_Prelude.Show.{showLitChar_23}1_val_1539" of
    (CGrInt "idr_Prelude.Show.{showLitChar_23}_cpat_LInt64_0") ->
      case "idr_Prelude.Show.{showLitChar_23}_cpat_LInt64_0" of
        0 ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)

"idr_Prelude.Show.{showLitChar_24}" "idr_Prelude.Show.{showLitChar_24}0" =
  "idr_Prelude.Show.{showLitChar_24}1_val" <- pure (CGrString #"\\\\")
  "idr_Prelude.Show.{showLitChar_24}1" <- store "idr_Prelude.Show.{showLitChar_24}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_24}1" "idr_Prelude.Show.{showLitChar_24}0"

"idr_Prelude.Show.{showLitChar_25}" "idr_Prelude.Show.{showLitChar_25}0" =
  "idr_Prelude.Show.{showLitChar_25}1_val" <- pure (CGrString #"\\DEL")
  "idr_Prelude.Show.{showLitChar_25}1" <- store "idr_Prelude.Show.{showLitChar_25}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_25}1" "idr_Prelude.Show.{showLitChar_25}0"

"idr_Prelude.Show.{showLitChar_26}" "idr_Prelude.Show.{showLitChar_26}0" "idr_Prelude.Show.{showLitChar_26}1" =
  "idr_Prelude.Show.{showLitChar_26}2_val" <- pure (CGrInt 92)
  "idr_Prelude.Show.{showLitChar_26}2" <- store "idr_Prelude.Show.{showLitChar_26}2_val"
  "idr_Prelude.Show.{showLitChar_26}3_val" <- idris_str_concat "idr_Prelude.Show.{showLitChar_26}0" "idr_Prelude.Show.{showLitChar_26}1"
  "idr_Prelude.Show.{showLitChar_26}3" <- store "idr_Prelude.Show.{showLitChar_26}3_val"
  idr_prim__strCons "idr_Prelude.Show.{showLitChar_26}2" "idr_Prelude.Show.{showLitChar_26}3"

"idr_Prelude.Show.{showLitChar_27}" "idr_Prelude.Show.{showLitChar_27}0" "idr_Prelude.Show.{showLitChar_27}1" =
  "idr_Prelude.Show.{showLitChar_27}2_val" <- pure (CGrInt 92)
  "idr_Prelude.Show.{showLitChar_27}2" <- store "idr_Prelude.Show.{showLitChar_27}2_val"
  "idr_Prelude.Show.{showLitChar_27}3_val_1540" <- pure (C"idr_{U_Prelude.Chars.isDigit_1}")
  "idr_Prelude.Show.{showLitChar_27}3" <- store "idr_Prelude.Show.{showLitChar_27}3_val_1540"
  "idr_Prelude.Show.{showLitChar_27}4_val_1541" <- pure (CErased)
  "idr_Prelude.Show.{showLitChar_27}4" <- store "idr_Prelude.Show.{showLitChar_27}4_val_1541"
  "idr_Prelude.Show.{showLitChar_27}5_val" <- pure (C"idr_{U_prim__toStrInt_1}")
  "idr_Prelude.Show.{showLitChar_27}5" <- store "idr_Prelude.Show.{showLitChar_27}5_val"
  "idr_Prelude.Show.{showLitChar_27}6_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Prelude.Show.{showLitChar_27}6" <- store "idr_Prelude.Show.{showLitChar_27}6_val"
  "idr_Prelude.Show.{showLitChar_27}7_val" <- do
    unboxed.CGrInt.100 <- do
      (CGrInt "idr_Prelude.Show.{showLitChar_27}0.41.208.arity.1") <- fetch "idr_Prelude.Show.{showLitChar_27}0"
      idris_ch_int.unboxed "idr_Prelude.Show.{showLitChar_27}0.41.208.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Show.{showLitChar_27}0.41.208.arity.1")
    pure (CGrInt unboxed.CGrInt.100) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.100)
  "idr_Prelude.Show.{showLitChar_27}7" <- store "idr_Prelude.Show.{showLitChar_27}7_val"
  "idr_Prelude.Show.{showLitChar_27}4_val" <- do
    (Cidr_Prelude.Show.Open) <- fetch "idr_Prelude.Show.{showLitChar_27}6"
    idr_Prelude.Show.primNumShow "idr_Prelude.Show.{showLitChar_27}5" "idr_Prelude.Show.{showLitChar_27}7" -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)
  "idr_Prelude.Show.{showLitChar_27}4_1542" <- store "idr_Prelude.Show.{showLitChar_27}4_val"
  "idr_Prelude.Show.{showLitChar_27}3_val" <- idr_Prelude.Show.protectEsc "idr_Prelude.Show.{showLitChar_27}3" "idr_Prelude.Show.{showLitChar_27}4_1542" "idr_Prelude.Show.{showLitChar_27}1"
  "idr_Prelude.Show.{showLitChar_27}3_1543" <- store "idr_Prelude.Show.{showLitChar_27}3_val"
  idr_prim__strCons "idr_Prelude.Show.{showLitChar_27}2" "idr_Prelude.Show.{showLitChar_27}3_1543"

"idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}0" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}1" =
  pure (Cidr_Prelude.List.:: "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}0" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}1") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}0" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}1")

"idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}0" =
  fetch "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}0"

"idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04" =
  "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04"
  case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06") ->
      "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
      case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" of
        (Cidr_Prelude.List.Nil) ->
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val" <- do
            "idr_{APPLY_0}0.16" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02"
            "idr_{APPLY_0}1.16" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
            "idr_{APPLY_0}0_val.16" <- fetch "idr_{APPLY_0}0.16"
            case "idr_{APPLY_0}0_val.16" of
              (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.16" "idr_{APPLY_0}3.16" "idr_{APPLY_0}4.16") ->
                "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.16" "idr_{APPLY_0}3.16" "idr_{APPLY_0}4.16" "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.16" "idr_{APPLY_0}3_1445.16" "idr_{APPLY_0}4_1446.16") ->
                "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.16" "idr_{APPLY_0}3_1445.16" "idr_{APPLY_0}4_1446.16" "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{main_2}_1}") ->
                "idr_Main.{main_2}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{main_3}_1}") ->
                "idr_Main.{main_3}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{main_4}_1}") ->
                "idr_Main.{main_4}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{main_5}_1}") ->
                "idr_Main.{main_5}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{main_6}_1}") ->
                "idr_Main.{main_6}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{main_8}_1}") ->
                "idr_Main.{main_8}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.16") ->
                "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.16" "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.16" "idr_{APPLY_0}3_1449.16") ->
                "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.16" "idr_{APPLY_0}3_1449.16" "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.16" "idr_{APPLY_0}3_1451.16") ->
                "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.16" "idr_{APPLY_0}3_1451.16" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Chars.isDigit_1}") ->
                idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.16" "idr_{APPLY_0}3_1453.16") ->
                idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.16" "idr_{APPLY_0}3_1453.16" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.16") ->
                "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.16" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
                "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
                "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
                "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
                "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
                "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
                "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
                "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
                "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
                "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
                "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
                "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.16") ->
                "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.16" "idr_{APPLY_0}1.16"
              (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.16") ->
                "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.16" "idr_{APPLY_0}1.16"
              (C"idr_{U_prim__floatToStr_1}") ->
                idr_prim__floatToStr "idr_{APPLY_0}1.16"
              (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.16") ->
                idr_prim__strCons "idr_{APPLY_0}2_1457.16" "idr_{APPLY_0}1.16"
              (C"idr_{U_prim__toStrInt_1}") ->
                idr_prim__toStrInt "idr_{APPLY_0}1.16"
              (C"idr_{U_Main.{main_9}_2}") ->
                pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.16") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.16")
              (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
                pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.16") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.16")
              #default ->
                pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val"
          do
            (CGrString unboxed.CGrString.1) <- idris_str_concat "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07"
            pure unboxed.CGrString.1
        #default ->
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val_1544" <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_1545" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val_1544"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08_val" <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1547" <- do
            "idr_{APPLY_0}0.17" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02"
            "idr_{APPLY_0}1.17" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
            "idr_{APPLY_0}0_val.17" <- fetch "idr_{APPLY_0}0.17"
            case "idr_{APPLY_0}0_val.17" of
              (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.17" "idr_{APPLY_0}3.17" "idr_{APPLY_0}4.17") ->
                "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.17" "idr_{APPLY_0}3.17" "idr_{APPLY_0}4.17" "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.17" "idr_{APPLY_0}3_1445.17" "idr_{APPLY_0}4_1446.17") ->
                "idr_Main.{adder_0}" "idr_{APPLY_0}2_1444.17" "idr_{APPLY_0}3_1445.17" "idr_{APPLY_0}4_1446.17" "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{main_2}_1}") ->
                "idr_Main.{main_2}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{main_3}_1}") ->
                "idr_Main.{main_3}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{main_4}_1}") ->
                "idr_Main.{main_4}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{main_5}_1}") ->
                "idr_Main.{main_5}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{main_6}_1}") ->
                "idr_Main.{main_6}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{main_8}_1}") ->
                "idr_Main.{main_8}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.17") ->
                "idr_Main.{main_9}" "idr_{APPLY_0}2_1447.17" "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.17" "idr_{APPLY_0}3_1449.17") ->
                "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.17" "idr_{APPLY_0}3_1449.17" "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.17" "idr_{APPLY_0}3_1451.17") ->
                "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.17" "idr_{APPLY_0}3_1451.17" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Chars.isDigit_1}") ->
                idr_Prelude.Chars.isDigit "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.17" "idr_{APPLY_0}3_1453.17") ->
                idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_1452.17" "idr_{APPLY_0}3_1453.17" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.17") ->
                "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}" "idr_{APPLY_0}2_1454.17" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
                "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
                "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
                "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
                "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
                "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
                "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
                "idr_Prelude.Show.{showLitChar_21}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
                "idr_Prelude.Show.{showLitChar_22}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
                "idr_Prelude.Show.{showLitChar_23}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
                "idr_Prelude.Show.{showLitChar_24}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
                "idr_Prelude.Show.{showLitChar_25}" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.17") ->
                "idr_Prelude.Show.{showLitChar_26}" "idr_{APPLY_0}2_1455.17" "idr_{APPLY_0}1.17"
              (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.17") ->
                "idr_Prelude.Show.{showLitChar_27}" "idr_{APPLY_0}2_1456.17" "idr_{APPLY_0}1.17"
              (C"idr_{U_prim__floatToStr_1}") ->
                idr_prim__floatToStr "idr_{APPLY_0}1.17"
              (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.17") ->
                idr_prim__strCons "idr_{APPLY_0}2_1457.17" "idr_{APPLY_0}1.17"
              (C"idr_{U_prim__toStrInt_1}") ->
                idr_prim__toStrInt "idr_{APPLY_0}1.17"
              (C"idr_{U_Main.{main_9}_2}") ->
                pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.17") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.17")
              (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
                pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.17") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.17")
              #default ->
                pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1547"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val" <- pure (CGrString #", ")
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1546" <- idris_str_concat "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1548" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1546"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val" <- idris_str_concat "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1548"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1549" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1549" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
    (Cidr_Prelude.List.Nil) ->
      do
        (CGrString unboxed.CGrString.2) <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"
        pure unboxed.CGrString.2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString unboxed.CGrString.2)

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" <- pure (Cidr_Prelude.Bool.True)
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" of
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val" <- do
    unboxed.CGrInt.101 <- do
      (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.210.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01"
      idris_int_eq.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.210.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.210.arity.1")
    pure (CGrInt unboxed.CGrInt.101) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.101)
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_1551" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_1551" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val" <- do
            unboxed.CGrInt.102 <- do
              (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.211.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01"
              idris_int_lt.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.211.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.211.arity.1")
            pure (CGrInt unboxed.CGrInt.102) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.102)
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_1552" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_1552" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_1553") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_1553" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)

"idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:02" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:03" =
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04_val" <- pure (CGrString #"[")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_1564" <- pure (CErased)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_1564"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val" <- pure (CErased)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07_val" <- pure (CGrString #"")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val_1565" <- pure (CErased)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val_1565"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:09_val" <- pure (CErased)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:09" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:09_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:010_val" <- pure (CErased)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:010" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:010_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011_val" <- pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012_val" <- pure (Cidr_Prelude.List.Nil)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013_val" <- pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val" <- idr_Data.Vect.foldrImpl "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:03"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_1566" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_1563" <- do
    unboxed.CGrString.244 <- "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:02" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_1566"
    pure (CGrString unboxed.CGrString.244) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.244)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1567" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_1563"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val_1568" <- pure (CGrString #"]")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_1569" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val_1568"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val" <- idris_str_concat "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1567" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_1569"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1570" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val"
  idris_str_concat "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1570"

idr_Prelude.Show.showLitChar:asciiTab:10 =
  idr_Prelude.Show.showLitChar:asciiTab:101_val <- pure (CGrString #"NUL")
  idr_Prelude.Show.showLitChar:asciiTab:101 <- store idr_Prelude.Show.showLitChar:asciiTab:101_val
  idr_Prelude.Show.showLitChar:asciiTab:102_val_1571 <- pure (CGrString #"SOH")
  idr_Prelude.Show.showLitChar:asciiTab:102 <- store idr_Prelude.Show.showLitChar:asciiTab:102_val_1571
  idr_Prelude.Show.showLitChar:asciiTab:103_val_1572 <- pure (CGrString #"STX")
  idr_Prelude.Show.showLitChar:asciiTab:103 <- store idr_Prelude.Show.showLitChar:asciiTab:103_val_1572
  idr_Prelude.Show.showLitChar:asciiTab:104_val_1573 <- pure (CGrString #"ETX")
  idr_Prelude.Show.showLitChar:asciiTab:104 <- store idr_Prelude.Show.showLitChar:asciiTab:104_val_1573
  idr_Prelude.Show.showLitChar:asciiTab:105_val_1574 <- pure (CGrString #"EOT")
  idr_Prelude.Show.showLitChar:asciiTab:105 <- store idr_Prelude.Show.showLitChar:asciiTab:105_val_1574
  idr_Prelude.Show.showLitChar:asciiTab:106_val_1575 <- pure (CGrString #"ENQ")
  idr_Prelude.Show.showLitChar:asciiTab:106 <- store idr_Prelude.Show.showLitChar:asciiTab:106_val_1575
  idr_Prelude.Show.showLitChar:asciiTab:107_val_1576 <- pure (CGrString #"ACK")
  idr_Prelude.Show.showLitChar:asciiTab:107 <- store idr_Prelude.Show.showLitChar:asciiTab:107_val_1576
  idr_Prelude.Show.showLitChar:asciiTab:108_val_1577 <- pure (CGrString #"BEL")
  idr_Prelude.Show.showLitChar:asciiTab:108 <- store idr_Prelude.Show.showLitChar:asciiTab:108_val_1577
  idr_Prelude.Show.showLitChar:asciiTab:109_val_1578 <- pure (CGrString #"BS")
  idr_Prelude.Show.showLitChar:asciiTab:109 <- store idr_Prelude.Show.showLitChar:asciiTab:109_val_1578
  idr_Prelude.Show.showLitChar:asciiTab:1010_val_1579 <- pure (CGrString #"HT")
  idr_Prelude.Show.showLitChar:asciiTab:1010 <- store idr_Prelude.Show.showLitChar:asciiTab:1010_val_1579
  idr_Prelude.Show.showLitChar:asciiTab:1011_val_1580 <- pure (CGrString #"LF")
  idr_Prelude.Show.showLitChar:asciiTab:1011 <- store idr_Prelude.Show.showLitChar:asciiTab:1011_val_1580
  idr_Prelude.Show.showLitChar:asciiTab:1012_val_1581 <- pure (CGrString #"VT")
  idr_Prelude.Show.showLitChar:asciiTab:1012 <- store idr_Prelude.Show.showLitChar:asciiTab:1012_val_1581
  idr_Prelude.Show.showLitChar:asciiTab:1013_val_1582 <- pure (CGrString #"FF")
  idr_Prelude.Show.showLitChar:asciiTab:1013 <- store idr_Prelude.Show.showLitChar:asciiTab:1013_val_1582
  idr_Prelude.Show.showLitChar:asciiTab:1014_val_1583 <- pure (CGrString #"CR")
  idr_Prelude.Show.showLitChar:asciiTab:1014 <- store idr_Prelude.Show.showLitChar:asciiTab:1014_val_1583
  idr_Prelude.Show.showLitChar:asciiTab:1015_val_1584 <- pure (CGrString #"SO")
  idr_Prelude.Show.showLitChar:asciiTab:1015 <- store idr_Prelude.Show.showLitChar:asciiTab:1015_val_1584
  idr_Prelude.Show.showLitChar:asciiTab:1016_val_1585 <- pure (CGrString #"SI")
  idr_Prelude.Show.showLitChar:asciiTab:1016 <- store idr_Prelude.Show.showLitChar:asciiTab:1016_val_1585
  idr_Prelude.Show.showLitChar:asciiTab:1017_val_1586 <- pure (CGrString #"DLE")
  idr_Prelude.Show.showLitChar:asciiTab:1017 <- store idr_Prelude.Show.showLitChar:asciiTab:1017_val_1586
  idr_Prelude.Show.showLitChar:asciiTab:1018_val_1587 <- pure (CGrString #"DC1")
  idr_Prelude.Show.showLitChar:asciiTab:1018 <- store idr_Prelude.Show.showLitChar:asciiTab:1018_val_1587
  idr_Prelude.Show.showLitChar:asciiTab:1019_val_1588 <- pure (CGrString #"DC2")
  idr_Prelude.Show.showLitChar:asciiTab:1019 <- store idr_Prelude.Show.showLitChar:asciiTab:1019_val_1588
  idr_Prelude.Show.showLitChar:asciiTab:1020_val_1589 <- pure (CGrString #"DC3")
  idr_Prelude.Show.showLitChar:asciiTab:1020 <- store idr_Prelude.Show.showLitChar:asciiTab:1020_val_1589
  idr_Prelude.Show.showLitChar:asciiTab:1021_val_1590 <- pure (CGrString #"DC4")
  idr_Prelude.Show.showLitChar:asciiTab:1021 <- store idr_Prelude.Show.showLitChar:asciiTab:1021_val_1590
  idr_Prelude.Show.showLitChar:asciiTab:1022_val_1591 <- pure (CGrString #"NAK")
  idr_Prelude.Show.showLitChar:asciiTab:1022 <- store idr_Prelude.Show.showLitChar:asciiTab:1022_val_1591
  idr_Prelude.Show.showLitChar:asciiTab:1023_val_1592 <- pure (CGrString #"SYN")
  idr_Prelude.Show.showLitChar:asciiTab:1023 <- store idr_Prelude.Show.showLitChar:asciiTab:1023_val_1592
  idr_Prelude.Show.showLitChar:asciiTab:1024_val_1593 <- pure (CGrString #"ETB")
  idr_Prelude.Show.showLitChar:asciiTab:1024 <- store idr_Prelude.Show.showLitChar:asciiTab:1024_val_1593
  idr_Prelude.Show.showLitChar:asciiTab:1025_val_1594 <- pure (CGrString #"CAN")
  idr_Prelude.Show.showLitChar:asciiTab:1025 <- store idr_Prelude.Show.showLitChar:asciiTab:1025_val_1594
  idr_Prelude.Show.showLitChar:asciiTab:1026_val_1595 <- pure (CGrString #"EM")
  idr_Prelude.Show.showLitChar:asciiTab:1026 <- store idr_Prelude.Show.showLitChar:asciiTab:1026_val_1595
  idr_Prelude.Show.showLitChar:asciiTab:1027_val_1596 <- pure (CGrString #"SUB")
  idr_Prelude.Show.showLitChar:asciiTab:1027 <- store idr_Prelude.Show.showLitChar:asciiTab:1027_val_1596
  idr_Prelude.Show.showLitChar:asciiTab:1028_val_1597 <- pure (CGrString #"ESC")
  idr_Prelude.Show.showLitChar:asciiTab:1028 <- store idr_Prelude.Show.showLitChar:asciiTab:1028_val_1597
  idr_Prelude.Show.showLitChar:asciiTab:1029_val_1598 <- pure (CGrString #"FS")
  idr_Prelude.Show.showLitChar:asciiTab:1029 <- store idr_Prelude.Show.showLitChar:asciiTab:1029_val_1598
  idr_Prelude.Show.showLitChar:asciiTab:1030_val_1599 <- pure (CGrString #"GS")
  idr_Prelude.Show.showLitChar:asciiTab:1030 <- store idr_Prelude.Show.showLitChar:asciiTab:1030_val_1599
  idr_Prelude.Show.showLitChar:asciiTab:1031_val_1600 <- pure (CGrString #"RS")
  idr_Prelude.Show.showLitChar:asciiTab:1031 <- store idr_Prelude.Show.showLitChar:asciiTab:1031_val_1600
  idr_Prelude.Show.showLitChar:asciiTab:1032_val_1601 <- pure (CGrString #"US")
  idr_Prelude.Show.showLitChar:asciiTab:1032 <- store idr_Prelude.Show.showLitChar:asciiTab:1032_val_1601
  idr_Prelude.Show.showLitChar:asciiTab:1033_val <- pure (Cidr_Prelude.List.Nil)
  idr_Prelude.Show.showLitChar:asciiTab:1033 <- store idr_Prelude.Show.showLitChar:asciiTab:1033_val
  idr_Prelude.Show.showLitChar:asciiTab:1032_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1032 idr_Prelude.Show.showLitChar:asciiTab:1033)
  idr_Prelude.Show.showLitChar:asciiTab:1032_1602 <- store idr_Prelude.Show.showLitChar:asciiTab:1032_val
  idr_Prelude.Show.showLitChar:asciiTab:1031_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1031 idr_Prelude.Show.showLitChar:asciiTab:1032_1602)
  idr_Prelude.Show.showLitChar:asciiTab:1031_1603 <- store idr_Prelude.Show.showLitChar:asciiTab:1031_val
  idr_Prelude.Show.showLitChar:asciiTab:1030_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1030 idr_Prelude.Show.showLitChar:asciiTab:1031_1603)
  idr_Prelude.Show.showLitChar:asciiTab:1030_1604 <- store idr_Prelude.Show.showLitChar:asciiTab:1030_val
  idr_Prelude.Show.showLitChar:asciiTab:1029_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1029 idr_Prelude.Show.showLitChar:asciiTab:1030_1604)
  idr_Prelude.Show.showLitChar:asciiTab:1029_1605 <- store idr_Prelude.Show.showLitChar:asciiTab:1029_val
  idr_Prelude.Show.showLitChar:asciiTab:1028_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1028 idr_Prelude.Show.showLitChar:asciiTab:1029_1605)
  idr_Prelude.Show.showLitChar:asciiTab:1028_1606 <- store idr_Prelude.Show.showLitChar:asciiTab:1028_val
  idr_Prelude.Show.showLitChar:asciiTab:1027_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1027 idr_Prelude.Show.showLitChar:asciiTab:1028_1606)
  idr_Prelude.Show.showLitChar:asciiTab:1027_1607 <- store idr_Prelude.Show.showLitChar:asciiTab:1027_val
  idr_Prelude.Show.showLitChar:asciiTab:1026_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1026 idr_Prelude.Show.showLitChar:asciiTab:1027_1607)
  idr_Prelude.Show.showLitChar:asciiTab:1026_1608 <- store idr_Prelude.Show.showLitChar:asciiTab:1026_val
  idr_Prelude.Show.showLitChar:asciiTab:1025_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1025 idr_Prelude.Show.showLitChar:asciiTab:1026_1608)
  idr_Prelude.Show.showLitChar:asciiTab:1025_1609 <- store idr_Prelude.Show.showLitChar:asciiTab:1025_val
  idr_Prelude.Show.showLitChar:asciiTab:1024_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1024 idr_Prelude.Show.showLitChar:asciiTab:1025_1609)
  idr_Prelude.Show.showLitChar:asciiTab:1024_1610 <- store idr_Prelude.Show.showLitChar:asciiTab:1024_val
  idr_Prelude.Show.showLitChar:asciiTab:1023_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1023 idr_Prelude.Show.showLitChar:asciiTab:1024_1610)
  idr_Prelude.Show.showLitChar:asciiTab:1023_1611 <- store idr_Prelude.Show.showLitChar:asciiTab:1023_val
  idr_Prelude.Show.showLitChar:asciiTab:1022_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1022 idr_Prelude.Show.showLitChar:asciiTab:1023_1611)
  idr_Prelude.Show.showLitChar:asciiTab:1022_1612 <- store idr_Prelude.Show.showLitChar:asciiTab:1022_val
  idr_Prelude.Show.showLitChar:asciiTab:1021_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1021 idr_Prelude.Show.showLitChar:asciiTab:1022_1612)
  idr_Prelude.Show.showLitChar:asciiTab:1021_1613 <- store idr_Prelude.Show.showLitChar:asciiTab:1021_val
  idr_Prelude.Show.showLitChar:asciiTab:1020_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1020 idr_Prelude.Show.showLitChar:asciiTab:1021_1613)
  idr_Prelude.Show.showLitChar:asciiTab:1020_1614 <- store idr_Prelude.Show.showLitChar:asciiTab:1020_val
  idr_Prelude.Show.showLitChar:asciiTab:1019_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1019 idr_Prelude.Show.showLitChar:asciiTab:1020_1614)
  idr_Prelude.Show.showLitChar:asciiTab:1019_1615 <- store idr_Prelude.Show.showLitChar:asciiTab:1019_val
  idr_Prelude.Show.showLitChar:asciiTab:1018_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1018 idr_Prelude.Show.showLitChar:asciiTab:1019_1615)
  idr_Prelude.Show.showLitChar:asciiTab:1018_1616 <- store idr_Prelude.Show.showLitChar:asciiTab:1018_val
  idr_Prelude.Show.showLitChar:asciiTab:1017_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1017 idr_Prelude.Show.showLitChar:asciiTab:1018_1616)
  idr_Prelude.Show.showLitChar:asciiTab:1017_1617 <- store idr_Prelude.Show.showLitChar:asciiTab:1017_val
  idr_Prelude.Show.showLitChar:asciiTab:1016_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1016 idr_Prelude.Show.showLitChar:asciiTab:1017_1617)
  idr_Prelude.Show.showLitChar:asciiTab:1016_1618 <- store idr_Prelude.Show.showLitChar:asciiTab:1016_val
  idr_Prelude.Show.showLitChar:asciiTab:1015_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1015 idr_Prelude.Show.showLitChar:asciiTab:1016_1618)
  idr_Prelude.Show.showLitChar:asciiTab:1015_1619 <- store idr_Prelude.Show.showLitChar:asciiTab:1015_val
  idr_Prelude.Show.showLitChar:asciiTab:1014_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1014 idr_Prelude.Show.showLitChar:asciiTab:1015_1619)
  idr_Prelude.Show.showLitChar:asciiTab:1014_1620 <- store idr_Prelude.Show.showLitChar:asciiTab:1014_val
  idr_Prelude.Show.showLitChar:asciiTab:1013_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1013 idr_Prelude.Show.showLitChar:asciiTab:1014_1620)
  idr_Prelude.Show.showLitChar:asciiTab:1013_1621 <- store idr_Prelude.Show.showLitChar:asciiTab:1013_val
  idr_Prelude.Show.showLitChar:asciiTab:1012_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1012 idr_Prelude.Show.showLitChar:asciiTab:1013_1621)
  idr_Prelude.Show.showLitChar:asciiTab:1012_1622 <- store idr_Prelude.Show.showLitChar:asciiTab:1012_val
  idr_Prelude.Show.showLitChar:asciiTab:1011_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1011 idr_Prelude.Show.showLitChar:asciiTab:1012_1622)
  idr_Prelude.Show.showLitChar:asciiTab:1011_1623 <- store idr_Prelude.Show.showLitChar:asciiTab:1011_val
  idr_Prelude.Show.showLitChar:asciiTab:1010_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1010 idr_Prelude.Show.showLitChar:asciiTab:1011_1623)
  idr_Prelude.Show.showLitChar:asciiTab:1010_1624 <- store idr_Prelude.Show.showLitChar:asciiTab:1010_val
  idr_Prelude.Show.showLitChar:asciiTab:109_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:109 idr_Prelude.Show.showLitChar:asciiTab:1010_1624)
  idr_Prelude.Show.showLitChar:asciiTab:109_1625 <- store idr_Prelude.Show.showLitChar:asciiTab:109_val
  idr_Prelude.Show.showLitChar:asciiTab:108_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:108 idr_Prelude.Show.showLitChar:asciiTab:109_1625)
  idr_Prelude.Show.showLitChar:asciiTab:108_1626 <- store idr_Prelude.Show.showLitChar:asciiTab:108_val
  idr_Prelude.Show.showLitChar:asciiTab:107_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:107 idr_Prelude.Show.showLitChar:asciiTab:108_1626)
  idr_Prelude.Show.showLitChar:asciiTab:107_1627 <- store idr_Prelude.Show.showLitChar:asciiTab:107_val
  idr_Prelude.Show.showLitChar:asciiTab:106_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:106 idr_Prelude.Show.showLitChar:asciiTab:107_1627)
  idr_Prelude.Show.showLitChar:asciiTab:106_1628 <- store idr_Prelude.Show.showLitChar:asciiTab:106_val
  idr_Prelude.Show.showLitChar:asciiTab:105_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:105 idr_Prelude.Show.showLitChar:asciiTab:106_1628)
  idr_Prelude.Show.showLitChar:asciiTab:105_1629 <- store idr_Prelude.Show.showLitChar:asciiTab:105_val
  idr_Prelude.Show.showLitChar:asciiTab:104_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:104 idr_Prelude.Show.showLitChar:asciiTab:105_1629)
  idr_Prelude.Show.showLitChar:asciiTab:104_1630 <- store idr_Prelude.Show.showLitChar:asciiTab:104_val
  idr_Prelude.Show.showLitChar:asciiTab:103_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:103 idr_Prelude.Show.showLitChar:asciiTab:104_1630)
  idr_Prelude.Show.showLitChar:asciiTab:103_1631 <- store idr_Prelude.Show.showLitChar:asciiTab:103_val
  idr_Prelude.Show.showLitChar:asciiTab:102_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:102 idr_Prelude.Show.showLitChar:asciiTab:103_1631)
  idr_Prelude.Show.showLitChar:asciiTab:102_1632 <- store idr_Prelude.Show.showLitChar:asciiTab:102_val
  pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:101 idr_Prelude.Show.showLitChar:asciiTab:102_1632) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:101 idr_Prelude.Show.showLitChar:asciiTab:102_1632)

idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:101 idr_Prelude.Show.showLitChar:getAt:102 =
  idr_Prelude.Show.showLitChar:getAt:102_val <- fetch idr_Prelude.Show.showLitChar:getAt:102
  case idr_Prelude.Show.showLitChar:getAt:102_val of
    (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:getAt:103 idr_Prelude.Show.showLitChar:getAt:104) ->
      idr_Prelude.Show.showLitChar:getAt:101_val <- fetch idr_Prelude.Show.showLitChar:getAt:101
      case idr_Prelude.Show.showLitChar:getAt:101_val of
        (CGrInt idr_Prelude.Show.showLitChar:getAt:10_cpat_LInt64_0) ->
          case idr_Prelude.Show.showLitChar:getAt:10_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar:getAt:103) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar:getAt:103)
            #default ->
              idr_Prelude.Show.showLitChar:getAt:105_val_1633 <- pure (CGrInt 1)
              idr_Prelude.Show.showLitChar:getAt:105 <- store idr_Prelude.Show.showLitChar:getAt:105_val_1633
              idr_Prelude.Show.showLitChar:getAt:105_val <- do
                unboxed.CGrInt.105 <- do
                  (CGrInt idr_Prelude.Show.showLitChar:getAt:101.41.214.arity.1) <- fetch idr_Prelude.Show.showLitChar:getAt:101
                  (CGrInt idr_Prelude.Show.showLitChar:getAt:105.41.214.arity.1) <- fetch idr_Prelude.Show.showLitChar:getAt:105
                  do
                    idris_int_sub0.41.arity.1.1 <- pure idr_Prelude.Show.showLitChar:getAt:101.41.214.arity.1
                    idris_int_sub1.41.arity.1.1 <- pure idr_Prelude.Show.showLitChar:getAt:105.41.214.arity.1
                    (CGrInt idris_int_sub0_1.1) <- pure (CGrInt idris_int_sub0.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                    (CGrInt idris_int_sub1_1.1) <- pure (CGrInt idris_int_sub1.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                    idris_int_sub2.1 <- _prim_int_sub idris_int_sub0_1.1 idris_int_sub1_1.1
                    pure idris_int_sub2.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.showLitChar:getAt:105.41.214.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.showLitChar:getAt:101.41.214.arity.1)
                pure (CGrInt unboxed.CGrInt.105) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.105)
              idr_Prelude.Show.showLitChar:getAt:105_1634 <- store idr_Prelude.Show.showLitChar:getAt:105_val
              idr_Prelude.Show.showLitChar:getAt:106_val <- pure (CErased)
              idr_Prelude.Show.showLitChar:getAt:106 <- store idr_Prelude.Show.showLitChar:getAt:106_val
              idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:105_1634 idr_Prelude.Show.showLitChar:getAt:104
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)

idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_361 =
  idr__Prelude.Strings.unpack_with_361_val <- fetch idr__Prelude.Strings.unpack_with_361
  case idr__Prelude.Strings.unpack_with_361_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_363) ->
      idr__Prelude.Strings.unpack_with_364_val_1641 <- pure (CErased)
      idr__Prelude.Strings.unpack_with_364 <- store idr__Prelude.Strings.unpack_with_364_val_1641
      idr__Prelude.Strings.unpack_with_365_val_1645 <- pure (CGrString #"")
      idr__Prelude.Strings.unpack_with_365 <- store idr__Prelude.Strings.unpack_with_365_val_1645
      idr__Prelude.Strings.unpack_with_365_val_1644 <- do
        unboxed.CGrInt.106 <- do
          (CGrString idr__Prelude.Strings.unpack_with_365.41.215.arity.1) <- fetch idr__Prelude.Strings.unpack_with_365
          idris_str_eq.unboxed idr__Prelude.Strings.unpack_with_363 idr__Prelude.Strings.unpack_with_365.41.215.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.unpack_with_365.41.215.arity.1)
        pure (CGrInt unboxed.CGrInt.106) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.106)
      idr__Prelude.Strings.unpack_with_365_1646 <- store idr__Prelude.Strings.unpack_with_365_val_1644
      idr__Prelude.Strings.unpack_with_365_val_1647 <- fetch idr__Prelude.Strings.unpack_with_365_1646
      idr__Prelude.Strings.unpack_with_365_val_1643 <- case idr__Prelude.Strings.unpack_with_365_val_1647 of
        (CGrInt idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0) ->
          case idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr__Prelude.Strings.unpack_with_365_1648 <- store idr__Prelude.Strings.unpack_with_365_val_1643
      idr__Prelude.Strings.unpack_with_366_val <- pure (Cidr_Prelude.Bool.True)
      idr__Prelude.Strings.unpack_with_366 <- store idr__Prelude.Strings.unpack_with_366_val
      idr__Prelude.Strings.unpack_with_365_val_1642 <- do
        (Cidr_Prelude.Bool.True) <- fetch idr__Prelude.Strings.unpack_with_366
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr__Prelude.Strings.unpack_with_365_1648 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
      idr__Prelude.Strings.unpack_with_365_1649 <- store idr__Prelude.Strings.unpack_with_365_val_1642
      idr__Prelude.Strings.unpack_with_365_val_1650 <- fetch idr__Prelude.Strings.unpack_with_365_1649
      idr__Prelude.Strings.unpack_with_365_val <- case idr__Prelude.Strings.unpack_with_365_val_1650 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr__Prelude.Strings.unpack_with_366_val_1651 <- do
            unboxed.CGrInt.107 <- idris_str_head.unboxed idr__Prelude.Strings.unpack_with_363
            pure (CGrInt unboxed.CGrInt.107) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.107)
          idr__Prelude.Strings.unpack_with_366_1652 <- store idr__Prelude.Strings.unpack_with_366_val_1651
          idr__Prelude.Strings.unpack_with_367_val <- do
            unboxed.CGrString.245 <- idris_str_tail.unboxed idr__Prelude.Strings.unpack_with_363
            pure (CGrString unboxed.CGrString.245) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.245)
          idr__Prelude.Strings.unpack_with_367 <- store idr__Prelude.Strings.unpack_with_367_val
          pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_1652 idr__Prelude.Strings.unpack_with_367) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_1652 idr__Prelude.Strings.unpack_with_367)
      idr__Prelude.Strings.unpack_with_365_1653 <- store idr__Prelude.Strings.unpack_with_365_val
      idr__Prelude.Strings.unpack_with_364_val <- idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_365_1653
      idr__Prelude.Strings.unpack_with_364_1654 <- store idr__Prelude.Strings.unpack_with_364_val
      pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_1654) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_1654)
    (Cidr_Prelude.Strings.StrNil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)

idr__Prelude.Strings.ltrim_with_55.unboxed idr__Prelude.Strings.ltrim_with_551 =
  idr__Prelude.Strings.ltrim_with_551_val <- fetch idr__Prelude.Strings.ltrim_with_551
  case idr__Prelude.Strings.ltrim_with_551_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.ltrim_with_552 idr__Prelude.Strings.ltrim_with_553) ->
      idr__Prelude.Strings.ltrim_with_554_val <- idr_Prelude.Chars.isSpace idr__Prelude.Strings.ltrim_with_552
      idr__Prelude.Strings.ltrim_with_554 <- store idr__Prelude.Strings.ltrim_with_554_val
      idr__Prelude.Strings.ltrim_with_554_val_1655 <- fetch idr__Prelude.Strings.ltrim_with_554
      case idr__Prelude.Strings.ltrim_with_554_val_1655 of
        (Cidr_Prelude.Bool.False) ->
          do
            (CGrString unboxed.CGrString.3) <- do
              (CGrInt idr__Prelude.Strings.ltrim_with_552.41.217.arity.1) <- fetch idr__Prelude.Strings.ltrim_with_552
              idris_str_cons idr__Prelude.Strings.ltrim_with_552.41.217.arity.1 idr__Prelude.Strings.ltrim_with_553 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr__Prelude.Strings.ltrim_with_552.41.217.arity.1)
            pure unboxed.CGrString.3
        (Cidr_Prelude.Bool.True) ->
          idr__Prelude.Strings.ltrim_with_555_val <- pure (CErased)
          idr__Prelude.Strings.ltrim_with_555 <- store idr__Prelude.Strings.ltrim_with_555_val
          idr__Prelude.Strings.ltrim_with_556_val_1659 <- pure (CGrString #"")
          idr__Prelude.Strings.ltrim_with_556 <- store idr__Prelude.Strings.ltrim_with_556_val_1659
          idr__Prelude.Strings.ltrim_with_556_val_1658 <- do
            unboxed.CGrInt.108 <- do
              (CGrString idr__Prelude.Strings.ltrim_with_556.41.218.arity.1) <- fetch idr__Prelude.Strings.ltrim_with_556
              idris_str_eq.unboxed idr__Prelude.Strings.ltrim_with_553 idr__Prelude.Strings.ltrim_with_556.41.218.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.ltrim_with_556.41.218.arity.1)
            pure (CGrInt unboxed.CGrInt.108) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.108)
          idr__Prelude.Strings.ltrim_with_556_1660 <- store idr__Prelude.Strings.ltrim_with_556_val_1658
          idr__Prelude.Strings.ltrim_with_556_val_1661 <- fetch idr__Prelude.Strings.ltrim_with_556_1660
          idr__Prelude.Strings.ltrim_with_556_val_1657 <- case idr__Prelude.Strings.ltrim_with_556_val_1661 of
            (CGrInt idr__Prelude.Strings.ltrim_with_55_cpat_LInt64_0) ->
              case idr__Prelude.Strings.ltrim_with_55_cpat_LInt64_0 of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr__Prelude.Strings.ltrim_with_556_1662 <- store idr__Prelude.Strings.ltrim_with_556_val_1657
          idr__Prelude.Strings.ltrim_with_557_val <- pure (Cidr_Prelude.Bool.True)
          idr__Prelude.Strings.ltrim_with_557 <- store idr__Prelude.Strings.ltrim_with_557_val
          idr__Prelude.Strings.ltrim_with_556_val_1656 <- do
            (Cidr_Prelude.Bool.True) <- fetch idr__Prelude.Strings.ltrim_with_557
            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr__Prelude.Strings.ltrim_with_556_1662 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
          idr__Prelude.Strings.ltrim_with_556_1663 <- store idr__Prelude.Strings.ltrim_with_556_val_1656
          idr__Prelude.Strings.ltrim_with_556_val_1664 <- fetch idr__Prelude.Strings.ltrim_with_556_1663
          idr__Prelude.Strings.ltrim_with_556_val <- case idr__Prelude.Strings.ltrim_with_556_val_1664 of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
            (Cidr_Prelude.Basics.Yes) ->
              idr__Prelude.Strings.ltrim_with_557_val_1665 <- do
                unboxed.CGrInt.109 <- idris_str_head.unboxed idr__Prelude.Strings.ltrim_with_553
                pure (CGrInt unboxed.CGrInt.109) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.109)
              idr__Prelude.Strings.ltrim_with_557_1666 <- store idr__Prelude.Strings.ltrim_with_557_val_1665
              idr__Prelude.Strings.ltrim_with_558_val <- do
                unboxed.CGrString.246 <- idris_str_tail.unboxed idr__Prelude.Strings.ltrim_with_553
                pure (CGrString unboxed.CGrString.246) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.246)
              idr__Prelude.Strings.ltrim_with_558 <- store idr__Prelude.Strings.ltrim_with_558_val
              pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.ltrim_with_557_1666 idr__Prelude.Strings.ltrim_with_558) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.ltrim_with_557_1666 idr__Prelude.Strings.ltrim_with_558)
          idr__Prelude.Strings.ltrim_with_556_1667 <- store idr__Prelude.Strings.ltrim_with_556_val
          idr__Prelude.Strings.ltrim_with_55.unboxed idr__Prelude.Strings.ltrim_with_556_1667
    (Cidr_Prelude.Strings.StrNil) ->
      pure #""
