grinMain =
  idr_Main.main3_val.0 <- pure (C"idr_{U_Main.{main_3}_1}")
  idr_Main.main3.0 <- store idr_Main.main3_val.0
  idr_Main.tri0_val_488.0 <- pure (CGrFloat 0.0)
  idr_Main.tri0.0 <- store idr_Main.tri0_val_488.0
  idr_Main.tri1_val.0 <- pure idr_Main.tri0_val_488.0
  idr_Main.tri1.0 <- store idr_Main.tri1_val.0
  idr_Main.tri0_val.0 <- pure (Cidr_Builtins.MkPair idr_Main.tri0.0 idr_Main.tri1.0)
  idr_Main.tri0_489.0 <- store idr_Main.tri0_val.0
  idr_Main.tri1_val_492.0 <- pure (CGrFloat 3.0)
  idr_Main.tri1_493.0 <- store idr_Main.tri1_val_492.0
  idr_Main.tri2_val.0 <- pure idr_Main.tri0_val_488.0
  idr_Main.tri2_494.0 <- store idr_Main.tri2_val.0
  idr_Main.tri1_val_491.0 <- pure (Cidr_Builtins.MkPair idr_Main.tri1_493.0 idr_Main.tri2_494.0)
  idr_Main.tri1_495.0 <- store idr_Main.tri1_val_491.0
  idr_Main.tri2_val_498.0 <- pure idr_Main.tri0_val_488.0
  idr_Main.tri2_499.0 <- store idr_Main.tri2_val_498.0
  idr_Main.tri3_val.0 <- pure (CGrFloat 4.0)
  idr_Main.tri3.0 <- store idr_Main.tri3_val.0
  idr_Main.tri2_val_497.0 <- pure (Cidr_Builtins.MkPair idr_Main.tri2_499.0 idr_Main.tri3.0)
  idr_Main.tri2_500.0 <- store idr_Main.tri2_val_497.0
  idr_Main.tri3_val_501.0 <- pure (Cidr_Data.Vect.Nil)
  idr_Main.tri3_502.0 <- store idr_Main.tri3_val_501.0
  idr_Main.tri2_val_496.0 <- pure (Cidr_Data.Vect.:: idr_Main.tri2_500.0 idr_Main.tri3_502.0)
  idr_Main.tri2_503.0 <- store idr_Main.tri2_val_496.0
  idr_Main.tri1_val_490.0 <- pure (Cidr_Data.Vect.:: idr_Main.tri1_495.0 idr_Main.tri2_503.0)
  idr_Main.tri1_504.0 <- store idr_Main.tri1_val_490.0
  idr_Main.main4_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.tri0_489.0 idr_Main.tri1_504.0)
  idr_Main.main4.0 <- store idr_Main.main4_val.0
  idr_Main.main1_val.0 <- idr_Prelude.Interactive.printLn' idr_Main.main3.0 idr_Main.main4.0
  idr_Main.main4_val_76.0 <- pure (C"idr_{U_Main.{main_5}_1}")
  idr_Main.main4_77.0 <- store idr_Main.main4_val_76.0
  idr_Main.tri20_val_505.0 <- pure idr_Main.tri0_val_488.0
  idr_Main.tri20.0 <- store idr_Main.tri20_val_505.0
  idr_Main.tri21_val.0 <- pure idr_Main.tri0_val_488.0
  idr_Main.tri21.0 <- store idr_Main.tri21_val.0
  idr_Main.tri20_val.0 <- pure (Cidr_Builtins.MkPair idr_Main.tri20.0 idr_Main.tri21.0)
  idr_Main.tri20_506.0 <- store idr_Main.tri20_val.0
  idr_Main.tri21_val_509.0 <- pure idr_Main.tri0_val_488.0
  idr_Main.tri21_510.0 <- store idr_Main.tri21_val_509.0
  idr_Main.tri22_val.0 <- pure idr_Main.tri0_val_488.0
  idr_Main.tri22.0 <- store idr_Main.tri22_val.0
  idr_Main.tri21_val_508.0 <- pure (Cidr_Builtins.MkPair idr_Main.tri21_510.0 idr_Main.tri22.0)
  idr_Main.tri21_511.0 <- store idr_Main.tri21_val_508.0
  idr_Main.tri22_val_514.0 <- pure idr_Main.tri0_val_488.0
  idr_Main.tri22_515.0 <- store idr_Main.tri22_val_514.0
  idr_Main.tri23_val.0 <- pure idr_Main.tri0_val_488.0
  idr_Main.tri23.0 <- store idr_Main.tri23_val.0
  idr_Main.tri22_val_513.0 <- pure (Cidr_Builtins.MkPair idr_Main.tri22_515.0 idr_Main.tri23.0)
  idr_Main.tri22_516.0 <- store idr_Main.tri22_val_513.0
  idr_Main.tri23_val_517.0 <- pure idr_Main.tri3_val_501.0
  idr_Main.tri23_518.0 <- store idr_Main.tri23_val_517.0
  idr_Main.tri22_val_512.0 <- pure (Cidr_Data.Vect.:: idr_Main.tri22_516.0 idr_Main.tri23_518.0)
  idr_Main.tri22_519.0 <- store idr_Main.tri22_val_512.0
  idr_Main.tri21_val_507.0 <- pure (Cidr_Data.Vect.:: idr_Main.tri21_511.0 idr_Main.tri22_519.0)
  idr_Main.tri21_520.0 <- store idr_Main.tri21_val_507.0
  idr_Main.main5_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.tri20_506.0 idr_Main.tri21_520.0)
  idr_Main.main5.0 <- store idr_Main.main5_val.0
  idr_Main.main2_val_71.0 <- idr_Prelude.Interactive.printLn' idr_Main.main4_77.0 idr_Main.main5.0
  idr_Main.main5_val_84.0 <- pure (C"idr_{U_Main.{main_6}_1}")
  idr_Main.main5_85.0 <- store idr_Main.main5_val_84.0
  idr_Main.main6_val_86.0 <- pure (CGrString #"  string  ")
  idr_Main.main6.0 <- store idr_Main.main6_val_86.0
  (CGrString idr_Main.main6.49.11.arity.1.0) <- pure idr_Main.main6_val_86.0
  idr_Prelude.Strings.trim0.49.arity.1.0 <- pure idr_Main.main6.49.11.arity.1.0
  (CGrString idr_Prelude.Strings.trim0.41.36.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_rev1.41.arity.1.0 <- pure idr_Prelude.Strings.trim0.41.36.arity.1.0
  (CGrString idris_str_rev1_0.0) <- pure (CGrString idris_str_rev1.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_rev2.0 <- _prim_string_reverse idris_str_rev1_0.0
  unboxed.CGrString.17.0 <- pure idris_str_rev2.0
  idr_Prelude.Strings.trim1_val_528.0 <- pure (CGrString unboxed.CGrString.17.0)
  idr_Prelude.Strings.trim1.0 <- store idr_Prelude.Strings.trim1_val_528.0
  idr_Prelude.Strings.trim2_val.0 <- pure (CGrString #"")
  idr_Prelude.Strings.trim2.0 <- store idr_Prelude.Strings.trim2_val.0
  (CGrString idr_Prelude.Strings.trim2.41.37.arity.1.0) <- pure idr_Prelude.Strings.trim2_val.0
  idris_str_eq1.0 <- pure idr_Prelude.Strings.trim1.0
  idris_str_eq2.41.arity.1.0 <- pure idr_Prelude.Strings.trim2.41.37.arity.1.0
  (CGrString idris_str_eq1_0.0) <- fetch idris_str_eq1.0
  (CGrString idris_str_eq2_0.0) <- pure (CGrString idris_str_eq2.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_eq3.0 <- _prim_string_eq idris_str_eq1_0.0 idris_str_eq2_0.0
  ccp.2.0 <- case idris_str_eq3.0 of
    #False ->
      pure 0
    #True ->
      pure 1
  unboxed.CGrInt.28.0 <- pure ccp.2.0
  idr_Prelude.Strings.trim1_val_527.0 <- pure (CGrInt unboxed.CGrInt.28.0)
  idr_Prelude.Strings.trim1_529.0 <- store idr_Prelude.Strings.trim1_val_527.0
  idr_Prelude.Strings.trim1_val_530.0 <- pure idr_Prelude.Strings.trim1_val_527.0
  idr_Prelude.Strings.trim1_val_526.0 <- case idr_Prelude.Strings.trim1_val_530.0 of
    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0.0) ->
      case idr_Prelude.Strings.trim_cpat_LInt64_0.0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Strings.trim1_531.0 <- store idr_Prelude.Strings.trim1_val_526.0
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.0" <- pure idr_Prelude.Strings.trim1_531.0
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" <- pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Strings.trim1_val_525.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.0" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.0"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.0" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
  idr_Prelude.Strings.trim1_534.0 <- store idr_Prelude.Strings.trim1_val_525.0
  idr_Prelude.Strings.trim1_val_535.0 <- pure idr_Prelude.Strings.trim1_val_525.0
  idr_Prelude.Strings.trim1_val_524.0 <- case idr_Prelude.Strings.trim1_val_535.0 of
    (Cidr_Prelude.Basics.No) ->
      pure idr_Prelude.Strings.trim2_val.0
    (Cidr_Prelude.Basics.Yes) ->
      (CGrString idr_Prelude.Strings.trim0.41.39.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_rev1.41.arity.1.1 <- pure idr_Prelude.Strings.trim0.41.39.arity.1.0
      (CGrString idris_str_rev1_0.1) <- pure (CGrString idris_str_rev1.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_rev2.1 <- _prim_string_reverse idris_str_rev1_0.1
      unboxed.CGrString.18.0 <- pure idris_str_rev2.1
      idr_Prelude.Strings.trim2_val_538.0 <- pure (CGrString unboxed.CGrString.18.0)
      idr_Prelude.Strings.trim2_539.0 <- store idr_Prelude.Strings.trim2_val_538.0
      idris_str_head1.0 <- pure idr_Prelude.Strings.trim2_539.0
      (CGrString idris_str_head1_0.0) <- fetch idris_str_head1.0
      idris_str_head2.0 <- _prim_string_head idris_str_head1_0.0
      unboxed.CGrInt.29.0 <- pure idris_str_head2.0
      idr_Prelude.Strings.trim2_val_537.0 <- pure (CGrInt unboxed.CGrInt.29.0)
      idr_Prelude.Strings.trim2_540.0 <- store idr_Prelude.Strings.trim2_val_537.0
      (CGrInt idr_Prelude.Strings.trim2_540.57.9.arity.1.0) <- pure idr_Prelude.Strings.trim2_val_537.0
      idr_Prelude.Chars.isSpace0.57.arity.1.0 <- pure idr_Prelude.Strings.trim2_540.57.9.arity.1.0
      idr_Prelude.Chars.isSpace1_val_27.0 <- pure (CGrInt 32)
      idr_Prelude.Chars.isSpace1.0 <- store idr_Prelude.Chars.isSpace1_val_27.0
      (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.0) <- pure idr_Prelude.Chars.isSpace1_val_27.0
      (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.0) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_int_eq0.49.arity.1.0.0 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.0
      idris_int_eq1.41.arity.1.0.0 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.0
      (CGrInt idris_int_eq0_1.0.0) <- pure (CGrInt idris_int_eq0.49.arity.1.0.0) -- LINT: Syntax error - expected SimpleExp without nodes
      (CGrInt idris_int_eq1_1.0.0) <- pure (CGrInt idris_int_eq1.41.arity.1.0.0) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_int_eq2.0.0 <- _prim_int_eq idris_int_eq0_1.0.0 idris_int_eq1_1.0.0
      ccp.0.0.0 <- case idris_int_eq2.0.0 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.4.0 <- pure ccp.0.0.0
      idr_Prelude.Chars.isSpace1_val.0 <- pure (CGrInt unboxed.CGrInt.4.0)
      idr_Prelude.Chars.isSpace1_28.0 <- store idr_Prelude.Chars.isSpace1_val.0
      idr_Prelude.Chars.isSpace1_val_29.0 <- pure idr_Prelude.Chars.isSpace1_val.0
      idr_Prelude.Strings.trim2_val_536.0 <- case idr_Prelude.Chars.isSpace1_val_29.0 of
        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.0) ->
          case idr_Prelude.Chars.isSpace_cpat_LInt64_0.0 of
            0 ->
              idr_Prelude.Chars.isSpace2_val_30.0 <- pure (CGrInt 9)
              idr_Prelude.Chars.isSpace2.0 <- store idr_Prelude.Chars.isSpace2_val_30.0
              (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.0) <- pure idr_Prelude.Chars.isSpace2_val_30.0
              (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.0) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq0.49.arity.1.1.0 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.0
              idris_int_eq1.41.arity.1.1.0 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.0
              (CGrInt idris_int_eq0_1.1.0) <- pure (CGrInt idris_int_eq0.49.arity.1.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_eq1_1.1.0) <- pure (CGrInt idris_int_eq1.41.arity.1.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq2.1.0 <- _prim_int_eq idris_int_eq0_1.1.0 idris_int_eq1_1.1.0
              ccp.0.1.0 <- case idris_int_eq2.1.0 of
                #False ->
                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.0
                #True ->
                  pure 1
              unboxed.CGrInt.5.0 <- pure ccp.0.1.0
              idr_Prelude.Chars.isSpace2_val.0 <- pure (CGrInt unboxed.CGrInt.5.0)
              idr_Prelude.Chars.isSpace2_31.0 <- store idr_Prelude.Chars.isSpace2_val.0
              idr_Prelude.Chars.isSpace2_val_32.0 <- pure idr_Prelude.Chars.isSpace2_val.0
              case idr_Prelude.Chars.isSpace2_val_32.0 of
                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.0) ->
                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.0 of
                    0 ->
                      idr_Prelude.Chars.isSpace3_val_34.0 <- pure (CGrInt 13)
                      idr_Prelude.Chars.isSpace3.0 <- store idr_Prelude.Chars.isSpace3_val_34.0
                      (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.0) <- pure idr_Prelude.Chars.isSpace3_val_34.0
                      (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.0) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.2.0 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.0
                      idris_int_eq1.41.arity.1.2.0 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.0
                      (CGrInt idris_int_eq0_1.2.0) <- pure (CGrInt idris_int_eq0.49.arity.1.2.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.2.0) <- pure (CGrInt idris_int_eq1.41.arity.1.2.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.2.0 <- _prim_int_eq idris_int_eq0_1.2.0 idris_int_eq1_1.2.0
                      ccp.0.2.0 <- case idris_int_eq2.2.0 of
                        #False ->
                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.0
                        #True ->
                          pure 1
                      unboxed.CGrInt.6.0 <- pure ccp.0.2.0
                      idr_Prelude.Chars.isSpace3_val.0 <- pure (CGrInt unboxed.CGrInt.6.0)
                      idr_Prelude.Chars.isSpace3_35.0 <- store idr_Prelude.Chars.isSpace3_val.0
                      idr_Prelude.Chars.isSpace3_val_36.0 <- pure idr_Prelude.Chars.isSpace3_val.0
                      case idr_Prelude.Chars.isSpace3_val_36.0 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.0) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.0 of
                            0 ->
                              idr_Prelude.Chars.isSpace4_val_38.0 <- pure (CGrInt 10)
                              idr_Prelude.Chars.isSpace4.0 <- store idr_Prelude.Chars.isSpace4_val_38.0
                              (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.0) <- pure idr_Prelude.Chars.isSpace4_val_38.0
                              (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.0) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.3.0 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.0
                              idris_int_eq1.41.arity.1.3.0 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.0
                              (CGrInt idris_int_eq0_1.3.0) <- pure (CGrInt idris_int_eq0.49.arity.1.3.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.3.0) <- pure (CGrInt idris_int_eq1.41.arity.1.3.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.3.0 <- _prim_int_eq idris_int_eq0_1.3.0 idris_int_eq1_1.3.0
                              ccp.0.3.0 <- case idris_int_eq2.3.0 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.0
                                #True ->
                                  pure 1
                              unboxed.CGrInt.7.0 <- pure ccp.0.3.0
                              idr_Prelude.Chars.isSpace4_val.0 <- pure (CGrInt unboxed.CGrInt.7.0)
                              idr_Prelude.Chars.isSpace4_39.0 <- store idr_Prelude.Chars.isSpace4_val.0
                              idr_Prelude.Chars.isSpace4_val_40.0 <- pure idr_Prelude.Chars.isSpace4_val.0
                              case idr_Prelude.Chars.isSpace4_val_40.0 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.0) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.0 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace5_val_42.0 <- pure (CGrInt 12)
                                      idr_Prelude.Chars.isSpace5.0 <- store idr_Prelude.Chars.isSpace5_val_42.0
                                      (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.0) <- pure idr_Prelude.Chars.isSpace5_val_42.0
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.0) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.4.0 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.0
                                      idris_int_eq1.41.arity.1.4.0 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.0
                                      (CGrInt idris_int_eq0_1.4.0) <- pure (CGrInt idris_int_eq0.49.arity.1.4.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.4.0) <- pure (CGrInt idris_int_eq1.41.arity.1.4.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.4.0 <- _prim_int_eq idris_int_eq0_1.4.0 idris_int_eq1_1.4.0
                                      ccp.0.4.0 <- case idris_int_eq2.4.0 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.0
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.8.0 <- pure ccp.0.4.0
                                      idr_Prelude.Chars.isSpace5_val.0 <- pure (CGrInt unboxed.CGrInt.8.0)
                                      idr_Prelude.Chars.isSpace5_43.0 <- store idr_Prelude.Chars.isSpace5_val.0
                                      idr_Prelude.Chars.isSpace5_val_44.0 <- pure idr_Prelude.Chars.isSpace5_val.0
                                      case idr_Prelude.Chars.isSpace5_val_44.0 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.0) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.0 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace6_val_46.0 <- pure (CGrInt 11)
                                              idr_Prelude.Chars.isSpace6.0 <- store idr_Prelude.Chars.isSpace6_val_46.0
                                              (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.0) <- pure idr_Prelude.Chars.isSpace6_val_46.0
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.0) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.5.0 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.0
                                              idris_int_eq1.41.arity.1.5.0 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.0
                                              (CGrInt idris_int_eq0_1.5.0) <- pure (CGrInt idris_int_eq0.49.arity.1.5.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.5.0) <- pure (CGrInt idris_int_eq1.41.arity.1.5.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.5.0 <- _prim_int_eq idris_int_eq0_1.5.0 idris_int_eq1_1.5.0
                                              ccp.0.5.0 <- case idris_int_eq2.5.0 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.0
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.9.0 <- pure ccp.0.5.0
                                              idr_Prelude.Chars.isSpace6_val.0 <- pure (CGrInt unboxed.CGrInt.9.0)
                                              idr_Prelude.Chars.isSpace6_47.0 <- store idr_Prelude.Chars.isSpace6_val.0
                                              idr_Prelude.Chars.isSpace6_val_48.0 <- pure idr_Prelude.Chars.isSpace6_val.0
                                              case idr_Prelude.Chars.isSpace6_val_48.0 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.0) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.0 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace7_val_50.0 <- pure (CGrInt 160)
                                                      idr_Prelude.Chars.isSpace7.0 <- store idr_Prelude.Chars.isSpace7_val_50.0
                                                      (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.0) <- pure idr_Prelude.Chars.isSpace7_val_50.0
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.0) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.6.0 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.0
                                                      idris_int_eq1.41.arity.1.6.0 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.0
                                                      (CGrInt idris_int_eq0_1.6.0) <- pure (CGrInt idris_int_eq0.49.arity.1.6.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.6.0) <- pure (CGrInt idris_int_eq1.41.arity.1.6.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.6.0 <- _prim_int_eq idris_int_eq0_1.6.0 idris_int_eq1_1.6.0
                                                      ccp.0.6.0 <- case idris_int_eq2.6.0 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.0
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.10.0 <- pure ccp.0.6.0
                                                      idr_Prelude.Chars.isSpace7_val.0 <- pure (CGrInt unboxed.CGrInt.10.0)
                                                      idr_Prelude.Chars.isSpace7_51.0 <- store idr_Prelude.Chars.isSpace7_val.0
                                                      idr_Prelude.Chars.isSpace7_val_52.0 <- pure idr_Prelude.Chars.isSpace7_val.0
                                                      case idr_Prelude.Chars.isSpace7_val_52.0 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.0) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.0 of
                                                            0 ->
                                                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                    #default ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
            #default ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
      idr_Prelude.Strings.trim2_541.0 <- store idr_Prelude.Strings.trim2_val_536.0
      idr_Prelude.Strings.trim2_val_542.0 <- pure idr_Prelude.Strings.trim2_val_536.0
      case idr_Prelude.Strings.trim2_val_542.0 of
        (Cidr_Prelude.Bool.False) ->
          (CGrString idr_Prelude.Strings.trim0.41.40.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev1.41.arity.1.2 <- pure idr_Prelude.Strings.trim0.41.40.arity.1.0
          (CGrString idris_str_rev1_0.2) <- pure (CGrString idris_str_rev1.41.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev2.2 <- _prim_string_reverse idris_str_rev1_0.2
          unboxed.CGrString.19.0 <- pure idris_str_rev2.2
          idr_Prelude.Strings.trim3_val_543.0 <- pure (CGrString unboxed.CGrString.19.0)
          idr_Prelude.Strings.trim3.0 <- store idr_Prelude.Strings.trim3_val_543.0
          idris_str_head1.1 <- pure idr_Prelude.Strings.trim3.0
          (CGrString idris_str_head1_0.1) <- fetch idris_str_head1.1
          idris_str_head2.1 <- _prim_string_head idris_str_head1_0.1
          unboxed.CGrInt.30.0 <- pure idris_str_head2.1
          idr_Prelude.Strings.trim3_val.0 <- pure (CGrInt unboxed.CGrInt.30.0)
          idr_Prelude.Strings.trim3_544.0 <- store idr_Prelude.Strings.trim3_val.0
          (CGrString idr_Prelude.Strings.trim0.41.41.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev1.41.arity.1.3 <- pure idr_Prelude.Strings.trim0.41.41.arity.1.0
          (CGrString idris_str_rev1_0.3) <- pure (CGrString idris_str_rev1.41.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev2.3 <- _prim_string_reverse idris_str_rev1_0.3
          unboxed.CGrString.20.0 <- pure idris_str_rev2.3
          idr_Prelude.Strings.trim4_val_545.0 <- pure (CGrString unboxed.CGrString.20.0)
          idr_Prelude.Strings.trim4.0 <- store idr_Prelude.Strings.trim4_val_545.0
          idris_str_tail1.0 <- pure idr_Prelude.Strings.trim4.0
          (CGrString idris_str_tail1_0.0) <- fetch idris_str_tail1.0
          idris_str_tail2.0 <- _prim_string_tail idris_str_tail1_0.0
          unboxed.CGrString.21.0 <- pure idris_str_tail2.0
          idr_Prelude.Strings.trim4_val.0 <- pure (CGrString unboxed.CGrString.21.0)
          idr_Prelude.Strings.trim4_546.0 <- store idr_Prelude.Strings.trim4_val.0
          (CGrInt idr_Prelude.Strings.trim3_544.41.42.arity.1.0) <- pure idr_Prelude.Strings.trim3_val.0
          (CGrString idr_Prelude.Strings.trim4_546.49.26.arity.1.0) <- pure idr_Prelude.Strings.trim4_val.0
          idris_str_cons1.41.arity.1.0 <- pure idr_Prelude.Strings.trim3_544.41.42.arity.1.0
          idris_str_cons2.49.arity.1.0 <- pure idr_Prelude.Strings.trim4_546.49.26.arity.1.0
          (CGrInt idris_str_cons1_0.0) <- pure (CGrInt idris_str_cons1.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrString idris_str_cons2_0.0) <- pure (CGrString idris_str_cons2.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_cons3.0 <- _prim_string_cons idris_str_cons1_0.0 idris_str_cons2_0.0
          unboxed.CGrString.265.0 <- pure idris_str_cons3.0
          pure (CGrString unboxed.CGrString.265.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.265.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.1)
        (Cidr_Prelude.Bool.True) ->
          (CGrString idr_Prelude.Strings.trim0.41.43.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev1.41.arity.1.4 <- pure idr_Prelude.Strings.trim0.41.43.arity.1.0
          (CGrString idris_str_rev1_0.4) <- pure (CGrString idris_str_rev1.41.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev2.4 <- _prim_string_reverse idris_str_rev1_0.4
          unboxed.CGrString.22.0 <- pure idris_str_rev2.4
          idr_Prelude.Strings.trim3_val_551.0 <- pure (CGrString unboxed.CGrString.22.0)
          idr_Prelude.Strings.trim3_552.0 <- store idr_Prelude.Strings.trim3_val_551.0
          idris_str_tail1.1 <- pure idr_Prelude.Strings.trim3_552.0
          (CGrString idris_str_tail1_0.1) <- fetch idris_str_tail1.1
          idris_str_tail2.1 <- _prim_string_tail idris_str_tail1_0.1
          unboxed.CGrString.23.0 <- pure idris_str_tail2.1
          idr_Prelude.Strings.trim3_val_550.0 <- pure (CGrString unboxed.CGrString.23.0)
          idr_Prelude.Strings.trim3_553.0 <- store idr_Prelude.Strings.trim3_val_550.0
          idr_Prelude.Strings.trim4_val_554.0 <- pure idr_Prelude.Strings.trim2_val.0
          idr_Prelude.Strings.trim4_555.0 <- store idr_Prelude.Strings.trim4_val_554.0
          (CGrString idr_Prelude.Strings.trim4_555.41.44.arity.1.0) <- pure idr_Prelude.Strings.trim4_val_554.0
          idris_str_eq1.1 <- pure idr_Prelude.Strings.trim3_553.0
          idris_str_eq2.41.arity.1.1 <- pure idr_Prelude.Strings.trim4_555.41.44.arity.1.0
          (CGrString idris_str_eq1_0.1) <- fetch idris_str_eq1.1
          (CGrString idris_str_eq2_0.1) <- pure (CGrString idris_str_eq2.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_eq3.1 <- _prim_string_eq idris_str_eq1_0.1 idris_str_eq2_0.1
          ccp.2.1 <- case idris_str_eq3.1 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.31.0 <- pure ccp.2.1
          idr_Prelude.Strings.trim3_val_549.0 <- pure (CGrInt unboxed.CGrInt.31.0)
          idr_Prelude.Strings.trim3_556.0 <- store idr_Prelude.Strings.trim3_val_549.0
          idr_Prelude.Strings.trim3_val_557.0 <- pure idr_Prelude.Strings.trim3_val_549.0
          idr_Prelude.Strings.trim3_val_548.0 <- case idr_Prelude.Strings.trim3_val_557.0 of
            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_558.0) ->
              case idr_Prelude.Strings.trim_cpat_LInt64_0_558.0 of
                0 ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.trim3_559.0 <- store idr_Prelude.Strings.trim3_val_548.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.1" <- pure idr_Prelude.Strings.trim3_559.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
          idr_Prelude.Strings.trim3_val_547.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.1" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.1"
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.1" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          idr_Prelude.Strings.trim3_562.0 <- store idr_Prelude.Strings.trim3_val_547.0
          idr_Prelude.Strings.trim3_val_563.0 <- pure idr_Prelude.Strings.trim3_val_547.0
          case idr_Prelude.Strings.trim3_val_563.0 of
            (Cidr_Prelude.Basics.No) ->
              pure idr_Prelude.Strings.trim2_val.0
            (Cidr_Prelude.Basics.Yes) ->
              (CGrString idr_Prelude.Strings.trim0.41.46.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev1.41.arity.1.5 <- pure idr_Prelude.Strings.trim0.41.46.arity.1.0
              (CGrString idris_str_rev1_0.5) <- pure (CGrString idris_str_rev1.41.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.5 <- _prim_string_reverse idris_str_rev1_0.5
              unboxed.CGrString.24.0 <- pure idris_str_rev2.5
              idr_Prelude.Strings.trim4_val_567.0 <- pure (CGrString unboxed.CGrString.24.0)
              idr_Prelude.Strings.trim4_568.0 <- store idr_Prelude.Strings.trim4_val_567.0
              idris_str_tail1.2 <- pure idr_Prelude.Strings.trim4_568.0
              (CGrString idris_str_tail1_0.2) <- fetch idris_str_tail1.2
              idris_str_tail2.2 <- _prim_string_tail idris_str_tail1_0.2
              unboxed.CGrString.25.0 <- pure idris_str_tail2.2
              idr_Prelude.Strings.trim4_val_566.0 <- pure (CGrString unboxed.CGrString.25.0)
              idr_Prelude.Strings.trim4_569.0 <- store idr_Prelude.Strings.trim4_val_566.0
              idris_str_head1.2 <- pure idr_Prelude.Strings.trim4_569.0
              (CGrString idris_str_head1_0.2) <- fetch idris_str_head1.2
              idris_str_head2.2 <- _prim_string_head idris_str_head1_0.2
              unboxed.CGrInt.32.0 <- pure idris_str_head2.2
              idr_Prelude.Strings.trim4_val_565.0 <- pure (CGrInt unboxed.CGrInt.32.0)
              idr_Prelude.Strings.trim4_570.0 <- store idr_Prelude.Strings.trim4_val_565.0
              (CGrInt idr_Prelude.Strings.trim4_570.57.10.arity.1.0) <- pure idr_Prelude.Strings.trim4_val_565.0
              idr_Prelude.Chars.isSpace0.57.arity.1.1 <- pure idr_Prelude.Strings.trim4_570.57.10.arity.1.0
              idr_Prelude.Chars.isSpace1_val_27.1 <- pure idr_Prelude.Chars.isSpace1_val_27.0
              idr_Prelude.Chars.isSpace1.1 <- store idr_Prelude.Chars.isSpace1_val_27.1
              (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.1) <- pure idr_Prelude.Chars.isSpace1_val_27.1
              (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.1) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq0.49.arity.1.0.1 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.1
              idris_int_eq1.41.arity.1.0.1 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.1
              (CGrInt idris_int_eq0_1.0.1) <- pure (CGrInt idris_int_eq0.49.arity.1.0.1) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_eq1_1.0.1) <- pure (CGrInt idris_int_eq1.41.arity.1.0.1) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq2.0.1 <- _prim_int_eq idris_int_eq0_1.0.1 idris_int_eq1_1.0.1
              ccp.0.0.1 <- case idris_int_eq2.0.1 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              unboxed.CGrInt.4.1 <- pure ccp.0.0.1
              idr_Prelude.Chars.isSpace1_val.1 <- pure (CGrInt unboxed.CGrInt.4.1)
              idr_Prelude.Chars.isSpace1_28.1 <- store idr_Prelude.Chars.isSpace1_val.1
              idr_Prelude.Chars.isSpace1_val_29.1 <- pure idr_Prelude.Chars.isSpace1_val.1
              idr_Prelude.Strings.trim4_val_564.0 <- case idr_Prelude.Chars.isSpace1_val_29.1 of
                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.1) ->
                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0.1 of
                    0 ->
                      idr_Prelude.Chars.isSpace2_val_30.1 <- pure (CGrInt 9)
                      idr_Prelude.Chars.isSpace2.1 <- store idr_Prelude.Chars.isSpace2_val_30.1
                      (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.1) <- pure idr_Prelude.Chars.isSpace2_val_30.1
                      (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.1) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.1.1 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.1
                      idris_int_eq1.41.arity.1.1.1 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.1
                      (CGrInt idris_int_eq0_1.1.1) <- pure (CGrInt idris_int_eq0.49.arity.1.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.1.1) <- pure (CGrInt idris_int_eq1.41.arity.1.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.1.1 <- _prim_int_eq idris_int_eq0_1.1.1 idris_int_eq1_1.1.1
                      ccp.0.1.1 <- case idris_int_eq2.1.1 of
                        #False ->
                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.1
                        #True ->
                          pure 1
                      unboxed.CGrInt.5.1 <- pure ccp.0.1.1
                      idr_Prelude.Chars.isSpace2_val.1 <- pure (CGrInt unboxed.CGrInt.5.1)
                      idr_Prelude.Chars.isSpace2_31.1 <- store idr_Prelude.Chars.isSpace2_val.1
                      idr_Prelude.Chars.isSpace2_val_32.1 <- pure idr_Prelude.Chars.isSpace2_val.1
                      case idr_Prelude.Chars.isSpace2_val_32.1 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.1) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.1 of
                            0 ->
                              idr_Prelude.Chars.isSpace3_val_34.1 <- pure (CGrInt 13)
                              idr_Prelude.Chars.isSpace3.1 <- store idr_Prelude.Chars.isSpace3_val_34.1
                              (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.1) <- pure idr_Prelude.Chars.isSpace3_val_34.1
                              (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.1) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.2.1 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.1
                              idris_int_eq1.41.arity.1.2.1 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.1
                              (CGrInt idris_int_eq0_1.2.1) <- pure (CGrInt idris_int_eq0.49.arity.1.2.1) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.2.1) <- pure (CGrInt idris_int_eq1.41.arity.1.2.1) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.2.1 <- _prim_int_eq idris_int_eq0_1.2.1 idris_int_eq1_1.2.1
                              ccp.0.2.1 <- case idris_int_eq2.2.1 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.1
                                #True ->
                                  pure 1
                              unboxed.CGrInt.6.1 <- pure ccp.0.2.1
                              idr_Prelude.Chars.isSpace3_val.1 <- pure (CGrInt unboxed.CGrInt.6.1)
                              idr_Prelude.Chars.isSpace3_35.1 <- store idr_Prelude.Chars.isSpace3_val.1
                              idr_Prelude.Chars.isSpace3_val_36.1 <- pure idr_Prelude.Chars.isSpace3_val.1
                              case idr_Prelude.Chars.isSpace3_val_36.1 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.1) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.1 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace4_val_38.1 <- pure (CGrInt 10)
                                      idr_Prelude.Chars.isSpace4.1 <- store idr_Prelude.Chars.isSpace4_val_38.1
                                      (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.1) <- pure idr_Prelude.Chars.isSpace4_val_38.1
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.1) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.3.1 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.1
                                      idris_int_eq1.41.arity.1.3.1 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.1
                                      (CGrInt idris_int_eq0_1.3.1) <- pure (CGrInt idris_int_eq0.49.arity.1.3.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.3.1) <- pure (CGrInt idris_int_eq1.41.arity.1.3.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.3.1 <- _prim_int_eq idris_int_eq0_1.3.1 idris_int_eq1_1.3.1
                                      ccp.0.3.1 <- case idris_int_eq2.3.1 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.1
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.7.1 <- pure ccp.0.3.1
                                      idr_Prelude.Chars.isSpace4_val.1 <- pure (CGrInt unboxed.CGrInt.7.1)
                                      idr_Prelude.Chars.isSpace4_39.1 <- store idr_Prelude.Chars.isSpace4_val.1
                                      idr_Prelude.Chars.isSpace4_val_40.1 <- pure idr_Prelude.Chars.isSpace4_val.1
                                      case idr_Prelude.Chars.isSpace4_val_40.1 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.1) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.1 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace5_val_42.1 <- pure (CGrInt 12)
                                              idr_Prelude.Chars.isSpace5.1 <- store idr_Prelude.Chars.isSpace5_val_42.1
                                              (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.1) <- pure idr_Prelude.Chars.isSpace5_val_42.1
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.1) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.4.1 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.1
                                              idris_int_eq1.41.arity.1.4.1 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.1
                                              (CGrInt idris_int_eq0_1.4.1) <- pure (CGrInt idris_int_eq0.49.arity.1.4.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.4.1) <- pure (CGrInt idris_int_eq1.41.arity.1.4.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.4.1 <- _prim_int_eq idris_int_eq0_1.4.1 idris_int_eq1_1.4.1
                                              ccp.0.4.1 <- case idris_int_eq2.4.1 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.1
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.8.1 <- pure ccp.0.4.1
                                              idr_Prelude.Chars.isSpace5_val.1 <- pure (CGrInt unboxed.CGrInt.8.1)
                                              idr_Prelude.Chars.isSpace5_43.1 <- store idr_Prelude.Chars.isSpace5_val.1
                                              idr_Prelude.Chars.isSpace5_val_44.1 <- pure idr_Prelude.Chars.isSpace5_val.1
                                              case idr_Prelude.Chars.isSpace5_val_44.1 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.1) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.1 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace6_val_46.1 <- pure (CGrInt 11)
                                                      idr_Prelude.Chars.isSpace6.1 <- store idr_Prelude.Chars.isSpace6_val_46.1
                                                      (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.1) <- pure idr_Prelude.Chars.isSpace6_val_46.1
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.1) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.5.1 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.1
                                                      idris_int_eq1.41.arity.1.5.1 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.1
                                                      (CGrInt idris_int_eq0_1.5.1) <- pure (CGrInt idris_int_eq0.49.arity.1.5.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.5.1) <- pure (CGrInt idris_int_eq1.41.arity.1.5.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.5.1 <- _prim_int_eq idris_int_eq0_1.5.1 idris_int_eq1_1.5.1
                                                      ccp.0.5.1 <- case idris_int_eq2.5.1 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.1
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.9.1 <- pure ccp.0.5.1
                                                      idr_Prelude.Chars.isSpace6_val.1 <- pure (CGrInt unboxed.CGrInt.9.1)
                                                      idr_Prelude.Chars.isSpace6_47.1 <- store idr_Prelude.Chars.isSpace6_val.1
                                                      idr_Prelude.Chars.isSpace6_val_48.1 <- pure idr_Prelude.Chars.isSpace6_val.1
                                                      case idr_Prelude.Chars.isSpace6_val_48.1 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.1) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.1 of
                                                            0 ->
                                                              idr_Prelude.Chars.isSpace7_val_50.1 <- pure (CGrInt 160)
                                                              idr_Prelude.Chars.isSpace7.1 <- store idr_Prelude.Chars.isSpace7_val_50.1
                                                              (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.1) <- pure idr_Prelude.Chars.isSpace7_val_50.1
                                                              (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.1) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq0.49.arity.1.6.1 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.1
                                                              idris_int_eq1.41.arity.1.6.1 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.1
                                                              (CGrInt idris_int_eq0_1.6.1) <- pure (CGrInt idris_int_eq0.49.arity.1.6.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              (CGrInt idris_int_eq1_1.6.1) <- pure (CGrInt idris_int_eq1.41.arity.1.6.1) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq2.6.1 <- _prim_int_eq idris_int_eq0_1.6.1 idris_int_eq1_1.6.1
                                                              ccp.0.6.1 <- case idris_int_eq2.6.1 of
                                                                #False ->
                                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.1
                                                                #True ->
                                                                  pure 1
                                                              unboxed.CGrInt.10.1 <- pure ccp.0.6.1
                                                              idr_Prelude.Chars.isSpace7_val.1 <- pure (CGrInt unboxed.CGrInt.10.1)
                                                              idr_Prelude.Chars.isSpace7_51.1 <- store idr_Prelude.Chars.isSpace7_val.1
                                                              idr_Prelude.Chars.isSpace7_val_52.1 <- pure idr_Prelude.Chars.isSpace7_val.1
                                                              case idr_Prelude.Chars.isSpace7_val_52.1 of
                                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.1) ->
                                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.1 of
                                                                    0 ->
                                                                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                    #default ->
                                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                    #default ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
              idr_Prelude.Strings.trim4_571.0 <- store idr_Prelude.Strings.trim4_val_564.0
              idr_Prelude.Strings.trim4_val_572.0 <- pure idr_Prelude.Strings.trim4_val_564.0
              case idr_Prelude.Strings.trim4_val_572.0 of
                (Cidr_Prelude.Bool.False) ->
                  (CGrString idr_Prelude.Strings.trim0.41.47.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.6 <- pure idr_Prelude.Strings.trim0.41.47.arity.1.0
                  (CGrString idris_str_rev1_0.6) <- pure (CGrString idris_str_rev1.41.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.6 <- _prim_string_reverse idris_str_rev1_0.6
                  unboxed.CGrString.26.0 <- pure idris_str_rev2.6
                  idr_Prelude.Strings.trim5_val_574.0 <- pure (CGrString unboxed.CGrString.26.0)
                  idr_Prelude.Strings.trim5.0 <- store idr_Prelude.Strings.trim5_val_574.0
                  idris_str_tail1.3 <- pure idr_Prelude.Strings.trim5.0
                  (CGrString idris_str_tail1_0.3) <- fetch idris_str_tail1.3
                  idris_str_tail2.3 <- _prim_string_tail idris_str_tail1_0.3
                  unboxed.CGrString.27.0 <- pure idris_str_tail2.3
                  idr_Prelude.Strings.trim5_val_573.0 <- pure (CGrString unboxed.CGrString.27.0)
                  idr_Prelude.Strings.trim5_575.0 <- store idr_Prelude.Strings.trim5_val_573.0
                  idris_str_head1.3 <- pure idr_Prelude.Strings.trim5_575.0
                  (CGrString idris_str_head1_0.3) <- fetch idris_str_head1.3
                  idris_str_head2.3 <- _prim_string_head idris_str_head1_0.3
                  unboxed.CGrInt.33.0 <- pure idris_str_head2.3
                  idr_Prelude.Strings.trim5_val.0 <- pure (CGrInt unboxed.CGrInt.33.0)
                  idr_Prelude.Strings.trim5_576.0 <- store idr_Prelude.Strings.trim5_val.0
                  (CGrString idr_Prelude.Strings.trim0.41.48.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.7 <- pure idr_Prelude.Strings.trim0.41.48.arity.1.0
                  (CGrString idris_str_rev1_0.7) <- pure (CGrString idris_str_rev1.41.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.7 <- _prim_string_reverse idris_str_rev1_0.7
                  unboxed.CGrString.28.0 <- pure idris_str_rev2.7
                  idr_Prelude.Strings.trim6_val_578.0 <- pure (CGrString unboxed.CGrString.28.0)
                  idr_Prelude.Strings.trim6.0 <- store idr_Prelude.Strings.trim6_val_578.0
                  idris_str_tail1.4 <- pure idr_Prelude.Strings.trim6.0
                  (CGrString idris_str_tail1_0.4) <- fetch idris_str_tail1.4
                  idris_str_tail2.4 <- _prim_string_tail idris_str_tail1_0.4
                  unboxed.CGrString.29.0 <- pure idris_str_tail2.4
                  idr_Prelude.Strings.trim6_val_577.0 <- pure (CGrString unboxed.CGrString.29.0)
                  idr_Prelude.Strings.trim6_579.0 <- store idr_Prelude.Strings.trim6_val_577.0
                  idris_str_tail1.5 <- pure idr_Prelude.Strings.trim6_579.0
                  (CGrString idris_str_tail1_0.5) <- fetch idris_str_tail1.5
                  idris_str_tail2.5 <- _prim_string_tail idris_str_tail1_0.5
                  unboxed.CGrString.30.0 <- pure idris_str_tail2.5
                  idr_Prelude.Strings.trim6_val.0 <- pure (CGrString unboxed.CGrString.30.0)
                  idr_Prelude.Strings.trim6_580.0 <- store idr_Prelude.Strings.trim6_val.0
                  (CGrInt idr_Prelude.Strings.trim5_576.41.49.arity.1.0) <- pure idr_Prelude.Strings.trim5_val.0
                  (CGrString idr_Prelude.Strings.trim6_580.49.27.arity.1.0) <- pure idr_Prelude.Strings.trim6_val.0
                  idris_str_cons1.41.arity.1.1 <- pure idr_Prelude.Strings.trim5_576.41.49.arity.1.0
                  idris_str_cons2.49.arity.1.1 <- pure idr_Prelude.Strings.trim6_580.49.27.arity.1.0
                  (CGrInt idris_str_cons1_0.1) <- pure (CGrInt idris_str_cons1.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idris_str_cons2_0.1) <- pure (CGrString idris_str_cons2.49.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons3.1 <- _prim_string_cons idris_str_cons1_0.1 idris_str_cons2_0.1
                  unboxed.CGrString.266.0 <- pure idris_str_cons3.1
                  pure (CGrString unboxed.CGrString.266.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.266.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.5) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.4) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.3)
                (Cidr_Prelude.Bool.True) ->
                  (CGrString idr_Prelude.Strings.trim0.41.50.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.8 <- pure idr_Prelude.Strings.trim0.41.50.arity.1.0
                  (CGrString idris_str_rev1_0.8) <- pure (CGrString idris_str_rev1.41.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.8 <- _prim_string_reverse idris_str_rev1_0.8
                  unboxed.CGrString.31.0 <- pure idris_str_rev2.8
                  idr_Prelude.Strings.trim5_val_586.0 <- pure (CGrString unboxed.CGrString.31.0)
                  idr_Prelude.Strings.trim5_587.0 <- store idr_Prelude.Strings.trim5_val_586.0
                  idris_str_tail1.6 <- pure idr_Prelude.Strings.trim5_587.0
                  (CGrString idris_str_tail1_0.6) <- fetch idris_str_tail1.6
                  idris_str_tail2.6 <- _prim_string_tail idris_str_tail1_0.6
                  unboxed.CGrString.32.0 <- pure idris_str_tail2.6
                  idr_Prelude.Strings.trim5_val_585.0 <- pure (CGrString unboxed.CGrString.32.0)
                  idr_Prelude.Strings.trim5_588.0 <- store idr_Prelude.Strings.trim5_val_585.0
                  idris_str_tail1.7 <- pure idr_Prelude.Strings.trim5_588.0
                  (CGrString idris_str_tail1_0.7) <- fetch idris_str_tail1.7
                  idris_str_tail2.7 <- _prim_string_tail idris_str_tail1_0.7
                  unboxed.CGrString.33.0 <- pure idris_str_tail2.7
                  idr_Prelude.Strings.trim5_val_584.0 <- pure (CGrString unboxed.CGrString.33.0)
                  idr_Prelude.Strings.trim5_589.0 <- store idr_Prelude.Strings.trim5_val_584.0
                  idr_Prelude.Strings.trim6_val_590.0 <- pure idr_Prelude.Strings.trim2_val.0
                  idr_Prelude.Strings.trim6_591.0 <- store idr_Prelude.Strings.trim6_val_590.0
                  (CGrString idr_Prelude.Strings.trim6_591.41.51.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_590.0
                  idris_str_eq1.2 <- pure idr_Prelude.Strings.trim5_589.0
                  idris_str_eq2.41.arity.1.2 <- pure idr_Prelude.Strings.trim6_591.41.51.arity.1.0
                  (CGrString idris_str_eq1_0.2) <- fetch idris_str_eq1.2
                  (CGrString idris_str_eq2_0.2) <- pure (CGrString idris_str_eq2.41.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_eq3.2 <- _prim_string_eq idris_str_eq1_0.2 idris_str_eq2_0.2
                  ccp.2.2 <- case idris_str_eq3.2 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  unboxed.CGrInt.34.0 <- pure ccp.2.2
                  idr_Prelude.Strings.trim5_val_583.0 <- pure (CGrInt unboxed.CGrInt.34.0)
                  idr_Prelude.Strings.trim5_592.0 <- store idr_Prelude.Strings.trim5_val_583.0
                  idr_Prelude.Strings.trim5_val_593.0 <- pure idr_Prelude.Strings.trim5_val_583.0
                  idr_Prelude.Strings.trim5_val_582.0 <- case idr_Prelude.Strings.trim5_val_593.0 of
                    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_594.0) ->
                      case idr_Prelude.Strings.trim_cpat_LInt64_0_594.0 of
                        0 ->
                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  idr_Prelude.Strings.trim5_595.0 <- store idr_Prelude.Strings.trim5_val_582.0
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.2" <- pure idr_Prelude.Strings.trim5_595.0
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.2" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                  idr_Prelude.Strings.trim5_val_581.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.2" of
                    (Cidr_Prelude.Bool.True) ->
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.2" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.2"
                      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.2" of
                        (Cidr_Prelude.Bool.False) ->
                          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                        (Cidr_Prelude.Bool.True) ->
                          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                  idr_Prelude.Strings.trim5_598.0 <- store idr_Prelude.Strings.trim5_val_581.0
                  idr_Prelude.Strings.trim5_val_599.0 <- pure idr_Prelude.Strings.trim5_val_581.0
                  case idr_Prelude.Strings.trim5_val_599.0 of
                    (Cidr_Prelude.Basics.No) ->
                      pure idr_Prelude.Strings.trim2_val.0
                    (Cidr_Prelude.Basics.Yes) ->
                      (CGrString idr_Prelude.Strings.trim0.41.53.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.9 <- pure idr_Prelude.Strings.trim0.41.53.arity.1.0
                      (CGrString idris_str_rev1_0.9) <- pure (CGrString idris_str_rev1.41.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.9 <- _prim_string_reverse idris_str_rev1_0.9
                      unboxed.CGrString.34.0 <- pure idris_str_rev2.9
                      idr_Prelude.Strings.trim6_val_604.0 <- pure (CGrString unboxed.CGrString.34.0)
                      idr_Prelude.Strings.trim6_605.0 <- store idr_Prelude.Strings.trim6_val_604.0
                      idris_str_tail1.8 <- pure idr_Prelude.Strings.trim6_605.0
                      (CGrString idris_str_tail1_0.8) <- fetch idris_str_tail1.8
                      idris_str_tail2.8 <- _prim_string_tail idris_str_tail1_0.8
                      unboxed.CGrString.35.0 <- pure idris_str_tail2.8
                      idr_Prelude.Strings.trim6_val_603.0 <- pure (CGrString unboxed.CGrString.35.0)
                      idr_Prelude.Strings.trim6_606.0 <- store idr_Prelude.Strings.trim6_val_603.0
                      idris_str_tail1.9 <- pure idr_Prelude.Strings.trim6_606.0
                      (CGrString idris_str_tail1_0.9) <- fetch idris_str_tail1.9
                      idris_str_tail2.9 <- _prim_string_tail idris_str_tail1_0.9
                      unboxed.CGrString.36.0 <- pure idris_str_tail2.9
                      idr_Prelude.Strings.trim6_val_602.0 <- pure (CGrString unboxed.CGrString.36.0)
                      idr_Prelude.Strings.trim6_607.0 <- store idr_Prelude.Strings.trim6_val_602.0
                      idris_str_head1.4 <- pure idr_Prelude.Strings.trim6_607.0
                      (CGrString idris_str_head1_0.4) <- fetch idris_str_head1.4
                      idris_str_head2.4 <- _prim_string_head idris_str_head1_0.4
                      unboxed.CGrInt.35.0 <- pure idris_str_head2.4
                      idr_Prelude.Strings.trim6_val_601.0 <- pure (CGrInt unboxed.CGrInt.35.0)
                      idr_Prelude.Strings.trim6_608.0 <- store idr_Prelude.Strings.trim6_val_601.0
                      (CGrInt idr_Prelude.Strings.trim6_608.57.11.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_601.0
                      idr_Prelude.Chars.isSpace0.57.arity.1.2 <- pure idr_Prelude.Strings.trim6_608.57.11.arity.1.0
                      idr_Prelude.Chars.isSpace1_val_27.2 <- pure idr_Prelude.Chars.isSpace1_val_27.0
                      idr_Prelude.Chars.isSpace1.2 <- store idr_Prelude.Chars.isSpace1_val_27.2
                      (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.2) <- pure idr_Prelude.Chars.isSpace1_val_27.2
                      (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.2) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.0.2 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.2
                      idris_int_eq1.41.arity.1.0.2 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.2
                      (CGrInt idris_int_eq0_1.0.2) <- pure (CGrInt idris_int_eq0.49.arity.1.0.2) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.0.2) <- pure (CGrInt idris_int_eq1.41.arity.1.0.2) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.0.2 <- _prim_int_eq idris_int_eq0_1.0.2 idris_int_eq1_1.0.2
                      ccp.0.0.2 <- case idris_int_eq2.0.2 of
                        #False ->
                          pure 0
                        #True ->
                          pure 1
                      unboxed.CGrInt.4.2 <- pure ccp.0.0.2
                      idr_Prelude.Chars.isSpace1_val.2 <- pure (CGrInt unboxed.CGrInt.4.2)
                      idr_Prelude.Chars.isSpace1_28.2 <- store idr_Prelude.Chars.isSpace1_val.2
                      idr_Prelude.Chars.isSpace1_val_29.2 <- pure idr_Prelude.Chars.isSpace1_val.2
                      idr_Prelude.Strings.trim6_val_600.0 <- case idr_Prelude.Chars.isSpace1_val_29.2 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.2) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0.2 of
                            0 ->
                              idr_Prelude.Chars.isSpace2_val_30.2 <- pure (CGrInt 9)
                              idr_Prelude.Chars.isSpace2.2 <- store idr_Prelude.Chars.isSpace2_val_30.2
                              (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.2) <- pure idr_Prelude.Chars.isSpace2_val_30.2
                              (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.2) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.1.2 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.2
                              idris_int_eq1.41.arity.1.1.2 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.2
                              (CGrInt idris_int_eq0_1.1.2) <- pure (CGrInt idris_int_eq0.49.arity.1.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.1.2) <- pure (CGrInt idris_int_eq1.41.arity.1.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.1.2 <- _prim_int_eq idris_int_eq0_1.1.2 idris_int_eq1_1.1.2
                              ccp.0.1.2 <- case idris_int_eq2.1.2 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.2
                                #True ->
                                  pure 1
                              unboxed.CGrInt.5.2 <- pure ccp.0.1.2
                              idr_Prelude.Chars.isSpace2_val.2 <- pure (CGrInt unboxed.CGrInt.5.2)
                              idr_Prelude.Chars.isSpace2_31.2 <- store idr_Prelude.Chars.isSpace2_val.2
                              idr_Prelude.Chars.isSpace2_val_32.2 <- pure idr_Prelude.Chars.isSpace2_val.2
                              case idr_Prelude.Chars.isSpace2_val_32.2 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.2) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.2 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace3_val_34.2 <- pure (CGrInt 13)
                                      idr_Prelude.Chars.isSpace3.2 <- store idr_Prelude.Chars.isSpace3_val_34.2
                                      (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.2) <- pure idr_Prelude.Chars.isSpace3_val_34.2
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.2) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.2.2 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.2
                                      idris_int_eq1.41.arity.1.2.2 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.2
                                      (CGrInt idris_int_eq0_1.2.2) <- pure (CGrInt idris_int_eq0.49.arity.1.2.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.2.2) <- pure (CGrInt idris_int_eq1.41.arity.1.2.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.2.2 <- _prim_int_eq idris_int_eq0_1.2.2 idris_int_eq1_1.2.2
                                      ccp.0.2.2 <- case idris_int_eq2.2.2 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.2
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.6.2 <- pure ccp.0.2.2
                                      idr_Prelude.Chars.isSpace3_val.2 <- pure (CGrInt unboxed.CGrInt.6.2)
                                      idr_Prelude.Chars.isSpace3_35.2 <- store idr_Prelude.Chars.isSpace3_val.2
                                      idr_Prelude.Chars.isSpace3_val_36.2 <- pure idr_Prelude.Chars.isSpace3_val.2
                                      case idr_Prelude.Chars.isSpace3_val_36.2 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.2) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.2 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace4_val_38.2 <- pure (CGrInt 10)
                                              idr_Prelude.Chars.isSpace4.2 <- store idr_Prelude.Chars.isSpace4_val_38.2
                                              (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.2) <- pure idr_Prelude.Chars.isSpace4_val_38.2
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.2) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.3.2 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.2
                                              idris_int_eq1.41.arity.1.3.2 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.2
                                              (CGrInt idris_int_eq0_1.3.2) <- pure (CGrInt idris_int_eq0.49.arity.1.3.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.3.2) <- pure (CGrInt idris_int_eq1.41.arity.1.3.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.3.2 <- _prim_int_eq idris_int_eq0_1.3.2 idris_int_eq1_1.3.2
                                              ccp.0.3.2 <- case idris_int_eq2.3.2 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.2
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.7.2 <- pure ccp.0.3.2
                                              idr_Prelude.Chars.isSpace4_val.2 <- pure (CGrInt unboxed.CGrInt.7.2)
                                              idr_Prelude.Chars.isSpace4_39.2 <- store idr_Prelude.Chars.isSpace4_val.2
                                              idr_Prelude.Chars.isSpace4_val_40.2 <- pure idr_Prelude.Chars.isSpace4_val.2
                                              case idr_Prelude.Chars.isSpace4_val_40.2 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.2) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.2 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace5_val_42.2 <- pure (CGrInt 12)
                                                      idr_Prelude.Chars.isSpace5.2 <- store idr_Prelude.Chars.isSpace5_val_42.2
                                                      (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.2) <- pure idr_Prelude.Chars.isSpace5_val_42.2
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.2) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.4.2 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.2
                                                      idris_int_eq1.41.arity.1.4.2 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.2
                                                      (CGrInt idris_int_eq0_1.4.2) <- pure (CGrInt idris_int_eq0.49.arity.1.4.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.4.2) <- pure (CGrInt idris_int_eq1.41.arity.1.4.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.4.2 <- _prim_int_eq idris_int_eq0_1.4.2 idris_int_eq1_1.4.2
                                                      ccp.0.4.2 <- case idris_int_eq2.4.2 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.2
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.8.2 <- pure ccp.0.4.2
                                                      idr_Prelude.Chars.isSpace5_val.2 <- pure (CGrInt unboxed.CGrInt.8.2)
                                                      idr_Prelude.Chars.isSpace5_43.2 <- store idr_Prelude.Chars.isSpace5_val.2
                                                      idr_Prelude.Chars.isSpace5_val_44.2 <- pure idr_Prelude.Chars.isSpace5_val.2
                                                      case idr_Prelude.Chars.isSpace5_val_44.2 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.2) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.2 of
                                                            0 ->
                                                              idr_Prelude.Chars.isSpace6_val_46.2 <- pure (CGrInt 11)
                                                              idr_Prelude.Chars.isSpace6.2 <- store idr_Prelude.Chars.isSpace6_val_46.2
                                                              (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.2) <- pure idr_Prelude.Chars.isSpace6_val_46.2
                                                              (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.2) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq0.49.arity.1.5.2 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.2
                                                              idris_int_eq1.41.arity.1.5.2 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.2
                                                              (CGrInt idris_int_eq0_1.5.2) <- pure (CGrInt idris_int_eq0.49.arity.1.5.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              (CGrInt idris_int_eq1_1.5.2) <- pure (CGrInt idris_int_eq1.41.arity.1.5.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq2.5.2 <- _prim_int_eq idris_int_eq0_1.5.2 idris_int_eq1_1.5.2
                                                              ccp.0.5.2 <- case idris_int_eq2.5.2 of
                                                                #False ->
                                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.2
                                                                #True ->
                                                                  pure 1
                                                              unboxed.CGrInt.9.2 <- pure ccp.0.5.2
                                                              idr_Prelude.Chars.isSpace6_val.2 <- pure (CGrInt unboxed.CGrInt.9.2)
                                                              idr_Prelude.Chars.isSpace6_47.2 <- store idr_Prelude.Chars.isSpace6_val.2
                                                              idr_Prelude.Chars.isSpace6_val_48.2 <- pure idr_Prelude.Chars.isSpace6_val.2
                                                              case idr_Prelude.Chars.isSpace6_val_48.2 of
                                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.2) ->
                                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.2 of
                                                                    0 ->
                                                                      idr_Prelude.Chars.isSpace7_val_50.2 <- pure (CGrInt 160)
                                                                      idr_Prelude.Chars.isSpace7.2 <- store idr_Prelude.Chars.isSpace7_val_50.2
                                                                      (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.2) <- pure idr_Prelude.Chars.isSpace7_val_50.2
                                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.2) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      idris_int_eq0.49.arity.1.6.2 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.2
                                                                      idris_int_eq1.41.arity.1.6.2 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.2
                                                                      (CGrInt idris_int_eq0_1.6.2) <- pure (CGrInt idris_int_eq0.49.arity.1.6.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      (CGrInt idris_int_eq1_1.6.2) <- pure (CGrInt idris_int_eq1.41.arity.1.6.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      idris_int_eq2.6.2 <- _prim_int_eq idris_int_eq0_1.6.2 idris_int_eq1_1.6.2
                                                                      ccp.0.6.2 <- case idris_int_eq2.6.2 of
                                                                        #False ->
                                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.2
                                                                        #True ->
                                                                          pure 1
                                                                      unboxed.CGrInt.10.2 <- pure ccp.0.6.2
                                                                      idr_Prelude.Chars.isSpace7_val.2 <- pure (CGrInt unboxed.CGrInt.10.2)
                                                                      idr_Prelude.Chars.isSpace7_51.2 <- store idr_Prelude.Chars.isSpace7_val.2
                                                                      idr_Prelude.Chars.isSpace7_val_52.2 <- pure idr_Prelude.Chars.isSpace7_val.2
                                                                      case idr_Prelude.Chars.isSpace7_val_52.2 of
                                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.2) ->
                                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.2 of
                                                                            0 ->
                                                                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                            #default ->
                                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                    #default ->
                                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                      idr_Prelude.Strings.trim6_609.0 <- store idr_Prelude.Strings.trim6_val_600.0
                      idr_Prelude.Strings.trim6_val_610.0 <- pure idr_Prelude.Strings.trim6_val_600.0
                      case idr_Prelude.Strings.trim6_val_610.0 of
                        (Cidr_Prelude.Bool.False) ->
                          (CGrString idr_Prelude.Strings.trim0.41.54.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.10 <- pure idr_Prelude.Strings.trim0.41.54.arity.1.0
                          (CGrString idris_str_rev1_0.10) <- pure (CGrString idris_str_rev1.41.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.10 <- _prim_string_reverse idris_str_rev1_0.10
                          unboxed.CGrString.37.0 <- pure idris_str_rev2.10
                          idr_Prelude.Strings.trim7_val_613.0 <- pure (CGrString unboxed.CGrString.37.0)
                          idr_Prelude.Strings.trim7.0 <- store idr_Prelude.Strings.trim7_val_613.0
                          idris_str_tail1.10 <- pure idr_Prelude.Strings.trim7.0
                          (CGrString idris_str_tail1_0.10) <- fetch idris_str_tail1.10
                          idris_str_tail2.10 <- _prim_string_tail idris_str_tail1_0.10
                          unboxed.CGrString.38.0 <- pure idris_str_tail2.10
                          idr_Prelude.Strings.trim7_val_612.0 <- pure (CGrString unboxed.CGrString.38.0)
                          idr_Prelude.Strings.trim7_614.0 <- store idr_Prelude.Strings.trim7_val_612.0
                          idris_str_tail1.11 <- pure idr_Prelude.Strings.trim7_614.0
                          (CGrString idris_str_tail1_0.11) <- fetch idris_str_tail1.11
                          idris_str_tail2.11 <- _prim_string_tail idris_str_tail1_0.11
                          unboxed.CGrString.39.0 <- pure idris_str_tail2.11
                          idr_Prelude.Strings.trim7_val_611.0 <- pure (CGrString unboxed.CGrString.39.0)
                          idr_Prelude.Strings.trim7_615.0 <- store idr_Prelude.Strings.trim7_val_611.0
                          idris_str_head1.5 <- pure idr_Prelude.Strings.trim7_615.0
                          (CGrString idris_str_head1_0.5) <- fetch idris_str_head1.5
                          idris_str_head2.5 <- _prim_string_head idris_str_head1_0.5
                          unboxed.CGrInt.36.0 <- pure idris_str_head2.5
                          idr_Prelude.Strings.trim7_val.0 <- pure (CGrInt unboxed.CGrInt.36.0)
                          idr_Prelude.Strings.trim7_616.0 <- store idr_Prelude.Strings.trim7_val.0
                          (CGrString idr_Prelude.Strings.trim0.41.55.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.11 <- pure idr_Prelude.Strings.trim0.41.55.arity.1.0
                          (CGrString idris_str_rev1_0.11) <- pure (CGrString idris_str_rev1.41.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.11 <- _prim_string_reverse idris_str_rev1_0.11
                          unboxed.CGrString.40.0 <- pure idris_str_rev2.11
                          idr_Prelude.Strings.trim8_val_619.0 <- pure (CGrString unboxed.CGrString.40.0)
                          idr_Prelude.Strings.trim8.0 <- store idr_Prelude.Strings.trim8_val_619.0
                          idris_str_tail1.12 <- pure idr_Prelude.Strings.trim8.0
                          (CGrString idris_str_tail1_0.12) <- fetch idris_str_tail1.12
                          idris_str_tail2.12 <- _prim_string_tail idris_str_tail1_0.12
                          unboxed.CGrString.41.0 <- pure idris_str_tail2.12
                          idr_Prelude.Strings.trim8_val_618.0 <- pure (CGrString unboxed.CGrString.41.0)
                          idr_Prelude.Strings.trim8_620.0 <- store idr_Prelude.Strings.trim8_val_618.0
                          idris_str_tail1.13 <- pure idr_Prelude.Strings.trim8_620.0
                          (CGrString idris_str_tail1_0.13) <- fetch idris_str_tail1.13
                          idris_str_tail2.13 <- _prim_string_tail idris_str_tail1_0.13
                          unboxed.CGrString.42.0 <- pure idris_str_tail2.13
                          idr_Prelude.Strings.trim8_val_617.0 <- pure (CGrString unboxed.CGrString.42.0)
                          idr_Prelude.Strings.trim8_621.0 <- store idr_Prelude.Strings.trim8_val_617.0
                          idris_str_tail1.14 <- pure idr_Prelude.Strings.trim8_621.0
                          (CGrString idris_str_tail1_0.14) <- fetch idris_str_tail1.14
                          idris_str_tail2.14 <- _prim_string_tail idris_str_tail1_0.14
                          unboxed.CGrString.43.0 <- pure idris_str_tail2.14
                          idr_Prelude.Strings.trim8_val.0 <- pure (CGrString unboxed.CGrString.43.0)
                          idr_Prelude.Strings.trim8_622.0 <- store idr_Prelude.Strings.trim8_val.0
                          (CGrInt idr_Prelude.Strings.trim7_616.41.56.arity.1.0) <- pure idr_Prelude.Strings.trim7_val.0
                          (CGrString idr_Prelude.Strings.trim8_622.49.28.arity.1.0) <- pure idr_Prelude.Strings.trim8_val.0
                          idris_str_cons1.41.arity.1.2 <- pure idr_Prelude.Strings.trim7_616.41.56.arity.1.0
                          idris_str_cons2.49.arity.1.2 <- pure idr_Prelude.Strings.trim8_622.49.28.arity.1.0
                          (CGrInt idris_str_cons1_0.2) <- pure (CGrInt idris_str_cons1.41.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrString idris_str_cons2_0.2) <- pure (CGrString idris_str_cons2.49.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_cons3.2 <- _prim_string_cons idris_str_cons1_0.2 idris_str_cons2_0.2
                          unboxed.CGrString.267.0 <- pure idris_str_cons3.2
                          pure (CGrString unboxed.CGrString.267.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.267.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.14) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.13) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.12) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.5) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.11) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.10)
                        (Cidr_Prelude.Bool.True) ->
                          (CGrString idr_Prelude.Strings.trim0.41.57.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.12 <- pure idr_Prelude.Strings.trim0.41.57.arity.1.0
                          (CGrString idris_str_rev1_0.12) <- pure (CGrString idris_str_rev1.41.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.12 <- _prim_string_reverse idris_str_rev1_0.12
                          unboxed.CGrString.44.0 <- pure idris_str_rev2.12
                          idr_Prelude.Strings.trim7_val_629.0 <- pure (CGrString unboxed.CGrString.44.0)
                          idr_Prelude.Strings.trim7_630.0 <- store idr_Prelude.Strings.trim7_val_629.0
                          idris_str_tail1.15 <- pure idr_Prelude.Strings.trim7_630.0
                          (CGrString idris_str_tail1_0.15) <- fetch idris_str_tail1.15
                          idris_str_tail2.15 <- _prim_string_tail idris_str_tail1_0.15
                          unboxed.CGrString.45.0 <- pure idris_str_tail2.15
                          idr_Prelude.Strings.trim7_val_628.0 <- pure (CGrString unboxed.CGrString.45.0)
                          idr_Prelude.Strings.trim7_631.0 <- store idr_Prelude.Strings.trim7_val_628.0
                          idris_str_tail1.16 <- pure idr_Prelude.Strings.trim7_631.0
                          (CGrString idris_str_tail1_0.16) <- fetch idris_str_tail1.16
                          idris_str_tail2.16 <- _prim_string_tail idris_str_tail1_0.16
                          unboxed.CGrString.46.0 <- pure idris_str_tail2.16
                          idr_Prelude.Strings.trim7_val_627.0 <- pure (CGrString unboxed.CGrString.46.0)
                          idr_Prelude.Strings.trim7_632.0 <- store idr_Prelude.Strings.trim7_val_627.0
                          idris_str_tail1.17 <- pure idr_Prelude.Strings.trim7_632.0
                          (CGrString idris_str_tail1_0.17) <- fetch idris_str_tail1.17
                          idris_str_tail2.17 <- _prim_string_tail idris_str_tail1_0.17
                          unboxed.CGrString.47.0 <- pure idris_str_tail2.17
                          idr_Prelude.Strings.trim7_val_626.0 <- pure (CGrString unboxed.CGrString.47.0)
                          idr_Prelude.Strings.trim7_633.0 <- store idr_Prelude.Strings.trim7_val_626.0
                          idr_Prelude.Strings.trim8_val_634.0 <- pure idr_Prelude.Strings.trim2_val.0
                          idr_Prelude.Strings.trim8_635.0 <- store idr_Prelude.Strings.trim8_val_634.0
                          (CGrString idr_Prelude.Strings.trim8_635.41.58.arity.1.0) <- pure idr_Prelude.Strings.trim8_val_634.0
                          idris_str_eq1.3 <- pure idr_Prelude.Strings.trim7_633.0
                          idris_str_eq2.41.arity.1.3 <- pure idr_Prelude.Strings.trim8_635.41.58.arity.1.0
                          (CGrString idris_str_eq1_0.3) <- fetch idris_str_eq1.3
                          (CGrString idris_str_eq2_0.3) <- pure (CGrString idris_str_eq2.41.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_eq3.3 <- _prim_string_eq idris_str_eq1_0.3 idris_str_eq2_0.3
                          ccp.2.3 <- case idris_str_eq3.3 of
                            #False ->
                              pure 0
                            #True ->
                              pure 1
                          unboxed.CGrInt.37.0 <- pure ccp.2.3
                          idr_Prelude.Strings.trim7_val_625.0 <- pure (CGrInt unboxed.CGrInt.37.0)
                          idr_Prelude.Strings.trim7_636.0 <- store idr_Prelude.Strings.trim7_val_625.0
                          idr_Prelude.Strings.trim7_val_637.0 <- pure idr_Prelude.Strings.trim7_val_625.0
                          idr_Prelude.Strings.trim7_val_624.0 <- case idr_Prelude.Strings.trim7_val_637.0 of
                            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_638.0) ->
                              case idr_Prelude.Strings.trim_cpat_LInt64_0_638.0 of
                                0 ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          idr_Prelude.Strings.trim7_639.0 <- store idr_Prelude.Strings.trim7_val_624.0
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.3" <- pure idr_Prelude.Strings.trim7_639.0
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.3" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                          idr_Prelude.Strings.trim7_val_623.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.3" of
                            (Cidr_Prelude.Bool.True) ->
                              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.3" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.3"
                              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.3" of
                                (Cidr_Prelude.Bool.False) ->
                                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                                (Cidr_Prelude.Bool.True) ->
                                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                          idr_Prelude.Strings.trim7_642.0 <- store idr_Prelude.Strings.trim7_val_623.0
                          idr_Prelude.Strings.trim7_val_643.0 <- pure idr_Prelude.Strings.trim7_val_623.0
                          case idr_Prelude.Strings.trim7_val_643.0 of
                            (Cidr_Prelude.Basics.No) ->
                              pure idr_Prelude.Strings.trim2_val.0
                            (Cidr_Prelude.Basics.Yes) ->
                              (CGrString idr_Prelude.Strings.trim0.41.60.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.13 <- pure idr_Prelude.Strings.trim0.41.60.arity.1.0
                              (CGrString idris_str_rev1_0.13) <- pure (CGrString idris_str_rev1.41.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.13 <- _prim_string_reverse idris_str_rev1_0.13
                              unboxed.CGrString.48.0 <- pure idris_str_rev2.13
                              idr_Prelude.Strings.trim8_val_649.0 <- pure (CGrString unboxed.CGrString.48.0)
                              idr_Prelude.Strings.trim8_650.0 <- store idr_Prelude.Strings.trim8_val_649.0
                              idris_str_tail1.18 <- pure idr_Prelude.Strings.trim8_650.0
                              (CGrString idris_str_tail1_0.18) <- fetch idris_str_tail1.18
                              idris_str_tail2.18 <- _prim_string_tail idris_str_tail1_0.18
                              unboxed.CGrString.49.0 <- pure idris_str_tail2.18
                              idr_Prelude.Strings.trim8_val_648.0 <- pure (CGrString unboxed.CGrString.49.0)
                              idr_Prelude.Strings.trim8_651.0 <- store idr_Prelude.Strings.trim8_val_648.0
                              idris_str_tail1.19 <- pure idr_Prelude.Strings.trim8_651.0
                              (CGrString idris_str_tail1_0.19) <- fetch idris_str_tail1.19
                              idris_str_tail2.19 <- _prim_string_tail idris_str_tail1_0.19
                              unboxed.CGrString.50.0 <- pure idris_str_tail2.19
                              idr_Prelude.Strings.trim8_val_647.0 <- pure (CGrString unboxed.CGrString.50.0)
                              idr_Prelude.Strings.trim8_652.0 <- store idr_Prelude.Strings.trim8_val_647.0
                              idris_str_tail1.20 <- pure idr_Prelude.Strings.trim8_652.0
                              (CGrString idris_str_tail1_0.20) <- fetch idris_str_tail1.20
                              idris_str_tail2.20 <- _prim_string_tail idris_str_tail1_0.20
                              unboxed.CGrString.51.0 <- pure idris_str_tail2.20
                              idr_Prelude.Strings.trim8_val_646.0 <- pure (CGrString unboxed.CGrString.51.0)
                              idr_Prelude.Strings.trim8_653.0 <- store idr_Prelude.Strings.trim8_val_646.0
                              idris_str_head1.6 <- pure idr_Prelude.Strings.trim8_653.0
                              (CGrString idris_str_head1_0.6) <- fetch idris_str_head1.6
                              idris_str_head2.6 <- _prim_string_head idris_str_head1_0.6
                              unboxed.CGrInt.38.0 <- pure idris_str_head2.6
                              idr_Prelude.Strings.trim8_val_645.0 <- pure (CGrInt unboxed.CGrInt.38.0)
                              idr_Prelude.Strings.trim8_654.0 <- store idr_Prelude.Strings.trim8_val_645.0
                              (CGrInt idr_Prelude.Strings.trim8_654.57.12.arity.1.0) <- pure idr_Prelude.Strings.trim8_val_645.0
                              idr_Prelude.Chars.isSpace0.57.arity.1.3 <- pure idr_Prelude.Strings.trim8_654.57.12.arity.1.0
                              idr_Prelude.Chars.isSpace1_val_27.3 <- pure idr_Prelude.Chars.isSpace1_val_27.0
                              idr_Prelude.Chars.isSpace1.3 <- store idr_Prelude.Chars.isSpace1_val_27.3
                              (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.3) <- pure idr_Prelude.Chars.isSpace1_val_27.3
                              (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.3) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.0.3 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.3
                              idris_int_eq1.41.arity.1.0.3 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.3
                              (CGrInt idris_int_eq0_1.0.3) <- pure (CGrInt idris_int_eq0.49.arity.1.0.3) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.0.3) <- pure (CGrInt idris_int_eq1.41.arity.1.0.3) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.0.3 <- _prim_int_eq idris_int_eq0_1.0.3 idris_int_eq1_1.0.3
                              ccp.0.0.3 <- case idris_int_eq2.0.3 of
                                #False ->
                                  pure 0
                                #True ->
                                  pure 1
                              unboxed.CGrInt.4.3 <- pure ccp.0.0.3
                              idr_Prelude.Chars.isSpace1_val.3 <- pure (CGrInt unboxed.CGrInt.4.3)
                              idr_Prelude.Chars.isSpace1_28.3 <- store idr_Prelude.Chars.isSpace1_val.3
                              idr_Prelude.Chars.isSpace1_val_29.3 <- pure idr_Prelude.Chars.isSpace1_val.3
                              idr_Prelude.Strings.trim8_val_644.0 <- case idr_Prelude.Chars.isSpace1_val_29.3 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.3) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0.3 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace2_val_30.3 <- pure (CGrInt 9)
                                      idr_Prelude.Chars.isSpace2.3 <- store idr_Prelude.Chars.isSpace2_val_30.3
                                      (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.3) <- pure idr_Prelude.Chars.isSpace2_val_30.3
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.3) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.1.3 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.3
                                      idris_int_eq1.41.arity.1.1.3 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.3
                                      (CGrInt idris_int_eq0_1.1.3) <- pure (CGrInt idris_int_eq0.49.arity.1.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.1.3) <- pure (CGrInt idris_int_eq1.41.arity.1.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.1.3 <- _prim_int_eq idris_int_eq0_1.1.3 idris_int_eq1_1.1.3
                                      ccp.0.1.3 <- case idris_int_eq2.1.3 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.3
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.5.3 <- pure ccp.0.1.3
                                      idr_Prelude.Chars.isSpace2_val.3 <- pure (CGrInt unboxed.CGrInt.5.3)
                                      idr_Prelude.Chars.isSpace2_31.3 <- store idr_Prelude.Chars.isSpace2_val.3
                                      idr_Prelude.Chars.isSpace2_val_32.3 <- pure idr_Prelude.Chars.isSpace2_val.3
                                      case idr_Prelude.Chars.isSpace2_val_32.3 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.3) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.3 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace3_val_34.3 <- pure (CGrInt 13)
                                              idr_Prelude.Chars.isSpace3.3 <- store idr_Prelude.Chars.isSpace3_val_34.3
                                              (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.3) <- pure idr_Prelude.Chars.isSpace3_val_34.3
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.3) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.2.3 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.3
                                              idris_int_eq1.41.arity.1.2.3 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.3
                                              (CGrInt idris_int_eq0_1.2.3) <- pure (CGrInt idris_int_eq0.49.arity.1.2.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.2.3) <- pure (CGrInt idris_int_eq1.41.arity.1.2.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.2.3 <- _prim_int_eq idris_int_eq0_1.2.3 idris_int_eq1_1.2.3
                                              ccp.0.2.3 <- case idris_int_eq2.2.3 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.3
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.6.3 <- pure ccp.0.2.3
                                              idr_Prelude.Chars.isSpace3_val.3 <- pure (CGrInt unboxed.CGrInt.6.3)
                                              idr_Prelude.Chars.isSpace3_35.3 <- store idr_Prelude.Chars.isSpace3_val.3
                                              idr_Prelude.Chars.isSpace3_val_36.3 <- pure idr_Prelude.Chars.isSpace3_val.3
                                              case idr_Prelude.Chars.isSpace3_val_36.3 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.3) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.3 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace4_val_38.3 <- pure (CGrInt 10)
                                                      idr_Prelude.Chars.isSpace4.3 <- store idr_Prelude.Chars.isSpace4_val_38.3
                                                      (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.3) <- pure idr_Prelude.Chars.isSpace4_val_38.3
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.3) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.3.3 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.3
                                                      idris_int_eq1.41.arity.1.3.3 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.3
                                                      (CGrInt idris_int_eq0_1.3.3) <- pure (CGrInt idris_int_eq0.49.arity.1.3.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.3.3) <- pure (CGrInt idris_int_eq1.41.arity.1.3.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.3.3 <- _prim_int_eq idris_int_eq0_1.3.3 idris_int_eq1_1.3.3
                                                      ccp.0.3.3 <- case idris_int_eq2.3.3 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.3
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.7.3 <- pure ccp.0.3.3
                                                      idr_Prelude.Chars.isSpace4_val.3 <- pure (CGrInt unboxed.CGrInt.7.3)
                                                      idr_Prelude.Chars.isSpace4_39.3 <- store idr_Prelude.Chars.isSpace4_val.3
                                                      idr_Prelude.Chars.isSpace4_val_40.3 <- pure idr_Prelude.Chars.isSpace4_val.3
                                                      case idr_Prelude.Chars.isSpace4_val_40.3 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.3) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.3 of
                                                            0 ->
                                                              idr_Prelude.Chars.isSpace5_val_42.3 <- pure (CGrInt 12)
                                                              idr_Prelude.Chars.isSpace5.3 <- store idr_Prelude.Chars.isSpace5_val_42.3
                                                              (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.3) <- pure idr_Prelude.Chars.isSpace5_val_42.3
                                                              (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.3) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq0.49.arity.1.4.3 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.3
                                                              idris_int_eq1.41.arity.1.4.3 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.3
                                                              (CGrInt idris_int_eq0_1.4.3) <- pure (CGrInt idris_int_eq0.49.arity.1.4.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              (CGrInt idris_int_eq1_1.4.3) <- pure (CGrInt idris_int_eq1.41.arity.1.4.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq2.4.3 <- _prim_int_eq idris_int_eq0_1.4.3 idris_int_eq1_1.4.3
                                                              ccp.0.4.3 <- case idris_int_eq2.4.3 of
                                                                #False ->
                                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.3
                                                                #True ->
                                                                  pure 1
                                                              unboxed.CGrInt.8.3 <- pure ccp.0.4.3
                                                              idr_Prelude.Chars.isSpace5_val.3 <- pure (CGrInt unboxed.CGrInt.8.3)
                                                              idr_Prelude.Chars.isSpace5_43.3 <- store idr_Prelude.Chars.isSpace5_val.3
                                                              idr_Prelude.Chars.isSpace5_val_44.3 <- pure idr_Prelude.Chars.isSpace5_val.3
                                                              case idr_Prelude.Chars.isSpace5_val_44.3 of
                                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.3) ->
                                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.3 of
                                                                    0 ->
                                                                      idr_Prelude.Chars.isSpace6_val_46.3 <- pure (CGrInt 11)
                                                                      idr_Prelude.Chars.isSpace6.3 <- store idr_Prelude.Chars.isSpace6_val_46.3
                                                                      (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.3) <- pure idr_Prelude.Chars.isSpace6_val_46.3
                                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.3) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      idris_int_eq0.49.arity.1.5.3 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.3
                                                                      idris_int_eq1.41.arity.1.5.3 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.3
                                                                      (CGrInt idris_int_eq0_1.5.3) <- pure (CGrInt idris_int_eq0.49.arity.1.5.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      (CGrInt idris_int_eq1_1.5.3) <- pure (CGrInt idris_int_eq1.41.arity.1.5.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      idris_int_eq2.5.3 <- _prim_int_eq idris_int_eq0_1.5.3 idris_int_eq1_1.5.3
                                                                      ccp.0.5.3 <- case idris_int_eq2.5.3 of
                                                                        #False ->
                                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.3
                                                                        #True ->
                                                                          pure 1
                                                                      unboxed.CGrInt.9.3 <- pure ccp.0.5.3
                                                                      idr_Prelude.Chars.isSpace6_val.3 <- pure (CGrInt unboxed.CGrInt.9.3)
                                                                      idr_Prelude.Chars.isSpace6_47.3 <- store idr_Prelude.Chars.isSpace6_val.3
                                                                      idr_Prelude.Chars.isSpace6_val_48.3 <- pure idr_Prelude.Chars.isSpace6_val.3
                                                                      case idr_Prelude.Chars.isSpace6_val_48.3 of
                                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.3) ->
                                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.3 of
                                                                            0 ->
                                                                              idr_Prelude.Chars.isSpace7_val_50.3 <- pure (CGrInt 160)
                                                                              idr_Prelude.Chars.isSpace7.3 <- store idr_Prelude.Chars.isSpace7_val_50.3
                                                                              (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.3) <- pure idr_Prelude.Chars.isSpace7_val_50.3
                                                                              (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.3) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                              idris_int_eq0.49.arity.1.6.3 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.3
                                                                              idris_int_eq1.41.arity.1.6.3 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.3
                                                                              (CGrInt idris_int_eq0_1.6.3) <- pure (CGrInt idris_int_eq0.49.arity.1.6.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                              (CGrInt idris_int_eq1_1.6.3) <- pure (CGrInt idris_int_eq1.41.arity.1.6.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                              idris_int_eq2.6.3 <- _prim_int_eq idris_int_eq0_1.6.3 idris_int_eq1_1.6.3
                                                                              ccp.0.6.3 <- case idris_int_eq2.6.3 of
                                                                                #False ->
                                                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.3
                                                                                #True ->
                                                                                  pure 1
                                                                              unboxed.CGrInt.10.3 <- pure ccp.0.6.3
                                                                              idr_Prelude.Chars.isSpace7_val.3 <- pure (CGrInt unboxed.CGrInt.10.3)
                                                                              idr_Prelude.Chars.isSpace7_51.3 <- store idr_Prelude.Chars.isSpace7_val.3
                                                                              idr_Prelude.Chars.isSpace7_val_52.3 <- pure idr_Prelude.Chars.isSpace7_val.3
                                                                              case idr_Prelude.Chars.isSpace7_val_52.3 of
                                                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.3) ->
                                                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.3 of
                                                                                    0 ->
                                                                                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                                    #default ->
                                                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                            #default ->
                                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                    #default ->
                                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                              idr_Prelude.Strings.trim8_655.0 <- store idr_Prelude.Strings.trim8_val_644.0
                              idr_Prelude.Strings.trim8_val_656.0 <- pure idr_Prelude.Strings.trim8_val_644.0
                              case idr_Prelude.Strings.trim8_val_656.0 of
                                (Cidr_Prelude.Bool.False) ->
                                  (CGrString idr_Prelude.Strings.trim0.41.61.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev1.41.arity.1.14 <- pure idr_Prelude.Strings.trim0.41.61.arity.1.0
                                  (CGrString idris_str_rev1_0.14) <- pure (CGrString idris_str_rev1.41.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev2.14 <- _prim_string_reverse idris_str_rev1_0.14
                                  unboxed.CGrString.52.0 <- pure idris_str_rev2.14
                                  idr_Prelude.Strings.trim9_val_660.0 <- pure (CGrString unboxed.CGrString.52.0)
                                  idr_Prelude.Strings.trim9.0 <- store idr_Prelude.Strings.trim9_val_660.0
                                  idris_str_tail1.21 <- pure idr_Prelude.Strings.trim9.0
                                  (CGrString idris_str_tail1_0.21) <- fetch idris_str_tail1.21
                                  idris_str_tail2.21 <- _prim_string_tail idris_str_tail1_0.21
                                  unboxed.CGrString.53.0 <- pure idris_str_tail2.21
                                  idr_Prelude.Strings.trim9_val_659.0 <- pure (CGrString unboxed.CGrString.53.0)
                                  idr_Prelude.Strings.trim9_661.0 <- store idr_Prelude.Strings.trim9_val_659.0
                                  idris_str_tail1.22 <- pure idr_Prelude.Strings.trim9_661.0
                                  (CGrString idris_str_tail1_0.22) <- fetch idris_str_tail1.22
                                  idris_str_tail2.22 <- _prim_string_tail idris_str_tail1_0.22
                                  unboxed.CGrString.54.0 <- pure idris_str_tail2.22
                                  idr_Prelude.Strings.trim9_val_658.0 <- pure (CGrString unboxed.CGrString.54.0)
                                  idr_Prelude.Strings.trim9_662.0 <- store idr_Prelude.Strings.trim9_val_658.0
                                  idris_str_tail1.23 <- pure idr_Prelude.Strings.trim9_662.0
                                  (CGrString idris_str_tail1_0.23) <- fetch idris_str_tail1.23
                                  idris_str_tail2.23 <- _prim_string_tail idris_str_tail1_0.23
                                  unboxed.CGrString.55.0 <- pure idris_str_tail2.23
                                  idr_Prelude.Strings.trim9_val_657.0 <- pure (CGrString unboxed.CGrString.55.0)
                                  idr_Prelude.Strings.trim9_663.0 <- store idr_Prelude.Strings.trim9_val_657.0
                                  idris_str_head1.7 <- pure idr_Prelude.Strings.trim9_663.0
                                  (CGrString idris_str_head1_0.7) <- fetch idris_str_head1.7
                                  idris_str_head2.7 <- _prim_string_head idris_str_head1_0.7
                                  unboxed.CGrInt.39.0 <- pure idris_str_head2.7
                                  idr_Prelude.Strings.trim9_val.0 <- pure (CGrInt unboxed.CGrInt.39.0)
                                  idr_Prelude.Strings.trim9_664.0 <- store idr_Prelude.Strings.trim9_val.0
                                  (CGrString idr_Prelude.Strings.trim0.41.62.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev1.41.arity.1.15 <- pure idr_Prelude.Strings.trim0.41.62.arity.1.0
                                  (CGrString idris_str_rev1_0.15) <- pure (CGrString idris_str_rev1.41.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev2.15 <- _prim_string_reverse idris_str_rev1_0.15
                                  unboxed.CGrString.56.0 <- pure idris_str_rev2.15
                                  idr_Prelude.Strings.trim10_val_668.0 <- pure (CGrString unboxed.CGrString.56.0)
                                  idr_Prelude.Strings.trim10.0 <- store idr_Prelude.Strings.trim10_val_668.0
                                  idris_str_tail1.24 <- pure idr_Prelude.Strings.trim10.0
                                  (CGrString idris_str_tail1_0.24) <- fetch idris_str_tail1.24
                                  idris_str_tail2.24 <- _prim_string_tail idris_str_tail1_0.24
                                  unboxed.CGrString.57.0 <- pure idris_str_tail2.24
                                  idr_Prelude.Strings.trim10_val_667.0 <- pure (CGrString unboxed.CGrString.57.0)
                                  idr_Prelude.Strings.trim10_669.0 <- store idr_Prelude.Strings.trim10_val_667.0
                                  idris_str_tail1.25 <- pure idr_Prelude.Strings.trim10_669.0
                                  (CGrString idris_str_tail1_0.25) <- fetch idris_str_tail1.25
                                  idris_str_tail2.25 <- _prim_string_tail idris_str_tail1_0.25
                                  unboxed.CGrString.58.0 <- pure idris_str_tail2.25
                                  idr_Prelude.Strings.trim10_val_666.0 <- pure (CGrString unboxed.CGrString.58.0)
                                  idr_Prelude.Strings.trim10_670.0 <- store idr_Prelude.Strings.trim10_val_666.0
                                  idris_str_tail1.26 <- pure idr_Prelude.Strings.trim10_670.0
                                  (CGrString idris_str_tail1_0.26) <- fetch idris_str_tail1.26
                                  idris_str_tail2.26 <- _prim_string_tail idris_str_tail1_0.26
                                  unboxed.CGrString.59.0 <- pure idris_str_tail2.26
                                  idr_Prelude.Strings.trim10_val_665.0 <- pure (CGrString unboxed.CGrString.59.0)
                                  idr_Prelude.Strings.trim10_671.0 <- store idr_Prelude.Strings.trim10_val_665.0
                                  idris_str_tail1.27 <- pure idr_Prelude.Strings.trim10_671.0
                                  (CGrString idris_str_tail1_0.27) <- fetch idris_str_tail1.27
                                  idris_str_tail2.27 <- _prim_string_tail idris_str_tail1_0.27
                                  unboxed.CGrString.60.0 <- pure idris_str_tail2.27
                                  idr_Prelude.Strings.trim10_val.0 <- pure (CGrString unboxed.CGrString.60.0)
                                  idr_Prelude.Strings.trim10_672.0 <- store idr_Prelude.Strings.trim10_val.0
                                  (CGrInt idr_Prelude.Strings.trim9_664.41.63.arity.1.0) <- pure idr_Prelude.Strings.trim9_val.0
                                  (CGrString idr_Prelude.Strings.trim10_672.49.29.arity.1.0) <- pure idr_Prelude.Strings.trim10_val.0
                                  idris_str_cons1.41.arity.1.3 <- pure idr_Prelude.Strings.trim9_664.41.63.arity.1.0
                                  idris_str_cons2.49.arity.1.3 <- pure idr_Prelude.Strings.trim10_672.49.29.arity.1.0
                                  (CGrInt idris_str_cons1_0.3) <- pure (CGrInt idris_str_cons1.41.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                  (CGrString idris_str_cons2_0.3) <- pure (CGrString idris_str_cons2.49.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_cons3.3 <- _prim_string_cons idris_str_cons1_0.3 idris_str_cons2_0.3
                                  unboxed.CGrString.268.0 <- pure idris_str_cons3.3
                                  pure (CGrString unboxed.CGrString.268.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.268.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.27) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.26) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.25) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.24) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.7) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.23) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.22) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.21)
                                (Cidr_Prelude.Bool.True) ->
                                  (CGrString idr_Prelude.Strings.trim0.41.64.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev1.41.arity.1.16 <- pure idr_Prelude.Strings.trim0.41.64.arity.1.0
                                  (CGrString idris_str_rev1_0.16) <- pure (CGrString idris_str_rev1.41.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev2.16 <- _prim_string_reverse idris_str_rev1_0.16
                                  unboxed.CGrString.61.0 <- pure idris_str_rev2.16
                                  idr_Prelude.Strings.trim10_val_683.0 <- pure (CGrString unboxed.CGrString.61.0)
                                  idr_Prelude.Strings.trim10_684.0 <- store idr_Prelude.Strings.trim10_val_683.0
                                  idris_str_tail1.28 <- pure idr_Prelude.Strings.trim10_684.0
                                  (CGrString idris_str_tail1_0.28) <- fetch idris_str_tail1.28
                                  idris_str_tail2.28 <- _prim_string_tail idris_str_tail1_0.28
                                  unboxed.CGrString.62.0 <- pure idris_str_tail2.28
                                  idr_Prelude.Strings.trim10_val_682.0 <- pure (CGrString unboxed.CGrString.62.0)
                                  idr_Prelude.Strings.trim10_685.0 <- store idr_Prelude.Strings.trim10_val_682.0
                                  idris_str_tail1.29 <- pure idr_Prelude.Strings.trim10_685.0
                                  (CGrString idris_str_tail1_0.29) <- fetch idris_str_tail1.29
                                  idris_str_tail2.29 <- _prim_string_tail idris_str_tail1_0.29
                                  unboxed.CGrString.63.0 <- pure idris_str_tail2.29
                                  idr_Prelude.Strings.trim10_val_681.0 <- pure (CGrString unboxed.CGrString.63.0)
                                  idr_Prelude.Strings.trim10_686.0 <- store idr_Prelude.Strings.trim10_val_681.0
                                  idris_str_tail1.30 <- pure idr_Prelude.Strings.trim10_686.0
                                  (CGrString idris_str_tail1_0.30) <- fetch idris_str_tail1.30
                                  idris_str_tail2.30 <- _prim_string_tail idris_str_tail1_0.30
                                  unboxed.CGrString.64.0 <- pure idris_str_tail2.30
                                  idr_Prelude.Strings.trim10_val_680.0 <- pure (CGrString unboxed.CGrString.64.0)
                                  idr_Prelude.Strings.trim10_687.0 <- store idr_Prelude.Strings.trim10_val_680.0
                                  idris_str_tail1.31 <- pure idr_Prelude.Strings.trim10_687.0
                                  (CGrString idris_str_tail1_0.31) <- fetch idris_str_tail1.31
                                  idris_str_tail2.31 <- _prim_string_tail idris_str_tail1_0.31
                                  unboxed.CGrString.65.0 <- pure idris_str_tail2.31
                                  idr_Prelude.Strings.trim10_val_679.0 <- pure (CGrString unboxed.CGrString.65.0)
                                  idr_Prelude.Strings.trim10_688.0 <- store idr_Prelude.Strings.trim10_val_679.0
                                  idr_Prelude.Strings.trim11_val.0 <- pure idr_Prelude.Strings.trim2_val.0
                                  idr_Prelude.Strings.trim11.0 <- store idr_Prelude.Strings.trim11_val.0
                                  (CGrString idr_Prelude.Strings.trim11.41.65.arity.1.0) <- pure idr_Prelude.Strings.trim11_val.0
                                  idris_str_eq1.4 <- pure idr_Prelude.Strings.trim10_688.0
                                  idris_str_eq2.41.arity.1.4 <- pure idr_Prelude.Strings.trim11.41.65.arity.1.0
                                  (CGrString idris_str_eq1_0.4) <- fetch idris_str_eq1.4
                                  (CGrString idris_str_eq2_0.4) <- pure (CGrString idris_str_eq2.41.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_eq3.4 <- _prim_string_eq idris_str_eq1_0.4 idris_str_eq2_0.4
                                  ccp.2.4 <- case idris_str_eq3.4 of
                                    #False ->
                                      pure 0
                                    #True ->
                                      pure 1
                                  unboxed.CGrInt.40.0 <- pure ccp.2.4
                                  idr_Prelude.Strings.trim10_val_678.0 <- pure (CGrInt unboxed.CGrInt.40.0)
                                  idr_Prelude.Strings.trim10_689.0 <- store idr_Prelude.Strings.trim10_val_678.0
                                  idr_Prelude.Strings.trim10_val_690.0 <- pure idr_Prelude.Strings.trim10_val_678.0
                                  idr_Prelude.Strings.trim10_val_677.0 <- case idr_Prelude.Strings.trim10_val_690.0 of
                                    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_691.0) ->
                                      case idr_Prelude.Strings.trim_cpat_LInt64_0_691.0 of
                                        0 ->
                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                        #default ->
                                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                  idr_Prelude.Strings.trim10_692.0 <- store idr_Prelude.Strings.trim10_val_677.0
                                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.4" <- pure idr_Prelude.Strings.trim10_692.0
                                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.4" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                  idr_Prelude.Strings.trim10_val_676.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.4" of
                                    (Cidr_Prelude.Bool.True) ->
                                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.4" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.4"
                                      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.4" of
                                        (Cidr_Prelude.Bool.False) ->
                                          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                                        (Cidr_Prelude.Bool.True) ->
                                          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                                  idr_Prelude.Strings.trim10_695.0 <- store idr_Prelude.Strings.trim10_val_676.0
                                  idr_Prelude.Strings.trim10_val_696.0 <- pure idr_Prelude.Strings.trim10_val_676.0
                                  idr_Prelude.Strings.trim10_val_675.0 <- case idr_Prelude.Strings.trim10_val_696.0 of
                                    (Cidr_Prelude.Basics.No) ->
                                      pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                                    (Cidr_Prelude.Basics.Yes) ->
                                      (CGrString idr_Prelude.Strings.trim0.41.67.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_str_rev1.41.arity.1.17 <- pure idr_Prelude.Strings.trim0.41.67.arity.1.0
                                      (CGrString idris_str_rev1_0.17) <- pure (CGrString idris_str_rev1.41.arity.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_str_rev2.17 <- _prim_string_reverse idris_str_rev1_0.17
                                      unboxed.CGrString.66.0 <- pure idris_str_rev2.17
                                      idr_Prelude.Strings.trim11_val_702.0 <- pure (CGrString unboxed.CGrString.66.0)
                                      idr_Prelude.Strings.trim11_703.0 <- store idr_Prelude.Strings.trim11_val_702.0
                                      idris_str_tail1.32 <- pure idr_Prelude.Strings.trim11_703.0
                                      (CGrString idris_str_tail1_0.32) <- fetch idris_str_tail1.32
                                      idris_str_tail2.32 <- _prim_string_tail idris_str_tail1_0.32
                                      unboxed.CGrString.67.0 <- pure idris_str_tail2.32
                                      idr_Prelude.Strings.trim11_val_701.0 <- pure (CGrString unboxed.CGrString.67.0)
                                      idr_Prelude.Strings.trim11_704.0 <- store idr_Prelude.Strings.trim11_val_701.0
                                      idris_str_tail1.33 <- pure idr_Prelude.Strings.trim11_704.0
                                      (CGrString idris_str_tail1_0.33) <- fetch idris_str_tail1.33
                                      idris_str_tail2.33 <- _prim_string_tail idris_str_tail1_0.33
                                      unboxed.CGrString.68.0 <- pure idris_str_tail2.33
                                      idr_Prelude.Strings.trim11_val_700.0 <- pure (CGrString unboxed.CGrString.68.0)
                                      idr_Prelude.Strings.trim11_705.0 <- store idr_Prelude.Strings.trim11_val_700.0
                                      idris_str_tail1.34 <- pure idr_Prelude.Strings.trim11_705.0
                                      (CGrString idris_str_tail1_0.34) <- fetch idris_str_tail1.34
                                      idris_str_tail2.34 <- _prim_string_tail idris_str_tail1_0.34
                                      unboxed.CGrString.69.0 <- pure idris_str_tail2.34
                                      idr_Prelude.Strings.trim11_val_699.0 <- pure (CGrString unboxed.CGrString.69.0)
                                      idr_Prelude.Strings.trim11_706.0 <- store idr_Prelude.Strings.trim11_val_699.0
                                      idris_str_tail1.35 <- pure idr_Prelude.Strings.trim11_706.0
                                      (CGrString idris_str_tail1_0.35) <- fetch idris_str_tail1.35
                                      idris_str_tail2.35 <- _prim_string_tail idris_str_tail1_0.35
                                      unboxed.CGrString.70.0 <- pure idris_str_tail2.35
                                      idr_Prelude.Strings.trim11_val_698.0 <- pure (CGrString unboxed.CGrString.70.0)
                                      idr_Prelude.Strings.trim11_707.0 <- store idr_Prelude.Strings.trim11_val_698.0
                                      idris_str_head1.8 <- pure idr_Prelude.Strings.trim11_707.0
                                      (CGrString idris_str_head1_0.8) <- fetch idris_str_head1.8
                                      idris_str_head2.8 <- _prim_string_head idris_str_head1_0.8
                                      unboxed.CGrInt.41.0 <- pure idris_str_head2.8
                                      idr_Prelude.Strings.trim11_val_697.0 <- pure (CGrInt unboxed.CGrInt.41.0)
                                      idr_Prelude.Strings.trim11_708.0 <- store idr_Prelude.Strings.trim11_val_697.0
                                      (CGrString idr_Prelude.Strings.trim0.41.68.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_str_rev1.41.arity.1.18 <- pure idr_Prelude.Strings.trim0.41.68.arity.1.0
                                      (CGrString idris_str_rev1_0.18) <- pure (CGrString idris_str_rev1.41.arity.1.18) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_str_rev2.18 <- _prim_string_reverse idris_str_rev1_0.18
                                      unboxed.CGrString.71.0 <- pure idris_str_rev2.18
                                      idr_Prelude.Strings.trim12_val_713.0 <- pure (CGrString unboxed.CGrString.71.0)
                                      idr_Prelude.Strings.trim12.0 <- store idr_Prelude.Strings.trim12_val_713.0
                                      idris_str_tail1.36 <- pure idr_Prelude.Strings.trim12.0
                                      (CGrString idris_str_tail1_0.36) <- fetch idris_str_tail1.36
                                      idris_str_tail2.36 <- _prim_string_tail idris_str_tail1_0.36
                                      unboxed.CGrString.72.0 <- pure idris_str_tail2.36
                                      idr_Prelude.Strings.trim12_val_712.0 <- pure (CGrString unboxed.CGrString.72.0)
                                      idr_Prelude.Strings.trim12_714.0 <- store idr_Prelude.Strings.trim12_val_712.0
                                      idris_str_tail1.37 <- pure idr_Prelude.Strings.trim12_714.0
                                      (CGrString idris_str_tail1_0.37) <- fetch idris_str_tail1.37
                                      idris_str_tail2.37 <- _prim_string_tail idris_str_tail1_0.37
                                      unboxed.CGrString.73.0 <- pure idris_str_tail2.37
                                      idr_Prelude.Strings.trim12_val_711.0 <- pure (CGrString unboxed.CGrString.73.0)
                                      idr_Prelude.Strings.trim12_715.0 <- store idr_Prelude.Strings.trim12_val_711.0
                                      idris_str_tail1.38 <- pure idr_Prelude.Strings.trim12_715.0
                                      (CGrString idris_str_tail1_0.38) <- fetch idris_str_tail1.38
                                      idris_str_tail2.38 <- _prim_string_tail idris_str_tail1_0.38
                                      unboxed.CGrString.74.0 <- pure idris_str_tail2.38
                                      idr_Prelude.Strings.trim12_val_710.0 <- pure (CGrString unboxed.CGrString.74.0)
                                      idr_Prelude.Strings.trim12_716.0 <- store idr_Prelude.Strings.trim12_val_710.0
                                      idris_str_tail1.39 <- pure idr_Prelude.Strings.trim12_716.0
                                      (CGrString idris_str_tail1_0.39) <- fetch idris_str_tail1.39
                                      idris_str_tail2.39 <- _prim_string_tail idris_str_tail1_0.39
                                      unboxed.CGrString.75.0 <- pure idris_str_tail2.39
                                      idr_Prelude.Strings.trim12_val_709.0 <- pure (CGrString unboxed.CGrString.75.0)
                                      idr_Prelude.Strings.trim12_717.0 <- store idr_Prelude.Strings.trim12_val_709.0
                                      idris_str_tail1.40 <- pure idr_Prelude.Strings.trim12_717.0
                                      (CGrString idris_str_tail1_0.40) <- fetch idris_str_tail1.40
                                      idris_str_tail2.40 <- _prim_string_tail idris_str_tail1_0.40
                                      unboxed.CGrString.76.0 <- pure idris_str_tail2.40
                                      idr_Prelude.Strings.trim12_val.0 <- pure (CGrString unboxed.CGrString.76.0)
                                      idr_Prelude.Strings.trim12_718.0 <- store idr_Prelude.Strings.trim12_val.0
                                      pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim11_708.0 idr_Prelude.Strings.trim12_718.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim11_708.0 idr_Prelude.Strings.trim12_718.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.40) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.39) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.38) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.37) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.36) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.8) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.35) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.34) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.33) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.32)
                                  idr_Prelude.Strings.trim10_719.0 <- store idr_Prelude.Strings.trim10_val_675.0
                                  unboxed.CGrString.77.0 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim10_719.0
                                  pure (CGrString unboxed.CGrString.77.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.77.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.4) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.31) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.30) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.29) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.28) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.6) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.20) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.19) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.18) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.17) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.16) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.15) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.4) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.9) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.8) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.7) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.6) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.0)
  idr_Prelude.Strings.trim1_720.0 <- store idr_Prelude.Strings.trim1_val_524.0
  (CGrString idr_Prelude.Strings.trim1_720.41.69.arity.1.0) <- pure idr_Prelude.Strings.trim1_val_524.0
  idris_str_rev1.41.arity.1.19 <- pure idr_Prelude.Strings.trim1_720.41.69.arity.1.0
  (CGrString idris_str_rev1_0.19) <- pure (CGrString idris_str_rev1.41.arity.1.19) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_rev2.19 <- _prim_string_reverse idris_str_rev1_0.19
  unboxed.CGrString.78.0 <- pure idris_str_rev2.19
  idr_Prelude.Strings.trim1_val_523.0 <- pure (CGrString unboxed.CGrString.78.0)
  idr_Prelude.Strings.trim1_721.0 <- store idr_Prelude.Strings.trim1_val_523.0
  idr_Prelude.Strings.trim2_val_722.0 <- pure idr_Prelude.Strings.trim2_val.0
  idr_Prelude.Strings.trim2_723.0 <- store idr_Prelude.Strings.trim2_val_722.0
  (CGrString idr_Prelude.Strings.trim2_723.41.70.arity.1.0) <- pure idr_Prelude.Strings.trim2_val_722.0
  idris_str_eq1.5 <- pure idr_Prelude.Strings.trim1_721.0
  idris_str_eq2.41.arity.1.5 <- pure idr_Prelude.Strings.trim2_723.41.70.arity.1.0
  (CGrString idris_str_eq1_0.5) <- fetch idris_str_eq1.5
  (CGrString idris_str_eq2_0.5) <- pure (CGrString idris_str_eq2.41.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_eq3.5 <- _prim_string_eq idris_str_eq1_0.5 idris_str_eq2_0.5
  ccp.2.5 <- case idris_str_eq3.5 of
    #False ->
      pure 0
    #True ->
      pure 1
  unboxed.CGrInt.42.0 <- pure ccp.2.5
  idr_Prelude.Strings.trim1_val_522.0 <- pure (CGrInt unboxed.CGrInt.42.0)
  idr_Prelude.Strings.trim1_724.0 <- store idr_Prelude.Strings.trim1_val_522.0
  idr_Prelude.Strings.trim1_val_725.0 <- pure idr_Prelude.Strings.trim1_val_522.0
  idr_Prelude.Strings.trim1_val_521.0 <- case idr_Prelude.Strings.trim1_val_725.0 of
    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_726.0) ->
      case idr_Prelude.Strings.trim_cpat_LInt64_0_726.0 of
        0 ->
          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Strings.trim1_727.0 <- store idr_Prelude.Strings.trim1_val_521.0
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.5" <- pure idr_Prelude.Strings.trim1_727.0
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.5" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
  idr_Prelude.Strings.trim1_val.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.5" of
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.5" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.5"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.5" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
  idr_Prelude.Strings.trim1_730.0 <- store idr_Prelude.Strings.trim1_val.0
  idr_Prelude.Strings.trim1_val_731.0 <- pure idr_Prelude.Strings.trim1_val.0
  unboxed.CGrString.4.0 <- case idr_Prelude.Strings.trim1_val_731.0 of
    (Cidr_Prelude.Basics.No) ->
      pure #""
    (Cidr_Prelude.Basics.Yes) ->
      (CGrString idr_Prelude.Strings.trim0.41.72.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_rev1.41.arity.1.20 <- pure idr_Prelude.Strings.trim0.41.72.arity.1.0
      (CGrString idris_str_rev1_0.20) <- pure (CGrString idris_str_rev1.41.arity.1.20) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_rev2.20 <- _prim_string_reverse idris_str_rev1_0.20
      unboxed.CGrString.79.0 <- pure idris_str_rev2.20
      idr_Prelude.Strings.trim2_val_739.0 <- pure (CGrString unboxed.CGrString.79.0)
      idr_Prelude.Strings.trim2_740.0 <- store idr_Prelude.Strings.trim2_val_739.0
      idr_Prelude.Strings.trim3_val_741.0 <- pure idr_Prelude.Strings.trim2_val.0
      idr_Prelude.Strings.trim3_742.0 <- store idr_Prelude.Strings.trim3_val_741.0
      (CGrString idr_Prelude.Strings.trim3_742.41.73.arity.1.0) <- pure idr_Prelude.Strings.trim3_val_741.0
      idris_str_eq1.6 <- pure idr_Prelude.Strings.trim2_740.0
      idris_str_eq2.41.arity.1.6 <- pure idr_Prelude.Strings.trim3_742.41.73.arity.1.0
      (CGrString idris_str_eq1_0.6) <- fetch idris_str_eq1.6
      (CGrString idris_str_eq2_0.6) <- pure (CGrString idris_str_eq2.41.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_eq3.6 <- _prim_string_eq idris_str_eq1_0.6 idris_str_eq2_0.6
      ccp.2.6 <- case idris_str_eq3.6 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.43.0 <- pure ccp.2.6
      idr_Prelude.Strings.trim2_val_738.0 <- pure (CGrInt unboxed.CGrInt.43.0)
      idr_Prelude.Strings.trim2_743.0 <- store idr_Prelude.Strings.trim2_val_738.0
      idr_Prelude.Strings.trim2_val_744.0 <- pure idr_Prelude.Strings.trim2_val_738.0
      idr_Prelude.Strings.trim2_val_737.0 <- case idr_Prelude.Strings.trim2_val_744.0 of
        (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_745.0) ->
          case idr_Prelude.Strings.trim_cpat_LInt64_0_745.0 of
            0 ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Strings.trim2_746.0 <- store idr_Prelude.Strings.trim2_val_737.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.6" <- pure idr_Prelude.Strings.trim2_746.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.6" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
      idr_Prelude.Strings.trim2_val_736.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.6" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.6" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.6"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.6" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Prelude.Strings.trim2_749.0 <- store idr_Prelude.Strings.trim2_val_736.0
      idr_Prelude.Strings.trim2_val_750.0 <- pure idr_Prelude.Strings.trim2_val_736.0
      idr_Prelude.Strings.trim2_val_735.0 <- case idr_Prelude.Strings.trim2_val_750.0 of
        (Cidr_Prelude.Basics.No) ->
          pure idr_Prelude.Strings.trim2_val.0
        (Cidr_Prelude.Basics.Yes) ->
          (CGrString idr_Prelude.Strings.trim0.41.75.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev1.41.arity.1.21 <- pure idr_Prelude.Strings.trim0.41.75.arity.1.0
          (CGrString idris_str_rev1_0.21) <- pure (CGrString idris_str_rev1.41.arity.1.21) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev2.21 <- _prim_string_reverse idris_str_rev1_0.21
          unboxed.CGrString.80.0 <- pure idris_str_rev2.21
          idr_Prelude.Strings.trim3_val_753.0 <- pure (CGrString unboxed.CGrString.80.0)
          idr_Prelude.Strings.trim3_754.0 <- store idr_Prelude.Strings.trim3_val_753.0
          idris_str_head1.9 <- pure idr_Prelude.Strings.trim3_754.0
          (CGrString idris_str_head1_0.9) <- fetch idris_str_head1.9
          idris_str_head2.9 <- _prim_string_head idris_str_head1_0.9
          unboxed.CGrInt.44.0 <- pure idris_str_head2.9
          idr_Prelude.Strings.trim3_val_752.0 <- pure (CGrInt unboxed.CGrInt.44.0)
          idr_Prelude.Strings.trim3_755.0 <- store idr_Prelude.Strings.trim3_val_752.0
          (CGrInt idr_Prelude.Strings.trim3_755.57.13.arity.1.0) <- pure idr_Prelude.Strings.trim3_val_752.0
          idr_Prelude.Chars.isSpace0.57.arity.1.4 <- pure idr_Prelude.Strings.trim3_755.57.13.arity.1.0
          idr_Prelude.Chars.isSpace1_val_27.4 <- pure (CGrInt 32)
          idr_Prelude.Chars.isSpace1.4 <- store idr_Prelude.Chars.isSpace1_val_27.4
          (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.4) <- pure idr_Prelude.Chars.isSpace1_val_27.4
          (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.4) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_eq0.49.arity.1.0.4 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.4
          idris_int_eq1.41.arity.1.0.4 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.4
          (CGrInt idris_int_eq0_1.0.4) <- pure (CGrInt idris_int_eq0.49.arity.1.0.4) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_eq1_1.0.4) <- pure (CGrInt idris_int_eq1.41.arity.1.0.4) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_eq2.0.4 <- _prim_int_eq idris_int_eq0_1.0.4 idris_int_eq1_1.0.4
          ccp.0.0.4 <- case idris_int_eq2.0.4 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.4.4 <- pure ccp.0.0.4
          idr_Prelude.Chars.isSpace1_val.4 <- pure (CGrInt unboxed.CGrInt.4.4)
          idr_Prelude.Chars.isSpace1_28.4 <- store idr_Prelude.Chars.isSpace1_val.4
          idr_Prelude.Chars.isSpace1_val_29.4 <- pure idr_Prelude.Chars.isSpace1_val.4
          idr_Prelude.Strings.trim3_val_751.0 <- case idr_Prelude.Chars.isSpace1_val_29.4 of
            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.4) ->
              case idr_Prelude.Chars.isSpace_cpat_LInt64_0.4 of
                0 ->
                  idr_Prelude.Chars.isSpace2_val_30.4 <- pure (CGrInt 9)
                  idr_Prelude.Chars.isSpace2.4 <- store idr_Prelude.Chars.isSpace2_val_30.4
                  (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.4) <- pure idr_Prelude.Chars.isSpace2_val_30.4
                  (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.4) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_eq0.49.arity.1.1.4 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.4
                  idris_int_eq1.41.arity.1.1.4 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.4
                  (CGrInt idris_int_eq0_1.1.4) <- pure (CGrInt idris_int_eq0.49.arity.1.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_eq1_1.1.4) <- pure (CGrInt idris_int_eq1.41.arity.1.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_eq2.1.4 <- _prim_int_eq idris_int_eq0_1.1.4 idris_int_eq1_1.1.4
                  ccp.0.1.4 <- case idris_int_eq2.1.4 of
                    #False ->
                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.4
                    #True ->
                      pure 1
                  unboxed.CGrInt.5.4 <- pure ccp.0.1.4
                  idr_Prelude.Chars.isSpace2_val.4 <- pure (CGrInt unboxed.CGrInt.5.4)
                  idr_Prelude.Chars.isSpace2_31.4 <- store idr_Prelude.Chars.isSpace2_val.4
                  idr_Prelude.Chars.isSpace2_val_32.4 <- pure idr_Prelude.Chars.isSpace2_val.4
                  case idr_Prelude.Chars.isSpace2_val_32.4 of
                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.4) ->
                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.4 of
                        0 ->
                          idr_Prelude.Chars.isSpace3_val_34.4 <- pure (CGrInt 13)
                          idr_Prelude.Chars.isSpace3.4 <- store idr_Prelude.Chars.isSpace3_val_34.4
                          (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.4) <- pure idr_Prelude.Chars.isSpace3_val_34.4
                          (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.4) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq0.49.arity.1.2.4 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.4
                          idris_int_eq1.41.arity.1.2.4 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.4
                          (CGrInt idris_int_eq0_1.2.4) <- pure (CGrInt idris_int_eq0.49.arity.1.2.4) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrInt idris_int_eq1_1.2.4) <- pure (CGrInt idris_int_eq1.41.arity.1.2.4) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq2.2.4 <- _prim_int_eq idris_int_eq0_1.2.4 idris_int_eq1_1.2.4
                          ccp.0.2.4 <- case idris_int_eq2.2.4 of
                            #False ->
                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.4
                            #True ->
                              pure 1
                          unboxed.CGrInt.6.4 <- pure ccp.0.2.4
                          idr_Prelude.Chars.isSpace3_val.4 <- pure (CGrInt unboxed.CGrInt.6.4)
                          idr_Prelude.Chars.isSpace3_35.4 <- store idr_Prelude.Chars.isSpace3_val.4
                          idr_Prelude.Chars.isSpace3_val_36.4 <- pure idr_Prelude.Chars.isSpace3_val.4
                          case idr_Prelude.Chars.isSpace3_val_36.4 of
                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.4) ->
                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.4 of
                                0 ->
                                  idr_Prelude.Chars.isSpace4_val_38.4 <- pure (CGrInt 10)
                                  idr_Prelude.Chars.isSpace4.4 <- store idr_Prelude.Chars.isSpace4_val_38.4
                                  (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.4) <- pure idr_Prelude.Chars.isSpace4_val_38.4
                                  (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.4) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq0.49.arity.1.3.4 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.4
                                  idris_int_eq1.41.arity.1.3.4 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.4
                                  (CGrInt idris_int_eq0_1.3.4) <- pure (CGrInt idris_int_eq0.49.arity.1.3.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                  (CGrInt idris_int_eq1_1.3.4) <- pure (CGrInt idris_int_eq1.41.arity.1.3.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq2.3.4 <- _prim_int_eq idris_int_eq0_1.3.4 idris_int_eq1_1.3.4
                                  ccp.0.3.4 <- case idris_int_eq2.3.4 of
                                    #False ->
                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.4
                                    #True ->
                                      pure 1
                                  unboxed.CGrInt.7.4 <- pure ccp.0.3.4
                                  idr_Prelude.Chars.isSpace4_val.4 <- pure (CGrInt unboxed.CGrInt.7.4)
                                  idr_Prelude.Chars.isSpace4_39.4 <- store idr_Prelude.Chars.isSpace4_val.4
                                  idr_Prelude.Chars.isSpace4_val_40.4 <- pure idr_Prelude.Chars.isSpace4_val.4
                                  case idr_Prelude.Chars.isSpace4_val_40.4 of
                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.4) ->
                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.4 of
                                        0 ->
                                          idr_Prelude.Chars.isSpace5_val_42.4 <- pure (CGrInt 12)
                                          idr_Prelude.Chars.isSpace5.4 <- store idr_Prelude.Chars.isSpace5_val_42.4
                                          (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.4) <- pure idr_Prelude.Chars.isSpace5_val_42.4
                                          (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.4) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq0.49.arity.1.4.4 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.4
                                          idris_int_eq1.41.arity.1.4.4 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.4
                                          (CGrInt idris_int_eq0_1.4.4) <- pure (CGrInt idris_int_eq0.49.arity.1.4.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                          (CGrInt idris_int_eq1_1.4.4) <- pure (CGrInt idris_int_eq1.41.arity.1.4.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq2.4.4 <- _prim_int_eq idris_int_eq0_1.4.4 idris_int_eq1_1.4.4
                                          ccp.0.4.4 <- case idris_int_eq2.4.4 of
                                            #False ->
                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.4
                                            #True ->
                                              pure 1
                                          unboxed.CGrInt.8.4 <- pure ccp.0.4.4
                                          idr_Prelude.Chars.isSpace5_val.4 <- pure (CGrInt unboxed.CGrInt.8.4)
                                          idr_Prelude.Chars.isSpace5_43.4 <- store idr_Prelude.Chars.isSpace5_val.4
                                          idr_Prelude.Chars.isSpace5_val_44.4 <- pure idr_Prelude.Chars.isSpace5_val.4
                                          case idr_Prelude.Chars.isSpace5_val_44.4 of
                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.4) ->
                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.4 of
                                                0 ->
                                                  idr_Prelude.Chars.isSpace6_val_46.4 <- pure (CGrInt 11)
                                                  idr_Prelude.Chars.isSpace6.4 <- store idr_Prelude.Chars.isSpace6_val_46.4
                                                  (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.4) <- pure idr_Prelude.Chars.isSpace6_val_46.4
                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.4) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq0.49.arity.1.5.4 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.4
                                                  idris_int_eq1.41.arity.1.5.4 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.4
                                                  (CGrInt idris_int_eq0_1.5.4) <- pure (CGrInt idris_int_eq0.49.arity.1.5.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  (CGrInt idris_int_eq1_1.5.4) <- pure (CGrInt idris_int_eq1.41.arity.1.5.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq2.5.4 <- _prim_int_eq idris_int_eq0_1.5.4 idris_int_eq1_1.5.4
                                                  ccp.0.5.4 <- case idris_int_eq2.5.4 of
                                                    #False ->
                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.4
                                                    #True ->
                                                      pure 1
                                                  unboxed.CGrInt.9.4 <- pure ccp.0.5.4
                                                  idr_Prelude.Chars.isSpace6_val.4 <- pure (CGrInt unboxed.CGrInt.9.4)
                                                  idr_Prelude.Chars.isSpace6_47.4 <- store idr_Prelude.Chars.isSpace6_val.4
                                                  idr_Prelude.Chars.isSpace6_val_48.4 <- pure idr_Prelude.Chars.isSpace6_val.4
                                                  case idr_Prelude.Chars.isSpace6_val_48.4 of
                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.4) ->
                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.4 of
                                                        0 ->
                                                          idr_Prelude.Chars.isSpace7_val_50.4 <- pure (CGrInt 160)
                                                          idr_Prelude.Chars.isSpace7.4 <- store idr_Prelude.Chars.isSpace7_val_50.4
                                                          (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.4) <- pure idr_Prelude.Chars.isSpace7_val_50.4
                                                          (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.4) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq0.49.arity.1.6.4 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.4
                                                          idris_int_eq1.41.arity.1.6.4 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.4
                                                          (CGrInt idris_int_eq0_1.6.4) <- pure (CGrInt idris_int_eq0.49.arity.1.6.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          (CGrInt idris_int_eq1_1.6.4) <- pure (CGrInt idris_int_eq1.41.arity.1.6.4) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq2.6.4 <- _prim_int_eq idris_int_eq0_1.6.4 idris_int_eq1_1.6.4
                                                          ccp.0.6.4 <- case idris_int_eq2.6.4 of
                                                            #False ->
                                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.4
                                                            #True ->
                                                              pure 1
                                                          unboxed.CGrInt.10.4 <- pure ccp.0.6.4
                                                          idr_Prelude.Chars.isSpace7_val.4 <- pure (CGrInt unboxed.CGrInt.10.4)
                                                          idr_Prelude.Chars.isSpace7_51.4 <- store idr_Prelude.Chars.isSpace7_val.4
                                                          idr_Prelude.Chars.isSpace7_val_52.4 <- pure idr_Prelude.Chars.isSpace7_val.4
                                                          case idr_Prelude.Chars.isSpace7_val_52.4 of
                                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.4) ->
                                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.4 of
                                                                0 ->
                                                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                #default ->
                                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                        #default ->
                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                #default ->
                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                        #default ->
                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                        #default ->
                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
          idr_Prelude.Strings.trim3_756.0 <- store idr_Prelude.Strings.trim3_val_751.0
          idr_Prelude.Strings.trim3_val_757.0 <- pure idr_Prelude.Strings.trim3_val_751.0
          case idr_Prelude.Strings.trim3_val_757.0 of
            (Cidr_Prelude.Bool.False) ->
              (CGrString idr_Prelude.Strings.trim0.41.76.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev1.41.arity.1.22 <- pure idr_Prelude.Strings.trim0.41.76.arity.1.0
              (CGrString idris_str_rev1_0.22) <- pure (CGrString idris_str_rev1.41.arity.1.22) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.22 <- _prim_string_reverse idris_str_rev1_0.22
              unboxed.CGrString.81.0 <- pure idris_str_rev2.22
              idr_Prelude.Strings.trim4_val_759.0 <- pure (CGrString unboxed.CGrString.81.0)
              idr_Prelude.Strings.trim4_760.0 <- store idr_Prelude.Strings.trim4_val_759.0
              idris_str_head1.10 <- pure idr_Prelude.Strings.trim4_760.0
              (CGrString idris_str_head1_0.10) <- fetch idris_str_head1.10
              idris_str_head2.10 <- _prim_string_head idris_str_head1_0.10
              unboxed.CGrInt.45.0 <- pure idris_str_head2.10
              idr_Prelude.Strings.trim4_val_758.0 <- pure (CGrInt unboxed.CGrInt.45.0)
              idr_Prelude.Strings.trim4_761.0 <- store idr_Prelude.Strings.trim4_val_758.0
              (CGrString idr_Prelude.Strings.trim0.41.77.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev1.41.arity.1.23 <- pure idr_Prelude.Strings.trim0.41.77.arity.1.0
              (CGrString idris_str_rev1_0.23) <- pure (CGrString idris_str_rev1.41.arity.1.23) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.23 <- _prim_string_reverse idris_str_rev1_0.23
              unboxed.CGrString.82.0 <- pure idris_str_rev2.23
              idr_Prelude.Strings.trim5_val_763.0 <- pure (CGrString unboxed.CGrString.82.0)
              idr_Prelude.Strings.trim5_764.0 <- store idr_Prelude.Strings.trim5_val_763.0
              idris_str_tail1.41 <- pure idr_Prelude.Strings.trim5_764.0
              (CGrString idris_str_tail1_0.41) <- fetch idris_str_tail1.41
              idris_str_tail2.41 <- _prim_string_tail idris_str_tail1_0.41
              unboxed.CGrString.83.0 <- pure idris_str_tail2.41
              idr_Prelude.Strings.trim5_val_762.0 <- pure (CGrString unboxed.CGrString.83.0)
              idr_Prelude.Strings.trim5_765.0 <- store idr_Prelude.Strings.trim5_val_762.0
              (CGrInt idr_Prelude.Strings.trim4_761.41.78.arity.1.0) <- pure idr_Prelude.Strings.trim4_val_758.0
              (CGrString idr_Prelude.Strings.trim5_765.49.30.arity.1.0) <- pure idr_Prelude.Strings.trim5_val_762.0
              idris_str_cons1.41.arity.1.4 <- pure idr_Prelude.Strings.trim4_761.41.78.arity.1.0
              idris_str_cons2.49.arity.1.4 <- pure idr_Prelude.Strings.trim5_765.49.30.arity.1.0
              (CGrInt idris_str_cons1_0.4) <- pure (CGrInt idris_str_cons1.41.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrString idris_str_cons2_0.4) <- pure (CGrString idris_str_cons2.49.arity.1.4) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_cons3.4 <- _prim_string_cons idris_str_cons1_0.4 idris_str_cons2_0.4
              unboxed.CGrString.269.0 <- pure idris_str_cons3.4
              pure (CGrString unboxed.CGrString.269.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.269.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.41) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.10)
            (Cidr_Prelude.Bool.True) ->
              (CGrString idr_Prelude.Strings.trim0.41.79.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev1.41.arity.1.24 <- pure idr_Prelude.Strings.trim0.41.79.arity.1.0
              (CGrString idris_str_rev1_0.24) <- pure (CGrString idris_str_rev1.41.arity.1.24) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.24 <- _prim_string_reverse idris_str_rev1_0.24
              unboxed.CGrString.84.0 <- pure idris_str_rev2.24
              idr_Prelude.Strings.trim4_val_770.0 <- pure (CGrString unboxed.CGrString.84.0)
              idr_Prelude.Strings.trim4_771.0 <- store idr_Prelude.Strings.trim4_val_770.0
              idris_str_tail1.42 <- pure idr_Prelude.Strings.trim4_771.0
              (CGrString idris_str_tail1_0.42) <- fetch idris_str_tail1.42
              idris_str_tail2.42 <- _prim_string_tail idris_str_tail1_0.42
              unboxed.CGrString.85.0 <- pure idris_str_tail2.42
              idr_Prelude.Strings.trim4_val_769.0 <- pure (CGrString unboxed.CGrString.85.0)
              idr_Prelude.Strings.trim4_772.0 <- store idr_Prelude.Strings.trim4_val_769.0
              idr_Prelude.Strings.trim5_val_773.0 <- pure idr_Prelude.Strings.trim2_val.0
              idr_Prelude.Strings.trim5_774.0 <- store idr_Prelude.Strings.trim5_val_773.0
              (CGrString idr_Prelude.Strings.trim5_774.41.80.arity.1.0) <- pure idr_Prelude.Strings.trim5_val_773.0
              idris_str_eq1.7 <- pure idr_Prelude.Strings.trim4_772.0
              idris_str_eq2.41.arity.1.7 <- pure idr_Prelude.Strings.trim5_774.41.80.arity.1.0
              (CGrString idris_str_eq1_0.7) <- fetch idris_str_eq1.7
              (CGrString idris_str_eq2_0.7) <- pure (CGrString idris_str_eq2.41.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_eq3.7 <- _prim_string_eq idris_str_eq1_0.7 idris_str_eq2_0.7
              ccp.2.7 <- case idris_str_eq3.7 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              unboxed.CGrInt.46.0 <- pure ccp.2.7
              idr_Prelude.Strings.trim4_val_768.0 <- pure (CGrInt unboxed.CGrInt.46.0)
              idr_Prelude.Strings.trim4_775.0 <- store idr_Prelude.Strings.trim4_val_768.0
              idr_Prelude.Strings.trim4_val_776.0 <- pure idr_Prelude.Strings.trim4_val_768.0
              idr_Prelude.Strings.trim4_val_767.0 <- case idr_Prelude.Strings.trim4_val_776.0 of
                (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_777.0) ->
                  case idr_Prelude.Strings.trim_cpat_LInt64_0_777.0 of
                    0 ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              idr_Prelude.Strings.trim4_778.0 <- store idr_Prelude.Strings.trim4_val_767.0
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.7" <- pure idr_Prelude.Strings.trim4_778.0
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.7" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
              idr_Prelude.Strings.trim4_val_766.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.7" of
                (Cidr_Prelude.Bool.True) ->
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.7" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.7"
                  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.7" of
                    (Cidr_Prelude.Bool.False) ->
                      pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                    (Cidr_Prelude.Bool.True) ->
                      pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
              idr_Prelude.Strings.trim4_781.0 <- store idr_Prelude.Strings.trim4_val_766.0
              idr_Prelude.Strings.trim4_val_782.0 <- pure idr_Prelude.Strings.trim4_val_766.0
              case idr_Prelude.Strings.trim4_val_782.0 of
                (Cidr_Prelude.Basics.No) ->
                  pure idr_Prelude.Strings.trim2_val.0
                (Cidr_Prelude.Basics.Yes) ->
                  (CGrString idr_Prelude.Strings.trim0.41.82.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.25 <- pure idr_Prelude.Strings.trim0.41.82.arity.1.0
                  (CGrString idris_str_rev1_0.25) <- pure (CGrString idris_str_rev1.41.arity.1.25) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.25 <- _prim_string_reverse idris_str_rev1_0.25
                  unboxed.CGrString.86.0 <- pure idris_str_rev2.25
                  idr_Prelude.Strings.trim5_val_786.0 <- pure (CGrString unboxed.CGrString.86.0)
                  idr_Prelude.Strings.trim5_787.0 <- store idr_Prelude.Strings.trim5_val_786.0
                  idris_str_tail1.43 <- pure idr_Prelude.Strings.trim5_787.0
                  (CGrString idris_str_tail1_0.43) <- fetch idris_str_tail1.43
                  idris_str_tail2.43 <- _prim_string_tail idris_str_tail1_0.43
                  unboxed.CGrString.87.0 <- pure idris_str_tail2.43
                  idr_Prelude.Strings.trim5_val_785.0 <- pure (CGrString unboxed.CGrString.87.0)
                  idr_Prelude.Strings.trim5_788.0 <- store idr_Prelude.Strings.trim5_val_785.0
                  idris_str_head1.11 <- pure idr_Prelude.Strings.trim5_788.0
                  (CGrString idris_str_head1_0.11) <- fetch idris_str_head1.11
                  idris_str_head2.11 <- _prim_string_head idris_str_head1_0.11
                  unboxed.CGrInt.47.0 <- pure idris_str_head2.11
                  idr_Prelude.Strings.trim5_val_784.0 <- pure (CGrInt unboxed.CGrInt.47.0)
                  idr_Prelude.Strings.trim5_789.0 <- store idr_Prelude.Strings.trim5_val_784.0
                  (CGrInt idr_Prelude.Strings.trim5_789.57.14.arity.1.0) <- pure idr_Prelude.Strings.trim5_val_784.0
                  idr_Prelude.Chars.isSpace0.57.arity.1.5 <- pure idr_Prelude.Strings.trim5_789.57.14.arity.1.0
                  idr_Prelude.Chars.isSpace1_val_27.5 <- pure idr_Prelude.Chars.isSpace1_val_27.4
                  idr_Prelude.Chars.isSpace1.5 <- store idr_Prelude.Chars.isSpace1_val_27.5
                  (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.5) <- pure idr_Prelude.Chars.isSpace1_val_27.5
                  (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.5) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_eq0.49.arity.1.0.5 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.5
                  idris_int_eq1.41.arity.1.0.5 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.5
                  (CGrInt idris_int_eq0_1.0.5) <- pure (CGrInt idris_int_eq0.49.arity.1.0.5) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_eq1_1.0.5) <- pure (CGrInt idris_int_eq1.41.arity.1.0.5) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_eq2.0.5 <- _prim_int_eq idris_int_eq0_1.0.5 idris_int_eq1_1.0.5
                  ccp.0.0.5 <- case idris_int_eq2.0.5 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  unboxed.CGrInt.4.5 <- pure ccp.0.0.5
                  idr_Prelude.Chars.isSpace1_val.5 <- pure (CGrInt unboxed.CGrInt.4.5)
                  idr_Prelude.Chars.isSpace1_28.5 <- store idr_Prelude.Chars.isSpace1_val.5
                  idr_Prelude.Chars.isSpace1_val_29.5 <- pure idr_Prelude.Chars.isSpace1_val.5
                  idr_Prelude.Strings.trim5_val_783.0 <- case idr_Prelude.Chars.isSpace1_val_29.5 of
                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.5) ->
                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0.5 of
                        0 ->
                          idr_Prelude.Chars.isSpace2_val_30.5 <- pure (CGrInt 9)
                          idr_Prelude.Chars.isSpace2.5 <- store idr_Prelude.Chars.isSpace2_val_30.5
                          (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.5) <- pure idr_Prelude.Chars.isSpace2_val_30.5
                          (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.5) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq0.49.arity.1.1.5 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.5
                          idris_int_eq1.41.arity.1.1.5 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.5
                          (CGrInt idris_int_eq0_1.1.5) <- pure (CGrInt idris_int_eq0.49.arity.1.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrInt idris_int_eq1_1.1.5) <- pure (CGrInt idris_int_eq1.41.arity.1.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq2.1.5 <- _prim_int_eq idris_int_eq0_1.1.5 idris_int_eq1_1.1.5
                          ccp.0.1.5 <- case idris_int_eq2.1.5 of
                            #False ->
                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.5
                            #True ->
                              pure 1
                          unboxed.CGrInt.5.5 <- pure ccp.0.1.5
                          idr_Prelude.Chars.isSpace2_val.5 <- pure (CGrInt unboxed.CGrInt.5.5)
                          idr_Prelude.Chars.isSpace2_31.5 <- store idr_Prelude.Chars.isSpace2_val.5
                          idr_Prelude.Chars.isSpace2_val_32.5 <- pure idr_Prelude.Chars.isSpace2_val.5
                          case idr_Prelude.Chars.isSpace2_val_32.5 of
                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.5) ->
                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.5 of
                                0 ->
                                  idr_Prelude.Chars.isSpace3_val_34.5 <- pure (CGrInt 13)
                                  idr_Prelude.Chars.isSpace3.5 <- store idr_Prelude.Chars.isSpace3_val_34.5
                                  (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.5) <- pure idr_Prelude.Chars.isSpace3_val_34.5
                                  (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.5) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq0.49.arity.1.2.5 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.5
                                  idris_int_eq1.41.arity.1.2.5 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.5
                                  (CGrInt idris_int_eq0_1.2.5) <- pure (CGrInt idris_int_eq0.49.arity.1.2.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                  (CGrInt idris_int_eq1_1.2.5) <- pure (CGrInt idris_int_eq1.41.arity.1.2.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq2.2.5 <- _prim_int_eq idris_int_eq0_1.2.5 idris_int_eq1_1.2.5
                                  ccp.0.2.5 <- case idris_int_eq2.2.5 of
                                    #False ->
                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.5
                                    #True ->
                                      pure 1
                                  unboxed.CGrInt.6.5 <- pure ccp.0.2.5
                                  idr_Prelude.Chars.isSpace3_val.5 <- pure (CGrInt unboxed.CGrInt.6.5)
                                  idr_Prelude.Chars.isSpace3_35.5 <- store idr_Prelude.Chars.isSpace3_val.5
                                  idr_Prelude.Chars.isSpace3_val_36.5 <- pure idr_Prelude.Chars.isSpace3_val.5
                                  case idr_Prelude.Chars.isSpace3_val_36.5 of
                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.5) ->
                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.5 of
                                        0 ->
                                          idr_Prelude.Chars.isSpace4_val_38.5 <- pure (CGrInt 10)
                                          idr_Prelude.Chars.isSpace4.5 <- store idr_Prelude.Chars.isSpace4_val_38.5
                                          (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.5) <- pure idr_Prelude.Chars.isSpace4_val_38.5
                                          (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.5) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq0.49.arity.1.3.5 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.5
                                          idris_int_eq1.41.arity.1.3.5 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.5
                                          (CGrInt idris_int_eq0_1.3.5) <- pure (CGrInt idris_int_eq0.49.arity.1.3.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                          (CGrInt idris_int_eq1_1.3.5) <- pure (CGrInt idris_int_eq1.41.arity.1.3.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq2.3.5 <- _prim_int_eq idris_int_eq0_1.3.5 idris_int_eq1_1.3.5
                                          ccp.0.3.5 <- case idris_int_eq2.3.5 of
                                            #False ->
                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.5
                                            #True ->
                                              pure 1
                                          unboxed.CGrInt.7.5 <- pure ccp.0.3.5
                                          idr_Prelude.Chars.isSpace4_val.5 <- pure (CGrInt unboxed.CGrInt.7.5)
                                          idr_Prelude.Chars.isSpace4_39.5 <- store idr_Prelude.Chars.isSpace4_val.5
                                          idr_Prelude.Chars.isSpace4_val_40.5 <- pure idr_Prelude.Chars.isSpace4_val.5
                                          case idr_Prelude.Chars.isSpace4_val_40.5 of
                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.5) ->
                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.5 of
                                                0 ->
                                                  idr_Prelude.Chars.isSpace5_val_42.5 <- pure (CGrInt 12)
                                                  idr_Prelude.Chars.isSpace5.5 <- store idr_Prelude.Chars.isSpace5_val_42.5
                                                  (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.5) <- pure idr_Prelude.Chars.isSpace5_val_42.5
                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.5) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq0.49.arity.1.4.5 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.5
                                                  idris_int_eq1.41.arity.1.4.5 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.5
                                                  (CGrInt idris_int_eq0_1.4.5) <- pure (CGrInt idris_int_eq0.49.arity.1.4.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  (CGrInt idris_int_eq1_1.4.5) <- pure (CGrInt idris_int_eq1.41.arity.1.4.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq2.4.5 <- _prim_int_eq idris_int_eq0_1.4.5 idris_int_eq1_1.4.5
                                                  ccp.0.4.5 <- case idris_int_eq2.4.5 of
                                                    #False ->
                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.5
                                                    #True ->
                                                      pure 1
                                                  unboxed.CGrInt.8.5 <- pure ccp.0.4.5
                                                  idr_Prelude.Chars.isSpace5_val.5 <- pure (CGrInt unboxed.CGrInt.8.5)
                                                  idr_Prelude.Chars.isSpace5_43.5 <- store idr_Prelude.Chars.isSpace5_val.5
                                                  idr_Prelude.Chars.isSpace5_val_44.5 <- pure idr_Prelude.Chars.isSpace5_val.5
                                                  case idr_Prelude.Chars.isSpace5_val_44.5 of
                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.5) ->
                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.5 of
                                                        0 ->
                                                          idr_Prelude.Chars.isSpace6_val_46.5 <- pure (CGrInt 11)
                                                          idr_Prelude.Chars.isSpace6.5 <- store idr_Prelude.Chars.isSpace6_val_46.5
                                                          (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.5) <- pure idr_Prelude.Chars.isSpace6_val_46.5
                                                          (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.5) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq0.49.arity.1.5.5 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.5
                                                          idris_int_eq1.41.arity.1.5.5 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.5
                                                          (CGrInt idris_int_eq0_1.5.5) <- pure (CGrInt idris_int_eq0.49.arity.1.5.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          (CGrInt idris_int_eq1_1.5.5) <- pure (CGrInt idris_int_eq1.41.arity.1.5.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq2.5.5 <- _prim_int_eq idris_int_eq0_1.5.5 idris_int_eq1_1.5.5
                                                          ccp.0.5.5 <- case idris_int_eq2.5.5 of
                                                            #False ->
                                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.5
                                                            #True ->
                                                              pure 1
                                                          unboxed.CGrInt.9.5 <- pure ccp.0.5.5
                                                          idr_Prelude.Chars.isSpace6_val.5 <- pure (CGrInt unboxed.CGrInt.9.5)
                                                          idr_Prelude.Chars.isSpace6_47.5 <- store idr_Prelude.Chars.isSpace6_val.5
                                                          idr_Prelude.Chars.isSpace6_val_48.5 <- pure idr_Prelude.Chars.isSpace6_val.5
                                                          case idr_Prelude.Chars.isSpace6_val_48.5 of
                                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.5) ->
                                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.5 of
                                                                0 ->
                                                                  idr_Prelude.Chars.isSpace7_val_50.5 <- pure (CGrInt 160)
                                                                  idr_Prelude.Chars.isSpace7.5 <- store idr_Prelude.Chars.isSpace7_val_50.5
                                                                  (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.5) <- pure idr_Prelude.Chars.isSpace7_val_50.5
                                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.5) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  idris_int_eq0.49.arity.1.6.5 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.5
                                                                  idris_int_eq1.41.arity.1.6.5 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.5
                                                                  (CGrInt idris_int_eq0_1.6.5) <- pure (CGrInt idris_int_eq0.49.arity.1.6.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  (CGrInt idris_int_eq1_1.6.5) <- pure (CGrInt idris_int_eq1.41.arity.1.6.5) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  idris_int_eq2.6.5 <- _prim_int_eq idris_int_eq0_1.6.5 idris_int_eq1_1.6.5
                                                                  ccp.0.6.5 <- case idris_int_eq2.6.5 of
                                                                    #False ->
                                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.5
                                                                    #True ->
                                                                      pure 1
                                                                  unboxed.CGrInt.10.5 <- pure ccp.0.6.5
                                                                  idr_Prelude.Chars.isSpace7_val.5 <- pure (CGrInt unboxed.CGrInt.10.5)
                                                                  idr_Prelude.Chars.isSpace7_51.5 <- store idr_Prelude.Chars.isSpace7_val.5
                                                                  idr_Prelude.Chars.isSpace7_val_52.5 <- pure idr_Prelude.Chars.isSpace7_val.5
                                                                  case idr_Prelude.Chars.isSpace7_val_52.5 of
                                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.5) ->
                                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.5 of
                                                                        0 ->
                                                                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                        #default ->
                                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                #default ->
                                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                        #default ->
                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                #default ->
                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                        #default ->
                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                        #default ->
                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                  idr_Prelude.Strings.trim5_790.0 <- store idr_Prelude.Strings.trim5_val_783.0
                  idr_Prelude.Strings.trim5_val_791.0 <- pure idr_Prelude.Strings.trim5_val_783.0
                  case idr_Prelude.Strings.trim5_val_791.0 of
                    (Cidr_Prelude.Bool.False) ->
                      (CGrString idr_Prelude.Strings.trim0.41.83.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.26 <- pure idr_Prelude.Strings.trim0.41.83.arity.1.0
                      (CGrString idris_str_rev1_0.26) <- pure (CGrString idris_str_rev1.41.arity.1.26) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.26 <- _prim_string_reverse idris_str_rev1_0.26
                      unboxed.CGrString.88.0 <- pure idris_str_rev2.26
                      idr_Prelude.Strings.trim6_val_794.0 <- pure (CGrString unboxed.CGrString.88.0)
                      idr_Prelude.Strings.trim6_795.0 <- store idr_Prelude.Strings.trim6_val_794.0
                      idris_str_tail1.44 <- pure idr_Prelude.Strings.trim6_795.0
                      (CGrString idris_str_tail1_0.44) <- fetch idris_str_tail1.44
                      idris_str_tail2.44 <- _prim_string_tail idris_str_tail1_0.44
                      unboxed.CGrString.89.0 <- pure idris_str_tail2.44
                      idr_Prelude.Strings.trim6_val_793.0 <- pure (CGrString unboxed.CGrString.89.0)
                      idr_Prelude.Strings.trim6_796.0 <- store idr_Prelude.Strings.trim6_val_793.0
                      idris_str_head1.12 <- pure idr_Prelude.Strings.trim6_796.0
                      (CGrString idris_str_head1_0.12) <- fetch idris_str_head1.12
                      idris_str_head2.12 <- _prim_string_head idris_str_head1_0.12
                      unboxed.CGrInt.48.0 <- pure idris_str_head2.12
                      idr_Prelude.Strings.trim6_val_792.0 <- pure (CGrInt unboxed.CGrInt.48.0)
                      idr_Prelude.Strings.trim6_797.0 <- store idr_Prelude.Strings.trim6_val_792.0
                      (CGrString idr_Prelude.Strings.trim0.41.84.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.27 <- pure idr_Prelude.Strings.trim0.41.84.arity.1.0
                      (CGrString idris_str_rev1_0.27) <- pure (CGrString idris_str_rev1.41.arity.1.27) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.27 <- _prim_string_reverse idris_str_rev1_0.27
                      unboxed.CGrString.90.0 <- pure idris_str_rev2.27
                      idr_Prelude.Strings.trim7_val_800.0 <- pure (CGrString unboxed.CGrString.90.0)
                      idr_Prelude.Strings.trim7_801.0 <- store idr_Prelude.Strings.trim7_val_800.0
                      idris_str_tail1.45 <- pure idr_Prelude.Strings.trim7_801.0
                      (CGrString idris_str_tail1_0.45) <- fetch idris_str_tail1.45
                      idris_str_tail2.45 <- _prim_string_tail idris_str_tail1_0.45
                      unboxed.CGrString.91.0 <- pure idris_str_tail2.45
                      idr_Prelude.Strings.trim7_val_799.0 <- pure (CGrString unboxed.CGrString.91.0)
                      idr_Prelude.Strings.trim7_802.0 <- store idr_Prelude.Strings.trim7_val_799.0
                      idris_str_tail1.46 <- pure idr_Prelude.Strings.trim7_802.0
                      (CGrString idris_str_tail1_0.46) <- fetch idris_str_tail1.46
                      idris_str_tail2.46 <- _prim_string_tail idris_str_tail1_0.46
                      unboxed.CGrString.92.0 <- pure idris_str_tail2.46
                      idr_Prelude.Strings.trim7_val_798.0 <- pure (CGrString unboxed.CGrString.92.0)
                      idr_Prelude.Strings.trim7_803.0 <- store idr_Prelude.Strings.trim7_val_798.0
                      (CGrInt idr_Prelude.Strings.trim6_797.41.85.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_792.0
                      (CGrString idr_Prelude.Strings.trim7_803.49.31.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_798.0
                      idris_str_cons1.41.arity.1.5 <- pure idr_Prelude.Strings.trim6_797.41.85.arity.1.0
                      idris_str_cons2.49.arity.1.5 <- pure idr_Prelude.Strings.trim7_803.49.31.arity.1.0
                      (CGrInt idris_str_cons1_0.5) <- pure (CGrInt idris_str_cons1.41.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrString idris_str_cons2_0.5) <- pure (CGrString idris_str_cons2.49.arity.1.5) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_cons3.5 <- _prim_string_cons idris_str_cons1_0.5 idris_str_cons2_0.5
                      unboxed.CGrString.270.0 <- pure idris_str_cons3.5
                      pure (CGrString unboxed.CGrString.270.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.270.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.46) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.45) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.12) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.44)
                    (Cidr_Prelude.Bool.True) ->
                      (CGrString idr_Prelude.Strings.trim0.41.86.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.28 <- pure idr_Prelude.Strings.trim0.41.86.arity.1.0
                      (CGrString idris_str_rev1_0.28) <- pure (CGrString idris_str_rev1.41.arity.1.28) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.28 <- _prim_string_reverse idris_str_rev1_0.28
                      unboxed.CGrString.93.0 <- pure idris_str_rev2.28
                      idr_Prelude.Strings.trim7_val_812.0 <- pure (CGrString unboxed.CGrString.93.0)
                      idr_Prelude.Strings.trim7_813.0 <- store idr_Prelude.Strings.trim7_val_812.0
                      idris_str_tail1.47 <- pure idr_Prelude.Strings.trim7_813.0
                      (CGrString idris_str_tail1_0.47) <- fetch idris_str_tail1.47
                      idris_str_tail2.47 <- _prim_string_tail idris_str_tail1_0.47
                      unboxed.CGrString.94.0 <- pure idris_str_tail2.47
                      idr_Prelude.Strings.trim7_val_811.0 <- pure (CGrString unboxed.CGrString.94.0)
                      idr_Prelude.Strings.trim7_814.0 <- store idr_Prelude.Strings.trim7_val_811.0
                      idris_str_tail1.48 <- pure idr_Prelude.Strings.trim7_814.0
                      (CGrString idris_str_tail1_0.48) <- fetch idris_str_tail1.48
                      idris_str_tail2.48 <- _prim_string_tail idris_str_tail1_0.48
                      unboxed.CGrString.95.0 <- pure idris_str_tail2.48
                      idr_Prelude.Strings.trim7_val_810.0 <- pure (CGrString unboxed.CGrString.95.0)
                      idr_Prelude.Strings.trim7_815.0 <- store idr_Prelude.Strings.trim7_val_810.0
                      idr_Prelude.Strings.trim8_val_816.0 <- pure idr_Prelude.Strings.trim2_val.0
                      idr_Prelude.Strings.trim8_817.0 <- store idr_Prelude.Strings.trim8_val_816.0
                      (CGrString idr_Prelude.Strings.trim8_817.41.87.arity.1.0) <- pure idr_Prelude.Strings.trim8_val_816.0
                      idris_str_eq1.8 <- pure idr_Prelude.Strings.trim7_815.0
                      idris_str_eq2.41.arity.1.8 <- pure idr_Prelude.Strings.trim8_817.41.87.arity.1.0
                      (CGrString idris_str_eq1_0.8) <- fetch idris_str_eq1.8
                      (CGrString idris_str_eq2_0.8) <- pure (CGrString idris_str_eq2.41.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_eq3.8 <- _prim_string_eq idris_str_eq1_0.8 idris_str_eq2_0.8
                      ccp.2.8 <- case idris_str_eq3.8 of
                        #False ->
                          pure 0
                        #True ->
                          pure 1
                      unboxed.CGrInt.49.0 <- pure ccp.2.8
                      idr_Prelude.Strings.trim7_val_809.0 <- pure (CGrInt unboxed.CGrInt.49.0)
                      idr_Prelude.Strings.trim7_818.0 <- store idr_Prelude.Strings.trim7_val_809.0
                      idr_Prelude.Strings.trim7_val_819.0 <- pure idr_Prelude.Strings.trim7_val_809.0
                      idr_Prelude.Strings.trim7_val_808.0 <- case idr_Prelude.Strings.trim7_val_819.0 of
                        (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_820.0) ->
                          case idr_Prelude.Strings.trim_cpat_LInt64_0_820.0 of
                            0 ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      idr_Prelude.Strings.trim7_821.0 <- store idr_Prelude.Strings.trim7_val_808.0
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.8" <- pure idr_Prelude.Strings.trim7_821.0
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.8" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                      idr_Prelude.Strings.trim7_val_807.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.8" of
                        (Cidr_Prelude.Bool.True) ->
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.8" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.8"
                          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.8" of
                            (Cidr_Prelude.Bool.False) ->
                              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                            (Cidr_Prelude.Bool.True) ->
                              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                      idr_Prelude.Strings.trim7_824.0 <- store idr_Prelude.Strings.trim7_val_807.0
                      idr_Prelude.Strings.trim7_val_825.0 <- pure idr_Prelude.Strings.trim7_val_807.0
                      idr_Prelude.Strings.trim7_val_806.0 <- case idr_Prelude.Strings.trim7_val_825.0 of
                        (Cidr_Prelude.Basics.No) ->
                          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                        (Cidr_Prelude.Basics.Yes) ->
                          (CGrString idr_Prelude.Strings.trim0.41.89.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.29 <- pure idr_Prelude.Strings.trim0.41.89.arity.1.0
                          (CGrString idris_str_rev1_0.29) <- pure (CGrString idris_str_rev1.41.arity.1.29) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.29 <- _prim_string_reverse idris_str_rev1_0.29
                          unboxed.CGrString.96.0 <- pure idris_str_rev2.29
                          idr_Prelude.Strings.trim8_val_829.0 <- pure (CGrString unboxed.CGrString.96.0)
                          idr_Prelude.Strings.trim8_830.0 <- store idr_Prelude.Strings.trim8_val_829.0
                          idris_str_tail1.49 <- pure idr_Prelude.Strings.trim8_830.0
                          (CGrString idris_str_tail1_0.49) <- fetch idris_str_tail1.49
                          idris_str_tail2.49 <- _prim_string_tail idris_str_tail1_0.49
                          unboxed.CGrString.97.0 <- pure idris_str_tail2.49
                          idr_Prelude.Strings.trim8_val_828.0 <- pure (CGrString unboxed.CGrString.97.0)
                          idr_Prelude.Strings.trim8_831.0 <- store idr_Prelude.Strings.trim8_val_828.0
                          idris_str_tail1.50 <- pure idr_Prelude.Strings.trim8_831.0
                          (CGrString idris_str_tail1_0.50) <- fetch idris_str_tail1.50
                          idris_str_tail2.50 <- _prim_string_tail idris_str_tail1_0.50
                          unboxed.CGrString.98.0 <- pure idris_str_tail2.50
                          idr_Prelude.Strings.trim8_val_827.0 <- pure (CGrString unboxed.CGrString.98.0)
                          idr_Prelude.Strings.trim8_832.0 <- store idr_Prelude.Strings.trim8_val_827.0
                          idris_str_head1.13 <- pure idr_Prelude.Strings.trim8_832.0
                          (CGrString idris_str_head1_0.13) <- fetch idris_str_head1.13
                          idris_str_head2.13 <- _prim_string_head idris_str_head1_0.13
                          unboxed.CGrInt.50.0 <- pure idris_str_head2.13
                          idr_Prelude.Strings.trim8_val_826.0 <- pure (CGrInt unboxed.CGrInt.50.0)
                          idr_Prelude.Strings.trim8_833.0 <- store idr_Prelude.Strings.trim8_val_826.0
                          (CGrString idr_Prelude.Strings.trim0.41.90.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.30 <- pure idr_Prelude.Strings.trim0.41.90.arity.1.0
                          (CGrString idris_str_rev1_0.30) <- pure (CGrString idris_str_rev1.41.arity.1.30) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.30 <- _prim_string_reverse idris_str_rev1_0.30
                          unboxed.CGrString.99.0 <- pure idris_str_rev2.30
                          idr_Prelude.Strings.trim9_val_837.0 <- pure (CGrString unboxed.CGrString.99.0)
                          idr_Prelude.Strings.trim9_838.0 <- store idr_Prelude.Strings.trim9_val_837.0
                          idris_str_tail1.51 <- pure idr_Prelude.Strings.trim9_838.0
                          (CGrString idris_str_tail1_0.51) <- fetch idris_str_tail1.51
                          idris_str_tail2.51 <- _prim_string_tail idris_str_tail1_0.51
                          unboxed.CGrString.100.0 <- pure idris_str_tail2.51
                          idr_Prelude.Strings.trim9_val_836.0 <- pure (CGrString unboxed.CGrString.100.0)
                          idr_Prelude.Strings.trim9_839.0 <- store idr_Prelude.Strings.trim9_val_836.0
                          idris_str_tail1.52 <- pure idr_Prelude.Strings.trim9_839.0
                          (CGrString idris_str_tail1_0.52) <- fetch idris_str_tail1.52
                          idris_str_tail2.52 <- _prim_string_tail idris_str_tail1_0.52
                          unboxed.CGrString.101.0 <- pure idris_str_tail2.52
                          idr_Prelude.Strings.trim9_val_835.0 <- pure (CGrString unboxed.CGrString.101.0)
                          idr_Prelude.Strings.trim9_840.0 <- store idr_Prelude.Strings.trim9_val_835.0
                          idris_str_tail1.53 <- pure idr_Prelude.Strings.trim9_840.0
                          (CGrString idris_str_tail1_0.53) <- fetch idris_str_tail1.53
                          idris_str_tail2.53 <- _prim_string_tail idris_str_tail1_0.53
                          unboxed.CGrString.102.0 <- pure idris_str_tail2.53
                          idr_Prelude.Strings.trim9_val_834.0 <- pure (CGrString unboxed.CGrString.102.0)
                          idr_Prelude.Strings.trim9_841.0 <- store idr_Prelude.Strings.trim9_val_834.0
                          pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim8_833.0 idr_Prelude.Strings.trim9_841.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim8_833.0 idr_Prelude.Strings.trim9_841.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.53) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.52) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.51) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.13) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.50) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.49)
                      idr_Prelude.Strings.trim7_842.0 <- store idr_Prelude.Strings.trim7_val_806.0
                      unboxed.CGrString.103.0 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim7_842.0
                      pure (CGrString unboxed.CGrString.103.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.103.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.8) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.48) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.47) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.11) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.43) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.7) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.42) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.9)
      idr_Prelude.Strings.trim2_843.0 <- store idr_Prelude.Strings.trim2_val_735.0
      (CGrString idr_Prelude.Strings.trim2_843.41.91.arity.1.0) <- pure idr_Prelude.Strings.trim2_val_735.0
      idris_str_rev1.41.arity.1.31 <- pure idr_Prelude.Strings.trim2_843.41.91.arity.1.0
      (CGrString idris_str_rev1_0.31) <- pure (CGrString idris_str_rev1.41.arity.1.31) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_rev2.31 <- _prim_string_reverse idris_str_rev1_0.31
      unboxed.CGrString.104.0 <- pure idris_str_rev2.31
      idr_Prelude.Strings.trim2_val_734.0 <- pure (CGrString unboxed.CGrString.104.0)
      idr_Prelude.Strings.trim2_844.0 <- store idr_Prelude.Strings.trim2_val_734.0
      idris_str_head1.14 <- pure idr_Prelude.Strings.trim2_844.0
      (CGrString idris_str_head1_0.14) <- fetch idris_str_head1.14
      idris_str_head2.14 <- _prim_string_head idris_str_head1_0.14
      unboxed.CGrInt.51.0 <- pure idris_str_head2.14
      idr_Prelude.Strings.trim2_val_733.0 <- pure (CGrInt unboxed.CGrInt.51.0)
      idr_Prelude.Strings.trim2_845.0 <- store idr_Prelude.Strings.trim2_val_733.0
      (CGrInt idr_Prelude.Strings.trim2_845.57.15.arity.1.0) <- pure idr_Prelude.Strings.trim2_val_733.0
      idr_Prelude.Chars.isSpace0.57.arity.1.6 <- pure idr_Prelude.Strings.trim2_845.57.15.arity.1.0
      idr_Prelude.Chars.isSpace1_val_27.6 <- pure (CGrInt 32)
      idr_Prelude.Chars.isSpace1.6 <- store idr_Prelude.Chars.isSpace1_val_27.6
      (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.6) <- pure idr_Prelude.Chars.isSpace1_val_27.6
      (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.6) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_int_eq0.49.arity.1.0.6 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.6
      idris_int_eq1.41.arity.1.0.6 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.6
      (CGrInt idris_int_eq0_1.0.6) <- pure (CGrInt idris_int_eq0.49.arity.1.0.6) -- LINT: Syntax error - expected SimpleExp without nodes
      (CGrInt idris_int_eq1_1.0.6) <- pure (CGrInt idris_int_eq1.41.arity.1.0.6) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_int_eq2.0.6 <- _prim_int_eq idris_int_eq0_1.0.6 idris_int_eq1_1.0.6
      ccp.0.0.6 <- case idris_int_eq2.0.6 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.4.6 <- pure ccp.0.0.6
      idr_Prelude.Chars.isSpace1_val.6 <- pure (CGrInt unboxed.CGrInt.4.6)
      idr_Prelude.Chars.isSpace1_28.6 <- store idr_Prelude.Chars.isSpace1_val.6
      idr_Prelude.Chars.isSpace1_val_29.6 <- pure idr_Prelude.Chars.isSpace1_val.6
      idr_Prelude.Strings.trim2_val_732.0 <- case idr_Prelude.Chars.isSpace1_val_29.6 of
        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.6) ->
          case idr_Prelude.Chars.isSpace_cpat_LInt64_0.6 of
            0 ->
              idr_Prelude.Chars.isSpace2_val_30.6 <- pure (CGrInt 9)
              idr_Prelude.Chars.isSpace2.6 <- store idr_Prelude.Chars.isSpace2_val_30.6
              (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.6) <- pure idr_Prelude.Chars.isSpace2_val_30.6
              (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.6) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq0.49.arity.1.1.6 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.6
              idris_int_eq1.41.arity.1.1.6 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.6
              (CGrInt idris_int_eq0_1.1.6) <- pure (CGrInt idris_int_eq0.49.arity.1.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_eq1_1.1.6) <- pure (CGrInt idris_int_eq1.41.arity.1.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq2.1.6 <- _prim_int_eq idris_int_eq0_1.1.6 idris_int_eq1_1.1.6
              ccp.0.1.6 <- case idris_int_eq2.1.6 of
                #False ->
                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.6
                #True ->
                  pure 1
              unboxed.CGrInt.5.6 <- pure ccp.0.1.6
              idr_Prelude.Chars.isSpace2_val.6 <- pure (CGrInt unboxed.CGrInt.5.6)
              idr_Prelude.Chars.isSpace2_31.6 <- store idr_Prelude.Chars.isSpace2_val.6
              idr_Prelude.Chars.isSpace2_val_32.6 <- pure idr_Prelude.Chars.isSpace2_val.6
              case idr_Prelude.Chars.isSpace2_val_32.6 of
                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.6) ->
                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.6 of
                    0 ->
                      idr_Prelude.Chars.isSpace3_val_34.6 <- pure (CGrInt 13)
                      idr_Prelude.Chars.isSpace3.6 <- store idr_Prelude.Chars.isSpace3_val_34.6
                      (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.6) <- pure idr_Prelude.Chars.isSpace3_val_34.6
                      (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.6) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.2.6 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.6
                      idris_int_eq1.41.arity.1.2.6 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.6
                      (CGrInt idris_int_eq0_1.2.6) <- pure (CGrInt idris_int_eq0.49.arity.1.2.6) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.2.6) <- pure (CGrInt idris_int_eq1.41.arity.1.2.6) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.2.6 <- _prim_int_eq idris_int_eq0_1.2.6 idris_int_eq1_1.2.6
                      ccp.0.2.6 <- case idris_int_eq2.2.6 of
                        #False ->
                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.6
                        #True ->
                          pure 1
                      unboxed.CGrInt.6.6 <- pure ccp.0.2.6
                      idr_Prelude.Chars.isSpace3_val.6 <- pure (CGrInt unboxed.CGrInt.6.6)
                      idr_Prelude.Chars.isSpace3_35.6 <- store idr_Prelude.Chars.isSpace3_val.6
                      idr_Prelude.Chars.isSpace3_val_36.6 <- pure idr_Prelude.Chars.isSpace3_val.6
                      case idr_Prelude.Chars.isSpace3_val_36.6 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.6) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.6 of
                            0 ->
                              idr_Prelude.Chars.isSpace4_val_38.6 <- pure (CGrInt 10)
                              idr_Prelude.Chars.isSpace4.6 <- store idr_Prelude.Chars.isSpace4_val_38.6
                              (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.6) <- pure idr_Prelude.Chars.isSpace4_val_38.6
                              (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.6) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.3.6 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.6
                              idris_int_eq1.41.arity.1.3.6 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.6
                              (CGrInt idris_int_eq0_1.3.6) <- pure (CGrInt idris_int_eq0.49.arity.1.3.6) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.3.6) <- pure (CGrInt idris_int_eq1.41.arity.1.3.6) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.3.6 <- _prim_int_eq idris_int_eq0_1.3.6 idris_int_eq1_1.3.6
                              ccp.0.3.6 <- case idris_int_eq2.3.6 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.6
                                #True ->
                                  pure 1
                              unboxed.CGrInt.7.6 <- pure ccp.0.3.6
                              idr_Prelude.Chars.isSpace4_val.6 <- pure (CGrInt unboxed.CGrInt.7.6)
                              idr_Prelude.Chars.isSpace4_39.6 <- store idr_Prelude.Chars.isSpace4_val.6
                              idr_Prelude.Chars.isSpace4_val_40.6 <- pure idr_Prelude.Chars.isSpace4_val.6
                              case idr_Prelude.Chars.isSpace4_val_40.6 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.6) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.6 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace5_val_42.6 <- pure (CGrInt 12)
                                      idr_Prelude.Chars.isSpace5.6 <- store idr_Prelude.Chars.isSpace5_val_42.6
                                      (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.6) <- pure idr_Prelude.Chars.isSpace5_val_42.6
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.6) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.4.6 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.6
                                      idris_int_eq1.41.arity.1.4.6 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.6
                                      (CGrInt idris_int_eq0_1.4.6) <- pure (CGrInt idris_int_eq0.49.arity.1.4.6) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.4.6) <- pure (CGrInt idris_int_eq1.41.arity.1.4.6) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.4.6 <- _prim_int_eq idris_int_eq0_1.4.6 idris_int_eq1_1.4.6
                                      ccp.0.4.6 <- case idris_int_eq2.4.6 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.6
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.8.6 <- pure ccp.0.4.6
                                      idr_Prelude.Chars.isSpace5_val.6 <- pure (CGrInt unboxed.CGrInt.8.6)
                                      idr_Prelude.Chars.isSpace5_43.6 <- store idr_Prelude.Chars.isSpace5_val.6
                                      idr_Prelude.Chars.isSpace5_val_44.6 <- pure idr_Prelude.Chars.isSpace5_val.6
                                      case idr_Prelude.Chars.isSpace5_val_44.6 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.6) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.6 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace6_val_46.6 <- pure (CGrInt 11)
                                              idr_Prelude.Chars.isSpace6.6 <- store idr_Prelude.Chars.isSpace6_val_46.6
                                              (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.6) <- pure idr_Prelude.Chars.isSpace6_val_46.6
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.6) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.5.6 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.6
                                              idris_int_eq1.41.arity.1.5.6 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.6
                                              (CGrInt idris_int_eq0_1.5.6) <- pure (CGrInt idris_int_eq0.49.arity.1.5.6) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.5.6) <- pure (CGrInt idris_int_eq1.41.arity.1.5.6) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.5.6 <- _prim_int_eq idris_int_eq0_1.5.6 idris_int_eq1_1.5.6
                                              ccp.0.5.6 <- case idris_int_eq2.5.6 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.6
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.9.6 <- pure ccp.0.5.6
                                              idr_Prelude.Chars.isSpace6_val.6 <- pure (CGrInt unboxed.CGrInt.9.6)
                                              idr_Prelude.Chars.isSpace6_47.6 <- store idr_Prelude.Chars.isSpace6_val.6
                                              idr_Prelude.Chars.isSpace6_val_48.6 <- pure idr_Prelude.Chars.isSpace6_val.6
                                              case idr_Prelude.Chars.isSpace6_val_48.6 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.6) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.6 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace7_val_50.6 <- pure (CGrInt 160)
                                                      idr_Prelude.Chars.isSpace7.6 <- store idr_Prelude.Chars.isSpace7_val_50.6
                                                      (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.6) <- pure idr_Prelude.Chars.isSpace7_val_50.6
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.6) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.6.6 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.6
                                                      idris_int_eq1.41.arity.1.6.6 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.6
                                                      (CGrInt idris_int_eq0_1.6.6) <- pure (CGrInt idris_int_eq0.49.arity.1.6.6) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.6.6) <- pure (CGrInt idris_int_eq1.41.arity.1.6.6) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.6.6 <- _prim_int_eq idris_int_eq0_1.6.6 idris_int_eq1_1.6.6
                                                      ccp.0.6.6 <- case idris_int_eq2.6.6 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.6
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.10.6 <- pure ccp.0.6.6
                                                      idr_Prelude.Chars.isSpace7_val.6 <- pure (CGrInt unboxed.CGrInt.10.6)
                                                      idr_Prelude.Chars.isSpace7_51.6 <- store idr_Prelude.Chars.isSpace7_val.6
                                                      idr_Prelude.Chars.isSpace7_val_52.6 <- pure idr_Prelude.Chars.isSpace7_val.6
                                                      case idr_Prelude.Chars.isSpace7_val_52.6 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.6) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.6 of
                                                            0 ->
                                                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                    #default ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
            #default ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
      idr_Prelude.Strings.trim2_846.0 <- store idr_Prelude.Strings.trim2_val_732.0
      idr_Prelude.Strings.trim2_val_847.0 <- pure idr_Prelude.Strings.trim2_val_732.0
      case idr_Prelude.Strings.trim2_val_847.0 of
        (Cidr_Prelude.Bool.False) ->
          (CGrString idr_Prelude.Strings.trim0.41.92.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev1.41.arity.1.32 <- pure idr_Prelude.Strings.trim0.41.92.arity.1.0
          (CGrString idris_str_rev1_0.32) <- pure (CGrString idris_str_rev1.41.arity.1.32) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev2.32 <- _prim_string_reverse idris_str_rev1_0.32
          unboxed.CGrString.105.0 <- pure idris_str_rev2.32
          idr_Prelude.Strings.trim3_val_854.0 <- pure (CGrString unboxed.CGrString.105.0)
          idr_Prelude.Strings.trim3_855.0 <- store idr_Prelude.Strings.trim3_val_854.0
          idr_Prelude.Strings.trim4_val_856.0 <- pure idr_Prelude.Strings.trim2_val.0
          idr_Prelude.Strings.trim4_857.0 <- store idr_Prelude.Strings.trim4_val_856.0
          (CGrString idr_Prelude.Strings.trim4_857.41.93.arity.1.0) <- pure idr_Prelude.Strings.trim4_val_856.0
          idris_str_eq1.9 <- pure idr_Prelude.Strings.trim3_855.0
          idris_str_eq2.41.arity.1.9 <- pure idr_Prelude.Strings.trim4_857.41.93.arity.1.0
          (CGrString idris_str_eq1_0.9) <- fetch idris_str_eq1.9
          (CGrString idris_str_eq2_0.9) <- pure (CGrString idris_str_eq2.41.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_eq3.9 <- _prim_string_eq idris_str_eq1_0.9 idris_str_eq2_0.9
          ccp.2.9 <- case idris_str_eq3.9 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.52.0 <- pure ccp.2.9
          idr_Prelude.Strings.trim3_val_853.0 <- pure (CGrInt unboxed.CGrInt.52.0)
          idr_Prelude.Strings.trim3_858.0 <- store idr_Prelude.Strings.trim3_val_853.0
          idr_Prelude.Strings.trim3_val_859.0 <- pure idr_Prelude.Strings.trim3_val_853.0
          idr_Prelude.Strings.trim3_val_852.0 <- case idr_Prelude.Strings.trim3_val_859.0 of
            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_860.0) ->
              case idr_Prelude.Strings.trim_cpat_LInt64_0_860.0 of
                0 ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.trim3_861.0 <- store idr_Prelude.Strings.trim3_val_852.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.9" <- pure idr_Prelude.Strings.trim3_861.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.9" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
          idr_Prelude.Strings.trim3_val_851.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.9" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.9" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.9"
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.9" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          idr_Prelude.Strings.trim3_864.0 <- store idr_Prelude.Strings.trim3_val_851.0
          idr_Prelude.Strings.trim3_val_865.0 <- pure idr_Prelude.Strings.trim3_val_851.0
          idr_Prelude.Strings.trim3_val_850.0 <- case idr_Prelude.Strings.trim3_val_865.0 of
            (Cidr_Prelude.Basics.No) ->
              pure idr_Prelude.Strings.trim2_val.0
            (Cidr_Prelude.Basics.Yes) ->
              (CGrString idr_Prelude.Strings.trim0.41.95.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev1.41.arity.1.33 <- pure idr_Prelude.Strings.trim0.41.95.arity.1.0
              (CGrString idris_str_rev1_0.33) <- pure (CGrString idris_str_rev1.41.arity.1.33) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.33 <- _prim_string_reverse idris_str_rev1_0.33
              unboxed.CGrString.106.0 <- pure idris_str_rev2.33
              idr_Prelude.Strings.trim4_val_868.0 <- pure (CGrString unboxed.CGrString.106.0)
              idr_Prelude.Strings.trim4_869.0 <- store idr_Prelude.Strings.trim4_val_868.0
              idris_str_head1.15 <- pure idr_Prelude.Strings.trim4_869.0
              (CGrString idris_str_head1_0.15) <- fetch idris_str_head1.15
              idris_str_head2.15 <- _prim_string_head idris_str_head1_0.15
              unboxed.CGrInt.53.0 <- pure idris_str_head2.15
              idr_Prelude.Strings.trim4_val_867.0 <- pure (CGrInt unboxed.CGrInt.53.0)
              idr_Prelude.Strings.trim4_870.0 <- store idr_Prelude.Strings.trim4_val_867.0
              (CGrInt idr_Prelude.Strings.trim4_870.57.16.arity.1.0) <- pure idr_Prelude.Strings.trim4_val_867.0
              idr_Prelude.Chars.isSpace0.57.arity.1.7 <- pure idr_Prelude.Strings.trim4_870.57.16.arity.1.0
              idr_Prelude.Chars.isSpace1_val_27.7 <- pure idr_Prelude.Chars.isSpace1_val_27.6
              idr_Prelude.Chars.isSpace1.7 <- store idr_Prelude.Chars.isSpace1_val_27.7
              (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.7) <- pure idr_Prelude.Chars.isSpace1_val_27.7
              (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.7) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq0.49.arity.1.0.7 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.7
              idris_int_eq1.41.arity.1.0.7 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.7
              (CGrInt idris_int_eq0_1.0.7) <- pure (CGrInt idris_int_eq0.49.arity.1.0.7) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_eq1_1.0.7) <- pure (CGrInt idris_int_eq1.41.arity.1.0.7) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq2.0.7 <- _prim_int_eq idris_int_eq0_1.0.7 idris_int_eq1_1.0.7
              ccp.0.0.7 <- case idris_int_eq2.0.7 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              unboxed.CGrInt.4.7 <- pure ccp.0.0.7
              idr_Prelude.Chars.isSpace1_val.7 <- pure (CGrInt unboxed.CGrInt.4.7)
              idr_Prelude.Chars.isSpace1_28.7 <- store idr_Prelude.Chars.isSpace1_val.7
              idr_Prelude.Chars.isSpace1_val_29.7 <- pure idr_Prelude.Chars.isSpace1_val.7
              idr_Prelude.Strings.trim4_val_866.0 <- case idr_Prelude.Chars.isSpace1_val_29.7 of
                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.7) ->
                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0.7 of
                    0 ->
                      idr_Prelude.Chars.isSpace2_val_30.7 <- pure (CGrInt 9)
                      idr_Prelude.Chars.isSpace2.7 <- store idr_Prelude.Chars.isSpace2_val_30.7
                      (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.7) <- pure idr_Prelude.Chars.isSpace2_val_30.7
                      (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.7) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.1.7 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.7
                      idris_int_eq1.41.arity.1.1.7 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.7
                      (CGrInt idris_int_eq0_1.1.7) <- pure (CGrInt idris_int_eq0.49.arity.1.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.1.7) <- pure (CGrInt idris_int_eq1.41.arity.1.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.1.7 <- _prim_int_eq idris_int_eq0_1.1.7 idris_int_eq1_1.1.7
                      ccp.0.1.7 <- case idris_int_eq2.1.7 of
                        #False ->
                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.7
                        #True ->
                          pure 1
                      unboxed.CGrInt.5.7 <- pure ccp.0.1.7
                      idr_Prelude.Chars.isSpace2_val.7 <- pure (CGrInt unboxed.CGrInt.5.7)
                      idr_Prelude.Chars.isSpace2_31.7 <- store idr_Prelude.Chars.isSpace2_val.7
                      idr_Prelude.Chars.isSpace2_val_32.7 <- pure idr_Prelude.Chars.isSpace2_val.7
                      case idr_Prelude.Chars.isSpace2_val_32.7 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.7) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.7 of
                            0 ->
                              idr_Prelude.Chars.isSpace3_val_34.7 <- pure (CGrInt 13)
                              idr_Prelude.Chars.isSpace3.7 <- store idr_Prelude.Chars.isSpace3_val_34.7
                              (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.7) <- pure idr_Prelude.Chars.isSpace3_val_34.7
                              (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.7) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.2.7 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.7
                              idris_int_eq1.41.arity.1.2.7 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.7
                              (CGrInt idris_int_eq0_1.2.7) <- pure (CGrInt idris_int_eq0.49.arity.1.2.7) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.2.7) <- pure (CGrInt idris_int_eq1.41.arity.1.2.7) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.2.7 <- _prim_int_eq idris_int_eq0_1.2.7 idris_int_eq1_1.2.7
                              ccp.0.2.7 <- case idris_int_eq2.2.7 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.7
                                #True ->
                                  pure 1
                              unboxed.CGrInt.6.7 <- pure ccp.0.2.7
                              idr_Prelude.Chars.isSpace3_val.7 <- pure (CGrInt unboxed.CGrInt.6.7)
                              idr_Prelude.Chars.isSpace3_35.7 <- store idr_Prelude.Chars.isSpace3_val.7
                              idr_Prelude.Chars.isSpace3_val_36.7 <- pure idr_Prelude.Chars.isSpace3_val.7
                              case idr_Prelude.Chars.isSpace3_val_36.7 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.7) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.7 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace4_val_38.7 <- pure (CGrInt 10)
                                      idr_Prelude.Chars.isSpace4.7 <- store idr_Prelude.Chars.isSpace4_val_38.7
                                      (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.7) <- pure idr_Prelude.Chars.isSpace4_val_38.7
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.7) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.3.7 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.7
                                      idris_int_eq1.41.arity.1.3.7 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.7
                                      (CGrInt idris_int_eq0_1.3.7) <- pure (CGrInt idris_int_eq0.49.arity.1.3.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.3.7) <- pure (CGrInt idris_int_eq1.41.arity.1.3.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.3.7 <- _prim_int_eq idris_int_eq0_1.3.7 idris_int_eq1_1.3.7
                                      ccp.0.3.7 <- case idris_int_eq2.3.7 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.7
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.7.7 <- pure ccp.0.3.7
                                      idr_Prelude.Chars.isSpace4_val.7 <- pure (CGrInt unboxed.CGrInt.7.7)
                                      idr_Prelude.Chars.isSpace4_39.7 <- store idr_Prelude.Chars.isSpace4_val.7
                                      idr_Prelude.Chars.isSpace4_val_40.7 <- pure idr_Prelude.Chars.isSpace4_val.7
                                      case idr_Prelude.Chars.isSpace4_val_40.7 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.7) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.7 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace5_val_42.7 <- pure (CGrInt 12)
                                              idr_Prelude.Chars.isSpace5.7 <- store idr_Prelude.Chars.isSpace5_val_42.7
                                              (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.7) <- pure idr_Prelude.Chars.isSpace5_val_42.7
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.7) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.4.7 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.7
                                              idris_int_eq1.41.arity.1.4.7 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.7
                                              (CGrInt idris_int_eq0_1.4.7) <- pure (CGrInt idris_int_eq0.49.arity.1.4.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.4.7) <- pure (CGrInt idris_int_eq1.41.arity.1.4.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.4.7 <- _prim_int_eq idris_int_eq0_1.4.7 idris_int_eq1_1.4.7
                                              ccp.0.4.7 <- case idris_int_eq2.4.7 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.7
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.8.7 <- pure ccp.0.4.7
                                              idr_Prelude.Chars.isSpace5_val.7 <- pure (CGrInt unboxed.CGrInt.8.7)
                                              idr_Prelude.Chars.isSpace5_43.7 <- store idr_Prelude.Chars.isSpace5_val.7
                                              idr_Prelude.Chars.isSpace5_val_44.7 <- pure idr_Prelude.Chars.isSpace5_val.7
                                              case idr_Prelude.Chars.isSpace5_val_44.7 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.7) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.7 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace6_val_46.7 <- pure (CGrInt 11)
                                                      idr_Prelude.Chars.isSpace6.7 <- store idr_Prelude.Chars.isSpace6_val_46.7
                                                      (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.7) <- pure idr_Prelude.Chars.isSpace6_val_46.7
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.7) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.5.7 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.7
                                                      idris_int_eq1.41.arity.1.5.7 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.7
                                                      (CGrInt idris_int_eq0_1.5.7) <- pure (CGrInt idris_int_eq0.49.arity.1.5.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.5.7) <- pure (CGrInt idris_int_eq1.41.arity.1.5.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.5.7 <- _prim_int_eq idris_int_eq0_1.5.7 idris_int_eq1_1.5.7
                                                      ccp.0.5.7 <- case idris_int_eq2.5.7 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.7
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.9.7 <- pure ccp.0.5.7
                                                      idr_Prelude.Chars.isSpace6_val.7 <- pure (CGrInt unboxed.CGrInt.9.7)
                                                      idr_Prelude.Chars.isSpace6_47.7 <- store idr_Prelude.Chars.isSpace6_val.7
                                                      idr_Prelude.Chars.isSpace6_val_48.7 <- pure idr_Prelude.Chars.isSpace6_val.7
                                                      case idr_Prelude.Chars.isSpace6_val_48.7 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.7) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.7 of
                                                            0 ->
                                                              idr_Prelude.Chars.isSpace7_val_50.7 <- pure (CGrInt 160)
                                                              idr_Prelude.Chars.isSpace7.7 <- store idr_Prelude.Chars.isSpace7_val_50.7
                                                              (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.7) <- pure idr_Prelude.Chars.isSpace7_val_50.7
                                                              (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.7) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq0.49.arity.1.6.7 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.7
                                                              idris_int_eq1.41.arity.1.6.7 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.7
                                                              (CGrInt idris_int_eq0_1.6.7) <- pure (CGrInt idris_int_eq0.49.arity.1.6.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              (CGrInt idris_int_eq1_1.6.7) <- pure (CGrInt idris_int_eq1.41.arity.1.6.7) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq2.6.7 <- _prim_int_eq idris_int_eq0_1.6.7 idris_int_eq1_1.6.7
                                                              ccp.0.6.7 <- case idris_int_eq2.6.7 of
                                                                #False ->
                                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.7
                                                                #True ->
                                                                  pure 1
                                                              unboxed.CGrInt.10.7 <- pure ccp.0.6.7
                                                              idr_Prelude.Chars.isSpace7_val.7 <- pure (CGrInt unboxed.CGrInt.10.7)
                                                              idr_Prelude.Chars.isSpace7_51.7 <- store idr_Prelude.Chars.isSpace7_val.7
                                                              idr_Prelude.Chars.isSpace7_val_52.7 <- pure idr_Prelude.Chars.isSpace7_val.7
                                                              case idr_Prelude.Chars.isSpace7_val_52.7 of
                                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.7) ->
                                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.7 of
                                                                    0 ->
                                                                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                    #default ->
                                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                    #default ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
              idr_Prelude.Strings.trim4_871.0 <- store idr_Prelude.Strings.trim4_val_866.0
              idr_Prelude.Strings.trim4_val_872.0 <- pure idr_Prelude.Strings.trim4_val_866.0
              case idr_Prelude.Strings.trim4_val_872.0 of
                (Cidr_Prelude.Bool.False) ->
                  (CGrString idr_Prelude.Strings.trim0.41.96.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.34 <- pure idr_Prelude.Strings.trim0.41.96.arity.1.0
                  (CGrString idris_str_rev1_0.34) <- pure (CGrString idris_str_rev1.41.arity.1.34) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.34 <- _prim_string_reverse idris_str_rev1_0.34
                  unboxed.CGrString.107.0 <- pure idris_str_rev2.34
                  idr_Prelude.Strings.trim5_val_874.0 <- pure (CGrString unboxed.CGrString.107.0)
                  idr_Prelude.Strings.trim5_875.0 <- store idr_Prelude.Strings.trim5_val_874.0
                  idris_str_head1.16 <- pure idr_Prelude.Strings.trim5_875.0
                  (CGrString idris_str_head1_0.16) <- fetch idris_str_head1.16
                  idris_str_head2.16 <- _prim_string_head idris_str_head1_0.16
                  unboxed.CGrInt.54.0 <- pure idris_str_head2.16
                  idr_Prelude.Strings.trim5_val_873.0 <- pure (CGrInt unboxed.CGrInt.54.0)
                  idr_Prelude.Strings.trim5_876.0 <- store idr_Prelude.Strings.trim5_val_873.0
                  (CGrString idr_Prelude.Strings.trim0.41.97.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.35 <- pure idr_Prelude.Strings.trim0.41.97.arity.1.0
                  (CGrString idris_str_rev1_0.35) <- pure (CGrString idris_str_rev1.41.arity.1.35) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.35 <- _prim_string_reverse idris_str_rev1_0.35
                  unboxed.CGrString.108.0 <- pure idris_str_rev2.35
                  idr_Prelude.Strings.trim6_val_878.0 <- pure (CGrString unboxed.CGrString.108.0)
                  idr_Prelude.Strings.trim6_879.0 <- store idr_Prelude.Strings.trim6_val_878.0
                  idris_str_tail1.54 <- pure idr_Prelude.Strings.trim6_879.0
                  (CGrString idris_str_tail1_0.54) <- fetch idris_str_tail1.54
                  idris_str_tail2.54 <- _prim_string_tail idris_str_tail1_0.54
                  unboxed.CGrString.109.0 <- pure idris_str_tail2.54
                  idr_Prelude.Strings.trim6_val_877.0 <- pure (CGrString unboxed.CGrString.109.0)
                  idr_Prelude.Strings.trim6_880.0 <- store idr_Prelude.Strings.trim6_val_877.0
                  (CGrInt idr_Prelude.Strings.trim5_876.41.98.arity.1.0) <- pure idr_Prelude.Strings.trim5_val_873.0
                  (CGrString idr_Prelude.Strings.trim6_880.49.32.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_877.0
                  idris_str_cons1.41.arity.1.6 <- pure idr_Prelude.Strings.trim5_876.41.98.arity.1.0
                  idris_str_cons2.49.arity.1.6 <- pure idr_Prelude.Strings.trim6_880.49.32.arity.1.0
                  (CGrInt idris_str_cons1_0.6) <- pure (CGrInt idris_str_cons1.41.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idris_str_cons2_0.6) <- pure (CGrString idris_str_cons2.49.arity.1.6) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons3.6 <- _prim_string_cons idris_str_cons1_0.6 idris_str_cons2_0.6
                  unboxed.CGrString.271.0 <- pure idris_str_cons3.6
                  pure (CGrString unboxed.CGrString.271.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.271.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.54) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.16)
                (Cidr_Prelude.Bool.True) ->
                  (CGrString idr_Prelude.Strings.trim0.41.99.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.36 <- pure idr_Prelude.Strings.trim0.41.99.arity.1.0
                  (CGrString idris_str_rev1_0.36) <- pure (CGrString idris_str_rev1.41.arity.1.36) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.36 <- _prim_string_reverse idris_str_rev1_0.36
                  unboxed.CGrString.110.0 <- pure idris_str_rev2.36
                  idr_Prelude.Strings.trim5_val_885.0 <- pure (CGrString unboxed.CGrString.110.0)
                  idr_Prelude.Strings.trim5_886.0 <- store idr_Prelude.Strings.trim5_val_885.0
                  idris_str_tail1.55 <- pure idr_Prelude.Strings.trim5_886.0
                  (CGrString idris_str_tail1_0.55) <- fetch idris_str_tail1.55
                  idris_str_tail2.55 <- _prim_string_tail idris_str_tail1_0.55
                  unboxed.CGrString.111.0 <- pure idris_str_tail2.55
                  idr_Prelude.Strings.trim5_val_884.0 <- pure (CGrString unboxed.CGrString.111.0)
                  idr_Prelude.Strings.trim5_887.0 <- store idr_Prelude.Strings.trim5_val_884.0
                  idr_Prelude.Strings.trim6_val_888.0 <- pure idr_Prelude.Strings.trim2_val.0
                  idr_Prelude.Strings.trim6_889.0 <- store idr_Prelude.Strings.trim6_val_888.0
                  (CGrString idr_Prelude.Strings.trim6_889.41.100.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_888.0
                  idris_str_eq1.10 <- pure idr_Prelude.Strings.trim5_887.0
                  idris_str_eq2.41.arity.1.10 <- pure idr_Prelude.Strings.trim6_889.41.100.arity.1.0
                  (CGrString idris_str_eq1_0.10) <- fetch idris_str_eq1.10
                  (CGrString idris_str_eq2_0.10) <- pure (CGrString idris_str_eq2.41.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_eq3.10 <- _prim_string_eq idris_str_eq1_0.10 idris_str_eq2_0.10
                  ccp.2.10 <- case idris_str_eq3.10 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  unboxed.CGrInt.55.0 <- pure ccp.2.10
                  idr_Prelude.Strings.trim5_val_883.0 <- pure (CGrInt unboxed.CGrInt.55.0)
                  idr_Prelude.Strings.trim5_890.0 <- store idr_Prelude.Strings.trim5_val_883.0
                  idr_Prelude.Strings.trim5_val_891.0 <- pure idr_Prelude.Strings.trim5_val_883.0
                  idr_Prelude.Strings.trim5_val_882.0 <- case idr_Prelude.Strings.trim5_val_891.0 of
                    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_892.0) ->
                      case idr_Prelude.Strings.trim_cpat_LInt64_0_892.0 of
                        0 ->
                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  idr_Prelude.Strings.trim5_893.0 <- store idr_Prelude.Strings.trim5_val_882.0
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.10" <- pure idr_Prelude.Strings.trim5_893.0
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.10" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                  idr_Prelude.Strings.trim5_val_881.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.10" of
                    (Cidr_Prelude.Bool.True) ->
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.10" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.10"
                      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.10" of
                        (Cidr_Prelude.Bool.False) ->
                          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                        (Cidr_Prelude.Bool.True) ->
                          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                  idr_Prelude.Strings.trim5_896.0 <- store idr_Prelude.Strings.trim5_val_881.0
                  idr_Prelude.Strings.trim5_val_897.0 <- pure idr_Prelude.Strings.trim5_val_881.0
                  case idr_Prelude.Strings.trim5_val_897.0 of
                    (Cidr_Prelude.Basics.No) ->
                      pure idr_Prelude.Strings.trim2_val.0
                    (Cidr_Prelude.Basics.Yes) ->
                      (CGrString idr_Prelude.Strings.trim0.41.102.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.37 <- pure idr_Prelude.Strings.trim0.41.102.arity.1.0
                      (CGrString idris_str_rev1_0.37) <- pure (CGrString idris_str_rev1.41.arity.1.37) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.37 <- _prim_string_reverse idris_str_rev1_0.37
                      unboxed.CGrString.112.0 <- pure idris_str_rev2.37
                      idr_Prelude.Strings.trim6_val_901.0 <- pure (CGrString unboxed.CGrString.112.0)
                      idr_Prelude.Strings.trim6_902.0 <- store idr_Prelude.Strings.trim6_val_901.0
                      idris_str_tail1.56 <- pure idr_Prelude.Strings.trim6_902.0
                      (CGrString idris_str_tail1_0.56) <- fetch idris_str_tail1.56
                      idris_str_tail2.56 <- _prim_string_tail idris_str_tail1_0.56
                      unboxed.CGrString.113.0 <- pure idris_str_tail2.56
                      idr_Prelude.Strings.trim6_val_900.0 <- pure (CGrString unboxed.CGrString.113.0)
                      idr_Prelude.Strings.trim6_903.0 <- store idr_Prelude.Strings.trim6_val_900.0
                      idris_str_head1.17 <- pure idr_Prelude.Strings.trim6_903.0
                      (CGrString idris_str_head1_0.17) <- fetch idris_str_head1.17
                      idris_str_head2.17 <- _prim_string_head idris_str_head1_0.17
                      unboxed.CGrInt.56.0 <- pure idris_str_head2.17
                      idr_Prelude.Strings.trim6_val_899.0 <- pure (CGrInt unboxed.CGrInt.56.0)
                      idr_Prelude.Strings.trim6_904.0 <- store idr_Prelude.Strings.trim6_val_899.0
                      (CGrInt idr_Prelude.Strings.trim6_904.57.17.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_899.0
                      idr_Prelude.Chars.isSpace0.57.arity.1.8 <- pure idr_Prelude.Strings.trim6_904.57.17.arity.1.0
                      idr_Prelude.Chars.isSpace1_val_27.8 <- pure idr_Prelude.Chars.isSpace1_val_27.6
                      idr_Prelude.Chars.isSpace1.8 <- store idr_Prelude.Chars.isSpace1_val_27.8
                      (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.8) <- pure idr_Prelude.Chars.isSpace1_val_27.8
                      (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.8) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.0.8 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.8
                      idris_int_eq1.41.arity.1.0.8 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.8
                      (CGrInt idris_int_eq0_1.0.8) <- pure (CGrInt idris_int_eq0.49.arity.1.0.8) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.0.8) <- pure (CGrInt idris_int_eq1.41.arity.1.0.8) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.0.8 <- _prim_int_eq idris_int_eq0_1.0.8 idris_int_eq1_1.0.8
                      ccp.0.0.8 <- case idris_int_eq2.0.8 of
                        #False ->
                          pure 0
                        #True ->
                          pure 1
                      unboxed.CGrInt.4.8 <- pure ccp.0.0.8
                      idr_Prelude.Chars.isSpace1_val.8 <- pure (CGrInt unboxed.CGrInt.4.8)
                      idr_Prelude.Chars.isSpace1_28.8 <- store idr_Prelude.Chars.isSpace1_val.8
                      idr_Prelude.Chars.isSpace1_val_29.8 <- pure idr_Prelude.Chars.isSpace1_val.8
                      idr_Prelude.Strings.trim6_val_898.0 <- case idr_Prelude.Chars.isSpace1_val_29.8 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.8) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0.8 of
                            0 ->
                              idr_Prelude.Chars.isSpace2_val_30.8 <- pure (CGrInt 9)
                              idr_Prelude.Chars.isSpace2.8 <- store idr_Prelude.Chars.isSpace2_val_30.8
                              (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.8) <- pure idr_Prelude.Chars.isSpace2_val_30.8
                              (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.8) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.1.8 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.8
                              idris_int_eq1.41.arity.1.1.8 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.8
                              (CGrInt idris_int_eq0_1.1.8) <- pure (CGrInt idris_int_eq0.49.arity.1.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.1.8) <- pure (CGrInt idris_int_eq1.41.arity.1.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.1.8 <- _prim_int_eq idris_int_eq0_1.1.8 idris_int_eq1_1.1.8
                              ccp.0.1.8 <- case idris_int_eq2.1.8 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.8
                                #True ->
                                  pure 1
                              unboxed.CGrInt.5.8 <- pure ccp.0.1.8
                              idr_Prelude.Chars.isSpace2_val.8 <- pure (CGrInt unboxed.CGrInt.5.8)
                              idr_Prelude.Chars.isSpace2_31.8 <- store idr_Prelude.Chars.isSpace2_val.8
                              idr_Prelude.Chars.isSpace2_val_32.8 <- pure idr_Prelude.Chars.isSpace2_val.8
                              case idr_Prelude.Chars.isSpace2_val_32.8 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.8) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.8 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace3_val_34.8 <- pure (CGrInt 13)
                                      idr_Prelude.Chars.isSpace3.8 <- store idr_Prelude.Chars.isSpace3_val_34.8
                                      (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.8) <- pure idr_Prelude.Chars.isSpace3_val_34.8
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.8) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.2.8 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.8
                                      idris_int_eq1.41.arity.1.2.8 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.8
                                      (CGrInt idris_int_eq0_1.2.8) <- pure (CGrInt idris_int_eq0.49.arity.1.2.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.2.8) <- pure (CGrInt idris_int_eq1.41.arity.1.2.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.2.8 <- _prim_int_eq idris_int_eq0_1.2.8 idris_int_eq1_1.2.8
                                      ccp.0.2.8 <- case idris_int_eq2.2.8 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.8
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.6.8 <- pure ccp.0.2.8
                                      idr_Prelude.Chars.isSpace3_val.8 <- pure (CGrInt unboxed.CGrInt.6.8)
                                      idr_Prelude.Chars.isSpace3_35.8 <- store idr_Prelude.Chars.isSpace3_val.8
                                      idr_Prelude.Chars.isSpace3_val_36.8 <- pure idr_Prelude.Chars.isSpace3_val.8
                                      case idr_Prelude.Chars.isSpace3_val_36.8 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.8) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.8 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace4_val_38.8 <- pure (CGrInt 10)
                                              idr_Prelude.Chars.isSpace4.8 <- store idr_Prelude.Chars.isSpace4_val_38.8
                                              (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.8) <- pure idr_Prelude.Chars.isSpace4_val_38.8
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.8) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.3.8 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.8
                                              idris_int_eq1.41.arity.1.3.8 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.8
                                              (CGrInt idris_int_eq0_1.3.8) <- pure (CGrInt idris_int_eq0.49.arity.1.3.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.3.8) <- pure (CGrInt idris_int_eq1.41.arity.1.3.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.3.8 <- _prim_int_eq idris_int_eq0_1.3.8 idris_int_eq1_1.3.8
                                              ccp.0.3.8 <- case idris_int_eq2.3.8 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.8
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.7.8 <- pure ccp.0.3.8
                                              idr_Prelude.Chars.isSpace4_val.8 <- pure (CGrInt unboxed.CGrInt.7.8)
                                              idr_Prelude.Chars.isSpace4_39.8 <- store idr_Prelude.Chars.isSpace4_val.8
                                              idr_Prelude.Chars.isSpace4_val_40.8 <- pure idr_Prelude.Chars.isSpace4_val.8
                                              case idr_Prelude.Chars.isSpace4_val_40.8 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.8) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.8 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace5_val_42.8 <- pure (CGrInt 12)
                                                      idr_Prelude.Chars.isSpace5.8 <- store idr_Prelude.Chars.isSpace5_val_42.8
                                                      (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.8) <- pure idr_Prelude.Chars.isSpace5_val_42.8
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.8) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.4.8 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.8
                                                      idris_int_eq1.41.arity.1.4.8 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.8
                                                      (CGrInt idris_int_eq0_1.4.8) <- pure (CGrInt idris_int_eq0.49.arity.1.4.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.4.8) <- pure (CGrInt idris_int_eq1.41.arity.1.4.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.4.8 <- _prim_int_eq idris_int_eq0_1.4.8 idris_int_eq1_1.4.8
                                                      ccp.0.4.8 <- case idris_int_eq2.4.8 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.8
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.8.8 <- pure ccp.0.4.8
                                                      idr_Prelude.Chars.isSpace5_val.8 <- pure (CGrInt unboxed.CGrInt.8.8)
                                                      idr_Prelude.Chars.isSpace5_43.8 <- store idr_Prelude.Chars.isSpace5_val.8
                                                      idr_Prelude.Chars.isSpace5_val_44.8 <- pure idr_Prelude.Chars.isSpace5_val.8
                                                      case idr_Prelude.Chars.isSpace5_val_44.8 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.8) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.8 of
                                                            0 ->
                                                              idr_Prelude.Chars.isSpace6_val_46.8 <- pure (CGrInt 11)
                                                              idr_Prelude.Chars.isSpace6.8 <- store idr_Prelude.Chars.isSpace6_val_46.8
                                                              (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.8) <- pure idr_Prelude.Chars.isSpace6_val_46.8
                                                              (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.8) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq0.49.arity.1.5.8 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.8
                                                              idris_int_eq1.41.arity.1.5.8 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.8
                                                              (CGrInt idris_int_eq0_1.5.8) <- pure (CGrInt idris_int_eq0.49.arity.1.5.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              (CGrInt idris_int_eq1_1.5.8) <- pure (CGrInt idris_int_eq1.41.arity.1.5.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq2.5.8 <- _prim_int_eq idris_int_eq0_1.5.8 idris_int_eq1_1.5.8
                                                              ccp.0.5.8 <- case idris_int_eq2.5.8 of
                                                                #False ->
                                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.8
                                                                #True ->
                                                                  pure 1
                                                              unboxed.CGrInt.9.8 <- pure ccp.0.5.8
                                                              idr_Prelude.Chars.isSpace6_val.8 <- pure (CGrInt unboxed.CGrInt.9.8)
                                                              idr_Prelude.Chars.isSpace6_47.8 <- store idr_Prelude.Chars.isSpace6_val.8
                                                              idr_Prelude.Chars.isSpace6_val_48.8 <- pure idr_Prelude.Chars.isSpace6_val.8
                                                              case idr_Prelude.Chars.isSpace6_val_48.8 of
                                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.8) ->
                                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.8 of
                                                                    0 ->
                                                                      idr_Prelude.Chars.isSpace7_val_50.8 <- pure (CGrInt 160)
                                                                      idr_Prelude.Chars.isSpace7.8 <- store idr_Prelude.Chars.isSpace7_val_50.8
                                                                      (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.8) <- pure idr_Prelude.Chars.isSpace7_val_50.8
                                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.8) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      idris_int_eq0.49.arity.1.6.8 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.8
                                                                      idris_int_eq1.41.arity.1.6.8 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.8
                                                                      (CGrInt idris_int_eq0_1.6.8) <- pure (CGrInt idris_int_eq0.49.arity.1.6.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      (CGrInt idris_int_eq1_1.6.8) <- pure (CGrInt idris_int_eq1.41.arity.1.6.8) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      idris_int_eq2.6.8 <- _prim_int_eq idris_int_eq0_1.6.8 idris_int_eq1_1.6.8
                                                                      ccp.0.6.8 <- case idris_int_eq2.6.8 of
                                                                        #False ->
                                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.8
                                                                        #True ->
                                                                          pure 1
                                                                      unboxed.CGrInt.10.8 <- pure ccp.0.6.8
                                                                      idr_Prelude.Chars.isSpace7_val.8 <- pure (CGrInt unboxed.CGrInt.10.8)
                                                                      idr_Prelude.Chars.isSpace7_51.8 <- store idr_Prelude.Chars.isSpace7_val.8
                                                                      idr_Prelude.Chars.isSpace7_val_52.8 <- pure idr_Prelude.Chars.isSpace7_val.8
                                                                      case idr_Prelude.Chars.isSpace7_val_52.8 of
                                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.8) ->
                                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.8 of
                                                                            0 ->
                                                                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                            #default ->
                                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                    #default ->
                                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                      idr_Prelude.Strings.trim6_905.0 <- store idr_Prelude.Strings.trim6_val_898.0
                      idr_Prelude.Strings.trim6_val_906.0 <- pure idr_Prelude.Strings.trim6_val_898.0
                      case idr_Prelude.Strings.trim6_val_906.0 of
                        (Cidr_Prelude.Bool.False) ->
                          (CGrString idr_Prelude.Strings.trim0.41.103.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.38 <- pure idr_Prelude.Strings.trim0.41.103.arity.1.0
                          (CGrString idris_str_rev1_0.38) <- pure (CGrString idris_str_rev1.41.arity.1.38) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.38 <- _prim_string_reverse idris_str_rev1_0.38
                          unboxed.CGrString.114.0 <- pure idris_str_rev2.38
                          idr_Prelude.Strings.trim7_val_909.0 <- pure (CGrString unboxed.CGrString.114.0)
                          idr_Prelude.Strings.trim7_910.0 <- store idr_Prelude.Strings.trim7_val_909.0
                          idris_str_tail1.57 <- pure idr_Prelude.Strings.trim7_910.0
                          (CGrString idris_str_tail1_0.57) <- fetch idris_str_tail1.57
                          idris_str_tail2.57 <- _prim_string_tail idris_str_tail1_0.57
                          unboxed.CGrString.115.0 <- pure idris_str_tail2.57
                          idr_Prelude.Strings.trim7_val_908.0 <- pure (CGrString unboxed.CGrString.115.0)
                          idr_Prelude.Strings.trim7_911.0 <- store idr_Prelude.Strings.trim7_val_908.0
                          idris_str_head1.18 <- pure idr_Prelude.Strings.trim7_911.0
                          (CGrString idris_str_head1_0.18) <- fetch idris_str_head1.18
                          idris_str_head2.18 <- _prim_string_head idris_str_head1_0.18
                          unboxed.CGrInt.57.0 <- pure idris_str_head2.18
                          idr_Prelude.Strings.trim7_val_907.0 <- pure (CGrInt unboxed.CGrInt.57.0)
                          idr_Prelude.Strings.trim7_912.0 <- store idr_Prelude.Strings.trim7_val_907.0
                          (CGrString idr_Prelude.Strings.trim0.41.104.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.39 <- pure idr_Prelude.Strings.trim0.41.104.arity.1.0
                          (CGrString idris_str_rev1_0.39) <- pure (CGrString idris_str_rev1.41.arity.1.39) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.39 <- _prim_string_reverse idris_str_rev1_0.39
                          unboxed.CGrString.116.0 <- pure idris_str_rev2.39
                          idr_Prelude.Strings.trim8_val_915.0 <- pure (CGrString unboxed.CGrString.116.0)
                          idr_Prelude.Strings.trim8_916.0 <- store idr_Prelude.Strings.trim8_val_915.0
                          idris_str_tail1.58 <- pure idr_Prelude.Strings.trim8_916.0
                          (CGrString idris_str_tail1_0.58) <- fetch idris_str_tail1.58
                          idris_str_tail2.58 <- _prim_string_tail idris_str_tail1_0.58
                          unboxed.CGrString.117.0 <- pure idris_str_tail2.58
                          idr_Prelude.Strings.trim8_val_914.0 <- pure (CGrString unboxed.CGrString.117.0)
                          idr_Prelude.Strings.trim8_917.0 <- store idr_Prelude.Strings.trim8_val_914.0
                          idris_str_tail1.59 <- pure idr_Prelude.Strings.trim8_917.0
                          (CGrString idris_str_tail1_0.59) <- fetch idris_str_tail1.59
                          idris_str_tail2.59 <- _prim_string_tail idris_str_tail1_0.59
                          unboxed.CGrString.118.0 <- pure idris_str_tail2.59
                          idr_Prelude.Strings.trim8_val_913.0 <- pure (CGrString unboxed.CGrString.118.0)
                          idr_Prelude.Strings.trim8_918.0 <- store idr_Prelude.Strings.trim8_val_913.0
                          (CGrInt idr_Prelude.Strings.trim7_912.41.105.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_907.0
                          (CGrString idr_Prelude.Strings.trim8_918.49.33.arity.1.0) <- pure idr_Prelude.Strings.trim8_val_913.0
                          idris_str_cons1.41.arity.1.7 <- pure idr_Prelude.Strings.trim7_912.41.105.arity.1.0
                          idris_str_cons2.49.arity.1.7 <- pure idr_Prelude.Strings.trim8_918.49.33.arity.1.0
                          (CGrInt idris_str_cons1_0.7) <- pure (CGrInt idris_str_cons1.41.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrString idris_str_cons2_0.7) <- pure (CGrString idris_str_cons2.49.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_cons3.7 <- _prim_string_cons idris_str_cons1_0.7 idris_str_cons2_0.7
                          unboxed.CGrString.272.0 <- pure idris_str_cons3.7
                          pure (CGrString unboxed.CGrString.272.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.272.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.59) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.58) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.18) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.57)
                        (Cidr_Prelude.Bool.True) ->
                          (CGrString idr_Prelude.Strings.trim0.41.106.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.40 <- pure idr_Prelude.Strings.trim0.41.106.arity.1.0
                          (CGrString idris_str_rev1_0.40) <- pure (CGrString idris_str_rev1.41.arity.1.40) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.40 <- _prim_string_reverse idris_str_rev1_0.40
                          unboxed.CGrString.119.0 <- pure idris_str_rev2.40
                          idr_Prelude.Strings.trim8_val_927.0 <- pure (CGrString unboxed.CGrString.119.0)
                          idr_Prelude.Strings.trim8_928.0 <- store idr_Prelude.Strings.trim8_val_927.0
                          idris_str_tail1.60 <- pure idr_Prelude.Strings.trim8_928.0
                          (CGrString idris_str_tail1_0.60) <- fetch idris_str_tail1.60
                          idris_str_tail2.60 <- _prim_string_tail idris_str_tail1_0.60
                          unboxed.CGrString.120.0 <- pure idris_str_tail2.60
                          idr_Prelude.Strings.trim8_val_926.0 <- pure (CGrString unboxed.CGrString.120.0)
                          idr_Prelude.Strings.trim8_929.0 <- store idr_Prelude.Strings.trim8_val_926.0
                          idris_str_tail1.61 <- pure idr_Prelude.Strings.trim8_929.0
                          (CGrString idris_str_tail1_0.61) <- fetch idris_str_tail1.61
                          idris_str_tail2.61 <- _prim_string_tail idris_str_tail1_0.61
                          unboxed.CGrString.121.0 <- pure idris_str_tail2.61
                          idr_Prelude.Strings.trim8_val_925.0 <- pure (CGrString unboxed.CGrString.121.0)
                          idr_Prelude.Strings.trim8_930.0 <- store idr_Prelude.Strings.trim8_val_925.0
                          idr_Prelude.Strings.trim9_val_931.0 <- pure idr_Prelude.Strings.trim2_val.0
                          idr_Prelude.Strings.trim9_932.0 <- store idr_Prelude.Strings.trim9_val_931.0
                          (CGrString idr_Prelude.Strings.trim9_932.41.107.arity.1.0) <- pure idr_Prelude.Strings.trim9_val_931.0
                          idris_str_eq1.11 <- pure idr_Prelude.Strings.trim8_930.0
                          idris_str_eq2.41.arity.1.11 <- pure idr_Prelude.Strings.trim9_932.41.107.arity.1.0
                          (CGrString idris_str_eq1_0.11) <- fetch idris_str_eq1.11
                          (CGrString idris_str_eq2_0.11) <- pure (CGrString idris_str_eq2.41.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_eq3.11 <- _prim_string_eq idris_str_eq1_0.11 idris_str_eq2_0.11
                          ccp.2.11 <- case idris_str_eq3.11 of
                            #False ->
                              pure 0
                            #True ->
                              pure 1
                          unboxed.CGrInt.58.0 <- pure ccp.2.11
                          idr_Prelude.Strings.trim8_val_924.0 <- pure (CGrInt unboxed.CGrInt.58.0)
                          idr_Prelude.Strings.trim8_933.0 <- store idr_Prelude.Strings.trim8_val_924.0
                          idr_Prelude.Strings.trim8_val_934.0 <- pure idr_Prelude.Strings.trim8_val_924.0
                          idr_Prelude.Strings.trim8_val_923.0 <- case idr_Prelude.Strings.trim8_val_934.0 of
                            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_935.0) ->
                              case idr_Prelude.Strings.trim_cpat_LInt64_0_935.0 of
                                0 ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          idr_Prelude.Strings.trim8_936.0 <- store idr_Prelude.Strings.trim8_val_923.0
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.11" <- pure idr_Prelude.Strings.trim8_936.0
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.11" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                          idr_Prelude.Strings.trim8_val_922.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.11" of
                            (Cidr_Prelude.Bool.True) ->
                              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.11" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.11"
                              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.11" of
                                (Cidr_Prelude.Bool.False) ->
                                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                                (Cidr_Prelude.Bool.True) ->
                                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                          idr_Prelude.Strings.trim8_939.0 <- store idr_Prelude.Strings.trim8_val_922.0
                          idr_Prelude.Strings.trim8_val_940.0 <- pure idr_Prelude.Strings.trim8_val_922.0
                          idr_Prelude.Strings.trim8_val_921.0 <- case idr_Prelude.Strings.trim8_val_940.0 of
                            (Cidr_Prelude.Basics.No) ->
                              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                            (Cidr_Prelude.Basics.Yes) ->
                              (CGrString idr_Prelude.Strings.trim0.41.109.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.41 <- pure idr_Prelude.Strings.trim0.41.109.arity.1.0
                              (CGrString idris_str_rev1_0.41) <- pure (CGrString idris_str_rev1.41.arity.1.41) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.41 <- _prim_string_reverse idris_str_rev1_0.41
                              unboxed.CGrString.122.0 <- pure idris_str_rev2.41
                              idr_Prelude.Strings.trim9_val_944.0 <- pure (CGrString unboxed.CGrString.122.0)
                              idr_Prelude.Strings.trim9_945.0 <- store idr_Prelude.Strings.trim9_val_944.0
                              idris_str_tail1.62 <- pure idr_Prelude.Strings.trim9_945.0
                              (CGrString idris_str_tail1_0.62) <- fetch idris_str_tail1.62
                              idris_str_tail2.62 <- _prim_string_tail idris_str_tail1_0.62
                              unboxed.CGrString.123.0 <- pure idris_str_tail2.62
                              idr_Prelude.Strings.trim9_val_943.0 <- pure (CGrString unboxed.CGrString.123.0)
                              idr_Prelude.Strings.trim9_946.0 <- store idr_Prelude.Strings.trim9_val_943.0
                              idris_str_tail1.63 <- pure idr_Prelude.Strings.trim9_946.0
                              (CGrString idris_str_tail1_0.63) <- fetch idris_str_tail1.63
                              idris_str_tail2.63 <- _prim_string_tail idris_str_tail1_0.63
                              unboxed.CGrString.124.0 <- pure idris_str_tail2.63
                              idr_Prelude.Strings.trim9_val_942.0 <- pure (CGrString unboxed.CGrString.124.0)
                              idr_Prelude.Strings.trim9_947.0 <- store idr_Prelude.Strings.trim9_val_942.0
                              idris_str_head1.19 <- pure idr_Prelude.Strings.trim9_947.0
                              (CGrString idris_str_head1_0.19) <- fetch idris_str_head1.19
                              idris_str_head2.19 <- _prim_string_head idris_str_head1_0.19
                              unboxed.CGrInt.59.0 <- pure idris_str_head2.19
                              idr_Prelude.Strings.trim9_val_941.0 <- pure (CGrInt unboxed.CGrInt.59.0)
                              idr_Prelude.Strings.trim9_948.0 <- store idr_Prelude.Strings.trim9_val_941.0
                              (CGrString idr_Prelude.Strings.trim0.41.110.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.42 <- pure idr_Prelude.Strings.trim0.41.110.arity.1.0
                              (CGrString idris_str_rev1_0.42) <- pure (CGrString idris_str_rev1.41.arity.1.42) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.42 <- _prim_string_reverse idris_str_rev1_0.42
                              unboxed.CGrString.125.0 <- pure idris_str_rev2.42
                              idr_Prelude.Strings.trim10_val_952.0 <- pure (CGrString unboxed.CGrString.125.0)
                              idr_Prelude.Strings.trim10_953.0 <- store idr_Prelude.Strings.trim10_val_952.0
                              idris_str_tail1.64 <- pure idr_Prelude.Strings.trim10_953.0
                              (CGrString idris_str_tail1_0.64) <- fetch idris_str_tail1.64
                              idris_str_tail2.64 <- _prim_string_tail idris_str_tail1_0.64
                              unboxed.CGrString.126.0 <- pure idris_str_tail2.64
                              idr_Prelude.Strings.trim10_val_951.0 <- pure (CGrString unboxed.CGrString.126.0)
                              idr_Prelude.Strings.trim10_954.0 <- store idr_Prelude.Strings.trim10_val_951.0
                              idris_str_tail1.65 <- pure idr_Prelude.Strings.trim10_954.0
                              (CGrString idris_str_tail1_0.65) <- fetch idris_str_tail1.65
                              idris_str_tail2.65 <- _prim_string_tail idris_str_tail1_0.65
                              unboxed.CGrString.127.0 <- pure idris_str_tail2.65
                              idr_Prelude.Strings.trim10_val_950.0 <- pure (CGrString unboxed.CGrString.127.0)
                              idr_Prelude.Strings.trim10_955.0 <- store idr_Prelude.Strings.trim10_val_950.0
                              idris_str_tail1.66 <- pure idr_Prelude.Strings.trim10_955.0
                              (CGrString idris_str_tail1_0.66) <- fetch idris_str_tail1.66
                              idris_str_tail2.66 <- _prim_string_tail idris_str_tail1_0.66
                              unboxed.CGrString.128.0 <- pure idris_str_tail2.66
                              idr_Prelude.Strings.trim10_val_949.0 <- pure (CGrString unboxed.CGrString.128.0)
                              idr_Prelude.Strings.trim10_956.0 <- store idr_Prelude.Strings.trim10_val_949.0
                              pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim9_948.0 idr_Prelude.Strings.trim10_956.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim9_948.0 idr_Prelude.Strings.trim10_956.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.66) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.65) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.64) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.19) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.63) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.62)
                          idr_Prelude.Strings.trim8_957.0 <- store idr_Prelude.Strings.trim8_val_921.0
                          unboxed.CGrString.129.0 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim8_957.0
                          pure (CGrString unboxed.CGrString.129.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.129.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.11) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.61) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.60) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.17) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.56) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.10) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.55) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.15)
          idr_Prelude.Strings.trim3_958.0 <- store idr_Prelude.Strings.trim3_val_850.0
          (CGrString idr_Prelude.Strings.trim3_958.41.111.arity.1.0) <- pure idr_Prelude.Strings.trim3_val_850.0
          idris_str_rev1.41.arity.1.43 <- pure idr_Prelude.Strings.trim3_958.41.111.arity.1.0
          (CGrString idris_str_rev1_0.43) <- pure (CGrString idris_str_rev1.41.arity.1.43) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev2.43 <- _prim_string_reverse idris_str_rev1_0.43
          unboxed.CGrString.130.0 <- pure idris_str_rev2.43
          idr_Prelude.Strings.trim3_val_849.0 <- pure (CGrString unboxed.CGrString.130.0)
          idr_Prelude.Strings.trim3_959.0 <- store idr_Prelude.Strings.trim3_val_849.0
          idris_str_head1.20 <- pure idr_Prelude.Strings.trim3_959.0
          (CGrString idris_str_head1_0.20) <- fetch idris_str_head1.20
          idris_str_head2.20 <- _prim_string_head idris_str_head1_0.20
          unboxed.CGrInt.60.0 <- pure idris_str_head2.20
          idr_Prelude.Strings.trim3_val_848.0 <- pure (CGrInt unboxed.CGrInt.60.0)
          idr_Prelude.Strings.trim3_960.0 <- store idr_Prelude.Strings.trim3_val_848.0
          (CGrString idr_Prelude.Strings.trim0.41.112.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev1.41.arity.1.44 <- pure idr_Prelude.Strings.trim0.41.112.arity.1.0
          (CGrString idris_str_rev1_0.44) <- pure (CGrString idris_str_rev1.41.arity.1.44) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev2.44 <- _prim_string_reverse idris_str_rev1_0.44
          unboxed.CGrString.131.0 <- pure idris_str_rev2.44
          idr_Prelude.Strings.trim4_val_967.0 <- pure (CGrString unboxed.CGrString.131.0)
          idr_Prelude.Strings.trim4_968.0 <- store idr_Prelude.Strings.trim4_val_967.0
          idr_Prelude.Strings.trim5_val_969.0 <- pure idr_Prelude.Strings.trim2_val.0
          idr_Prelude.Strings.trim5_970.0 <- store idr_Prelude.Strings.trim5_val_969.0
          (CGrString idr_Prelude.Strings.trim5_970.41.113.arity.1.0) <- pure idr_Prelude.Strings.trim5_val_969.0
          idris_str_eq1.12 <- pure idr_Prelude.Strings.trim4_968.0
          idris_str_eq2.41.arity.1.12 <- pure idr_Prelude.Strings.trim5_970.41.113.arity.1.0
          (CGrString idris_str_eq1_0.12) <- fetch idris_str_eq1.12
          (CGrString idris_str_eq2_0.12) <- pure (CGrString idris_str_eq2.41.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_eq3.12 <- _prim_string_eq idris_str_eq1_0.12 idris_str_eq2_0.12
          ccp.2.12 <- case idris_str_eq3.12 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.61.0 <- pure ccp.2.12
          idr_Prelude.Strings.trim4_val_966.0 <- pure (CGrInt unboxed.CGrInt.61.0)
          idr_Prelude.Strings.trim4_971.0 <- store idr_Prelude.Strings.trim4_val_966.0
          idr_Prelude.Strings.trim4_val_972.0 <- pure idr_Prelude.Strings.trim4_val_966.0
          idr_Prelude.Strings.trim4_val_965.0 <- case idr_Prelude.Strings.trim4_val_972.0 of
            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_973.0) ->
              case idr_Prelude.Strings.trim_cpat_LInt64_0_973.0 of
                0 ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.trim4_974.0 <- store idr_Prelude.Strings.trim4_val_965.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.12" <- pure idr_Prelude.Strings.trim4_974.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.12" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
          idr_Prelude.Strings.trim4_val_964.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.12" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.12" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.12"
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.12" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          idr_Prelude.Strings.trim4_977.0 <- store idr_Prelude.Strings.trim4_val_964.0
          idr_Prelude.Strings.trim4_val_978.0 <- pure idr_Prelude.Strings.trim4_val_964.0
          idr_Prelude.Strings.trim4_val_963.0 <- case idr_Prelude.Strings.trim4_val_978.0 of
            (Cidr_Prelude.Basics.No) ->
              pure idr_Prelude.Strings.trim2_val.0
            (Cidr_Prelude.Basics.Yes) ->
              (CGrString idr_Prelude.Strings.trim0.41.115.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev1.41.arity.1.45 <- pure idr_Prelude.Strings.trim0.41.115.arity.1.0
              (CGrString idris_str_rev1_0.45) <- pure (CGrString idris_str_rev1.41.arity.1.45) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.45 <- _prim_string_reverse idris_str_rev1_0.45
              unboxed.CGrString.132.0 <- pure idris_str_rev2.45
              idr_Prelude.Strings.trim5_val_981.0 <- pure (CGrString unboxed.CGrString.132.0)
              idr_Prelude.Strings.trim5_982.0 <- store idr_Prelude.Strings.trim5_val_981.0
              idris_str_head1.21 <- pure idr_Prelude.Strings.trim5_982.0
              (CGrString idris_str_head1_0.21) <- fetch idris_str_head1.21
              idris_str_head2.21 <- _prim_string_head idris_str_head1_0.21
              unboxed.CGrInt.62.0 <- pure idris_str_head2.21
              idr_Prelude.Strings.trim5_val_980.0 <- pure (CGrInt unboxed.CGrInt.62.0)
              idr_Prelude.Strings.trim5_983.0 <- store idr_Prelude.Strings.trim5_val_980.0
              (CGrInt idr_Prelude.Strings.trim5_983.57.18.arity.1.0) <- pure idr_Prelude.Strings.trim5_val_980.0
              idr_Prelude.Chars.isSpace0.57.arity.1.9 <- pure idr_Prelude.Strings.trim5_983.57.18.arity.1.0
              idr_Prelude.Chars.isSpace1_val_27.9 <- pure idr_Prelude.Chars.isSpace1_val_27.6
              idr_Prelude.Chars.isSpace1.9 <- store idr_Prelude.Chars.isSpace1_val_27.9
              (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.9) <- pure idr_Prelude.Chars.isSpace1_val_27.9
              (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.9) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq0.49.arity.1.0.9 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.9
              idris_int_eq1.41.arity.1.0.9 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.9
              (CGrInt idris_int_eq0_1.0.9) <- pure (CGrInt idris_int_eq0.49.arity.1.0.9) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_eq1_1.0.9) <- pure (CGrInt idris_int_eq1.41.arity.1.0.9) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq2.0.9 <- _prim_int_eq idris_int_eq0_1.0.9 idris_int_eq1_1.0.9
              ccp.0.0.9 <- case idris_int_eq2.0.9 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              unboxed.CGrInt.4.9 <- pure ccp.0.0.9
              idr_Prelude.Chars.isSpace1_val.9 <- pure (CGrInt unboxed.CGrInt.4.9)
              idr_Prelude.Chars.isSpace1_28.9 <- store idr_Prelude.Chars.isSpace1_val.9
              idr_Prelude.Chars.isSpace1_val_29.9 <- pure idr_Prelude.Chars.isSpace1_val.9
              idr_Prelude.Strings.trim5_val_979.0 <- case idr_Prelude.Chars.isSpace1_val_29.9 of
                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.9) ->
                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0.9 of
                    0 ->
                      idr_Prelude.Chars.isSpace2_val_30.9 <- pure (CGrInt 9)
                      idr_Prelude.Chars.isSpace2.9 <- store idr_Prelude.Chars.isSpace2_val_30.9
                      (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.9) <- pure idr_Prelude.Chars.isSpace2_val_30.9
                      (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.9) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.1.9 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.9
                      idris_int_eq1.41.arity.1.1.9 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.9
                      (CGrInt idris_int_eq0_1.1.9) <- pure (CGrInt idris_int_eq0.49.arity.1.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.1.9) <- pure (CGrInt idris_int_eq1.41.arity.1.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.1.9 <- _prim_int_eq idris_int_eq0_1.1.9 idris_int_eq1_1.1.9
                      ccp.0.1.9 <- case idris_int_eq2.1.9 of
                        #False ->
                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.9
                        #True ->
                          pure 1
                      unboxed.CGrInt.5.9 <- pure ccp.0.1.9
                      idr_Prelude.Chars.isSpace2_val.9 <- pure (CGrInt unboxed.CGrInt.5.9)
                      idr_Prelude.Chars.isSpace2_31.9 <- store idr_Prelude.Chars.isSpace2_val.9
                      idr_Prelude.Chars.isSpace2_val_32.9 <- pure idr_Prelude.Chars.isSpace2_val.9
                      case idr_Prelude.Chars.isSpace2_val_32.9 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.9) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.9 of
                            0 ->
                              idr_Prelude.Chars.isSpace3_val_34.9 <- pure (CGrInt 13)
                              idr_Prelude.Chars.isSpace3.9 <- store idr_Prelude.Chars.isSpace3_val_34.9
                              (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.9) <- pure idr_Prelude.Chars.isSpace3_val_34.9
                              (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.9) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.2.9 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.9
                              idris_int_eq1.41.arity.1.2.9 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.9
                              (CGrInt idris_int_eq0_1.2.9) <- pure (CGrInt idris_int_eq0.49.arity.1.2.9) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.2.9) <- pure (CGrInt idris_int_eq1.41.arity.1.2.9) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.2.9 <- _prim_int_eq idris_int_eq0_1.2.9 idris_int_eq1_1.2.9
                              ccp.0.2.9 <- case idris_int_eq2.2.9 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.9
                                #True ->
                                  pure 1
                              unboxed.CGrInt.6.9 <- pure ccp.0.2.9
                              idr_Prelude.Chars.isSpace3_val.9 <- pure (CGrInt unboxed.CGrInt.6.9)
                              idr_Prelude.Chars.isSpace3_35.9 <- store idr_Prelude.Chars.isSpace3_val.9
                              idr_Prelude.Chars.isSpace3_val_36.9 <- pure idr_Prelude.Chars.isSpace3_val.9
                              case idr_Prelude.Chars.isSpace3_val_36.9 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.9) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.9 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace4_val_38.9 <- pure (CGrInt 10)
                                      idr_Prelude.Chars.isSpace4.9 <- store idr_Prelude.Chars.isSpace4_val_38.9
                                      (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.9) <- pure idr_Prelude.Chars.isSpace4_val_38.9
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.9) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.3.9 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.9
                                      idris_int_eq1.41.arity.1.3.9 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.9
                                      (CGrInt idris_int_eq0_1.3.9) <- pure (CGrInt idris_int_eq0.49.arity.1.3.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.3.9) <- pure (CGrInt idris_int_eq1.41.arity.1.3.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.3.9 <- _prim_int_eq idris_int_eq0_1.3.9 idris_int_eq1_1.3.9
                                      ccp.0.3.9 <- case idris_int_eq2.3.9 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.9
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.7.9 <- pure ccp.0.3.9
                                      idr_Prelude.Chars.isSpace4_val.9 <- pure (CGrInt unboxed.CGrInt.7.9)
                                      idr_Prelude.Chars.isSpace4_39.9 <- store idr_Prelude.Chars.isSpace4_val.9
                                      idr_Prelude.Chars.isSpace4_val_40.9 <- pure idr_Prelude.Chars.isSpace4_val.9
                                      case idr_Prelude.Chars.isSpace4_val_40.9 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.9) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.9 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace5_val_42.9 <- pure (CGrInt 12)
                                              idr_Prelude.Chars.isSpace5.9 <- store idr_Prelude.Chars.isSpace5_val_42.9
                                              (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.9) <- pure idr_Prelude.Chars.isSpace5_val_42.9
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.9) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.4.9 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.9
                                              idris_int_eq1.41.arity.1.4.9 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.9
                                              (CGrInt idris_int_eq0_1.4.9) <- pure (CGrInt idris_int_eq0.49.arity.1.4.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.4.9) <- pure (CGrInt idris_int_eq1.41.arity.1.4.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.4.9 <- _prim_int_eq idris_int_eq0_1.4.9 idris_int_eq1_1.4.9
                                              ccp.0.4.9 <- case idris_int_eq2.4.9 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.9
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.8.9 <- pure ccp.0.4.9
                                              idr_Prelude.Chars.isSpace5_val.9 <- pure (CGrInt unboxed.CGrInt.8.9)
                                              idr_Prelude.Chars.isSpace5_43.9 <- store idr_Prelude.Chars.isSpace5_val.9
                                              idr_Prelude.Chars.isSpace5_val_44.9 <- pure idr_Prelude.Chars.isSpace5_val.9
                                              case idr_Prelude.Chars.isSpace5_val_44.9 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.9) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.9 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace6_val_46.9 <- pure (CGrInt 11)
                                                      idr_Prelude.Chars.isSpace6.9 <- store idr_Prelude.Chars.isSpace6_val_46.9
                                                      (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.9) <- pure idr_Prelude.Chars.isSpace6_val_46.9
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.9) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.5.9 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.9
                                                      idris_int_eq1.41.arity.1.5.9 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.9
                                                      (CGrInt idris_int_eq0_1.5.9) <- pure (CGrInt idris_int_eq0.49.arity.1.5.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.5.9) <- pure (CGrInt idris_int_eq1.41.arity.1.5.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.5.9 <- _prim_int_eq idris_int_eq0_1.5.9 idris_int_eq1_1.5.9
                                                      ccp.0.5.9 <- case idris_int_eq2.5.9 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.9
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.9.9 <- pure ccp.0.5.9
                                                      idr_Prelude.Chars.isSpace6_val.9 <- pure (CGrInt unboxed.CGrInt.9.9)
                                                      idr_Prelude.Chars.isSpace6_47.9 <- store idr_Prelude.Chars.isSpace6_val.9
                                                      idr_Prelude.Chars.isSpace6_val_48.9 <- pure idr_Prelude.Chars.isSpace6_val.9
                                                      case idr_Prelude.Chars.isSpace6_val_48.9 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.9) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.9 of
                                                            0 ->
                                                              idr_Prelude.Chars.isSpace7_val_50.9 <- pure (CGrInt 160)
                                                              idr_Prelude.Chars.isSpace7.9 <- store idr_Prelude.Chars.isSpace7_val_50.9
                                                              (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.9) <- pure idr_Prelude.Chars.isSpace7_val_50.9
                                                              (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.9) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq0.49.arity.1.6.9 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.9
                                                              idris_int_eq1.41.arity.1.6.9 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.9
                                                              (CGrInt idris_int_eq0_1.6.9) <- pure (CGrInt idris_int_eq0.49.arity.1.6.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              (CGrInt idris_int_eq1_1.6.9) <- pure (CGrInt idris_int_eq1.41.arity.1.6.9) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq2.6.9 <- _prim_int_eq idris_int_eq0_1.6.9 idris_int_eq1_1.6.9
                                                              ccp.0.6.9 <- case idris_int_eq2.6.9 of
                                                                #False ->
                                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.9
                                                                #True ->
                                                                  pure 1
                                                              unboxed.CGrInt.10.9 <- pure ccp.0.6.9
                                                              idr_Prelude.Chars.isSpace7_val.9 <- pure (CGrInt unboxed.CGrInt.10.9)
                                                              idr_Prelude.Chars.isSpace7_51.9 <- store idr_Prelude.Chars.isSpace7_val.9
                                                              idr_Prelude.Chars.isSpace7_val_52.9 <- pure idr_Prelude.Chars.isSpace7_val.9
                                                              case idr_Prelude.Chars.isSpace7_val_52.9 of
                                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.9) ->
                                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.9 of
                                                                    0 ->
                                                                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                    #default ->
                                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                    #default ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
              idr_Prelude.Strings.trim5_984.0 <- store idr_Prelude.Strings.trim5_val_979.0
              idr_Prelude.Strings.trim5_val_985.0 <- pure idr_Prelude.Strings.trim5_val_979.0
              case idr_Prelude.Strings.trim5_val_985.0 of
                (Cidr_Prelude.Bool.False) ->
                  (CGrString idr_Prelude.Strings.trim0.41.116.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.46 <- pure idr_Prelude.Strings.trim0.41.116.arity.1.0
                  (CGrString idris_str_rev1_0.46) <- pure (CGrString idris_str_rev1.41.arity.1.46) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.46 <- _prim_string_reverse idris_str_rev1_0.46
                  unboxed.CGrString.133.0 <- pure idris_str_rev2.46
                  idr_Prelude.Strings.trim6_val_987.0 <- pure (CGrString unboxed.CGrString.133.0)
                  idr_Prelude.Strings.trim6_988.0 <- store idr_Prelude.Strings.trim6_val_987.0
                  idris_str_head1.22 <- pure idr_Prelude.Strings.trim6_988.0
                  (CGrString idris_str_head1_0.22) <- fetch idris_str_head1.22
                  idris_str_head2.22 <- _prim_string_head idris_str_head1_0.22
                  unboxed.CGrInt.63.0 <- pure idris_str_head2.22
                  idr_Prelude.Strings.trim6_val_986.0 <- pure (CGrInt unboxed.CGrInt.63.0)
                  idr_Prelude.Strings.trim6_989.0 <- store idr_Prelude.Strings.trim6_val_986.0
                  (CGrString idr_Prelude.Strings.trim0.41.117.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.47 <- pure idr_Prelude.Strings.trim0.41.117.arity.1.0
                  (CGrString idris_str_rev1_0.47) <- pure (CGrString idris_str_rev1.41.arity.1.47) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.47 <- _prim_string_reverse idris_str_rev1_0.47
                  unboxed.CGrString.134.0 <- pure idris_str_rev2.47
                  idr_Prelude.Strings.trim7_val_991.0 <- pure (CGrString unboxed.CGrString.134.0)
                  idr_Prelude.Strings.trim7_992.0 <- store idr_Prelude.Strings.trim7_val_991.0
                  idris_str_tail1.67 <- pure idr_Prelude.Strings.trim7_992.0
                  (CGrString idris_str_tail1_0.67) <- fetch idris_str_tail1.67
                  idris_str_tail2.67 <- _prim_string_tail idris_str_tail1_0.67
                  unboxed.CGrString.135.0 <- pure idris_str_tail2.67
                  idr_Prelude.Strings.trim7_val_990.0 <- pure (CGrString unboxed.CGrString.135.0)
                  idr_Prelude.Strings.trim7_993.0 <- store idr_Prelude.Strings.trim7_val_990.0
                  (CGrInt idr_Prelude.Strings.trim6_989.41.118.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_986.0
                  (CGrString idr_Prelude.Strings.trim7_993.49.34.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_990.0
                  idris_str_cons1.41.arity.1.8 <- pure idr_Prelude.Strings.trim6_989.41.118.arity.1.0
                  idris_str_cons2.49.arity.1.8 <- pure idr_Prelude.Strings.trim7_993.49.34.arity.1.0
                  (CGrInt idris_str_cons1_0.8) <- pure (CGrInt idris_str_cons1.41.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idris_str_cons2_0.8) <- pure (CGrString idris_str_cons2.49.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons3.8 <- _prim_string_cons idris_str_cons1_0.8 idris_str_cons2_0.8
                  unboxed.CGrString.273.0 <- pure idris_str_cons3.8
                  pure (CGrString unboxed.CGrString.273.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.273.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.67) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.22)
                (Cidr_Prelude.Bool.True) ->
                  (CGrString idr_Prelude.Strings.trim0.41.119.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.48 <- pure idr_Prelude.Strings.trim0.41.119.arity.1.0
                  (CGrString idris_str_rev1_0.48) <- pure (CGrString idris_str_rev1.41.arity.1.48) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.48 <- _prim_string_reverse idris_str_rev1_0.48
                  unboxed.CGrString.136.0 <- pure idris_str_rev2.48
                  idr_Prelude.Strings.trim6_val_998.0 <- pure (CGrString unboxed.CGrString.136.0)
                  idr_Prelude.Strings.trim6_999.0 <- store idr_Prelude.Strings.trim6_val_998.0
                  idris_str_tail1.68 <- pure idr_Prelude.Strings.trim6_999.0
                  (CGrString idris_str_tail1_0.68) <- fetch idris_str_tail1.68
                  idris_str_tail2.68 <- _prim_string_tail idris_str_tail1_0.68
                  unboxed.CGrString.137.0 <- pure idris_str_tail2.68
                  idr_Prelude.Strings.trim6_val_997.0 <- pure (CGrString unboxed.CGrString.137.0)
                  idr_Prelude.Strings.trim6_1000.0 <- store idr_Prelude.Strings.trim6_val_997.0
                  idr_Prelude.Strings.trim7_val_1001.0 <- pure idr_Prelude.Strings.trim2_val.0
                  idr_Prelude.Strings.trim7_1002.0 <- store idr_Prelude.Strings.trim7_val_1001.0
                  (CGrString idr_Prelude.Strings.trim7_1002.41.120.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_1001.0
                  idris_str_eq1.13 <- pure idr_Prelude.Strings.trim6_1000.0
                  idris_str_eq2.41.arity.1.13 <- pure idr_Prelude.Strings.trim7_1002.41.120.arity.1.0
                  (CGrString idris_str_eq1_0.13) <- fetch idris_str_eq1.13
                  (CGrString idris_str_eq2_0.13) <- pure (CGrString idris_str_eq2.41.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_eq3.13 <- _prim_string_eq idris_str_eq1_0.13 idris_str_eq2_0.13
                  ccp.2.13 <- case idris_str_eq3.13 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  unboxed.CGrInt.64.0 <- pure ccp.2.13
                  idr_Prelude.Strings.trim6_val_996.0 <- pure (CGrInt unboxed.CGrInt.64.0)
                  idr_Prelude.Strings.trim6_1003.0 <- store idr_Prelude.Strings.trim6_val_996.0
                  idr_Prelude.Strings.trim6_val_1004.0 <- pure idr_Prelude.Strings.trim6_val_996.0
                  idr_Prelude.Strings.trim6_val_995.0 <- case idr_Prelude.Strings.trim6_val_1004.0 of
                    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1005.0) ->
                      case idr_Prelude.Strings.trim_cpat_LInt64_0_1005.0 of
                        0 ->
                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  idr_Prelude.Strings.trim6_1006.0 <- store idr_Prelude.Strings.trim6_val_995.0
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.13" <- pure idr_Prelude.Strings.trim6_1006.0
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.13" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                  idr_Prelude.Strings.trim6_val_994.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.13" of
                    (Cidr_Prelude.Bool.True) ->
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.13" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.13"
                      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.13" of
                        (Cidr_Prelude.Bool.False) ->
                          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                        (Cidr_Prelude.Bool.True) ->
                          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                  idr_Prelude.Strings.trim6_1009.0 <- store idr_Prelude.Strings.trim6_val_994.0
                  idr_Prelude.Strings.trim6_val_1010.0 <- pure idr_Prelude.Strings.trim6_val_994.0
                  case idr_Prelude.Strings.trim6_val_1010.0 of
                    (Cidr_Prelude.Basics.No) ->
                      pure idr_Prelude.Strings.trim2_val.0
                    (Cidr_Prelude.Basics.Yes) ->
                      (CGrString idr_Prelude.Strings.trim0.41.122.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.49 <- pure idr_Prelude.Strings.trim0.41.122.arity.1.0
                      (CGrString idris_str_rev1_0.49) <- pure (CGrString idris_str_rev1.41.arity.1.49) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.49 <- _prim_string_reverse idris_str_rev1_0.49
                      unboxed.CGrString.138.0 <- pure idris_str_rev2.49
                      idr_Prelude.Strings.trim7_val_1014.0 <- pure (CGrString unboxed.CGrString.138.0)
                      idr_Prelude.Strings.trim7_1015.0 <- store idr_Prelude.Strings.trim7_val_1014.0
                      idris_str_tail1.69 <- pure idr_Prelude.Strings.trim7_1015.0
                      (CGrString idris_str_tail1_0.69) <- fetch idris_str_tail1.69
                      idris_str_tail2.69 <- _prim_string_tail idris_str_tail1_0.69
                      unboxed.CGrString.139.0 <- pure idris_str_tail2.69
                      idr_Prelude.Strings.trim7_val_1013.0 <- pure (CGrString unboxed.CGrString.139.0)
                      idr_Prelude.Strings.trim7_1016.0 <- store idr_Prelude.Strings.trim7_val_1013.0
                      idris_str_head1.23 <- pure idr_Prelude.Strings.trim7_1016.0
                      (CGrString idris_str_head1_0.23) <- fetch idris_str_head1.23
                      idris_str_head2.23 <- _prim_string_head idris_str_head1_0.23
                      unboxed.CGrInt.65.0 <- pure idris_str_head2.23
                      idr_Prelude.Strings.trim7_val_1012.0 <- pure (CGrInt unboxed.CGrInt.65.0)
                      idr_Prelude.Strings.trim7_1017.0 <- store idr_Prelude.Strings.trim7_val_1012.0
                      (CGrInt idr_Prelude.Strings.trim7_1017.57.19.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_1012.0
                      idr_Prelude.Chars.isSpace0.57.arity.1.10 <- pure idr_Prelude.Strings.trim7_1017.57.19.arity.1.0
                      idr_Prelude.Chars.isSpace1_val_27.10 <- pure idr_Prelude.Chars.isSpace1_val_27.6
                      idr_Prelude.Chars.isSpace1.10 <- store idr_Prelude.Chars.isSpace1_val_27.10
                      (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.10) <- pure idr_Prelude.Chars.isSpace1_val_27.10
                      (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.10) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.0.10 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.10
                      idris_int_eq1.41.arity.1.0.10 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.10
                      (CGrInt idris_int_eq0_1.0.10) <- pure (CGrInt idris_int_eq0.49.arity.1.0.10) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.0.10) <- pure (CGrInt idris_int_eq1.41.arity.1.0.10) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.0.10 <- _prim_int_eq idris_int_eq0_1.0.10 idris_int_eq1_1.0.10
                      ccp.0.0.10 <- case idris_int_eq2.0.10 of
                        #False ->
                          pure 0
                        #True ->
                          pure 1
                      unboxed.CGrInt.4.10 <- pure ccp.0.0.10
                      idr_Prelude.Chars.isSpace1_val.10 <- pure (CGrInt unboxed.CGrInt.4.10)
                      idr_Prelude.Chars.isSpace1_28.10 <- store idr_Prelude.Chars.isSpace1_val.10
                      idr_Prelude.Chars.isSpace1_val_29.10 <- pure idr_Prelude.Chars.isSpace1_val.10
                      idr_Prelude.Strings.trim7_val_1011.0 <- case idr_Prelude.Chars.isSpace1_val_29.10 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.10) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0.10 of
                            0 ->
                              idr_Prelude.Chars.isSpace2_val_30.10 <- pure (CGrInt 9)
                              idr_Prelude.Chars.isSpace2.10 <- store idr_Prelude.Chars.isSpace2_val_30.10
                              (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.10) <- pure idr_Prelude.Chars.isSpace2_val_30.10
                              (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.10) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.1.10 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.10
                              idris_int_eq1.41.arity.1.1.10 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.10
                              (CGrInt idris_int_eq0_1.1.10) <- pure (CGrInt idris_int_eq0.49.arity.1.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.1.10) <- pure (CGrInt idris_int_eq1.41.arity.1.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.1.10 <- _prim_int_eq idris_int_eq0_1.1.10 idris_int_eq1_1.1.10
                              ccp.0.1.10 <- case idris_int_eq2.1.10 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.10
                                #True ->
                                  pure 1
                              unboxed.CGrInt.5.10 <- pure ccp.0.1.10
                              idr_Prelude.Chars.isSpace2_val.10 <- pure (CGrInt unboxed.CGrInt.5.10)
                              idr_Prelude.Chars.isSpace2_31.10 <- store idr_Prelude.Chars.isSpace2_val.10
                              idr_Prelude.Chars.isSpace2_val_32.10 <- pure idr_Prelude.Chars.isSpace2_val.10
                              case idr_Prelude.Chars.isSpace2_val_32.10 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.10) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.10 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace3_val_34.10 <- pure (CGrInt 13)
                                      idr_Prelude.Chars.isSpace3.10 <- store idr_Prelude.Chars.isSpace3_val_34.10
                                      (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.10) <- pure idr_Prelude.Chars.isSpace3_val_34.10
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.10) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.2.10 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.10
                                      idris_int_eq1.41.arity.1.2.10 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.10
                                      (CGrInt idris_int_eq0_1.2.10) <- pure (CGrInt idris_int_eq0.49.arity.1.2.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.2.10) <- pure (CGrInt idris_int_eq1.41.arity.1.2.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.2.10 <- _prim_int_eq idris_int_eq0_1.2.10 idris_int_eq1_1.2.10
                                      ccp.0.2.10 <- case idris_int_eq2.2.10 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.10
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.6.10 <- pure ccp.0.2.10
                                      idr_Prelude.Chars.isSpace3_val.10 <- pure (CGrInt unboxed.CGrInt.6.10)
                                      idr_Prelude.Chars.isSpace3_35.10 <- store idr_Prelude.Chars.isSpace3_val.10
                                      idr_Prelude.Chars.isSpace3_val_36.10 <- pure idr_Prelude.Chars.isSpace3_val.10
                                      case idr_Prelude.Chars.isSpace3_val_36.10 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.10) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.10 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace4_val_38.10 <- pure (CGrInt 10)
                                              idr_Prelude.Chars.isSpace4.10 <- store idr_Prelude.Chars.isSpace4_val_38.10
                                              (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.10) <- pure idr_Prelude.Chars.isSpace4_val_38.10
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.10) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.3.10 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.10
                                              idris_int_eq1.41.arity.1.3.10 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.10
                                              (CGrInt idris_int_eq0_1.3.10) <- pure (CGrInt idris_int_eq0.49.arity.1.3.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.3.10) <- pure (CGrInt idris_int_eq1.41.arity.1.3.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.3.10 <- _prim_int_eq idris_int_eq0_1.3.10 idris_int_eq1_1.3.10
                                              ccp.0.3.10 <- case idris_int_eq2.3.10 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.10
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.7.10 <- pure ccp.0.3.10
                                              idr_Prelude.Chars.isSpace4_val.10 <- pure (CGrInt unboxed.CGrInt.7.10)
                                              idr_Prelude.Chars.isSpace4_39.10 <- store idr_Prelude.Chars.isSpace4_val.10
                                              idr_Prelude.Chars.isSpace4_val_40.10 <- pure idr_Prelude.Chars.isSpace4_val.10
                                              case idr_Prelude.Chars.isSpace4_val_40.10 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.10) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.10 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace5_val_42.10 <- pure (CGrInt 12)
                                                      idr_Prelude.Chars.isSpace5.10 <- store idr_Prelude.Chars.isSpace5_val_42.10
                                                      (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.10) <- pure idr_Prelude.Chars.isSpace5_val_42.10
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.10) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.4.10 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.10
                                                      idris_int_eq1.41.arity.1.4.10 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.10
                                                      (CGrInt idris_int_eq0_1.4.10) <- pure (CGrInt idris_int_eq0.49.arity.1.4.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.4.10) <- pure (CGrInt idris_int_eq1.41.arity.1.4.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.4.10 <- _prim_int_eq idris_int_eq0_1.4.10 idris_int_eq1_1.4.10
                                                      ccp.0.4.10 <- case idris_int_eq2.4.10 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.10
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.8.10 <- pure ccp.0.4.10
                                                      idr_Prelude.Chars.isSpace5_val.10 <- pure (CGrInt unboxed.CGrInt.8.10)
                                                      idr_Prelude.Chars.isSpace5_43.10 <- store idr_Prelude.Chars.isSpace5_val.10
                                                      idr_Prelude.Chars.isSpace5_val_44.10 <- pure idr_Prelude.Chars.isSpace5_val.10
                                                      case idr_Prelude.Chars.isSpace5_val_44.10 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.10) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.10 of
                                                            0 ->
                                                              idr_Prelude.Chars.isSpace6_val_46.10 <- pure (CGrInt 11)
                                                              idr_Prelude.Chars.isSpace6.10 <- store idr_Prelude.Chars.isSpace6_val_46.10
                                                              (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.10) <- pure idr_Prelude.Chars.isSpace6_val_46.10
                                                              (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.10) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq0.49.arity.1.5.10 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.10
                                                              idris_int_eq1.41.arity.1.5.10 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.10
                                                              (CGrInt idris_int_eq0_1.5.10) <- pure (CGrInt idris_int_eq0.49.arity.1.5.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              (CGrInt idris_int_eq1_1.5.10) <- pure (CGrInt idris_int_eq1.41.arity.1.5.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq2.5.10 <- _prim_int_eq idris_int_eq0_1.5.10 idris_int_eq1_1.5.10
                                                              ccp.0.5.10 <- case idris_int_eq2.5.10 of
                                                                #False ->
                                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.10
                                                                #True ->
                                                                  pure 1
                                                              unboxed.CGrInt.9.10 <- pure ccp.0.5.10
                                                              idr_Prelude.Chars.isSpace6_val.10 <- pure (CGrInt unboxed.CGrInt.9.10)
                                                              idr_Prelude.Chars.isSpace6_47.10 <- store idr_Prelude.Chars.isSpace6_val.10
                                                              idr_Prelude.Chars.isSpace6_val_48.10 <- pure idr_Prelude.Chars.isSpace6_val.10
                                                              case idr_Prelude.Chars.isSpace6_val_48.10 of
                                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.10) ->
                                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.10 of
                                                                    0 ->
                                                                      idr_Prelude.Chars.isSpace7_val_50.10 <- pure (CGrInt 160)
                                                                      idr_Prelude.Chars.isSpace7.10 <- store idr_Prelude.Chars.isSpace7_val_50.10
                                                                      (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.10) <- pure idr_Prelude.Chars.isSpace7_val_50.10
                                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.10) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      idris_int_eq0.49.arity.1.6.10 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.10
                                                                      idris_int_eq1.41.arity.1.6.10 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.10
                                                                      (CGrInt idris_int_eq0_1.6.10) <- pure (CGrInt idris_int_eq0.49.arity.1.6.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      (CGrInt idris_int_eq1_1.6.10) <- pure (CGrInt idris_int_eq1.41.arity.1.6.10) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      idris_int_eq2.6.10 <- _prim_int_eq idris_int_eq0_1.6.10 idris_int_eq1_1.6.10
                                                                      ccp.0.6.10 <- case idris_int_eq2.6.10 of
                                                                        #False ->
                                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.10
                                                                        #True ->
                                                                          pure 1
                                                                      unboxed.CGrInt.10.10 <- pure ccp.0.6.10
                                                                      idr_Prelude.Chars.isSpace7_val.10 <- pure (CGrInt unboxed.CGrInt.10.10)
                                                                      idr_Prelude.Chars.isSpace7_51.10 <- store idr_Prelude.Chars.isSpace7_val.10
                                                                      idr_Prelude.Chars.isSpace7_val_52.10 <- pure idr_Prelude.Chars.isSpace7_val.10
                                                                      case idr_Prelude.Chars.isSpace7_val_52.10 of
                                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.10) ->
                                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.10 of
                                                                            0 ->
                                                                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                            #default ->
                                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                    #default ->
                                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                      idr_Prelude.Strings.trim7_1018.0 <- store idr_Prelude.Strings.trim7_val_1011.0
                      idr_Prelude.Strings.trim7_val_1019.0 <- pure idr_Prelude.Strings.trim7_val_1011.0
                      case idr_Prelude.Strings.trim7_val_1019.0 of
                        (Cidr_Prelude.Bool.False) ->
                          (CGrString idr_Prelude.Strings.trim0.41.123.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.50 <- pure idr_Prelude.Strings.trim0.41.123.arity.1.0
                          (CGrString idris_str_rev1_0.50) <- pure (CGrString idris_str_rev1.41.arity.1.50) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.50 <- _prim_string_reverse idris_str_rev1_0.50
                          unboxed.CGrString.140.0 <- pure idris_str_rev2.50
                          idr_Prelude.Strings.trim8_val_1022.0 <- pure (CGrString unboxed.CGrString.140.0)
                          idr_Prelude.Strings.trim8_1023.0 <- store idr_Prelude.Strings.trim8_val_1022.0
                          idris_str_tail1.70 <- pure idr_Prelude.Strings.trim8_1023.0
                          (CGrString idris_str_tail1_0.70) <- fetch idris_str_tail1.70
                          idris_str_tail2.70 <- _prim_string_tail idris_str_tail1_0.70
                          unboxed.CGrString.141.0 <- pure idris_str_tail2.70
                          idr_Prelude.Strings.trim8_val_1021.0 <- pure (CGrString unboxed.CGrString.141.0)
                          idr_Prelude.Strings.trim8_1024.0 <- store idr_Prelude.Strings.trim8_val_1021.0
                          idris_str_head1.24 <- pure idr_Prelude.Strings.trim8_1024.0
                          (CGrString idris_str_head1_0.24) <- fetch idris_str_head1.24
                          idris_str_head2.24 <- _prim_string_head idris_str_head1_0.24
                          unboxed.CGrInt.66.0 <- pure idris_str_head2.24
                          idr_Prelude.Strings.trim8_val_1020.0 <- pure (CGrInt unboxed.CGrInt.66.0)
                          idr_Prelude.Strings.trim8_1025.0 <- store idr_Prelude.Strings.trim8_val_1020.0
                          (CGrString idr_Prelude.Strings.trim0.41.124.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.51 <- pure idr_Prelude.Strings.trim0.41.124.arity.1.0
                          (CGrString idris_str_rev1_0.51) <- pure (CGrString idris_str_rev1.41.arity.1.51) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.51 <- _prim_string_reverse idris_str_rev1_0.51
                          unboxed.CGrString.142.0 <- pure idris_str_rev2.51
                          idr_Prelude.Strings.trim9_val_1028.0 <- pure (CGrString unboxed.CGrString.142.0)
                          idr_Prelude.Strings.trim9_1029.0 <- store idr_Prelude.Strings.trim9_val_1028.0
                          idris_str_tail1.71 <- pure idr_Prelude.Strings.trim9_1029.0
                          (CGrString idris_str_tail1_0.71) <- fetch idris_str_tail1.71
                          idris_str_tail2.71 <- _prim_string_tail idris_str_tail1_0.71
                          unboxed.CGrString.143.0 <- pure idris_str_tail2.71
                          idr_Prelude.Strings.trim9_val_1027.0 <- pure (CGrString unboxed.CGrString.143.0)
                          idr_Prelude.Strings.trim9_1030.0 <- store idr_Prelude.Strings.trim9_val_1027.0
                          idris_str_tail1.72 <- pure idr_Prelude.Strings.trim9_1030.0
                          (CGrString idris_str_tail1_0.72) <- fetch idris_str_tail1.72
                          idris_str_tail2.72 <- _prim_string_tail idris_str_tail1_0.72
                          unboxed.CGrString.144.0 <- pure idris_str_tail2.72
                          idr_Prelude.Strings.trim9_val_1026.0 <- pure (CGrString unboxed.CGrString.144.0)
                          idr_Prelude.Strings.trim9_1031.0 <- store idr_Prelude.Strings.trim9_val_1026.0
                          (CGrInt idr_Prelude.Strings.trim8_1025.41.125.arity.1.0) <- pure idr_Prelude.Strings.trim8_val_1020.0
                          (CGrString idr_Prelude.Strings.trim9_1031.49.35.arity.1.0) <- pure idr_Prelude.Strings.trim9_val_1026.0
                          idris_str_cons1.41.arity.1.9 <- pure idr_Prelude.Strings.trim8_1025.41.125.arity.1.0
                          idris_str_cons2.49.arity.1.9 <- pure idr_Prelude.Strings.trim9_1031.49.35.arity.1.0
                          (CGrInt idris_str_cons1_0.9) <- pure (CGrInt idris_str_cons1.41.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrString idris_str_cons2_0.9) <- pure (CGrString idris_str_cons2.49.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_cons3.9 <- _prim_string_cons idris_str_cons1_0.9 idris_str_cons2_0.9
                          unboxed.CGrString.274.0 <- pure idris_str_cons3.9
                          pure (CGrString unboxed.CGrString.274.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.274.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.72) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.71) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.24) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.70)
                        (Cidr_Prelude.Bool.True) ->
                          (CGrString idr_Prelude.Strings.trim0.41.126.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.52 <- pure idr_Prelude.Strings.trim0.41.126.arity.1.0
                          (CGrString idris_str_rev1_0.52) <- pure (CGrString idris_str_rev1.41.arity.1.52) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.52 <- _prim_string_reverse idris_str_rev1_0.52
                          unboxed.CGrString.145.0 <- pure idris_str_rev2.52
                          idr_Prelude.Strings.trim9_val_1040.0 <- pure (CGrString unboxed.CGrString.145.0)
                          idr_Prelude.Strings.trim9_1041.0 <- store idr_Prelude.Strings.trim9_val_1040.0
                          idris_str_tail1.73 <- pure idr_Prelude.Strings.trim9_1041.0
                          (CGrString idris_str_tail1_0.73) <- fetch idris_str_tail1.73
                          idris_str_tail2.73 <- _prim_string_tail idris_str_tail1_0.73
                          unboxed.CGrString.146.0 <- pure idris_str_tail2.73
                          idr_Prelude.Strings.trim9_val_1039.0 <- pure (CGrString unboxed.CGrString.146.0)
                          idr_Prelude.Strings.trim9_1042.0 <- store idr_Prelude.Strings.trim9_val_1039.0
                          idris_str_tail1.74 <- pure idr_Prelude.Strings.trim9_1042.0
                          (CGrString idris_str_tail1_0.74) <- fetch idris_str_tail1.74
                          idris_str_tail2.74 <- _prim_string_tail idris_str_tail1_0.74
                          unboxed.CGrString.147.0 <- pure idris_str_tail2.74
                          idr_Prelude.Strings.trim9_val_1038.0 <- pure (CGrString unboxed.CGrString.147.0)
                          idr_Prelude.Strings.trim9_1043.0 <- store idr_Prelude.Strings.trim9_val_1038.0
                          idr_Prelude.Strings.trim10_val_1044.0 <- pure idr_Prelude.Strings.trim2_val.0
                          idr_Prelude.Strings.trim10_1045.0 <- store idr_Prelude.Strings.trim10_val_1044.0
                          (CGrString idr_Prelude.Strings.trim10_1045.41.127.arity.1.0) <- pure idr_Prelude.Strings.trim10_val_1044.0
                          idris_str_eq1.14 <- pure idr_Prelude.Strings.trim9_1043.0
                          idris_str_eq2.41.arity.1.14 <- pure idr_Prelude.Strings.trim10_1045.41.127.arity.1.0
                          (CGrString idris_str_eq1_0.14) <- fetch idris_str_eq1.14
                          (CGrString idris_str_eq2_0.14) <- pure (CGrString idris_str_eq2.41.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_eq3.14 <- _prim_string_eq idris_str_eq1_0.14 idris_str_eq2_0.14
                          ccp.2.14 <- case idris_str_eq3.14 of
                            #False ->
                              pure 0
                            #True ->
                              pure 1
                          unboxed.CGrInt.67.0 <- pure ccp.2.14
                          idr_Prelude.Strings.trim9_val_1037.0 <- pure (CGrInt unboxed.CGrInt.67.0)
                          idr_Prelude.Strings.trim9_1046.0 <- store idr_Prelude.Strings.trim9_val_1037.0
                          idr_Prelude.Strings.trim9_val_1047.0 <- pure idr_Prelude.Strings.trim9_val_1037.0
                          idr_Prelude.Strings.trim9_val_1036.0 <- case idr_Prelude.Strings.trim9_val_1047.0 of
                            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1048.0) ->
                              case idr_Prelude.Strings.trim_cpat_LInt64_0_1048.0 of
                                0 ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          idr_Prelude.Strings.trim9_1049.0 <- store idr_Prelude.Strings.trim9_val_1036.0
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.14" <- pure idr_Prelude.Strings.trim9_1049.0
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.14" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                          idr_Prelude.Strings.trim9_val_1035.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.14" of
                            (Cidr_Prelude.Bool.True) ->
                              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.14" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.14"
                              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.14" of
                                (Cidr_Prelude.Bool.False) ->
                                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                                (Cidr_Prelude.Bool.True) ->
                                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                          idr_Prelude.Strings.trim9_1052.0 <- store idr_Prelude.Strings.trim9_val_1035.0
                          idr_Prelude.Strings.trim9_val_1053.0 <- pure idr_Prelude.Strings.trim9_val_1035.0
                          idr_Prelude.Strings.trim9_val_1034.0 <- case idr_Prelude.Strings.trim9_val_1053.0 of
                            (Cidr_Prelude.Basics.No) ->
                              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                            (Cidr_Prelude.Basics.Yes) ->
                              (CGrString idr_Prelude.Strings.trim0.41.129.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.53 <- pure idr_Prelude.Strings.trim0.41.129.arity.1.0
                              (CGrString idris_str_rev1_0.53) <- pure (CGrString idris_str_rev1.41.arity.1.53) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.53 <- _prim_string_reverse idris_str_rev1_0.53
                              unboxed.CGrString.148.0 <- pure idris_str_rev2.53
                              idr_Prelude.Strings.trim10_val_1057.0 <- pure (CGrString unboxed.CGrString.148.0)
                              idr_Prelude.Strings.trim10_1058.0 <- store idr_Prelude.Strings.trim10_val_1057.0
                              idris_str_tail1.75 <- pure idr_Prelude.Strings.trim10_1058.0
                              (CGrString idris_str_tail1_0.75) <- fetch idris_str_tail1.75
                              idris_str_tail2.75 <- _prim_string_tail idris_str_tail1_0.75
                              unboxed.CGrString.149.0 <- pure idris_str_tail2.75
                              idr_Prelude.Strings.trim10_val_1056.0 <- pure (CGrString unboxed.CGrString.149.0)
                              idr_Prelude.Strings.trim10_1059.0 <- store idr_Prelude.Strings.trim10_val_1056.0
                              idris_str_tail1.76 <- pure idr_Prelude.Strings.trim10_1059.0
                              (CGrString idris_str_tail1_0.76) <- fetch idris_str_tail1.76
                              idris_str_tail2.76 <- _prim_string_tail idris_str_tail1_0.76
                              unboxed.CGrString.150.0 <- pure idris_str_tail2.76
                              idr_Prelude.Strings.trim10_val_1055.0 <- pure (CGrString unboxed.CGrString.150.0)
                              idr_Prelude.Strings.trim10_1060.0 <- store idr_Prelude.Strings.trim10_val_1055.0
                              idris_str_head1.25 <- pure idr_Prelude.Strings.trim10_1060.0
                              (CGrString idris_str_head1_0.25) <- fetch idris_str_head1.25
                              idris_str_head2.25 <- _prim_string_head idris_str_head1_0.25
                              unboxed.CGrInt.68.0 <- pure idris_str_head2.25
                              idr_Prelude.Strings.trim10_val_1054.0 <- pure (CGrInt unboxed.CGrInt.68.0)
                              idr_Prelude.Strings.trim10_1061.0 <- store idr_Prelude.Strings.trim10_val_1054.0
                              (CGrString idr_Prelude.Strings.trim0.41.130.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.54 <- pure idr_Prelude.Strings.trim0.41.130.arity.1.0
                              (CGrString idris_str_rev1_0.54) <- pure (CGrString idris_str_rev1.41.arity.1.54) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.54 <- _prim_string_reverse idris_str_rev1_0.54
                              unboxed.CGrString.151.0 <- pure idris_str_rev2.54
                              idr_Prelude.Strings.trim11_val_1065.0 <- pure (CGrString unboxed.CGrString.151.0)
                              idr_Prelude.Strings.trim11_1066.0 <- store idr_Prelude.Strings.trim11_val_1065.0
                              idris_str_tail1.77 <- pure idr_Prelude.Strings.trim11_1066.0
                              (CGrString idris_str_tail1_0.77) <- fetch idris_str_tail1.77
                              idris_str_tail2.77 <- _prim_string_tail idris_str_tail1_0.77
                              unboxed.CGrString.152.0 <- pure idris_str_tail2.77
                              idr_Prelude.Strings.trim11_val_1064.0 <- pure (CGrString unboxed.CGrString.152.0)
                              idr_Prelude.Strings.trim11_1067.0 <- store idr_Prelude.Strings.trim11_val_1064.0
                              idris_str_tail1.78 <- pure idr_Prelude.Strings.trim11_1067.0
                              (CGrString idris_str_tail1_0.78) <- fetch idris_str_tail1.78
                              idris_str_tail2.78 <- _prim_string_tail idris_str_tail1_0.78
                              unboxed.CGrString.153.0 <- pure idris_str_tail2.78
                              idr_Prelude.Strings.trim11_val_1063.0 <- pure (CGrString unboxed.CGrString.153.0)
                              idr_Prelude.Strings.trim11_1068.0 <- store idr_Prelude.Strings.trim11_val_1063.0
                              idris_str_tail1.79 <- pure idr_Prelude.Strings.trim11_1068.0
                              (CGrString idris_str_tail1_0.79) <- fetch idris_str_tail1.79
                              idris_str_tail2.79 <- _prim_string_tail idris_str_tail1_0.79
                              unboxed.CGrString.154.0 <- pure idris_str_tail2.79
                              idr_Prelude.Strings.trim11_val_1062.0 <- pure (CGrString unboxed.CGrString.154.0)
                              idr_Prelude.Strings.trim11_1069.0 <- store idr_Prelude.Strings.trim11_val_1062.0
                              pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim10_1061.0 idr_Prelude.Strings.trim11_1069.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim10_1061.0 idr_Prelude.Strings.trim11_1069.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.79) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.78) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.77) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.25) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.76) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.75)
                          idr_Prelude.Strings.trim9_1070.0 <- store idr_Prelude.Strings.trim9_val_1034.0
                          unboxed.CGrString.155.0 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim9_1070.0
                          pure (CGrString unboxed.CGrString.155.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.155.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.14) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.74) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.73) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.23) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.69) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.13) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.68) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.21)
          idr_Prelude.Strings.trim4_1071.0 <- store idr_Prelude.Strings.trim4_val_963.0
          (CGrString idr_Prelude.Strings.trim4_1071.41.131.arity.1.0) <- pure idr_Prelude.Strings.trim4_val_963.0
          idris_str_rev1.41.arity.1.55 <- pure idr_Prelude.Strings.trim4_1071.41.131.arity.1.0
          (CGrString idris_str_rev1_0.55) <- pure (CGrString idris_str_rev1.41.arity.1.55) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev2.55 <- _prim_string_reverse idris_str_rev1_0.55
          unboxed.CGrString.156.0 <- pure idris_str_rev2.55
          idr_Prelude.Strings.trim4_val_962.0 <- pure (CGrString unboxed.CGrString.156.0)
          idr_Prelude.Strings.trim4_1072.0 <- store idr_Prelude.Strings.trim4_val_962.0
          idris_str_tail1.80 <- pure idr_Prelude.Strings.trim4_1072.0
          (CGrString idris_str_tail1_0.80) <- fetch idris_str_tail1.80
          idris_str_tail2.80 <- _prim_string_tail idris_str_tail1_0.80
          unboxed.CGrString.157.0 <- pure idris_str_tail2.80
          idr_Prelude.Strings.trim4_val_961.0 <- pure (CGrString unboxed.CGrString.157.0)
          idr_Prelude.Strings.trim4_1073.0 <- store idr_Prelude.Strings.trim4_val_961.0
          (CGrInt idr_Prelude.Strings.trim3_960.41.132.arity.1.0) <- pure idr_Prelude.Strings.trim3_val_848.0
          (CGrString idr_Prelude.Strings.trim4_1073.49.36.arity.1.0) <- pure idr_Prelude.Strings.trim4_val_961.0
          idris_str_cons1.41.arity.1.10 <- pure idr_Prelude.Strings.trim3_960.41.132.arity.1.0
          idris_str_cons2.49.arity.1.10 <- pure idr_Prelude.Strings.trim4_1073.49.36.arity.1.0
          (CGrInt idris_str_cons1_0.10) <- pure (CGrInt idris_str_cons1.41.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrString idris_str_cons2_0.10) <- pure (CGrString idris_str_cons2.49.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_cons3.10 <- _prim_string_cons idris_str_cons1_0.10 idris_str_cons2_0.10
          unboxed.CGrString.275.0 <- pure idris_str_cons3.10
          (CGrString unboxed.CGrString.0.0) <- pure (CGrString unboxed.CGrString.275.0) -- LINT: Syntax error - expected SimpleExp without nodes
          pure unboxed.CGrString.0.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.80) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.12) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.20) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.9)
        (Cidr_Prelude.Bool.True) ->
          (CGrString idr_Prelude.Strings.trim0.41.133.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev1.41.arity.1.56 <- pure idr_Prelude.Strings.trim0.41.133.arity.1.0
          (CGrString idris_str_rev1_0.56) <- pure (CGrString idris_str_rev1.41.arity.1.56) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev2.56 <- _prim_string_reverse idris_str_rev1_0.56
          unboxed.CGrString.158.0 <- pure idris_str_rev2.56
          idr_Prelude.Strings.trim4_val_1086.0 <- pure (CGrString unboxed.CGrString.158.0)
          idr_Prelude.Strings.trim4_1087.0 <- store idr_Prelude.Strings.trim4_val_1086.0
          idr_Prelude.Strings.trim5_val_1088.0 <- pure idr_Prelude.Strings.trim2_val.0
          idr_Prelude.Strings.trim5_1089.0 <- store idr_Prelude.Strings.trim5_val_1088.0
          (CGrString idr_Prelude.Strings.trim5_1089.41.134.arity.1.0) <- pure idr_Prelude.Strings.trim5_val_1088.0
          idris_str_eq1.15 <- pure idr_Prelude.Strings.trim4_1087.0
          idris_str_eq2.41.arity.1.15 <- pure idr_Prelude.Strings.trim5_1089.41.134.arity.1.0
          (CGrString idris_str_eq1_0.15) <- fetch idris_str_eq1.15
          (CGrString idris_str_eq2_0.15) <- pure (CGrString idris_str_eq2.41.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_eq3.15 <- _prim_string_eq idris_str_eq1_0.15 idris_str_eq2_0.15
          ccp.2.15 <- case idris_str_eq3.15 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.69.0 <- pure ccp.2.15
          idr_Prelude.Strings.trim4_val_1085.0 <- pure (CGrInt unboxed.CGrInt.69.0)
          idr_Prelude.Strings.trim4_1090.0 <- store idr_Prelude.Strings.trim4_val_1085.0
          idr_Prelude.Strings.trim4_val_1091.0 <- pure idr_Prelude.Strings.trim4_val_1085.0
          idr_Prelude.Strings.trim4_val_1084.0 <- case idr_Prelude.Strings.trim4_val_1091.0 of
            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1092.0) ->
              case idr_Prelude.Strings.trim_cpat_LInt64_0_1092.0 of
                0 ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.trim4_1093.0 <- store idr_Prelude.Strings.trim4_val_1084.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.15" <- pure idr_Prelude.Strings.trim4_1093.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.15" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
          idr_Prelude.Strings.trim4_val_1083.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.15" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.15" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.15"
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.15" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          idr_Prelude.Strings.trim4_1096.0 <- store idr_Prelude.Strings.trim4_val_1083.0
          idr_Prelude.Strings.trim4_val_1097.0 <- pure idr_Prelude.Strings.trim4_val_1083.0
          idr_Prelude.Strings.trim4_val_1082.0 <- case idr_Prelude.Strings.trim4_val_1097.0 of
            (Cidr_Prelude.Basics.No) ->
              pure idr_Prelude.Strings.trim2_val.0
            (Cidr_Prelude.Basics.Yes) ->
              (CGrString idr_Prelude.Strings.trim0.41.136.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev1.41.arity.1.57 <- pure idr_Prelude.Strings.trim0.41.136.arity.1.0
              (CGrString idris_str_rev1_0.57) <- pure (CGrString idris_str_rev1.41.arity.1.57) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.57 <- _prim_string_reverse idris_str_rev1_0.57
              unboxed.CGrString.159.0 <- pure idris_str_rev2.57
              idr_Prelude.Strings.trim5_val_1100.0 <- pure (CGrString unboxed.CGrString.159.0)
              idr_Prelude.Strings.trim5_1101.0 <- store idr_Prelude.Strings.trim5_val_1100.0
              idris_str_head1.26 <- pure idr_Prelude.Strings.trim5_1101.0
              (CGrString idris_str_head1_0.26) <- fetch idris_str_head1.26
              idris_str_head2.26 <- _prim_string_head idris_str_head1_0.26
              unboxed.CGrInt.70.0 <- pure idris_str_head2.26
              idr_Prelude.Strings.trim5_val_1099.0 <- pure (CGrInt unboxed.CGrInt.70.0)
              idr_Prelude.Strings.trim5_1102.0 <- store idr_Prelude.Strings.trim5_val_1099.0
              (CGrInt idr_Prelude.Strings.trim5_1102.57.20.arity.1.0) <- pure idr_Prelude.Strings.trim5_val_1099.0
              idr_Prelude.Chars.isSpace0.57.arity.1.11 <- pure idr_Prelude.Strings.trim5_1102.57.20.arity.1.0
              idr_Prelude.Chars.isSpace1_val_27.11 <- pure idr_Prelude.Chars.isSpace1_val_27.6
              idr_Prelude.Chars.isSpace1.11 <- store idr_Prelude.Chars.isSpace1_val_27.11
              (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.11) <- pure idr_Prelude.Chars.isSpace1_val_27.11
              (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.11) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq0.49.arity.1.0.11 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.11
              idris_int_eq1.41.arity.1.0.11 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.11
              (CGrInt idris_int_eq0_1.0.11) <- pure (CGrInt idris_int_eq0.49.arity.1.0.11) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_eq1_1.0.11) <- pure (CGrInt idris_int_eq1.41.arity.1.0.11) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq2.0.11 <- _prim_int_eq idris_int_eq0_1.0.11 idris_int_eq1_1.0.11
              ccp.0.0.11 <- case idris_int_eq2.0.11 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              unboxed.CGrInt.4.11 <- pure ccp.0.0.11
              idr_Prelude.Chars.isSpace1_val.11 <- pure (CGrInt unboxed.CGrInt.4.11)
              idr_Prelude.Chars.isSpace1_28.11 <- store idr_Prelude.Chars.isSpace1_val.11
              idr_Prelude.Chars.isSpace1_val_29.11 <- pure idr_Prelude.Chars.isSpace1_val.11
              idr_Prelude.Strings.trim5_val_1098.0 <- case idr_Prelude.Chars.isSpace1_val_29.11 of
                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.11) ->
                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0.11 of
                    0 ->
                      idr_Prelude.Chars.isSpace2_val_30.11 <- pure (CGrInt 9)
                      idr_Prelude.Chars.isSpace2.11 <- store idr_Prelude.Chars.isSpace2_val_30.11
                      (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.11) <- pure idr_Prelude.Chars.isSpace2_val_30.11
                      (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.11) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.1.11 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.11
                      idris_int_eq1.41.arity.1.1.11 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.11
                      (CGrInt idris_int_eq0_1.1.11) <- pure (CGrInt idris_int_eq0.49.arity.1.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.1.11) <- pure (CGrInt idris_int_eq1.41.arity.1.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.1.11 <- _prim_int_eq idris_int_eq0_1.1.11 idris_int_eq1_1.1.11
                      ccp.0.1.11 <- case idris_int_eq2.1.11 of
                        #False ->
                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.11
                        #True ->
                          pure 1
                      unboxed.CGrInt.5.11 <- pure ccp.0.1.11
                      idr_Prelude.Chars.isSpace2_val.11 <- pure (CGrInt unboxed.CGrInt.5.11)
                      idr_Prelude.Chars.isSpace2_31.11 <- store idr_Prelude.Chars.isSpace2_val.11
                      idr_Prelude.Chars.isSpace2_val_32.11 <- pure idr_Prelude.Chars.isSpace2_val.11
                      case idr_Prelude.Chars.isSpace2_val_32.11 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.11) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.11 of
                            0 ->
                              idr_Prelude.Chars.isSpace3_val_34.11 <- pure (CGrInt 13)
                              idr_Prelude.Chars.isSpace3.11 <- store idr_Prelude.Chars.isSpace3_val_34.11
                              (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.11) <- pure idr_Prelude.Chars.isSpace3_val_34.11
                              (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.11) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.2.11 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.11
                              idris_int_eq1.41.arity.1.2.11 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.11
                              (CGrInt idris_int_eq0_1.2.11) <- pure (CGrInt idris_int_eq0.49.arity.1.2.11) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.2.11) <- pure (CGrInt idris_int_eq1.41.arity.1.2.11) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.2.11 <- _prim_int_eq idris_int_eq0_1.2.11 idris_int_eq1_1.2.11
                              ccp.0.2.11 <- case idris_int_eq2.2.11 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.11
                                #True ->
                                  pure 1
                              unboxed.CGrInt.6.11 <- pure ccp.0.2.11
                              idr_Prelude.Chars.isSpace3_val.11 <- pure (CGrInt unboxed.CGrInt.6.11)
                              idr_Prelude.Chars.isSpace3_35.11 <- store idr_Prelude.Chars.isSpace3_val.11
                              idr_Prelude.Chars.isSpace3_val_36.11 <- pure idr_Prelude.Chars.isSpace3_val.11
                              case idr_Prelude.Chars.isSpace3_val_36.11 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.11) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.11 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace4_val_38.11 <- pure (CGrInt 10)
                                      idr_Prelude.Chars.isSpace4.11 <- store idr_Prelude.Chars.isSpace4_val_38.11
                                      (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.11) <- pure idr_Prelude.Chars.isSpace4_val_38.11
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.11) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.3.11 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.11
                                      idris_int_eq1.41.arity.1.3.11 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.11
                                      (CGrInt idris_int_eq0_1.3.11) <- pure (CGrInt idris_int_eq0.49.arity.1.3.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.3.11) <- pure (CGrInt idris_int_eq1.41.arity.1.3.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.3.11 <- _prim_int_eq idris_int_eq0_1.3.11 idris_int_eq1_1.3.11
                                      ccp.0.3.11 <- case idris_int_eq2.3.11 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.11
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.7.11 <- pure ccp.0.3.11
                                      idr_Prelude.Chars.isSpace4_val.11 <- pure (CGrInt unboxed.CGrInt.7.11)
                                      idr_Prelude.Chars.isSpace4_39.11 <- store idr_Prelude.Chars.isSpace4_val.11
                                      idr_Prelude.Chars.isSpace4_val_40.11 <- pure idr_Prelude.Chars.isSpace4_val.11
                                      case idr_Prelude.Chars.isSpace4_val_40.11 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.11) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.11 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace5_val_42.11 <- pure (CGrInt 12)
                                              idr_Prelude.Chars.isSpace5.11 <- store idr_Prelude.Chars.isSpace5_val_42.11
                                              (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.11) <- pure idr_Prelude.Chars.isSpace5_val_42.11
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.11) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.4.11 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.11
                                              idris_int_eq1.41.arity.1.4.11 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.11
                                              (CGrInt idris_int_eq0_1.4.11) <- pure (CGrInt idris_int_eq0.49.arity.1.4.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.4.11) <- pure (CGrInt idris_int_eq1.41.arity.1.4.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.4.11 <- _prim_int_eq idris_int_eq0_1.4.11 idris_int_eq1_1.4.11
                                              ccp.0.4.11 <- case idris_int_eq2.4.11 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.11
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.8.11 <- pure ccp.0.4.11
                                              idr_Prelude.Chars.isSpace5_val.11 <- pure (CGrInt unboxed.CGrInt.8.11)
                                              idr_Prelude.Chars.isSpace5_43.11 <- store idr_Prelude.Chars.isSpace5_val.11
                                              idr_Prelude.Chars.isSpace5_val_44.11 <- pure idr_Prelude.Chars.isSpace5_val.11
                                              case idr_Prelude.Chars.isSpace5_val_44.11 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.11) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.11 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace6_val_46.11 <- pure (CGrInt 11)
                                                      idr_Prelude.Chars.isSpace6.11 <- store idr_Prelude.Chars.isSpace6_val_46.11
                                                      (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.11) <- pure idr_Prelude.Chars.isSpace6_val_46.11
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.11) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.5.11 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.11
                                                      idris_int_eq1.41.arity.1.5.11 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.11
                                                      (CGrInt idris_int_eq0_1.5.11) <- pure (CGrInt idris_int_eq0.49.arity.1.5.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.5.11) <- pure (CGrInt idris_int_eq1.41.arity.1.5.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.5.11 <- _prim_int_eq idris_int_eq0_1.5.11 idris_int_eq1_1.5.11
                                                      ccp.0.5.11 <- case idris_int_eq2.5.11 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.11
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.9.11 <- pure ccp.0.5.11
                                                      idr_Prelude.Chars.isSpace6_val.11 <- pure (CGrInt unboxed.CGrInt.9.11)
                                                      idr_Prelude.Chars.isSpace6_47.11 <- store idr_Prelude.Chars.isSpace6_val.11
                                                      idr_Prelude.Chars.isSpace6_val_48.11 <- pure idr_Prelude.Chars.isSpace6_val.11
                                                      case idr_Prelude.Chars.isSpace6_val_48.11 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.11) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.11 of
                                                            0 ->
                                                              idr_Prelude.Chars.isSpace7_val_50.11 <- pure (CGrInt 160)
                                                              idr_Prelude.Chars.isSpace7.11 <- store idr_Prelude.Chars.isSpace7_val_50.11
                                                              (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.11) <- pure idr_Prelude.Chars.isSpace7_val_50.11
                                                              (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.11) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq0.49.arity.1.6.11 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.11
                                                              idris_int_eq1.41.arity.1.6.11 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.11
                                                              (CGrInt idris_int_eq0_1.6.11) <- pure (CGrInt idris_int_eq0.49.arity.1.6.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              (CGrInt idris_int_eq1_1.6.11) <- pure (CGrInt idris_int_eq1.41.arity.1.6.11) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq2.6.11 <- _prim_int_eq idris_int_eq0_1.6.11 idris_int_eq1_1.6.11
                                                              ccp.0.6.11 <- case idris_int_eq2.6.11 of
                                                                #False ->
                                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.11
                                                                #True ->
                                                                  pure 1
                                                              unboxed.CGrInt.10.11 <- pure ccp.0.6.11
                                                              idr_Prelude.Chars.isSpace7_val.11 <- pure (CGrInt unboxed.CGrInt.10.11)
                                                              idr_Prelude.Chars.isSpace7_51.11 <- store idr_Prelude.Chars.isSpace7_val.11
                                                              idr_Prelude.Chars.isSpace7_val_52.11 <- pure idr_Prelude.Chars.isSpace7_val.11
                                                              case idr_Prelude.Chars.isSpace7_val_52.11 of
                                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.11) ->
                                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.11 of
                                                                    0 ->
                                                                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                    #default ->
                                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                    #default ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
              idr_Prelude.Strings.trim5_1103.0 <- store idr_Prelude.Strings.trim5_val_1098.0
              idr_Prelude.Strings.trim5_val_1104.0 <- pure idr_Prelude.Strings.trim5_val_1098.0
              case idr_Prelude.Strings.trim5_val_1104.0 of
                (Cidr_Prelude.Bool.False) ->
                  (CGrString idr_Prelude.Strings.trim0.41.137.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.58 <- pure idr_Prelude.Strings.trim0.41.137.arity.1.0
                  (CGrString idris_str_rev1_0.58) <- pure (CGrString idris_str_rev1.41.arity.1.58) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.58 <- _prim_string_reverse idris_str_rev1_0.58
                  unboxed.CGrString.160.0 <- pure idris_str_rev2.58
                  idr_Prelude.Strings.trim6_val_1106.0 <- pure (CGrString unboxed.CGrString.160.0)
                  idr_Prelude.Strings.trim6_1107.0 <- store idr_Prelude.Strings.trim6_val_1106.0
                  idris_str_head1.27 <- pure idr_Prelude.Strings.trim6_1107.0
                  (CGrString idris_str_head1_0.27) <- fetch idris_str_head1.27
                  idris_str_head2.27 <- _prim_string_head idris_str_head1_0.27
                  unboxed.CGrInt.71.0 <- pure idris_str_head2.27
                  idr_Prelude.Strings.trim6_val_1105.0 <- pure (CGrInt unboxed.CGrInt.71.0)
                  idr_Prelude.Strings.trim6_1108.0 <- store idr_Prelude.Strings.trim6_val_1105.0
                  (CGrString idr_Prelude.Strings.trim0.41.138.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.59 <- pure idr_Prelude.Strings.trim0.41.138.arity.1.0
                  (CGrString idris_str_rev1_0.59) <- pure (CGrString idris_str_rev1.41.arity.1.59) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.59 <- _prim_string_reverse idris_str_rev1_0.59
                  unboxed.CGrString.161.0 <- pure idris_str_rev2.59
                  idr_Prelude.Strings.trim7_val_1110.0 <- pure (CGrString unboxed.CGrString.161.0)
                  idr_Prelude.Strings.trim7_1111.0 <- store idr_Prelude.Strings.trim7_val_1110.0
                  idris_str_tail1.81 <- pure idr_Prelude.Strings.trim7_1111.0
                  (CGrString idris_str_tail1_0.81) <- fetch idris_str_tail1.81
                  idris_str_tail2.81 <- _prim_string_tail idris_str_tail1_0.81
                  unboxed.CGrString.162.0 <- pure idris_str_tail2.81
                  idr_Prelude.Strings.trim7_val_1109.0 <- pure (CGrString unboxed.CGrString.162.0)
                  idr_Prelude.Strings.trim7_1112.0 <- store idr_Prelude.Strings.trim7_val_1109.0
                  (CGrInt idr_Prelude.Strings.trim6_1108.41.139.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_1105.0
                  (CGrString idr_Prelude.Strings.trim7_1112.49.37.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_1109.0
                  idris_str_cons1.41.arity.1.11 <- pure idr_Prelude.Strings.trim6_1108.41.139.arity.1.0
                  idris_str_cons2.49.arity.1.11 <- pure idr_Prelude.Strings.trim7_1112.49.37.arity.1.0
                  (CGrInt idris_str_cons1_0.11) <- pure (CGrInt idris_str_cons1.41.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idris_str_cons2_0.11) <- pure (CGrString idris_str_cons2.49.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons3.11 <- _prim_string_cons idris_str_cons1_0.11 idris_str_cons2_0.11
                  unboxed.CGrString.276.0 <- pure idris_str_cons3.11
                  pure (CGrString unboxed.CGrString.276.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.276.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.81) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.27)
                (Cidr_Prelude.Bool.True) ->
                  (CGrString idr_Prelude.Strings.trim0.41.140.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.60 <- pure idr_Prelude.Strings.trim0.41.140.arity.1.0
                  (CGrString idris_str_rev1_0.60) <- pure (CGrString idris_str_rev1.41.arity.1.60) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.60 <- _prim_string_reverse idris_str_rev1_0.60
                  unboxed.CGrString.163.0 <- pure idris_str_rev2.60
                  idr_Prelude.Strings.trim6_val_1117.0 <- pure (CGrString unboxed.CGrString.163.0)
                  idr_Prelude.Strings.trim6_1118.0 <- store idr_Prelude.Strings.trim6_val_1117.0
                  idris_str_tail1.82 <- pure idr_Prelude.Strings.trim6_1118.0
                  (CGrString idris_str_tail1_0.82) <- fetch idris_str_tail1.82
                  idris_str_tail2.82 <- _prim_string_tail idris_str_tail1_0.82
                  unboxed.CGrString.164.0 <- pure idris_str_tail2.82
                  idr_Prelude.Strings.trim6_val_1116.0 <- pure (CGrString unboxed.CGrString.164.0)
                  idr_Prelude.Strings.trim6_1119.0 <- store idr_Prelude.Strings.trim6_val_1116.0
                  idr_Prelude.Strings.trim7_val_1120.0 <- pure idr_Prelude.Strings.trim2_val.0
                  idr_Prelude.Strings.trim7_1121.0 <- store idr_Prelude.Strings.trim7_val_1120.0
                  (CGrString idr_Prelude.Strings.trim7_1121.41.141.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_1120.0
                  idris_str_eq1.16 <- pure idr_Prelude.Strings.trim6_1119.0
                  idris_str_eq2.41.arity.1.16 <- pure idr_Prelude.Strings.trim7_1121.41.141.arity.1.0
                  (CGrString idris_str_eq1_0.16) <- fetch idris_str_eq1.16
                  (CGrString idris_str_eq2_0.16) <- pure (CGrString idris_str_eq2.41.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_eq3.16 <- _prim_string_eq idris_str_eq1_0.16 idris_str_eq2_0.16
                  ccp.2.16 <- case idris_str_eq3.16 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  unboxed.CGrInt.72.0 <- pure ccp.2.16
                  idr_Prelude.Strings.trim6_val_1115.0 <- pure (CGrInt unboxed.CGrInt.72.0)
                  idr_Prelude.Strings.trim6_1122.0 <- store idr_Prelude.Strings.trim6_val_1115.0
                  idr_Prelude.Strings.trim6_val_1123.0 <- pure idr_Prelude.Strings.trim6_val_1115.0
                  idr_Prelude.Strings.trim6_val_1114.0 <- case idr_Prelude.Strings.trim6_val_1123.0 of
                    (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1124.0) ->
                      case idr_Prelude.Strings.trim_cpat_LInt64_0_1124.0 of
                        0 ->
                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  idr_Prelude.Strings.trim6_1125.0 <- store idr_Prelude.Strings.trim6_val_1114.0
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.16" <- pure idr_Prelude.Strings.trim6_1125.0
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.16" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                  idr_Prelude.Strings.trim6_val_1113.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.16" of
                    (Cidr_Prelude.Bool.True) ->
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.16" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.16"
                      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.16" of
                        (Cidr_Prelude.Bool.False) ->
                          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                        (Cidr_Prelude.Bool.True) ->
                          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                  idr_Prelude.Strings.trim6_1128.0 <- store idr_Prelude.Strings.trim6_val_1113.0
                  idr_Prelude.Strings.trim6_val_1129.0 <- pure idr_Prelude.Strings.trim6_val_1113.0
                  case idr_Prelude.Strings.trim6_val_1129.0 of
                    (Cidr_Prelude.Basics.No) ->
                      pure idr_Prelude.Strings.trim2_val.0
                    (Cidr_Prelude.Basics.Yes) ->
                      (CGrString idr_Prelude.Strings.trim0.41.143.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.61 <- pure idr_Prelude.Strings.trim0.41.143.arity.1.0
                      (CGrString idris_str_rev1_0.61) <- pure (CGrString idris_str_rev1.41.arity.1.61) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.61 <- _prim_string_reverse idris_str_rev1_0.61
                      unboxed.CGrString.165.0 <- pure idris_str_rev2.61
                      idr_Prelude.Strings.trim7_val_1133.0 <- pure (CGrString unboxed.CGrString.165.0)
                      idr_Prelude.Strings.trim7_1134.0 <- store idr_Prelude.Strings.trim7_val_1133.0
                      idris_str_tail1.83 <- pure idr_Prelude.Strings.trim7_1134.0
                      (CGrString idris_str_tail1_0.83) <- fetch idris_str_tail1.83
                      idris_str_tail2.83 <- _prim_string_tail idris_str_tail1_0.83
                      unboxed.CGrString.166.0 <- pure idris_str_tail2.83
                      idr_Prelude.Strings.trim7_val_1132.0 <- pure (CGrString unboxed.CGrString.166.0)
                      idr_Prelude.Strings.trim7_1135.0 <- store idr_Prelude.Strings.trim7_val_1132.0
                      idris_str_head1.28 <- pure idr_Prelude.Strings.trim7_1135.0
                      (CGrString idris_str_head1_0.28) <- fetch idris_str_head1.28
                      idris_str_head2.28 <- _prim_string_head idris_str_head1_0.28
                      unboxed.CGrInt.73.0 <- pure idris_str_head2.28
                      idr_Prelude.Strings.trim7_val_1131.0 <- pure (CGrInt unboxed.CGrInt.73.0)
                      idr_Prelude.Strings.trim7_1136.0 <- store idr_Prelude.Strings.trim7_val_1131.0
                      (CGrInt idr_Prelude.Strings.trim7_1136.57.21.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_1131.0
                      idr_Prelude.Chars.isSpace0.57.arity.1.12 <- pure idr_Prelude.Strings.trim7_1136.57.21.arity.1.0
                      idr_Prelude.Chars.isSpace1_val_27.12 <- pure idr_Prelude.Chars.isSpace1_val_27.6
                      idr_Prelude.Chars.isSpace1.12 <- store idr_Prelude.Chars.isSpace1_val_27.12
                      (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.12) <- pure idr_Prelude.Chars.isSpace1_val_27.12
                      (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.12) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.0.12 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.12
                      idris_int_eq1.41.arity.1.0.12 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.12
                      (CGrInt idris_int_eq0_1.0.12) <- pure (CGrInt idris_int_eq0.49.arity.1.0.12) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.0.12) <- pure (CGrInt idris_int_eq1.41.arity.1.0.12) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.0.12 <- _prim_int_eq idris_int_eq0_1.0.12 idris_int_eq1_1.0.12
                      ccp.0.0.12 <- case idris_int_eq2.0.12 of
                        #False ->
                          pure 0
                        #True ->
                          pure 1
                      unboxed.CGrInt.4.12 <- pure ccp.0.0.12
                      idr_Prelude.Chars.isSpace1_val.12 <- pure (CGrInt unboxed.CGrInt.4.12)
                      idr_Prelude.Chars.isSpace1_28.12 <- store idr_Prelude.Chars.isSpace1_val.12
                      idr_Prelude.Chars.isSpace1_val_29.12 <- pure idr_Prelude.Chars.isSpace1_val.12
                      idr_Prelude.Strings.trim7_val_1130.0 <- case idr_Prelude.Chars.isSpace1_val_29.12 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.12) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0.12 of
                            0 ->
                              idr_Prelude.Chars.isSpace2_val_30.12 <- pure (CGrInt 9)
                              idr_Prelude.Chars.isSpace2.12 <- store idr_Prelude.Chars.isSpace2_val_30.12
                              (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.12) <- pure idr_Prelude.Chars.isSpace2_val_30.12
                              (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.12) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.1.12 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.12
                              idris_int_eq1.41.arity.1.1.12 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.12
                              (CGrInt idris_int_eq0_1.1.12) <- pure (CGrInt idris_int_eq0.49.arity.1.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.1.12) <- pure (CGrInt idris_int_eq1.41.arity.1.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.1.12 <- _prim_int_eq idris_int_eq0_1.1.12 idris_int_eq1_1.1.12
                              ccp.0.1.12 <- case idris_int_eq2.1.12 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.12
                                #True ->
                                  pure 1
                              unboxed.CGrInt.5.12 <- pure ccp.0.1.12
                              idr_Prelude.Chars.isSpace2_val.12 <- pure (CGrInt unboxed.CGrInt.5.12)
                              idr_Prelude.Chars.isSpace2_31.12 <- store idr_Prelude.Chars.isSpace2_val.12
                              idr_Prelude.Chars.isSpace2_val_32.12 <- pure idr_Prelude.Chars.isSpace2_val.12
                              case idr_Prelude.Chars.isSpace2_val_32.12 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.12) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.12 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace3_val_34.12 <- pure (CGrInt 13)
                                      idr_Prelude.Chars.isSpace3.12 <- store idr_Prelude.Chars.isSpace3_val_34.12
                                      (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.12) <- pure idr_Prelude.Chars.isSpace3_val_34.12
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.12) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.2.12 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.12
                                      idris_int_eq1.41.arity.1.2.12 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.12
                                      (CGrInt idris_int_eq0_1.2.12) <- pure (CGrInt idris_int_eq0.49.arity.1.2.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.2.12) <- pure (CGrInt idris_int_eq1.41.arity.1.2.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.2.12 <- _prim_int_eq idris_int_eq0_1.2.12 idris_int_eq1_1.2.12
                                      ccp.0.2.12 <- case idris_int_eq2.2.12 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.12
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.6.12 <- pure ccp.0.2.12
                                      idr_Prelude.Chars.isSpace3_val.12 <- pure (CGrInt unboxed.CGrInt.6.12)
                                      idr_Prelude.Chars.isSpace3_35.12 <- store idr_Prelude.Chars.isSpace3_val.12
                                      idr_Prelude.Chars.isSpace3_val_36.12 <- pure idr_Prelude.Chars.isSpace3_val.12
                                      case idr_Prelude.Chars.isSpace3_val_36.12 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.12) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.12 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace4_val_38.12 <- pure (CGrInt 10)
                                              idr_Prelude.Chars.isSpace4.12 <- store idr_Prelude.Chars.isSpace4_val_38.12
                                              (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.12) <- pure idr_Prelude.Chars.isSpace4_val_38.12
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.12) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.3.12 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.12
                                              idris_int_eq1.41.arity.1.3.12 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.12
                                              (CGrInt idris_int_eq0_1.3.12) <- pure (CGrInt idris_int_eq0.49.arity.1.3.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.3.12) <- pure (CGrInt idris_int_eq1.41.arity.1.3.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.3.12 <- _prim_int_eq idris_int_eq0_1.3.12 idris_int_eq1_1.3.12
                                              ccp.0.3.12 <- case idris_int_eq2.3.12 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.12
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.7.12 <- pure ccp.0.3.12
                                              idr_Prelude.Chars.isSpace4_val.12 <- pure (CGrInt unboxed.CGrInt.7.12)
                                              idr_Prelude.Chars.isSpace4_39.12 <- store idr_Prelude.Chars.isSpace4_val.12
                                              idr_Prelude.Chars.isSpace4_val_40.12 <- pure idr_Prelude.Chars.isSpace4_val.12
                                              case idr_Prelude.Chars.isSpace4_val_40.12 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.12) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.12 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace5_val_42.12 <- pure (CGrInt 12)
                                                      idr_Prelude.Chars.isSpace5.12 <- store idr_Prelude.Chars.isSpace5_val_42.12
                                                      (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.12) <- pure idr_Prelude.Chars.isSpace5_val_42.12
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.12) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.4.12 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.12
                                                      idris_int_eq1.41.arity.1.4.12 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.12
                                                      (CGrInt idris_int_eq0_1.4.12) <- pure (CGrInt idris_int_eq0.49.arity.1.4.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.4.12) <- pure (CGrInt idris_int_eq1.41.arity.1.4.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.4.12 <- _prim_int_eq idris_int_eq0_1.4.12 idris_int_eq1_1.4.12
                                                      ccp.0.4.12 <- case idris_int_eq2.4.12 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.12
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.8.12 <- pure ccp.0.4.12
                                                      idr_Prelude.Chars.isSpace5_val.12 <- pure (CGrInt unboxed.CGrInt.8.12)
                                                      idr_Prelude.Chars.isSpace5_43.12 <- store idr_Prelude.Chars.isSpace5_val.12
                                                      idr_Prelude.Chars.isSpace5_val_44.12 <- pure idr_Prelude.Chars.isSpace5_val.12
                                                      case idr_Prelude.Chars.isSpace5_val_44.12 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.12) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.12 of
                                                            0 ->
                                                              idr_Prelude.Chars.isSpace6_val_46.12 <- pure (CGrInt 11)
                                                              idr_Prelude.Chars.isSpace6.12 <- store idr_Prelude.Chars.isSpace6_val_46.12
                                                              (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.12) <- pure idr_Prelude.Chars.isSpace6_val_46.12
                                                              (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.12) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq0.49.arity.1.5.12 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.12
                                                              idris_int_eq1.41.arity.1.5.12 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.12
                                                              (CGrInt idris_int_eq0_1.5.12) <- pure (CGrInt idris_int_eq0.49.arity.1.5.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              (CGrInt idris_int_eq1_1.5.12) <- pure (CGrInt idris_int_eq1.41.arity.1.5.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                                              idris_int_eq2.5.12 <- _prim_int_eq idris_int_eq0_1.5.12 idris_int_eq1_1.5.12
                                                              ccp.0.5.12 <- case idris_int_eq2.5.12 of
                                                                #False ->
                                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.12
                                                                #True ->
                                                                  pure 1
                                                              unboxed.CGrInt.9.12 <- pure ccp.0.5.12
                                                              idr_Prelude.Chars.isSpace6_val.12 <- pure (CGrInt unboxed.CGrInt.9.12)
                                                              idr_Prelude.Chars.isSpace6_47.12 <- store idr_Prelude.Chars.isSpace6_val.12
                                                              idr_Prelude.Chars.isSpace6_val_48.12 <- pure idr_Prelude.Chars.isSpace6_val.12
                                                              case idr_Prelude.Chars.isSpace6_val_48.12 of
                                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.12) ->
                                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.12 of
                                                                    0 ->
                                                                      idr_Prelude.Chars.isSpace7_val_50.12 <- pure (CGrInt 160)
                                                                      idr_Prelude.Chars.isSpace7.12 <- store idr_Prelude.Chars.isSpace7_val_50.12
                                                                      (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.12) <- pure idr_Prelude.Chars.isSpace7_val_50.12
                                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.12) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      idris_int_eq0.49.arity.1.6.12 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.12
                                                                      idris_int_eq1.41.arity.1.6.12 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.12
                                                                      (CGrInt idris_int_eq0_1.6.12) <- pure (CGrInt idris_int_eq0.49.arity.1.6.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      (CGrInt idris_int_eq1_1.6.12) <- pure (CGrInt idris_int_eq1.41.arity.1.6.12) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                      idris_int_eq2.6.12 <- _prim_int_eq idris_int_eq0_1.6.12 idris_int_eq1_1.6.12
                                                                      ccp.0.6.12 <- case idris_int_eq2.6.12 of
                                                                        #False ->
                                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.12
                                                                        #True ->
                                                                          pure 1
                                                                      unboxed.CGrInt.10.12 <- pure ccp.0.6.12
                                                                      idr_Prelude.Chars.isSpace7_val.12 <- pure (CGrInt unboxed.CGrInt.10.12)
                                                                      idr_Prelude.Chars.isSpace7_51.12 <- store idr_Prelude.Chars.isSpace7_val.12
                                                                      idr_Prelude.Chars.isSpace7_val_52.12 <- pure idr_Prelude.Chars.isSpace7_val.12
                                                                      case idr_Prelude.Chars.isSpace7_val_52.12 of
                                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.12) ->
                                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.12 of
                                                                            0 ->
                                                                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                            #default ->
                                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                    #default ->
                                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                            #default ->
                                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                    #default ->
                                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                            #default ->
                                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                      idr_Prelude.Strings.trim7_1137.0 <- store idr_Prelude.Strings.trim7_val_1130.0
                      idr_Prelude.Strings.trim7_val_1138.0 <- pure idr_Prelude.Strings.trim7_val_1130.0
                      case idr_Prelude.Strings.trim7_val_1138.0 of
                        (Cidr_Prelude.Bool.False) ->
                          (CGrString idr_Prelude.Strings.trim0.41.144.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.62 <- pure idr_Prelude.Strings.trim0.41.144.arity.1.0
                          (CGrString idris_str_rev1_0.62) <- pure (CGrString idris_str_rev1.41.arity.1.62) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.62 <- _prim_string_reverse idris_str_rev1_0.62
                          unboxed.CGrString.167.0 <- pure idris_str_rev2.62
                          idr_Prelude.Strings.trim8_val_1141.0 <- pure (CGrString unboxed.CGrString.167.0)
                          idr_Prelude.Strings.trim8_1142.0 <- store idr_Prelude.Strings.trim8_val_1141.0
                          idris_str_tail1.84 <- pure idr_Prelude.Strings.trim8_1142.0
                          (CGrString idris_str_tail1_0.84) <- fetch idris_str_tail1.84
                          idris_str_tail2.84 <- _prim_string_tail idris_str_tail1_0.84
                          unboxed.CGrString.168.0 <- pure idris_str_tail2.84
                          idr_Prelude.Strings.trim8_val_1140.0 <- pure (CGrString unboxed.CGrString.168.0)
                          idr_Prelude.Strings.trim8_1143.0 <- store idr_Prelude.Strings.trim8_val_1140.0
                          idris_str_head1.29 <- pure idr_Prelude.Strings.trim8_1143.0
                          (CGrString idris_str_head1_0.29) <- fetch idris_str_head1.29
                          idris_str_head2.29 <- _prim_string_head idris_str_head1_0.29
                          unboxed.CGrInt.74.0 <- pure idris_str_head2.29
                          idr_Prelude.Strings.trim8_val_1139.0 <- pure (CGrInt unboxed.CGrInt.74.0)
                          idr_Prelude.Strings.trim8_1144.0 <- store idr_Prelude.Strings.trim8_val_1139.0
                          (CGrString idr_Prelude.Strings.trim0.41.145.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.63 <- pure idr_Prelude.Strings.trim0.41.145.arity.1.0
                          (CGrString idris_str_rev1_0.63) <- pure (CGrString idris_str_rev1.41.arity.1.63) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.63 <- _prim_string_reverse idris_str_rev1_0.63
                          unboxed.CGrString.169.0 <- pure idris_str_rev2.63
                          idr_Prelude.Strings.trim9_val_1147.0 <- pure (CGrString unboxed.CGrString.169.0)
                          idr_Prelude.Strings.trim9_1148.0 <- store idr_Prelude.Strings.trim9_val_1147.0
                          idris_str_tail1.85 <- pure idr_Prelude.Strings.trim9_1148.0
                          (CGrString idris_str_tail1_0.85) <- fetch idris_str_tail1.85
                          idris_str_tail2.85 <- _prim_string_tail idris_str_tail1_0.85
                          unboxed.CGrString.170.0 <- pure idris_str_tail2.85
                          idr_Prelude.Strings.trim9_val_1146.0 <- pure (CGrString unboxed.CGrString.170.0)
                          idr_Prelude.Strings.trim9_1149.0 <- store idr_Prelude.Strings.trim9_val_1146.0
                          idris_str_tail1.86 <- pure idr_Prelude.Strings.trim9_1149.0
                          (CGrString idris_str_tail1_0.86) <- fetch idris_str_tail1.86
                          idris_str_tail2.86 <- _prim_string_tail idris_str_tail1_0.86
                          unboxed.CGrString.171.0 <- pure idris_str_tail2.86
                          idr_Prelude.Strings.trim9_val_1145.0 <- pure (CGrString unboxed.CGrString.171.0)
                          idr_Prelude.Strings.trim9_1150.0 <- store idr_Prelude.Strings.trim9_val_1145.0
                          (CGrInt idr_Prelude.Strings.trim8_1144.41.146.arity.1.0) <- pure idr_Prelude.Strings.trim8_val_1139.0
                          (CGrString idr_Prelude.Strings.trim9_1150.49.38.arity.1.0) <- pure idr_Prelude.Strings.trim9_val_1145.0
                          idris_str_cons1.41.arity.1.12 <- pure idr_Prelude.Strings.trim8_1144.41.146.arity.1.0
                          idris_str_cons2.49.arity.1.12 <- pure idr_Prelude.Strings.trim9_1150.49.38.arity.1.0
                          (CGrInt idris_str_cons1_0.12) <- pure (CGrInt idris_str_cons1.41.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrString idris_str_cons2_0.12) <- pure (CGrString idris_str_cons2.49.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_cons3.12 <- _prim_string_cons idris_str_cons1_0.12 idris_str_cons2_0.12
                          unboxed.CGrString.277.0 <- pure idris_str_cons3.12
                          pure (CGrString unboxed.CGrString.277.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.277.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.86) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.85) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.29) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.84)
                        (Cidr_Prelude.Bool.True) ->
                          (CGrString idr_Prelude.Strings.trim0.41.147.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.64 <- pure idr_Prelude.Strings.trim0.41.147.arity.1.0
                          (CGrString idris_str_rev1_0.64) <- pure (CGrString idris_str_rev1.41.arity.1.64) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.64 <- _prim_string_reverse idris_str_rev1_0.64
                          unboxed.CGrString.172.0 <- pure idris_str_rev2.64
                          idr_Prelude.Strings.trim9_val_1159.0 <- pure (CGrString unboxed.CGrString.172.0)
                          idr_Prelude.Strings.trim9_1160.0 <- store idr_Prelude.Strings.trim9_val_1159.0
                          idris_str_tail1.87 <- pure idr_Prelude.Strings.trim9_1160.0
                          (CGrString idris_str_tail1_0.87) <- fetch idris_str_tail1.87
                          idris_str_tail2.87 <- _prim_string_tail idris_str_tail1_0.87
                          unboxed.CGrString.173.0 <- pure idris_str_tail2.87
                          idr_Prelude.Strings.trim9_val_1158.0 <- pure (CGrString unboxed.CGrString.173.0)
                          idr_Prelude.Strings.trim9_1161.0 <- store idr_Prelude.Strings.trim9_val_1158.0
                          idris_str_tail1.88 <- pure idr_Prelude.Strings.trim9_1161.0
                          (CGrString idris_str_tail1_0.88) <- fetch idris_str_tail1.88
                          idris_str_tail2.88 <- _prim_string_tail idris_str_tail1_0.88
                          unboxed.CGrString.174.0 <- pure idris_str_tail2.88
                          idr_Prelude.Strings.trim9_val_1157.0 <- pure (CGrString unboxed.CGrString.174.0)
                          idr_Prelude.Strings.trim9_1162.0 <- store idr_Prelude.Strings.trim9_val_1157.0
                          idr_Prelude.Strings.trim10_val_1163.0 <- pure idr_Prelude.Strings.trim2_val.0
                          idr_Prelude.Strings.trim10_1164.0 <- store idr_Prelude.Strings.trim10_val_1163.0
                          (CGrString idr_Prelude.Strings.trim10_1164.41.148.arity.1.0) <- pure idr_Prelude.Strings.trim10_val_1163.0
                          idris_str_eq1.17 <- pure idr_Prelude.Strings.trim9_1162.0
                          idris_str_eq2.41.arity.1.17 <- pure idr_Prelude.Strings.trim10_1164.41.148.arity.1.0
                          (CGrString idris_str_eq1_0.17) <- fetch idris_str_eq1.17
                          (CGrString idris_str_eq2_0.17) <- pure (CGrString idris_str_eq2.41.arity.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_eq3.17 <- _prim_string_eq idris_str_eq1_0.17 idris_str_eq2_0.17
                          ccp.2.17 <- case idris_str_eq3.17 of
                            #False ->
                              pure 0
                            #True ->
                              pure 1
                          unboxed.CGrInt.75.0 <- pure ccp.2.17
                          idr_Prelude.Strings.trim9_val_1156.0 <- pure (CGrInt unboxed.CGrInt.75.0)
                          idr_Prelude.Strings.trim9_1165.0 <- store idr_Prelude.Strings.trim9_val_1156.0
                          idr_Prelude.Strings.trim9_val_1166.0 <- pure idr_Prelude.Strings.trim9_val_1156.0
                          idr_Prelude.Strings.trim9_val_1155.0 <- case idr_Prelude.Strings.trim9_val_1166.0 of
                            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1167.0) ->
                              case idr_Prelude.Strings.trim_cpat_LInt64_0_1167.0 of
                                0 ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          idr_Prelude.Strings.trim9_1168.0 <- store idr_Prelude.Strings.trim9_val_1155.0
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.17" <- pure idr_Prelude.Strings.trim9_1168.0
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.17" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                          idr_Prelude.Strings.trim9_val_1154.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.17" of
                            (Cidr_Prelude.Bool.True) ->
                              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.17" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.17"
                              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.17" of
                                (Cidr_Prelude.Bool.False) ->
                                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                                (Cidr_Prelude.Bool.True) ->
                                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                          idr_Prelude.Strings.trim9_1171.0 <- store idr_Prelude.Strings.trim9_val_1154.0
                          idr_Prelude.Strings.trim9_val_1172.0 <- pure idr_Prelude.Strings.trim9_val_1154.0
                          idr_Prelude.Strings.trim9_val_1153.0 <- case idr_Prelude.Strings.trim9_val_1172.0 of
                            (Cidr_Prelude.Basics.No) ->
                              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                            (Cidr_Prelude.Basics.Yes) ->
                              (CGrString idr_Prelude.Strings.trim0.41.150.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.65 <- pure idr_Prelude.Strings.trim0.41.150.arity.1.0
                              (CGrString idris_str_rev1_0.65) <- pure (CGrString idris_str_rev1.41.arity.1.65) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.65 <- _prim_string_reverse idris_str_rev1_0.65
                              unboxed.CGrString.175.0 <- pure idris_str_rev2.65
                              idr_Prelude.Strings.trim10_val_1176.0 <- pure (CGrString unboxed.CGrString.175.0)
                              idr_Prelude.Strings.trim10_1177.0 <- store idr_Prelude.Strings.trim10_val_1176.0
                              idris_str_tail1.89 <- pure idr_Prelude.Strings.trim10_1177.0
                              (CGrString idris_str_tail1_0.89) <- fetch idris_str_tail1.89
                              idris_str_tail2.89 <- _prim_string_tail idris_str_tail1_0.89
                              unboxed.CGrString.176.0 <- pure idris_str_tail2.89
                              idr_Prelude.Strings.trim10_val_1175.0 <- pure (CGrString unboxed.CGrString.176.0)
                              idr_Prelude.Strings.trim10_1178.0 <- store idr_Prelude.Strings.trim10_val_1175.0
                              idris_str_tail1.90 <- pure idr_Prelude.Strings.trim10_1178.0
                              (CGrString idris_str_tail1_0.90) <- fetch idris_str_tail1.90
                              idris_str_tail2.90 <- _prim_string_tail idris_str_tail1_0.90
                              unboxed.CGrString.177.0 <- pure idris_str_tail2.90
                              idr_Prelude.Strings.trim10_val_1174.0 <- pure (CGrString unboxed.CGrString.177.0)
                              idr_Prelude.Strings.trim10_1179.0 <- store idr_Prelude.Strings.trim10_val_1174.0
                              idris_str_head1.30 <- pure idr_Prelude.Strings.trim10_1179.0
                              (CGrString idris_str_head1_0.30) <- fetch idris_str_head1.30
                              idris_str_head2.30 <- _prim_string_head idris_str_head1_0.30
                              unboxed.CGrInt.76.0 <- pure idris_str_head2.30
                              idr_Prelude.Strings.trim10_val_1173.0 <- pure (CGrInt unboxed.CGrInt.76.0)
                              idr_Prelude.Strings.trim10_1180.0 <- store idr_Prelude.Strings.trim10_val_1173.0
                              (CGrString idr_Prelude.Strings.trim0.41.151.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.66 <- pure idr_Prelude.Strings.trim0.41.151.arity.1.0
                              (CGrString idris_str_rev1_0.66) <- pure (CGrString idris_str_rev1.41.arity.1.66) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.66 <- _prim_string_reverse idris_str_rev1_0.66
                              unboxed.CGrString.178.0 <- pure idris_str_rev2.66
                              idr_Prelude.Strings.trim11_val_1184.0 <- pure (CGrString unboxed.CGrString.178.0)
                              idr_Prelude.Strings.trim11_1185.0 <- store idr_Prelude.Strings.trim11_val_1184.0
                              idris_str_tail1.91 <- pure idr_Prelude.Strings.trim11_1185.0
                              (CGrString idris_str_tail1_0.91) <- fetch idris_str_tail1.91
                              idris_str_tail2.91 <- _prim_string_tail idris_str_tail1_0.91
                              unboxed.CGrString.179.0 <- pure idris_str_tail2.91
                              idr_Prelude.Strings.trim11_val_1183.0 <- pure (CGrString unboxed.CGrString.179.0)
                              idr_Prelude.Strings.trim11_1186.0 <- store idr_Prelude.Strings.trim11_val_1183.0
                              idris_str_tail1.92 <- pure idr_Prelude.Strings.trim11_1186.0
                              (CGrString idris_str_tail1_0.92) <- fetch idris_str_tail1.92
                              idris_str_tail2.92 <- _prim_string_tail idris_str_tail1_0.92
                              unboxed.CGrString.180.0 <- pure idris_str_tail2.92
                              idr_Prelude.Strings.trim11_val_1182.0 <- pure (CGrString unboxed.CGrString.180.0)
                              idr_Prelude.Strings.trim11_1187.0 <- store idr_Prelude.Strings.trim11_val_1182.0
                              idris_str_tail1.93 <- pure idr_Prelude.Strings.trim11_1187.0
                              (CGrString idris_str_tail1_0.93) <- fetch idris_str_tail1.93
                              idris_str_tail2.93 <- _prim_string_tail idris_str_tail1_0.93
                              unboxed.CGrString.181.0 <- pure idris_str_tail2.93
                              idr_Prelude.Strings.trim11_val_1181.0 <- pure (CGrString unboxed.CGrString.181.0)
                              idr_Prelude.Strings.trim11_1188.0 <- store idr_Prelude.Strings.trim11_val_1181.0
                              pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim10_1180.0 idr_Prelude.Strings.trim11_1188.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim10_1180.0 idr_Prelude.Strings.trim11_1188.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.93) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.92) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.91) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.30) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.90) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.89)
                          idr_Prelude.Strings.trim9_1189.0 <- store idr_Prelude.Strings.trim9_val_1153.0
                          unboxed.CGrString.182.0 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim9_1189.0
                          pure (CGrString unboxed.CGrString.182.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.182.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.17) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.88) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.87) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.28) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.83) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.16) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.82) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.26)
          idr_Prelude.Strings.trim4_1190.0 <- store idr_Prelude.Strings.trim4_val_1082.0
          (CGrString idr_Prelude.Strings.trim4_1190.41.152.arity.1.0) <- pure idr_Prelude.Strings.trim4_val_1082.0
          idris_str_rev1.41.arity.1.67 <- pure idr_Prelude.Strings.trim4_1190.41.152.arity.1.0
          (CGrString idris_str_rev1_0.67) <- pure (CGrString idris_str_rev1.41.arity.1.67) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_rev2.67 <- _prim_string_reverse idris_str_rev1_0.67
          unboxed.CGrString.183.0 <- pure idris_str_rev2.67
          idr_Prelude.Strings.trim4_val_1081.0 <- pure (CGrString unboxed.CGrString.183.0)
          idr_Prelude.Strings.trim4_1191.0 <- store idr_Prelude.Strings.trim4_val_1081.0
          idris_str_tail1.94 <- pure idr_Prelude.Strings.trim4_1191.0
          (CGrString idris_str_tail1_0.94) <- fetch idris_str_tail1.94
          idris_str_tail2.94 <- _prim_string_tail idris_str_tail1_0.94
          unboxed.CGrString.184.0 <- pure idris_str_tail2.94
          idr_Prelude.Strings.trim4_val_1080.0 <- pure (CGrString unboxed.CGrString.184.0)
          idr_Prelude.Strings.trim4_1192.0 <- store idr_Prelude.Strings.trim4_val_1080.0
          idr_Prelude.Strings.trim5_val_1193.0 <- pure idr_Prelude.Strings.trim2_val.0
          idr_Prelude.Strings.trim5_1194.0 <- store idr_Prelude.Strings.trim5_val_1193.0
          (CGrString idr_Prelude.Strings.trim5_1194.41.153.arity.1.0) <- pure idr_Prelude.Strings.trim5_val_1193.0
          idris_str_eq1.18 <- pure idr_Prelude.Strings.trim4_1192.0
          idris_str_eq2.41.arity.1.18 <- pure idr_Prelude.Strings.trim5_1194.41.153.arity.1.0
          (CGrString idris_str_eq1_0.18) <- fetch idris_str_eq1.18
          (CGrString idris_str_eq2_0.18) <- pure (CGrString idris_str_eq2.41.arity.1.18) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_eq3.18 <- _prim_string_eq idris_str_eq1_0.18 idris_str_eq2_0.18
          ccp.2.18 <- case idris_str_eq3.18 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.77.0 <- pure ccp.2.18
          idr_Prelude.Strings.trim4_val_1079.0 <- pure (CGrInt unboxed.CGrInt.77.0)
          idr_Prelude.Strings.trim4_1195.0 <- store idr_Prelude.Strings.trim4_val_1079.0
          idr_Prelude.Strings.trim4_val_1196.0 <- pure idr_Prelude.Strings.trim4_val_1079.0
          idr_Prelude.Strings.trim4_val_1078.0 <- case idr_Prelude.Strings.trim4_val_1196.0 of
            (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1197.0) ->
              case idr_Prelude.Strings.trim_cpat_LInt64_0_1197.0 of
                0 ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Strings.trim4_1198.0 <- store idr_Prelude.Strings.trim4_val_1078.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.18" <- pure idr_Prelude.Strings.trim4_1198.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.18" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
          idr_Prelude.Strings.trim4_val_1077.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.18" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.18" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.18"
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.18" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          idr_Prelude.Strings.trim4_1201.0 <- store idr_Prelude.Strings.trim4_val_1077.0
          idr_Prelude.Strings.trim4_val_1202.0 <- pure idr_Prelude.Strings.trim4_val_1077.0
          idr_Prelude.Strings.trim4_val_1076.0 <- case idr_Prelude.Strings.trim4_val_1202.0 of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
            (Cidr_Prelude.Basics.Yes) ->
              (CGrString idr_Prelude.Strings.trim0.41.155.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev1.41.arity.1.68 <- pure idr_Prelude.Strings.trim0.41.155.arity.1.0
              (CGrString idris_str_rev1_0.68) <- pure (CGrString idris_str_rev1.41.arity.1.68) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.68 <- _prim_string_reverse idris_str_rev1_0.68
              unboxed.CGrString.185.0 <- pure idris_str_rev2.68
              idr_Prelude.Strings.trim5_val_1210.0 <- pure (CGrString unboxed.CGrString.185.0)
              idr_Prelude.Strings.trim5_1211.0 <- store idr_Prelude.Strings.trim5_val_1210.0
              idr_Prelude.Strings.trim6_val_1212.0 <- pure idr_Prelude.Strings.trim2_val.0
              idr_Prelude.Strings.trim6_1213.0 <- store idr_Prelude.Strings.trim6_val_1212.0
              (CGrString idr_Prelude.Strings.trim6_1213.41.156.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_1212.0
              idris_str_eq1.19 <- pure idr_Prelude.Strings.trim5_1211.0
              idris_str_eq2.41.arity.1.19 <- pure idr_Prelude.Strings.trim6_1213.41.156.arity.1.0
              (CGrString idris_str_eq1_0.19) <- fetch idris_str_eq1.19
              (CGrString idris_str_eq2_0.19) <- pure (CGrString idris_str_eq2.41.arity.1.19) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_eq3.19 <- _prim_string_eq idris_str_eq1_0.19 idris_str_eq2_0.19
              ccp.2.19 <- case idris_str_eq3.19 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              unboxed.CGrInt.78.0 <- pure ccp.2.19
              idr_Prelude.Strings.trim5_val_1209.0 <- pure (CGrInt unboxed.CGrInt.78.0)
              idr_Prelude.Strings.trim5_1214.0 <- store idr_Prelude.Strings.trim5_val_1209.0
              idr_Prelude.Strings.trim5_val_1215.0 <- pure idr_Prelude.Strings.trim5_val_1209.0
              idr_Prelude.Strings.trim5_val_1208.0 <- case idr_Prelude.Strings.trim5_val_1215.0 of
                (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1216.0) ->
                  case idr_Prelude.Strings.trim_cpat_LInt64_0_1216.0 of
                    0 ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              idr_Prelude.Strings.trim5_1217.0 <- store idr_Prelude.Strings.trim5_val_1208.0
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.19" <- pure idr_Prelude.Strings.trim5_1217.0
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.19" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
              idr_Prelude.Strings.trim5_val_1207.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.19" of
                (Cidr_Prelude.Bool.True) ->
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.19" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.19"
                  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.19" of
                    (Cidr_Prelude.Bool.False) ->
                      pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                    (Cidr_Prelude.Bool.True) ->
                      pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
              idr_Prelude.Strings.trim5_1220.0 <- store idr_Prelude.Strings.trim5_val_1207.0
              idr_Prelude.Strings.trim5_val_1221.0 <- pure idr_Prelude.Strings.trim5_val_1207.0
              idr_Prelude.Strings.trim5_val_1206.0 <- case idr_Prelude.Strings.trim5_val_1221.0 of
                (Cidr_Prelude.Basics.No) ->
                  pure idr_Prelude.Strings.trim2_val.0
                (Cidr_Prelude.Basics.Yes) ->
                  (CGrString idr_Prelude.Strings.trim0.41.158.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.69 <- pure idr_Prelude.Strings.trim0.41.158.arity.1.0
                  (CGrString idris_str_rev1_0.69) <- pure (CGrString idris_str_rev1.41.arity.1.69) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.69 <- _prim_string_reverse idris_str_rev1_0.69
                  unboxed.CGrString.186.0 <- pure idris_str_rev2.69
                  idr_Prelude.Strings.trim6_val_1224.0 <- pure (CGrString unboxed.CGrString.186.0)
                  idr_Prelude.Strings.trim6_1225.0 <- store idr_Prelude.Strings.trim6_val_1224.0
                  idris_str_head1.31 <- pure idr_Prelude.Strings.trim6_1225.0
                  (CGrString idris_str_head1_0.31) <- fetch idris_str_head1.31
                  idris_str_head2.31 <- _prim_string_head idris_str_head1_0.31
                  unboxed.CGrInt.79.0 <- pure idris_str_head2.31
                  idr_Prelude.Strings.trim6_val_1223.0 <- pure (CGrInt unboxed.CGrInt.79.0)
                  idr_Prelude.Strings.trim6_1226.0 <- store idr_Prelude.Strings.trim6_val_1223.0
                  (CGrInt idr_Prelude.Strings.trim6_1226.57.22.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_1223.0
                  idr_Prelude.Chars.isSpace0.57.arity.1.13 <- pure idr_Prelude.Strings.trim6_1226.57.22.arity.1.0
                  idr_Prelude.Chars.isSpace1_val_27.13 <- pure idr_Prelude.Chars.isSpace1_val_27.6
                  idr_Prelude.Chars.isSpace1.13 <- store idr_Prelude.Chars.isSpace1_val_27.13
                  (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.13) <- pure idr_Prelude.Chars.isSpace1_val_27.13
                  (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.13) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_eq0.49.arity.1.0.13 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.13
                  idris_int_eq1.41.arity.1.0.13 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.13
                  (CGrInt idris_int_eq0_1.0.13) <- pure (CGrInt idris_int_eq0.49.arity.1.0.13) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_eq1_1.0.13) <- pure (CGrInt idris_int_eq1.41.arity.1.0.13) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_eq2.0.13 <- _prim_int_eq idris_int_eq0_1.0.13 idris_int_eq1_1.0.13
                  ccp.0.0.13 <- case idris_int_eq2.0.13 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  unboxed.CGrInt.4.13 <- pure ccp.0.0.13
                  idr_Prelude.Chars.isSpace1_val.13 <- pure (CGrInt unboxed.CGrInt.4.13)
                  idr_Prelude.Chars.isSpace1_28.13 <- store idr_Prelude.Chars.isSpace1_val.13
                  idr_Prelude.Chars.isSpace1_val_29.13 <- pure idr_Prelude.Chars.isSpace1_val.13
                  idr_Prelude.Strings.trim6_val_1222.0 <- case idr_Prelude.Chars.isSpace1_val_29.13 of
                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.13) ->
                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0.13 of
                        0 ->
                          idr_Prelude.Chars.isSpace2_val_30.13 <- pure (CGrInt 9)
                          idr_Prelude.Chars.isSpace2.13 <- store idr_Prelude.Chars.isSpace2_val_30.13
                          (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.13) <- pure idr_Prelude.Chars.isSpace2_val_30.13
                          (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.13) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq0.49.arity.1.1.13 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.13
                          idris_int_eq1.41.arity.1.1.13 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.13
                          (CGrInt idris_int_eq0_1.1.13) <- pure (CGrInt idris_int_eq0.49.arity.1.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrInt idris_int_eq1_1.1.13) <- pure (CGrInt idris_int_eq1.41.arity.1.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq2.1.13 <- _prim_int_eq idris_int_eq0_1.1.13 idris_int_eq1_1.1.13
                          ccp.0.1.13 <- case idris_int_eq2.1.13 of
                            #False ->
                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.13
                            #True ->
                              pure 1
                          unboxed.CGrInt.5.13 <- pure ccp.0.1.13
                          idr_Prelude.Chars.isSpace2_val.13 <- pure (CGrInt unboxed.CGrInt.5.13)
                          idr_Prelude.Chars.isSpace2_31.13 <- store idr_Prelude.Chars.isSpace2_val.13
                          idr_Prelude.Chars.isSpace2_val_32.13 <- pure idr_Prelude.Chars.isSpace2_val.13
                          case idr_Prelude.Chars.isSpace2_val_32.13 of
                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.13) ->
                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.13 of
                                0 ->
                                  idr_Prelude.Chars.isSpace3_val_34.13 <- pure (CGrInt 13)
                                  idr_Prelude.Chars.isSpace3.13 <- store idr_Prelude.Chars.isSpace3_val_34.13
                                  (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.13) <- pure idr_Prelude.Chars.isSpace3_val_34.13
                                  (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.13) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq0.49.arity.1.2.13 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.13
                                  idris_int_eq1.41.arity.1.2.13 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.13
                                  (CGrInt idris_int_eq0_1.2.13) <- pure (CGrInt idris_int_eq0.49.arity.1.2.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                  (CGrInt idris_int_eq1_1.2.13) <- pure (CGrInt idris_int_eq1.41.arity.1.2.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq2.2.13 <- _prim_int_eq idris_int_eq0_1.2.13 idris_int_eq1_1.2.13
                                  ccp.0.2.13 <- case idris_int_eq2.2.13 of
                                    #False ->
                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.13
                                    #True ->
                                      pure 1
                                  unboxed.CGrInt.6.13 <- pure ccp.0.2.13
                                  idr_Prelude.Chars.isSpace3_val.13 <- pure (CGrInt unboxed.CGrInt.6.13)
                                  idr_Prelude.Chars.isSpace3_35.13 <- store idr_Prelude.Chars.isSpace3_val.13
                                  idr_Prelude.Chars.isSpace3_val_36.13 <- pure idr_Prelude.Chars.isSpace3_val.13
                                  case idr_Prelude.Chars.isSpace3_val_36.13 of
                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.13) ->
                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.13 of
                                        0 ->
                                          idr_Prelude.Chars.isSpace4_val_38.13 <- pure (CGrInt 10)
                                          idr_Prelude.Chars.isSpace4.13 <- store idr_Prelude.Chars.isSpace4_val_38.13
                                          (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.13) <- pure idr_Prelude.Chars.isSpace4_val_38.13
                                          (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.13) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq0.49.arity.1.3.13 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.13
                                          idris_int_eq1.41.arity.1.3.13 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.13
                                          (CGrInt idris_int_eq0_1.3.13) <- pure (CGrInt idris_int_eq0.49.arity.1.3.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                          (CGrInt idris_int_eq1_1.3.13) <- pure (CGrInt idris_int_eq1.41.arity.1.3.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq2.3.13 <- _prim_int_eq idris_int_eq0_1.3.13 idris_int_eq1_1.3.13
                                          ccp.0.3.13 <- case idris_int_eq2.3.13 of
                                            #False ->
                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.13
                                            #True ->
                                              pure 1
                                          unboxed.CGrInt.7.13 <- pure ccp.0.3.13
                                          idr_Prelude.Chars.isSpace4_val.13 <- pure (CGrInt unboxed.CGrInt.7.13)
                                          idr_Prelude.Chars.isSpace4_39.13 <- store idr_Prelude.Chars.isSpace4_val.13
                                          idr_Prelude.Chars.isSpace4_val_40.13 <- pure idr_Prelude.Chars.isSpace4_val.13
                                          case idr_Prelude.Chars.isSpace4_val_40.13 of
                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.13) ->
                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.13 of
                                                0 ->
                                                  idr_Prelude.Chars.isSpace5_val_42.13 <- pure (CGrInt 12)
                                                  idr_Prelude.Chars.isSpace5.13 <- store idr_Prelude.Chars.isSpace5_val_42.13
                                                  (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.13) <- pure idr_Prelude.Chars.isSpace5_val_42.13
                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.13) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq0.49.arity.1.4.13 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.13
                                                  idris_int_eq1.41.arity.1.4.13 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.13
                                                  (CGrInt idris_int_eq0_1.4.13) <- pure (CGrInt idris_int_eq0.49.arity.1.4.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  (CGrInt idris_int_eq1_1.4.13) <- pure (CGrInt idris_int_eq1.41.arity.1.4.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq2.4.13 <- _prim_int_eq idris_int_eq0_1.4.13 idris_int_eq1_1.4.13
                                                  ccp.0.4.13 <- case idris_int_eq2.4.13 of
                                                    #False ->
                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.13
                                                    #True ->
                                                      pure 1
                                                  unboxed.CGrInt.8.13 <- pure ccp.0.4.13
                                                  idr_Prelude.Chars.isSpace5_val.13 <- pure (CGrInt unboxed.CGrInt.8.13)
                                                  idr_Prelude.Chars.isSpace5_43.13 <- store idr_Prelude.Chars.isSpace5_val.13
                                                  idr_Prelude.Chars.isSpace5_val_44.13 <- pure idr_Prelude.Chars.isSpace5_val.13
                                                  case idr_Prelude.Chars.isSpace5_val_44.13 of
                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.13) ->
                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.13 of
                                                        0 ->
                                                          idr_Prelude.Chars.isSpace6_val_46.13 <- pure (CGrInt 11)
                                                          idr_Prelude.Chars.isSpace6.13 <- store idr_Prelude.Chars.isSpace6_val_46.13
                                                          (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.13) <- pure idr_Prelude.Chars.isSpace6_val_46.13
                                                          (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.13) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq0.49.arity.1.5.13 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.13
                                                          idris_int_eq1.41.arity.1.5.13 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.13
                                                          (CGrInt idris_int_eq0_1.5.13) <- pure (CGrInt idris_int_eq0.49.arity.1.5.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          (CGrInt idris_int_eq1_1.5.13) <- pure (CGrInt idris_int_eq1.41.arity.1.5.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq2.5.13 <- _prim_int_eq idris_int_eq0_1.5.13 idris_int_eq1_1.5.13
                                                          ccp.0.5.13 <- case idris_int_eq2.5.13 of
                                                            #False ->
                                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.13
                                                            #True ->
                                                              pure 1
                                                          unboxed.CGrInt.9.13 <- pure ccp.0.5.13
                                                          idr_Prelude.Chars.isSpace6_val.13 <- pure (CGrInt unboxed.CGrInt.9.13)
                                                          idr_Prelude.Chars.isSpace6_47.13 <- store idr_Prelude.Chars.isSpace6_val.13
                                                          idr_Prelude.Chars.isSpace6_val_48.13 <- pure idr_Prelude.Chars.isSpace6_val.13
                                                          case idr_Prelude.Chars.isSpace6_val_48.13 of
                                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.13) ->
                                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.13 of
                                                                0 ->
                                                                  idr_Prelude.Chars.isSpace7_val_50.13 <- pure (CGrInt 160)
                                                                  idr_Prelude.Chars.isSpace7.13 <- store idr_Prelude.Chars.isSpace7_val_50.13
                                                                  (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.13) <- pure idr_Prelude.Chars.isSpace7_val_50.13
                                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.13) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  idris_int_eq0.49.arity.1.6.13 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.13
                                                                  idris_int_eq1.41.arity.1.6.13 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.13
                                                                  (CGrInt idris_int_eq0_1.6.13) <- pure (CGrInt idris_int_eq0.49.arity.1.6.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  (CGrInt idris_int_eq1_1.6.13) <- pure (CGrInt idris_int_eq1.41.arity.1.6.13) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  idris_int_eq2.6.13 <- _prim_int_eq idris_int_eq0_1.6.13 idris_int_eq1_1.6.13
                                                                  ccp.0.6.13 <- case idris_int_eq2.6.13 of
                                                                    #False ->
                                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.13
                                                                    #True ->
                                                                      pure 1
                                                                  unboxed.CGrInt.10.13 <- pure ccp.0.6.13
                                                                  idr_Prelude.Chars.isSpace7_val.13 <- pure (CGrInt unboxed.CGrInt.10.13)
                                                                  idr_Prelude.Chars.isSpace7_51.13 <- store idr_Prelude.Chars.isSpace7_val.13
                                                                  idr_Prelude.Chars.isSpace7_val_52.13 <- pure idr_Prelude.Chars.isSpace7_val.13
                                                                  case idr_Prelude.Chars.isSpace7_val_52.13 of
                                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.13) ->
                                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.13 of
                                                                        0 ->
                                                                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                        #default ->
                                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                #default ->
                                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                        #default ->
                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                #default ->
                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                        #default ->
                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                        #default ->
                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                  idr_Prelude.Strings.trim6_1227.0 <- store idr_Prelude.Strings.trim6_val_1222.0
                  idr_Prelude.Strings.trim6_val_1228.0 <- pure idr_Prelude.Strings.trim6_val_1222.0
                  case idr_Prelude.Strings.trim6_val_1228.0 of
                    (Cidr_Prelude.Bool.False) ->
                      (CGrString idr_Prelude.Strings.trim0.41.159.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.70 <- pure idr_Prelude.Strings.trim0.41.159.arity.1.0
                      (CGrString idris_str_rev1_0.70) <- pure (CGrString idris_str_rev1.41.arity.1.70) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.70 <- _prim_string_reverse idris_str_rev1_0.70
                      unboxed.CGrString.187.0 <- pure idris_str_rev2.70
                      idr_Prelude.Strings.trim7_val_1230.0 <- pure (CGrString unboxed.CGrString.187.0)
                      idr_Prelude.Strings.trim7_1231.0 <- store idr_Prelude.Strings.trim7_val_1230.0
                      idris_str_head1.32 <- pure idr_Prelude.Strings.trim7_1231.0
                      (CGrString idris_str_head1_0.32) <- fetch idris_str_head1.32
                      idris_str_head2.32 <- _prim_string_head idris_str_head1_0.32
                      unboxed.CGrInt.80.0 <- pure idris_str_head2.32
                      idr_Prelude.Strings.trim7_val_1229.0 <- pure (CGrInt unboxed.CGrInt.80.0)
                      idr_Prelude.Strings.trim7_1232.0 <- store idr_Prelude.Strings.trim7_val_1229.0
                      (CGrString idr_Prelude.Strings.trim0.41.160.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.71 <- pure idr_Prelude.Strings.trim0.41.160.arity.1.0
                      (CGrString idris_str_rev1_0.71) <- pure (CGrString idris_str_rev1.41.arity.1.71) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.71 <- _prim_string_reverse idris_str_rev1_0.71
                      unboxed.CGrString.188.0 <- pure idris_str_rev2.71
                      idr_Prelude.Strings.trim8_val_1234.0 <- pure (CGrString unboxed.CGrString.188.0)
                      idr_Prelude.Strings.trim8_1235.0 <- store idr_Prelude.Strings.trim8_val_1234.0
                      idris_str_tail1.95 <- pure idr_Prelude.Strings.trim8_1235.0
                      (CGrString idris_str_tail1_0.95) <- fetch idris_str_tail1.95
                      idris_str_tail2.95 <- _prim_string_tail idris_str_tail1_0.95
                      unboxed.CGrString.189.0 <- pure idris_str_tail2.95
                      idr_Prelude.Strings.trim8_val_1233.0 <- pure (CGrString unboxed.CGrString.189.0)
                      idr_Prelude.Strings.trim8_1236.0 <- store idr_Prelude.Strings.trim8_val_1233.0
                      (CGrInt idr_Prelude.Strings.trim7_1232.41.161.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_1229.0
                      (CGrString idr_Prelude.Strings.trim8_1236.49.39.arity.1.0) <- pure idr_Prelude.Strings.trim8_val_1233.0
                      idris_str_cons1.41.arity.1.13 <- pure idr_Prelude.Strings.trim7_1232.41.161.arity.1.0
                      idris_str_cons2.49.arity.1.13 <- pure idr_Prelude.Strings.trim8_1236.49.39.arity.1.0
                      (CGrInt idris_str_cons1_0.13) <- pure (CGrInt idris_str_cons1.41.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrString idris_str_cons2_0.13) <- pure (CGrString idris_str_cons2.49.arity.1.13) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_cons3.13 <- _prim_string_cons idris_str_cons1_0.13 idris_str_cons2_0.13
                      unboxed.CGrString.278.0 <- pure idris_str_cons3.13
                      pure (CGrString unboxed.CGrString.278.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.278.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.95) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.32)
                    (Cidr_Prelude.Bool.True) ->
                      (CGrString idr_Prelude.Strings.trim0.41.162.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.72 <- pure idr_Prelude.Strings.trim0.41.162.arity.1.0
                      (CGrString idris_str_rev1_0.72) <- pure (CGrString idris_str_rev1.41.arity.1.72) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.72 <- _prim_string_reverse idris_str_rev1_0.72
                      unboxed.CGrString.190.0 <- pure idris_str_rev2.72
                      idr_Prelude.Strings.trim7_val_1241.0 <- pure (CGrString unboxed.CGrString.190.0)
                      idr_Prelude.Strings.trim7_1242.0 <- store idr_Prelude.Strings.trim7_val_1241.0
                      idris_str_tail1.96 <- pure idr_Prelude.Strings.trim7_1242.0
                      (CGrString idris_str_tail1_0.96) <- fetch idris_str_tail1.96
                      idris_str_tail2.96 <- _prim_string_tail idris_str_tail1_0.96
                      unboxed.CGrString.191.0 <- pure idris_str_tail2.96
                      idr_Prelude.Strings.trim7_val_1240.0 <- pure (CGrString unboxed.CGrString.191.0)
                      idr_Prelude.Strings.trim7_1243.0 <- store idr_Prelude.Strings.trim7_val_1240.0
                      idr_Prelude.Strings.trim8_val_1244.0 <- pure idr_Prelude.Strings.trim2_val.0
                      idr_Prelude.Strings.trim8_1245.0 <- store idr_Prelude.Strings.trim8_val_1244.0
                      (CGrString idr_Prelude.Strings.trim8_1245.41.163.arity.1.0) <- pure idr_Prelude.Strings.trim8_val_1244.0
                      idris_str_eq1.20 <- pure idr_Prelude.Strings.trim7_1243.0
                      idris_str_eq2.41.arity.1.20 <- pure idr_Prelude.Strings.trim8_1245.41.163.arity.1.0
                      (CGrString idris_str_eq1_0.20) <- fetch idris_str_eq1.20
                      (CGrString idris_str_eq2_0.20) <- pure (CGrString idris_str_eq2.41.arity.1.20) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_eq3.20 <- _prim_string_eq idris_str_eq1_0.20 idris_str_eq2_0.20
                      ccp.2.20 <- case idris_str_eq3.20 of
                        #False ->
                          pure 0
                        #True ->
                          pure 1
                      unboxed.CGrInt.81.0 <- pure ccp.2.20
                      idr_Prelude.Strings.trim7_val_1239.0 <- pure (CGrInt unboxed.CGrInt.81.0)
                      idr_Prelude.Strings.trim7_1246.0 <- store idr_Prelude.Strings.trim7_val_1239.0
                      idr_Prelude.Strings.trim7_val_1247.0 <- pure idr_Prelude.Strings.trim7_val_1239.0
                      idr_Prelude.Strings.trim7_val_1238.0 <- case idr_Prelude.Strings.trim7_val_1247.0 of
                        (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1248.0) ->
                          case idr_Prelude.Strings.trim_cpat_LInt64_0_1248.0 of
                            0 ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      idr_Prelude.Strings.trim7_1249.0 <- store idr_Prelude.Strings.trim7_val_1238.0
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.20" <- pure idr_Prelude.Strings.trim7_1249.0
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.20" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                      idr_Prelude.Strings.trim7_val_1237.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.20" of
                        (Cidr_Prelude.Bool.True) ->
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.20" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.20"
                          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.20" of
                            (Cidr_Prelude.Bool.False) ->
                              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                            (Cidr_Prelude.Bool.True) ->
                              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                      idr_Prelude.Strings.trim7_1252.0 <- store idr_Prelude.Strings.trim7_val_1237.0
                      idr_Prelude.Strings.trim7_val_1253.0 <- pure idr_Prelude.Strings.trim7_val_1237.0
                      case idr_Prelude.Strings.trim7_val_1253.0 of
                        (Cidr_Prelude.Basics.No) ->
                          pure idr_Prelude.Strings.trim2_val.0
                        (Cidr_Prelude.Basics.Yes) ->
                          (CGrString idr_Prelude.Strings.trim0.41.165.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.73 <- pure idr_Prelude.Strings.trim0.41.165.arity.1.0
                          (CGrString idris_str_rev1_0.73) <- pure (CGrString idris_str_rev1.41.arity.1.73) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.73 <- _prim_string_reverse idris_str_rev1_0.73
                          unboxed.CGrString.192.0 <- pure idris_str_rev2.73
                          idr_Prelude.Strings.trim8_val_1257.0 <- pure (CGrString unboxed.CGrString.192.0)
                          idr_Prelude.Strings.trim8_1258.0 <- store idr_Prelude.Strings.trim8_val_1257.0
                          idris_str_tail1.97 <- pure idr_Prelude.Strings.trim8_1258.0
                          (CGrString idris_str_tail1_0.97) <- fetch idris_str_tail1.97
                          idris_str_tail2.97 <- _prim_string_tail idris_str_tail1_0.97
                          unboxed.CGrString.193.0 <- pure idris_str_tail2.97
                          idr_Prelude.Strings.trim8_val_1256.0 <- pure (CGrString unboxed.CGrString.193.0)
                          idr_Prelude.Strings.trim8_1259.0 <- store idr_Prelude.Strings.trim8_val_1256.0
                          idris_str_head1.33 <- pure idr_Prelude.Strings.trim8_1259.0
                          (CGrString idris_str_head1_0.33) <- fetch idris_str_head1.33
                          idris_str_head2.33 <- _prim_string_head idris_str_head1_0.33
                          unboxed.CGrInt.82.0 <- pure idris_str_head2.33
                          idr_Prelude.Strings.trim8_val_1255.0 <- pure (CGrInt unboxed.CGrInt.82.0)
                          idr_Prelude.Strings.trim8_1260.0 <- store idr_Prelude.Strings.trim8_val_1255.0
                          (CGrInt idr_Prelude.Strings.trim8_1260.57.23.arity.1.0) <- pure idr_Prelude.Strings.trim8_val_1255.0
                          idr_Prelude.Chars.isSpace0.57.arity.1.14 <- pure idr_Prelude.Strings.trim8_1260.57.23.arity.1.0
                          idr_Prelude.Chars.isSpace1_val_27.14 <- pure idr_Prelude.Chars.isSpace1_val_27.6
                          idr_Prelude.Chars.isSpace1.14 <- store idr_Prelude.Chars.isSpace1_val_27.14
                          (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.14) <- pure idr_Prelude.Chars.isSpace1_val_27.14
                          (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.14) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq0.49.arity.1.0.14 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.14
                          idris_int_eq1.41.arity.1.0.14 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.14
                          (CGrInt idris_int_eq0_1.0.14) <- pure (CGrInt idris_int_eq0.49.arity.1.0.14) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrInt idris_int_eq1_1.0.14) <- pure (CGrInt idris_int_eq1.41.arity.1.0.14) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq2.0.14 <- _prim_int_eq idris_int_eq0_1.0.14 idris_int_eq1_1.0.14
                          ccp.0.0.14 <- case idris_int_eq2.0.14 of
                            #False ->
                              pure 0
                            #True ->
                              pure 1
                          unboxed.CGrInt.4.14 <- pure ccp.0.0.14
                          idr_Prelude.Chars.isSpace1_val.14 <- pure (CGrInt unboxed.CGrInt.4.14)
                          idr_Prelude.Chars.isSpace1_28.14 <- store idr_Prelude.Chars.isSpace1_val.14
                          idr_Prelude.Chars.isSpace1_val_29.14 <- pure idr_Prelude.Chars.isSpace1_val.14
                          idr_Prelude.Strings.trim8_val_1254.0 <- case idr_Prelude.Chars.isSpace1_val_29.14 of
                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.14) ->
                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0.14 of
                                0 ->
                                  idr_Prelude.Chars.isSpace2_val_30.14 <- pure (CGrInt 9)
                                  idr_Prelude.Chars.isSpace2.14 <- store idr_Prelude.Chars.isSpace2_val_30.14
                                  (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.14) <- pure idr_Prelude.Chars.isSpace2_val_30.14
                                  (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.14) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq0.49.arity.1.1.14 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.14
                                  idris_int_eq1.41.arity.1.1.14 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.14
                                  (CGrInt idris_int_eq0_1.1.14) <- pure (CGrInt idris_int_eq0.49.arity.1.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                  (CGrInt idris_int_eq1_1.1.14) <- pure (CGrInt idris_int_eq1.41.arity.1.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq2.1.14 <- _prim_int_eq idris_int_eq0_1.1.14 idris_int_eq1_1.1.14
                                  ccp.0.1.14 <- case idris_int_eq2.1.14 of
                                    #False ->
                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.14
                                    #True ->
                                      pure 1
                                  unboxed.CGrInt.5.14 <- pure ccp.0.1.14
                                  idr_Prelude.Chars.isSpace2_val.14 <- pure (CGrInt unboxed.CGrInt.5.14)
                                  idr_Prelude.Chars.isSpace2_31.14 <- store idr_Prelude.Chars.isSpace2_val.14
                                  idr_Prelude.Chars.isSpace2_val_32.14 <- pure idr_Prelude.Chars.isSpace2_val.14
                                  case idr_Prelude.Chars.isSpace2_val_32.14 of
                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.14) ->
                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.14 of
                                        0 ->
                                          idr_Prelude.Chars.isSpace3_val_34.14 <- pure (CGrInt 13)
                                          idr_Prelude.Chars.isSpace3.14 <- store idr_Prelude.Chars.isSpace3_val_34.14
                                          (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.14) <- pure idr_Prelude.Chars.isSpace3_val_34.14
                                          (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.14) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq0.49.arity.1.2.14 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.14
                                          idris_int_eq1.41.arity.1.2.14 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.14
                                          (CGrInt idris_int_eq0_1.2.14) <- pure (CGrInt idris_int_eq0.49.arity.1.2.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                          (CGrInt idris_int_eq1_1.2.14) <- pure (CGrInt idris_int_eq1.41.arity.1.2.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq2.2.14 <- _prim_int_eq idris_int_eq0_1.2.14 idris_int_eq1_1.2.14
                                          ccp.0.2.14 <- case idris_int_eq2.2.14 of
                                            #False ->
                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.14
                                            #True ->
                                              pure 1
                                          unboxed.CGrInt.6.14 <- pure ccp.0.2.14
                                          idr_Prelude.Chars.isSpace3_val.14 <- pure (CGrInt unboxed.CGrInt.6.14)
                                          idr_Prelude.Chars.isSpace3_35.14 <- store idr_Prelude.Chars.isSpace3_val.14
                                          idr_Prelude.Chars.isSpace3_val_36.14 <- pure idr_Prelude.Chars.isSpace3_val.14
                                          case idr_Prelude.Chars.isSpace3_val_36.14 of
                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.14) ->
                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.14 of
                                                0 ->
                                                  idr_Prelude.Chars.isSpace4_val_38.14 <- pure (CGrInt 10)
                                                  idr_Prelude.Chars.isSpace4.14 <- store idr_Prelude.Chars.isSpace4_val_38.14
                                                  (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.14) <- pure idr_Prelude.Chars.isSpace4_val_38.14
                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.14) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq0.49.arity.1.3.14 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.14
                                                  idris_int_eq1.41.arity.1.3.14 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.14
                                                  (CGrInt idris_int_eq0_1.3.14) <- pure (CGrInt idris_int_eq0.49.arity.1.3.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  (CGrInt idris_int_eq1_1.3.14) <- pure (CGrInt idris_int_eq1.41.arity.1.3.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq2.3.14 <- _prim_int_eq idris_int_eq0_1.3.14 idris_int_eq1_1.3.14
                                                  ccp.0.3.14 <- case idris_int_eq2.3.14 of
                                                    #False ->
                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.14
                                                    #True ->
                                                      pure 1
                                                  unboxed.CGrInt.7.14 <- pure ccp.0.3.14
                                                  idr_Prelude.Chars.isSpace4_val.14 <- pure (CGrInt unboxed.CGrInt.7.14)
                                                  idr_Prelude.Chars.isSpace4_39.14 <- store idr_Prelude.Chars.isSpace4_val.14
                                                  idr_Prelude.Chars.isSpace4_val_40.14 <- pure idr_Prelude.Chars.isSpace4_val.14
                                                  case idr_Prelude.Chars.isSpace4_val_40.14 of
                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.14) ->
                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.14 of
                                                        0 ->
                                                          idr_Prelude.Chars.isSpace5_val_42.14 <- pure (CGrInt 12)
                                                          idr_Prelude.Chars.isSpace5.14 <- store idr_Prelude.Chars.isSpace5_val_42.14
                                                          (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.14) <- pure idr_Prelude.Chars.isSpace5_val_42.14
                                                          (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.14) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq0.49.arity.1.4.14 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.14
                                                          idris_int_eq1.41.arity.1.4.14 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.14
                                                          (CGrInt idris_int_eq0_1.4.14) <- pure (CGrInt idris_int_eq0.49.arity.1.4.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          (CGrInt idris_int_eq1_1.4.14) <- pure (CGrInt idris_int_eq1.41.arity.1.4.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq2.4.14 <- _prim_int_eq idris_int_eq0_1.4.14 idris_int_eq1_1.4.14
                                                          ccp.0.4.14 <- case idris_int_eq2.4.14 of
                                                            #False ->
                                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.14
                                                            #True ->
                                                              pure 1
                                                          unboxed.CGrInt.8.14 <- pure ccp.0.4.14
                                                          idr_Prelude.Chars.isSpace5_val.14 <- pure (CGrInt unboxed.CGrInt.8.14)
                                                          idr_Prelude.Chars.isSpace5_43.14 <- store idr_Prelude.Chars.isSpace5_val.14
                                                          idr_Prelude.Chars.isSpace5_val_44.14 <- pure idr_Prelude.Chars.isSpace5_val.14
                                                          case idr_Prelude.Chars.isSpace5_val_44.14 of
                                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.14) ->
                                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.14 of
                                                                0 ->
                                                                  idr_Prelude.Chars.isSpace6_val_46.14 <- pure (CGrInt 11)
                                                                  idr_Prelude.Chars.isSpace6.14 <- store idr_Prelude.Chars.isSpace6_val_46.14
                                                                  (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.14) <- pure idr_Prelude.Chars.isSpace6_val_46.14
                                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.14) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  idris_int_eq0.49.arity.1.5.14 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.14
                                                                  idris_int_eq1.41.arity.1.5.14 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.14
                                                                  (CGrInt idris_int_eq0_1.5.14) <- pure (CGrInt idris_int_eq0.49.arity.1.5.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  (CGrInt idris_int_eq1_1.5.14) <- pure (CGrInt idris_int_eq1.41.arity.1.5.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  idris_int_eq2.5.14 <- _prim_int_eq idris_int_eq0_1.5.14 idris_int_eq1_1.5.14
                                                                  ccp.0.5.14 <- case idris_int_eq2.5.14 of
                                                                    #False ->
                                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.14
                                                                    #True ->
                                                                      pure 1
                                                                  unboxed.CGrInt.9.14 <- pure ccp.0.5.14
                                                                  idr_Prelude.Chars.isSpace6_val.14 <- pure (CGrInt unboxed.CGrInt.9.14)
                                                                  idr_Prelude.Chars.isSpace6_47.14 <- store idr_Prelude.Chars.isSpace6_val.14
                                                                  idr_Prelude.Chars.isSpace6_val_48.14 <- pure idr_Prelude.Chars.isSpace6_val.14
                                                                  case idr_Prelude.Chars.isSpace6_val_48.14 of
                                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.14) ->
                                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.14 of
                                                                        0 ->
                                                                          idr_Prelude.Chars.isSpace7_val_50.14 <- pure (CGrInt 160)
                                                                          idr_Prelude.Chars.isSpace7.14 <- store idr_Prelude.Chars.isSpace7_val_50.14
                                                                          (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.14) <- pure idr_Prelude.Chars.isSpace7_val_50.14
                                                                          (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.14) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                          idris_int_eq0.49.arity.1.6.14 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.14
                                                                          idris_int_eq1.41.arity.1.6.14 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.14
                                                                          (CGrInt idris_int_eq0_1.6.14) <- pure (CGrInt idris_int_eq0.49.arity.1.6.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                          (CGrInt idris_int_eq1_1.6.14) <- pure (CGrInt idris_int_eq1.41.arity.1.6.14) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                          idris_int_eq2.6.14 <- _prim_int_eq idris_int_eq0_1.6.14 idris_int_eq1_1.6.14
                                                                          ccp.0.6.14 <- case idris_int_eq2.6.14 of
                                                                            #False ->
                                                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.14
                                                                            #True ->
                                                                              pure 1
                                                                          unboxed.CGrInt.10.14 <- pure ccp.0.6.14
                                                                          idr_Prelude.Chars.isSpace7_val.14 <- pure (CGrInt unboxed.CGrInt.10.14)
                                                                          idr_Prelude.Chars.isSpace7_51.14 <- store idr_Prelude.Chars.isSpace7_val.14
                                                                          idr_Prelude.Chars.isSpace7_val_52.14 <- pure idr_Prelude.Chars.isSpace7_val.14
                                                                          case idr_Prelude.Chars.isSpace7_val_52.14 of
                                                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.14) ->
                                                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.14 of
                                                                                0 ->
                                                                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                                #default ->
                                                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                        #default ->
                                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                #default ->
                                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                        #default ->
                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                #default ->
                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                        #default ->
                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                          idr_Prelude.Strings.trim8_1261.0 <- store idr_Prelude.Strings.trim8_val_1254.0
                          idr_Prelude.Strings.trim8_val_1262.0 <- pure idr_Prelude.Strings.trim8_val_1254.0
                          case idr_Prelude.Strings.trim8_val_1262.0 of
                            (Cidr_Prelude.Bool.False) ->
                              (CGrString idr_Prelude.Strings.trim0.41.166.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.74 <- pure idr_Prelude.Strings.trim0.41.166.arity.1.0
                              (CGrString idris_str_rev1_0.74) <- pure (CGrString idris_str_rev1.41.arity.1.74) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.74 <- _prim_string_reverse idris_str_rev1_0.74
                              unboxed.CGrString.194.0 <- pure idris_str_rev2.74
                              idr_Prelude.Strings.trim9_val_1265.0 <- pure (CGrString unboxed.CGrString.194.0)
                              idr_Prelude.Strings.trim9_1266.0 <- store idr_Prelude.Strings.trim9_val_1265.0
                              idris_str_tail1.98 <- pure idr_Prelude.Strings.trim9_1266.0
                              (CGrString idris_str_tail1_0.98) <- fetch idris_str_tail1.98
                              idris_str_tail2.98 <- _prim_string_tail idris_str_tail1_0.98
                              unboxed.CGrString.195.0 <- pure idris_str_tail2.98
                              idr_Prelude.Strings.trim9_val_1264.0 <- pure (CGrString unboxed.CGrString.195.0)
                              idr_Prelude.Strings.trim9_1267.0 <- store idr_Prelude.Strings.trim9_val_1264.0
                              idris_str_head1.34 <- pure idr_Prelude.Strings.trim9_1267.0
                              (CGrString idris_str_head1_0.34) <- fetch idris_str_head1.34
                              idris_str_head2.34 <- _prim_string_head idris_str_head1_0.34
                              unboxed.CGrInt.83.0 <- pure idris_str_head2.34
                              idr_Prelude.Strings.trim9_val_1263.0 <- pure (CGrInt unboxed.CGrInt.83.0)
                              idr_Prelude.Strings.trim9_1268.0 <- store idr_Prelude.Strings.trim9_val_1263.0
                              (CGrString idr_Prelude.Strings.trim0.41.167.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.75 <- pure idr_Prelude.Strings.trim0.41.167.arity.1.0
                              (CGrString idris_str_rev1_0.75) <- pure (CGrString idris_str_rev1.41.arity.1.75) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.75 <- _prim_string_reverse idris_str_rev1_0.75
                              unboxed.CGrString.196.0 <- pure idris_str_rev2.75
                              idr_Prelude.Strings.trim10_val_1271.0 <- pure (CGrString unboxed.CGrString.196.0)
                              idr_Prelude.Strings.trim10_1272.0 <- store idr_Prelude.Strings.trim10_val_1271.0
                              idris_str_tail1.99 <- pure idr_Prelude.Strings.trim10_1272.0
                              (CGrString idris_str_tail1_0.99) <- fetch idris_str_tail1.99
                              idris_str_tail2.99 <- _prim_string_tail idris_str_tail1_0.99
                              unboxed.CGrString.197.0 <- pure idris_str_tail2.99
                              idr_Prelude.Strings.trim10_val_1270.0 <- pure (CGrString unboxed.CGrString.197.0)
                              idr_Prelude.Strings.trim10_1273.0 <- store idr_Prelude.Strings.trim10_val_1270.0
                              idris_str_tail1.100 <- pure idr_Prelude.Strings.trim10_1273.0
                              (CGrString idris_str_tail1_0.100) <- fetch idris_str_tail1.100
                              idris_str_tail2.100 <- _prim_string_tail idris_str_tail1_0.100
                              unboxed.CGrString.198.0 <- pure idris_str_tail2.100
                              idr_Prelude.Strings.trim10_val_1269.0 <- pure (CGrString unboxed.CGrString.198.0)
                              idr_Prelude.Strings.trim10_1274.0 <- store idr_Prelude.Strings.trim10_val_1269.0
                              (CGrInt idr_Prelude.Strings.trim9_1268.41.168.arity.1.0) <- pure idr_Prelude.Strings.trim9_val_1263.0
                              (CGrString idr_Prelude.Strings.trim10_1274.49.40.arity.1.0) <- pure idr_Prelude.Strings.trim10_val_1269.0
                              idris_str_cons1.41.arity.1.14 <- pure idr_Prelude.Strings.trim9_1268.41.168.arity.1.0
                              idris_str_cons2.49.arity.1.14 <- pure idr_Prelude.Strings.trim10_1274.49.40.arity.1.0
                              (CGrInt idris_str_cons1_0.14) <- pure (CGrInt idris_str_cons1.41.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrString idris_str_cons2_0.14) <- pure (CGrString idris_str_cons2.49.arity.1.14) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_cons3.14 <- _prim_string_cons idris_str_cons1_0.14 idris_str_cons2_0.14
                              unboxed.CGrString.279.0 <- pure idris_str_cons3.14
                              pure (CGrString unboxed.CGrString.279.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.279.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.100) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.99) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.34) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.98)
                            (Cidr_Prelude.Bool.True) ->
                              (CGrString idr_Prelude.Strings.trim0.41.169.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.76 <- pure idr_Prelude.Strings.trim0.41.169.arity.1.0
                              (CGrString idris_str_rev1_0.76) <- pure (CGrString idris_str_rev1.41.arity.1.76) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.76 <- _prim_string_reverse idris_str_rev1_0.76
                              unboxed.CGrString.199.0 <- pure idris_str_rev2.76
                              idr_Prelude.Strings.trim10_val_1283.0 <- pure (CGrString unboxed.CGrString.199.0)
                              idr_Prelude.Strings.trim10_1284.0 <- store idr_Prelude.Strings.trim10_val_1283.0
                              idris_str_tail1.101 <- pure idr_Prelude.Strings.trim10_1284.0
                              (CGrString idris_str_tail1_0.101) <- fetch idris_str_tail1.101
                              idris_str_tail2.101 <- _prim_string_tail idris_str_tail1_0.101
                              unboxed.CGrString.200.0 <- pure idris_str_tail2.101
                              idr_Prelude.Strings.trim10_val_1282.0 <- pure (CGrString unboxed.CGrString.200.0)
                              idr_Prelude.Strings.trim10_1285.0 <- store idr_Prelude.Strings.trim10_val_1282.0
                              idris_str_tail1.102 <- pure idr_Prelude.Strings.trim10_1285.0
                              (CGrString idris_str_tail1_0.102) <- fetch idris_str_tail1.102
                              idris_str_tail2.102 <- _prim_string_tail idris_str_tail1_0.102
                              unboxed.CGrString.201.0 <- pure idris_str_tail2.102
                              idr_Prelude.Strings.trim10_val_1281.0 <- pure (CGrString unboxed.CGrString.201.0)
                              idr_Prelude.Strings.trim10_1286.0 <- store idr_Prelude.Strings.trim10_val_1281.0
                              idr_Prelude.Strings.trim11_val_1287.0 <- pure idr_Prelude.Strings.trim2_val.0
                              idr_Prelude.Strings.trim11_1288.0 <- store idr_Prelude.Strings.trim11_val_1287.0
                              (CGrString idr_Prelude.Strings.trim11_1288.41.170.arity.1.0) <- pure idr_Prelude.Strings.trim11_val_1287.0
                              idris_str_eq1.21 <- pure idr_Prelude.Strings.trim10_1286.0
                              idris_str_eq2.41.arity.1.21 <- pure idr_Prelude.Strings.trim11_1288.41.170.arity.1.0
                              (CGrString idris_str_eq1_0.21) <- fetch idris_str_eq1.21
                              (CGrString idris_str_eq2_0.21) <- pure (CGrString idris_str_eq2.41.arity.1.21) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_eq3.21 <- _prim_string_eq idris_str_eq1_0.21 idris_str_eq2_0.21
                              ccp.2.21 <- case idris_str_eq3.21 of
                                #False ->
                                  pure 0
                                #True ->
                                  pure 1
                              unboxed.CGrInt.84.0 <- pure ccp.2.21
                              idr_Prelude.Strings.trim10_val_1280.0 <- pure (CGrInt unboxed.CGrInt.84.0)
                              idr_Prelude.Strings.trim10_1289.0 <- store idr_Prelude.Strings.trim10_val_1280.0
                              idr_Prelude.Strings.trim10_val_1290.0 <- pure idr_Prelude.Strings.trim10_val_1280.0
                              idr_Prelude.Strings.trim10_val_1279.0 <- case idr_Prelude.Strings.trim10_val_1290.0 of
                                (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1291.0) ->
                                  case idr_Prelude.Strings.trim_cpat_LInt64_0_1291.0 of
                                    0 ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                              idr_Prelude.Strings.trim10_1292.0 <- store idr_Prelude.Strings.trim10_val_1279.0
                              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.21" <- pure idr_Prelude.Strings.trim10_1292.0
                              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.21" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                              idr_Prelude.Strings.trim10_val_1278.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.21" of
                                (Cidr_Prelude.Bool.True) ->
                                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.21" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.21"
                                  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.21" of
                                    (Cidr_Prelude.Bool.False) ->
                                      pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                                    (Cidr_Prelude.Bool.True) ->
                                      pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                              idr_Prelude.Strings.trim10_1295.0 <- store idr_Prelude.Strings.trim10_val_1278.0
                              idr_Prelude.Strings.trim10_val_1296.0 <- pure idr_Prelude.Strings.trim10_val_1278.0
                              idr_Prelude.Strings.trim10_val_1277.0 <- case idr_Prelude.Strings.trim10_val_1296.0 of
                                (Cidr_Prelude.Basics.No) ->
                                  pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                                (Cidr_Prelude.Basics.Yes) ->
                                  (CGrString idr_Prelude.Strings.trim0.41.172.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev1.41.arity.1.77 <- pure idr_Prelude.Strings.trim0.41.172.arity.1.0
                                  (CGrString idris_str_rev1_0.77) <- pure (CGrString idris_str_rev1.41.arity.1.77) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev2.77 <- _prim_string_reverse idris_str_rev1_0.77
                                  unboxed.CGrString.202.0 <- pure idris_str_rev2.77
                                  idr_Prelude.Strings.trim11_val_1300.0 <- pure (CGrString unboxed.CGrString.202.0)
                                  idr_Prelude.Strings.trim11_1301.0 <- store idr_Prelude.Strings.trim11_val_1300.0
                                  idris_str_tail1.103 <- pure idr_Prelude.Strings.trim11_1301.0
                                  (CGrString idris_str_tail1_0.103) <- fetch idris_str_tail1.103
                                  idris_str_tail2.103 <- _prim_string_tail idris_str_tail1_0.103
                                  unboxed.CGrString.203.0 <- pure idris_str_tail2.103
                                  idr_Prelude.Strings.trim11_val_1299.0 <- pure (CGrString unboxed.CGrString.203.0)
                                  idr_Prelude.Strings.trim11_1302.0 <- store idr_Prelude.Strings.trim11_val_1299.0
                                  idris_str_tail1.104 <- pure idr_Prelude.Strings.trim11_1302.0
                                  (CGrString idris_str_tail1_0.104) <- fetch idris_str_tail1.104
                                  idris_str_tail2.104 <- _prim_string_tail idris_str_tail1_0.104
                                  unboxed.CGrString.204.0 <- pure idris_str_tail2.104
                                  idr_Prelude.Strings.trim11_val_1298.0 <- pure (CGrString unboxed.CGrString.204.0)
                                  idr_Prelude.Strings.trim11_1303.0 <- store idr_Prelude.Strings.trim11_val_1298.0
                                  idris_str_head1.35 <- pure idr_Prelude.Strings.trim11_1303.0
                                  (CGrString idris_str_head1_0.35) <- fetch idris_str_head1.35
                                  idris_str_head2.35 <- _prim_string_head idris_str_head1_0.35
                                  unboxed.CGrInt.85.0 <- pure idris_str_head2.35
                                  idr_Prelude.Strings.trim11_val_1297.0 <- pure (CGrInt unboxed.CGrInt.85.0)
                                  idr_Prelude.Strings.trim11_1304.0 <- store idr_Prelude.Strings.trim11_val_1297.0
                                  (CGrString idr_Prelude.Strings.trim0.41.173.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev1.41.arity.1.78 <- pure idr_Prelude.Strings.trim0.41.173.arity.1.0
                                  (CGrString idris_str_rev1_0.78) <- pure (CGrString idris_str_rev1.41.arity.1.78) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev2.78 <- _prim_string_reverse idris_str_rev1_0.78
                                  unboxed.CGrString.205.0 <- pure idris_str_rev2.78
                                  idr_Prelude.Strings.trim12_val_1308.0 <- pure (CGrString unboxed.CGrString.205.0)
                                  idr_Prelude.Strings.trim12_1309.0 <- store idr_Prelude.Strings.trim12_val_1308.0
                                  idris_str_tail1.105 <- pure idr_Prelude.Strings.trim12_1309.0
                                  (CGrString idris_str_tail1_0.105) <- fetch idris_str_tail1.105
                                  idris_str_tail2.105 <- _prim_string_tail idris_str_tail1_0.105
                                  unboxed.CGrString.206.0 <- pure idris_str_tail2.105
                                  idr_Prelude.Strings.trim12_val_1307.0 <- pure (CGrString unboxed.CGrString.206.0)
                                  idr_Prelude.Strings.trim12_1310.0 <- store idr_Prelude.Strings.trim12_val_1307.0
                                  idris_str_tail1.106 <- pure idr_Prelude.Strings.trim12_1310.0
                                  (CGrString idris_str_tail1_0.106) <- fetch idris_str_tail1.106
                                  idris_str_tail2.106 <- _prim_string_tail idris_str_tail1_0.106
                                  unboxed.CGrString.207.0 <- pure idris_str_tail2.106
                                  idr_Prelude.Strings.trim12_val_1306.0 <- pure (CGrString unboxed.CGrString.207.0)
                                  idr_Prelude.Strings.trim12_1311.0 <- store idr_Prelude.Strings.trim12_val_1306.0
                                  idris_str_tail1.107 <- pure idr_Prelude.Strings.trim12_1311.0
                                  (CGrString idris_str_tail1_0.107) <- fetch idris_str_tail1.107
                                  idris_str_tail2.107 <- _prim_string_tail idris_str_tail1_0.107
                                  unboxed.CGrString.208.0 <- pure idris_str_tail2.107
                                  idr_Prelude.Strings.trim12_val_1305.0 <- pure (CGrString unboxed.CGrString.208.0)
                                  idr_Prelude.Strings.trim12_1312.0 <- store idr_Prelude.Strings.trim12_val_1305.0
                                  pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim11_1304.0 idr_Prelude.Strings.trim12_1312.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim11_1304.0 idr_Prelude.Strings.trim12_1312.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.107) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.106) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.105) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.35) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.104) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.103)
                              idr_Prelude.Strings.trim10_1313.0 <- store idr_Prelude.Strings.trim10_val_1277.0
                              unboxed.CGrString.209.0 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim10_1313.0
                              pure (CGrString unboxed.CGrString.209.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.209.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.21) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.102) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.101) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.33) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.97) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.20) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.96) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.31)
              idr_Prelude.Strings.trim5_1314.0 <- store idr_Prelude.Strings.trim5_val_1206.0
              (CGrString idr_Prelude.Strings.trim5_1314.41.174.arity.1.0) <- pure idr_Prelude.Strings.trim5_val_1206.0
              idris_str_rev1.41.arity.1.79 <- pure idr_Prelude.Strings.trim5_1314.41.174.arity.1.0
              (CGrString idris_str_rev1_0.79) <- pure (CGrString idris_str_rev1.41.arity.1.79) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.79 <- _prim_string_reverse idris_str_rev1_0.79
              unboxed.CGrString.210.0 <- pure idris_str_rev2.79
              idr_Prelude.Strings.trim5_val_1205.0 <- pure (CGrString unboxed.CGrString.210.0)
              idr_Prelude.Strings.trim5_1315.0 <- store idr_Prelude.Strings.trim5_val_1205.0
              idris_str_tail1.108 <- pure idr_Prelude.Strings.trim5_1315.0
              (CGrString idris_str_tail1_0.108) <- fetch idris_str_tail1.108
              idris_str_tail2.108 <- _prim_string_tail idris_str_tail1_0.108
              unboxed.CGrString.211.0 <- pure idris_str_tail2.108
              idr_Prelude.Strings.trim5_val_1204.0 <- pure (CGrString unboxed.CGrString.211.0)
              idr_Prelude.Strings.trim5_1316.0 <- store idr_Prelude.Strings.trim5_val_1204.0
              idris_str_head1.36 <- pure idr_Prelude.Strings.trim5_1316.0
              (CGrString idris_str_head1_0.36) <- fetch idris_str_head1.36
              idris_str_head2.36 <- _prim_string_head idris_str_head1_0.36
              unboxed.CGrInt.86.0 <- pure idris_str_head2.36
              idr_Prelude.Strings.trim5_val_1203.0 <- pure (CGrInt unboxed.CGrInt.86.0)
              idr_Prelude.Strings.trim5_1317.0 <- store idr_Prelude.Strings.trim5_val_1203.0
              (CGrString idr_Prelude.Strings.trim0.41.175.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev1.41.arity.1.80 <- pure idr_Prelude.Strings.trim0.41.175.arity.1.0
              (CGrString idris_str_rev1_0.80) <- pure (CGrString idris_str_rev1.41.arity.1.80) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.80 <- _prim_string_reverse idris_str_rev1_0.80
              unboxed.CGrString.212.0 <- pure idris_str_rev2.80
              idr_Prelude.Strings.trim6_val_1325.0 <- pure (CGrString unboxed.CGrString.212.0)
              idr_Prelude.Strings.trim6_1326.0 <- store idr_Prelude.Strings.trim6_val_1325.0
              idr_Prelude.Strings.trim7_val_1327.0 <- pure idr_Prelude.Strings.trim2_val.0
              idr_Prelude.Strings.trim7_1328.0 <- store idr_Prelude.Strings.trim7_val_1327.0
              (CGrString idr_Prelude.Strings.trim7_1328.41.176.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_1327.0
              idris_str_eq1.22 <- pure idr_Prelude.Strings.trim6_1326.0
              idris_str_eq2.41.arity.1.22 <- pure idr_Prelude.Strings.trim7_1328.41.176.arity.1.0
              (CGrString idris_str_eq1_0.22) <- fetch idris_str_eq1.22
              (CGrString idris_str_eq2_0.22) <- pure (CGrString idris_str_eq2.41.arity.1.22) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_eq3.22 <- _prim_string_eq idris_str_eq1_0.22 idris_str_eq2_0.22
              ccp.2.22 <- case idris_str_eq3.22 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              unboxed.CGrInt.87.0 <- pure ccp.2.22
              idr_Prelude.Strings.trim6_val_1324.0 <- pure (CGrInt unboxed.CGrInt.87.0)
              idr_Prelude.Strings.trim6_1329.0 <- store idr_Prelude.Strings.trim6_val_1324.0
              idr_Prelude.Strings.trim6_val_1330.0 <- pure idr_Prelude.Strings.trim6_val_1324.0
              idr_Prelude.Strings.trim6_val_1323.0 <- case idr_Prelude.Strings.trim6_val_1330.0 of
                (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1331.0) ->
                  case idr_Prelude.Strings.trim_cpat_LInt64_0_1331.0 of
                    0 ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              idr_Prelude.Strings.trim6_1332.0 <- store idr_Prelude.Strings.trim6_val_1323.0
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.22" <- pure idr_Prelude.Strings.trim6_1332.0
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.22" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
              idr_Prelude.Strings.trim6_val_1322.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.22" of
                (Cidr_Prelude.Bool.True) ->
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.22" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.22"
                  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.22" of
                    (Cidr_Prelude.Bool.False) ->
                      pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                    (Cidr_Prelude.Bool.True) ->
                      pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
              idr_Prelude.Strings.trim6_1335.0 <- store idr_Prelude.Strings.trim6_val_1322.0
              idr_Prelude.Strings.trim6_val_1336.0 <- pure idr_Prelude.Strings.trim6_val_1322.0
              idr_Prelude.Strings.trim6_val_1321.0 <- case idr_Prelude.Strings.trim6_val_1336.0 of
                (Cidr_Prelude.Basics.No) ->
                  pure idr_Prelude.Strings.trim2_val.0
                (Cidr_Prelude.Basics.Yes) ->
                  (CGrString idr_Prelude.Strings.trim0.41.178.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev1.41.arity.1.81 <- pure idr_Prelude.Strings.trim0.41.178.arity.1.0
                  (CGrString idris_str_rev1_0.81) <- pure (CGrString idris_str_rev1.41.arity.1.81) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_rev2.81 <- _prim_string_reverse idris_str_rev1_0.81
                  unboxed.CGrString.213.0 <- pure idris_str_rev2.81
                  idr_Prelude.Strings.trim7_val_1339.0 <- pure (CGrString unboxed.CGrString.213.0)
                  idr_Prelude.Strings.trim7_1340.0 <- store idr_Prelude.Strings.trim7_val_1339.0
                  idris_str_head1.37 <- pure idr_Prelude.Strings.trim7_1340.0
                  (CGrString idris_str_head1_0.37) <- fetch idris_str_head1.37
                  idris_str_head2.37 <- _prim_string_head idris_str_head1_0.37
                  unboxed.CGrInt.88.0 <- pure idris_str_head2.37
                  idr_Prelude.Strings.trim7_val_1338.0 <- pure (CGrInt unboxed.CGrInt.88.0)
                  idr_Prelude.Strings.trim7_1341.0 <- store idr_Prelude.Strings.trim7_val_1338.0
                  (CGrInt idr_Prelude.Strings.trim7_1341.57.24.arity.1.0) <- pure idr_Prelude.Strings.trim7_val_1338.0
                  idr_Prelude.Chars.isSpace0.57.arity.1.15 <- pure idr_Prelude.Strings.trim7_1341.57.24.arity.1.0
                  idr_Prelude.Chars.isSpace1_val_27.15 <- pure idr_Prelude.Chars.isSpace1_val_27.6
                  idr_Prelude.Chars.isSpace1.15 <- store idr_Prelude.Chars.isSpace1_val_27.15
                  (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.15) <- pure idr_Prelude.Chars.isSpace1_val_27.15
                  (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.15) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_eq0.49.arity.1.0.15 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.15
                  idris_int_eq1.41.arity.1.0.15 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.15
                  (CGrInt idris_int_eq0_1.0.15) <- pure (CGrInt idris_int_eq0.49.arity.1.0.15) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_eq1_1.0.15) <- pure (CGrInt idris_int_eq1.41.arity.1.0.15) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_eq2.0.15 <- _prim_int_eq idris_int_eq0_1.0.15 idris_int_eq1_1.0.15
                  ccp.0.0.15 <- case idris_int_eq2.0.15 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  unboxed.CGrInt.4.15 <- pure ccp.0.0.15
                  idr_Prelude.Chars.isSpace1_val.15 <- pure (CGrInt unboxed.CGrInt.4.15)
                  idr_Prelude.Chars.isSpace1_28.15 <- store idr_Prelude.Chars.isSpace1_val.15
                  idr_Prelude.Chars.isSpace1_val_29.15 <- pure idr_Prelude.Chars.isSpace1_val.15
                  idr_Prelude.Strings.trim7_val_1337.0 <- case idr_Prelude.Chars.isSpace1_val_29.15 of
                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.15) ->
                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0.15 of
                        0 ->
                          idr_Prelude.Chars.isSpace2_val_30.15 <- pure (CGrInt 9)
                          idr_Prelude.Chars.isSpace2.15 <- store idr_Prelude.Chars.isSpace2_val_30.15
                          (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.15) <- pure idr_Prelude.Chars.isSpace2_val_30.15
                          (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.15) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq0.49.arity.1.1.15 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.15
                          idris_int_eq1.41.arity.1.1.15 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.15
                          (CGrInt idris_int_eq0_1.1.15) <- pure (CGrInt idris_int_eq0.49.arity.1.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrInt idris_int_eq1_1.1.15) <- pure (CGrInt idris_int_eq1.41.arity.1.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq2.1.15 <- _prim_int_eq idris_int_eq0_1.1.15 idris_int_eq1_1.1.15
                          ccp.0.1.15 <- case idris_int_eq2.1.15 of
                            #False ->
                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.15
                            #True ->
                              pure 1
                          unboxed.CGrInt.5.15 <- pure ccp.0.1.15
                          idr_Prelude.Chars.isSpace2_val.15 <- pure (CGrInt unboxed.CGrInt.5.15)
                          idr_Prelude.Chars.isSpace2_31.15 <- store idr_Prelude.Chars.isSpace2_val.15
                          idr_Prelude.Chars.isSpace2_val_32.15 <- pure idr_Prelude.Chars.isSpace2_val.15
                          case idr_Prelude.Chars.isSpace2_val_32.15 of
                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.15) ->
                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.15 of
                                0 ->
                                  idr_Prelude.Chars.isSpace3_val_34.15 <- pure (CGrInt 13)
                                  idr_Prelude.Chars.isSpace3.15 <- store idr_Prelude.Chars.isSpace3_val_34.15
                                  (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.15) <- pure idr_Prelude.Chars.isSpace3_val_34.15
                                  (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.15) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq0.49.arity.1.2.15 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.15
                                  idris_int_eq1.41.arity.1.2.15 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.15
                                  (CGrInt idris_int_eq0_1.2.15) <- pure (CGrInt idris_int_eq0.49.arity.1.2.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                  (CGrInt idris_int_eq1_1.2.15) <- pure (CGrInt idris_int_eq1.41.arity.1.2.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq2.2.15 <- _prim_int_eq idris_int_eq0_1.2.15 idris_int_eq1_1.2.15
                                  ccp.0.2.15 <- case idris_int_eq2.2.15 of
                                    #False ->
                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.15
                                    #True ->
                                      pure 1
                                  unboxed.CGrInt.6.15 <- pure ccp.0.2.15
                                  idr_Prelude.Chars.isSpace3_val.15 <- pure (CGrInt unboxed.CGrInt.6.15)
                                  idr_Prelude.Chars.isSpace3_35.15 <- store idr_Prelude.Chars.isSpace3_val.15
                                  idr_Prelude.Chars.isSpace3_val_36.15 <- pure idr_Prelude.Chars.isSpace3_val.15
                                  case idr_Prelude.Chars.isSpace3_val_36.15 of
                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.15) ->
                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.15 of
                                        0 ->
                                          idr_Prelude.Chars.isSpace4_val_38.15 <- pure (CGrInt 10)
                                          idr_Prelude.Chars.isSpace4.15 <- store idr_Prelude.Chars.isSpace4_val_38.15
                                          (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.15) <- pure idr_Prelude.Chars.isSpace4_val_38.15
                                          (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.15) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq0.49.arity.1.3.15 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.15
                                          idris_int_eq1.41.arity.1.3.15 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.15
                                          (CGrInt idris_int_eq0_1.3.15) <- pure (CGrInt idris_int_eq0.49.arity.1.3.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                          (CGrInt idris_int_eq1_1.3.15) <- pure (CGrInt idris_int_eq1.41.arity.1.3.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq2.3.15 <- _prim_int_eq idris_int_eq0_1.3.15 idris_int_eq1_1.3.15
                                          ccp.0.3.15 <- case idris_int_eq2.3.15 of
                                            #False ->
                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.15
                                            #True ->
                                              pure 1
                                          unboxed.CGrInt.7.15 <- pure ccp.0.3.15
                                          idr_Prelude.Chars.isSpace4_val.15 <- pure (CGrInt unboxed.CGrInt.7.15)
                                          idr_Prelude.Chars.isSpace4_39.15 <- store idr_Prelude.Chars.isSpace4_val.15
                                          idr_Prelude.Chars.isSpace4_val_40.15 <- pure idr_Prelude.Chars.isSpace4_val.15
                                          case idr_Prelude.Chars.isSpace4_val_40.15 of
                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.15) ->
                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.15 of
                                                0 ->
                                                  idr_Prelude.Chars.isSpace5_val_42.15 <- pure (CGrInt 12)
                                                  idr_Prelude.Chars.isSpace5.15 <- store idr_Prelude.Chars.isSpace5_val_42.15
                                                  (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.15) <- pure idr_Prelude.Chars.isSpace5_val_42.15
                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.15) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq0.49.arity.1.4.15 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.15
                                                  idris_int_eq1.41.arity.1.4.15 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.15
                                                  (CGrInt idris_int_eq0_1.4.15) <- pure (CGrInt idris_int_eq0.49.arity.1.4.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  (CGrInt idris_int_eq1_1.4.15) <- pure (CGrInt idris_int_eq1.41.arity.1.4.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq2.4.15 <- _prim_int_eq idris_int_eq0_1.4.15 idris_int_eq1_1.4.15
                                                  ccp.0.4.15 <- case idris_int_eq2.4.15 of
                                                    #False ->
                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.15
                                                    #True ->
                                                      pure 1
                                                  unboxed.CGrInt.8.15 <- pure ccp.0.4.15
                                                  idr_Prelude.Chars.isSpace5_val.15 <- pure (CGrInt unboxed.CGrInt.8.15)
                                                  idr_Prelude.Chars.isSpace5_43.15 <- store idr_Prelude.Chars.isSpace5_val.15
                                                  idr_Prelude.Chars.isSpace5_val_44.15 <- pure idr_Prelude.Chars.isSpace5_val.15
                                                  case idr_Prelude.Chars.isSpace5_val_44.15 of
                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.15) ->
                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.15 of
                                                        0 ->
                                                          idr_Prelude.Chars.isSpace6_val_46.15 <- pure (CGrInt 11)
                                                          idr_Prelude.Chars.isSpace6.15 <- store idr_Prelude.Chars.isSpace6_val_46.15
                                                          (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.15) <- pure idr_Prelude.Chars.isSpace6_val_46.15
                                                          (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.15) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq0.49.arity.1.5.15 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.15
                                                          idris_int_eq1.41.arity.1.5.15 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.15
                                                          (CGrInt idris_int_eq0_1.5.15) <- pure (CGrInt idris_int_eq0.49.arity.1.5.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          (CGrInt idris_int_eq1_1.5.15) <- pure (CGrInt idris_int_eq1.41.arity.1.5.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq2.5.15 <- _prim_int_eq idris_int_eq0_1.5.15 idris_int_eq1_1.5.15
                                                          ccp.0.5.15 <- case idris_int_eq2.5.15 of
                                                            #False ->
                                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.15
                                                            #True ->
                                                              pure 1
                                                          unboxed.CGrInt.9.15 <- pure ccp.0.5.15
                                                          idr_Prelude.Chars.isSpace6_val.15 <- pure (CGrInt unboxed.CGrInt.9.15)
                                                          idr_Prelude.Chars.isSpace6_47.15 <- store idr_Prelude.Chars.isSpace6_val.15
                                                          idr_Prelude.Chars.isSpace6_val_48.15 <- pure idr_Prelude.Chars.isSpace6_val.15
                                                          case idr_Prelude.Chars.isSpace6_val_48.15 of
                                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.15) ->
                                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.15 of
                                                                0 ->
                                                                  idr_Prelude.Chars.isSpace7_val_50.15 <- pure (CGrInt 160)
                                                                  idr_Prelude.Chars.isSpace7.15 <- store idr_Prelude.Chars.isSpace7_val_50.15
                                                                  (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.15) <- pure idr_Prelude.Chars.isSpace7_val_50.15
                                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.15) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  idris_int_eq0.49.arity.1.6.15 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.15
                                                                  idris_int_eq1.41.arity.1.6.15 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.15
                                                                  (CGrInt idris_int_eq0_1.6.15) <- pure (CGrInt idris_int_eq0.49.arity.1.6.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  (CGrInt idris_int_eq1_1.6.15) <- pure (CGrInt idris_int_eq1.41.arity.1.6.15) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  idris_int_eq2.6.15 <- _prim_int_eq idris_int_eq0_1.6.15 idris_int_eq1_1.6.15
                                                                  ccp.0.6.15 <- case idris_int_eq2.6.15 of
                                                                    #False ->
                                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.15
                                                                    #True ->
                                                                      pure 1
                                                                  unboxed.CGrInt.10.15 <- pure ccp.0.6.15
                                                                  idr_Prelude.Chars.isSpace7_val.15 <- pure (CGrInt unboxed.CGrInt.10.15)
                                                                  idr_Prelude.Chars.isSpace7_51.15 <- store idr_Prelude.Chars.isSpace7_val.15
                                                                  idr_Prelude.Chars.isSpace7_val_52.15 <- pure idr_Prelude.Chars.isSpace7_val.15
                                                                  case idr_Prelude.Chars.isSpace7_val_52.15 of
                                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.15) ->
                                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.15 of
                                                                        0 ->
                                                                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                        #default ->
                                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                #default ->
                                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                        #default ->
                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                #default ->
                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                        #default ->
                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                        #default ->
                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                  idr_Prelude.Strings.trim7_1342.0 <- store idr_Prelude.Strings.trim7_val_1337.0
                  idr_Prelude.Strings.trim7_val_1343.0 <- pure idr_Prelude.Strings.trim7_val_1337.0
                  case idr_Prelude.Strings.trim7_val_1343.0 of
                    (Cidr_Prelude.Bool.False) ->
                      (CGrString idr_Prelude.Strings.trim0.41.179.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.82 <- pure idr_Prelude.Strings.trim0.41.179.arity.1.0
                      (CGrString idris_str_rev1_0.82) <- pure (CGrString idris_str_rev1.41.arity.1.82) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.82 <- _prim_string_reverse idris_str_rev1_0.82
                      unboxed.CGrString.214.0 <- pure idris_str_rev2.82
                      idr_Prelude.Strings.trim8_val_1345.0 <- pure (CGrString unboxed.CGrString.214.0)
                      idr_Prelude.Strings.trim8_1346.0 <- store idr_Prelude.Strings.trim8_val_1345.0
                      idris_str_head1.38 <- pure idr_Prelude.Strings.trim8_1346.0
                      (CGrString idris_str_head1_0.38) <- fetch idris_str_head1.38
                      idris_str_head2.38 <- _prim_string_head idris_str_head1_0.38
                      unboxed.CGrInt.89.0 <- pure idris_str_head2.38
                      idr_Prelude.Strings.trim8_val_1344.0 <- pure (CGrInt unboxed.CGrInt.89.0)
                      idr_Prelude.Strings.trim8_1347.0 <- store idr_Prelude.Strings.trim8_val_1344.0
                      (CGrString idr_Prelude.Strings.trim0.41.180.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.83 <- pure idr_Prelude.Strings.trim0.41.180.arity.1.0
                      (CGrString idris_str_rev1_0.83) <- pure (CGrString idris_str_rev1.41.arity.1.83) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.83 <- _prim_string_reverse idris_str_rev1_0.83
                      unboxed.CGrString.215.0 <- pure idris_str_rev2.83
                      idr_Prelude.Strings.trim9_val_1349.0 <- pure (CGrString unboxed.CGrString.215.0)
                      idr_Prelude.Strings.trim9_1350.0 <- store idr_Prelude.Strings.trim9_val_1349.0
                      idris_str_tail1.109 <- pure idr_Prelude.Strings.trim9_1350.0
                      (CGrString idris_str_tail1_0.109) <- fetch idris_str_tail1.109
                      idris_str_tail2.109 <- _prim_string_tail idris_str_tail1_0.109
                      unboxed.CGrString.216.0 <- pure idris_str_tail2.109
                      idr_Prelude.Strings.trim9_val_1348.0 <- pure (CGrString unboxed.CGrString.216.0)
                      idr_Prelude.Strings.trim9_1351.0 <- store idr_Prelude.Strings.trim9_val_1348.0
                      (CGrInt idr_Prelude.Strings.trim8_1347.41.181.arity.1.0) <- pure idr_Prelude.Strings.trim8_val_1344.0
                      (CGrString idr_Prelude.Strings.trim9_1351.49.41.arity.1.0) <- pure idr_Prelude.Strings.trim9_val_1348.0
                      idris_str_cons1.41.arity.1.15 <- pure idr_Prelude.Strings.trim8_1347.41.181.arity.1.0
                      idris_str_cons2.49.arity.1.15 <- pure idr_Prelude.Strings.trim9_1351.49.41.arity.1.0
                      (CGrInt idris_str_cons1_0.15) <- pure (CGrInt idris_str_cons1.41.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrString idris_str_cons2_0.15) <- pure (CGrString idris_str_cons2.49.arity.1.15) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_cons3.15 <- _prim_string_cons idris_str_cons1_0.15 idris_str_cons2_0.15
                      unboxed.CGrString.280.0 <- pure idris_str_cons3.15
                      pure (CGrString unboxed.CGrString.280.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.280.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.109) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.38)
                    (Cidr_Prelude.Bool.True) ->
                      (CGrString idr_Prelude.Strings.trim0.41.182.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev1.41.arity.1.84 <- pure idr_Prelude.Strings.trim0.41.182.arity.1.0
                      (CGrString idris_str_rev1_0.84) <- pure (CGrString idris_str_rev1.41.arity.1.84) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_rev2.84 <- _prim_string_reverse idris_str_rev1_0.84
                      unboxed.CGrString.217.0 <- pure idris_str_rev2.84
                      idr_Prelude.Strings.trim8_val_1356.0 <- pure (CGrString unboxed.CGrString.217.0)
                      idr_Prelude.Strings.trim8_1357.0 <- store idr_Prelude.Strings.trim8_val_1356.0
                      idris_str_tail1.110 <- pure idr_Prelude.Strings.trim8_1357.0
                      (CGrString idris_str_tail1_0.110) <- fetch idris_str_tail1.110
                      idris_str_tail2.110 <- _prim_string_tail idris_str_tail1_0.110
                      unboxed.CGrString.218.0 <- pure idris_str_tail2.110
                      idr_Prelude.Strings.trim8_val_1355.0 <- pure (CGrString unboxed.CGrString.218.0)
                      idr_Prelude.Strings.trim8_1358.0 <- store idr_Prelude.Strings.trim8_val_1355.0
                      idr_Prelude.Strings.trim9_val_1359.0 <- pure idr_Prelude.Strings.trim2_val.0
                      idr_Prelude.Strings.trim9_1360.0 <- store idr_Prelude.Strings.trim9_val_1359.0
                      (CGrString idr_Prelude.Strings.trim9_1360.41.183.arity.1.0) <- pure idr_Prelude.Strings.trim9_val_1359.0
                      idris_str_eq1.23 <- pure idr_Prelude.Strings.trim8_1358.0
                      idris_str_eq2.41.arity.1.23 <- pure idr_Prelude.Strings.trim9_1360.41.183.arity.1.0
                      (CGrString idris_str_eq1_0.23) <- fetch idris_str_eq1.23
                      (CGrString idris_str_eq2_0.23) <- pure (CGrString idris_str_eq2.41.arity.1.23) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_str_eq3.23 <- _prim_string_eq idris_str_eq1_0.23 idris_str_eq2_0.23
                      ccp.2.23 <- case idris_str_eq3.23 of
                        #False ->
                          pure 0
                        #True ->
                          pure 1
                      unboxed.CGrInt.90.0 <- pure ccp.2.23
                      idr_Prelude.Strings.trim8_val_1354.0 <- pure (CGrInt unboxed.CGrInt.90.0)
                      idr_Prelude.Strings.trim8_1361.0 <- store idr_Prelude.Strings.trim8_val_1354.0
                      idr_Prelude.Strings.trim8_val_1362.0 <- pure idr_Prelude.Strings.trim8_val_1354.0
                      idr_Prelude.Strings.trim8_val_1353.0 <- case idr_Prelude.Strings.trim8_val_1362.0 of
                        (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1363.0) ->
                          case idr_Prelude.Strings.trim_cpat_LInt64_0_1363.0 of
                            0 ->
                              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      idr_Prelude.Strings.trim8_1364.0 <- store idr_Prelude.Strings.trim8_val_1353.0
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.23" <- pure idr_Prelude.Strings.trim8_1364.0
                      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.23" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                      idr_Prelude.Strings.trim8_val_1352.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.23" of
                        (Cidr_Prelude.Bool.True) ->
                          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.23" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.23"
                          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.23" of
                            (Cidr_Prelude.Bool.False) ->
                              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                            (Cidr_Prelude.Bool.True) ->
                              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                      idr_Prelude.Strings.trim8_1367.0 <- store idr_Prelude.Strings.trim8_val_1352.0
                      idr_Prelude.Strings.trim8_val_1368.0 <- pure idr_Prelude.Strings.trim8_val_1352.0
                      case idr_Prelude.Strings.trim8_val_1368.0 of
                        (Cidr_Prelude.Basics.No) ->
                          pure idr_Prelude.Strings.trim2_val.0
                        (Cidr_Prelude.Basics.Yes) ->
                          (CGrString idr_Prelude.Strings.trim0.41.185.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev1.41.arity.1.85 <- pure idr_Prelude.Strings.trim0.41.185.arity.1.0
                          (CGrString idris_str_rev1_0.85) <- pure (CGrString idris_str_rev1.41.arity.1.85) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_str_rev2.85 <- _prim_string_reverse idris_str_rev1_0.85
                          unboxed.CGrString.219.0 <- pure idris_str_rev2.85
                          idr_Prelude.Strings.trim9_val_1372.0 <- pure (CGrString unboxed.CGrString.219.0)
                          idr_Prelude.Strings.trim9_1373.0 <- store idr_Prelude.Strings.trim9_val_1372.0
                          idris_str_tail1.111 <- pure idr_Prelude.Strings.trim9_1373.0
                          (CGrString idris_str_tail1_0.111) <- fetch idris_str_tail1.111
                          idris_str_tail2.111 <- _prim_string_tail idris_str_tail1_0.111
                          unboxed.CGrString.220.0 <- pure idris_str_tail2.111
                          idr_Prelude.Strings.trim9_val_1371.0 <- pure (CGrString unboxed.CGrString.220.0)
                          idr_Prelude.Strings.trim9_1374.0 <- store idr_Prelude.Strings.trim9_val_1371.0
                          idris_str_head1.39 <- pure idr_Prelude.Strings.trim9_1374.0
                          (CGrString idris_str_head1_0.39) <- fetch idris_str_head1.39
                          idris_str_head2.39 <- _prim_string_head idris_str_head1_0.39
                          unboxed.CGrInt.91.0 <- pure idris_str_head2.39
                          idr_Prelude.Strings.trim9_val_1370.0 <- pure (CGrInt unboxed.CGrInt.91.0)
                          idr_Prelude.Strings.trim9_1375.0 <- store idr_Prelude.Strings.trim9_val_1370.0
                          (CGrInt idr_Prelude.Strings.trim9_1375.57.25.arity.1.0) <- pure idr_Prelude.Strings.trim9_val_1370.0
                          idr_Prelude.Chars.isSpace0.57.arity.1.16 <- pure idr_Prelude.Strings.trim9_1375.57.25.arity.1.0
                          idr_Prelude.Chars.isSpace1_val_27.16 <- pure idr_Prelude.Chars.isSpace1_val_27.6
                          idr_Prelude.Chars.isSpace1.16 <- store idr_Prelude.Chars.isSpace1_val_27.16
                          (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.16) <- pure idr_Prelude.Chars.isSpace1_val_27.16
                          (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.16) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq0.49.arity.1.0.16 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.16
                          idris_int_eq1.41.arity.1.0.16 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.16
                          (CGrInt idris_int_eq0_1.0.16) <- pure (CGrInt idris_int_eq0.49.arity.1.0.16) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrInt idris_int_eq1_1.0.16) <- pure (CGrInt idris_int_eq1.41.arity.1.0.16) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq2.0.16 <- _prim_int_eq idris_int_eq0_1.0.16 idris_int_eq1_1.0.16
                          ccp.0.0.16 <- case idris_int_eq2.0.16 of
                            #False ->
                              pure 0
                            #True ->
                              pure 1
                          unboxed.CGrInt.4.16 <- pure ccp.0.0.16
                          idr_Prelude.Chars.isSpace1_val.16 <- pure (CGrInt unboxed.CGrInt.4.16)
                          idr_Prelude.Chars.isSpace1_28.16 <- store idr_Prelude.Chars.isSpace1_val.16
                          idr_Prelude.Chars.isSpace1_val_29.16 <- pure idr_Prelude.Chars.isSpace1_val.16
                          idr_Prelude.Strings.trim9_val_1369.0 <- case idr_Prelude.Chars.isSpace1_val_29.16 of
                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.16) ->
                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0.16 of
                                0 ->
                                  idr_Prelude.Chars.isSpace2_val_30.16 <- pure (CGrInt 9)
                                  idr_Prelude.Chars.isSpace2.16 <- store idr_Prelude.Chars.isSpace2_val_30.16
                                  (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.16) <- pure idr_Prelude.Chars.isSpace2_val_30.16
                                  (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.16) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq0.49.arity.1.1.16 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.16
                                  idris_int_eq1.41.arity.1.1.16 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.16
                                  (CGrInt idris_int_eq0_1.1.16) <- pure (CGrInt idris_int_eq0.49.arity.1.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                  (CGrInt idris_int_eq1_1.1.16) <- pure (CGrInt idris_int_eq1.41.arity.1.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_eq2.1.16 <- _prim_int_eq idris_int_eq0_1.1.16 idris_int_eq1_1.1.16
                                  ccp.0.1.16 <- case idris_int_eq2.1.16 of
                                    #False ->
                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.16
                                    #True ->
                                      pure 1
                                  unboxed.CGrInt.5.16 <- pure ccp.0.1.16
                                  idr_Prelude.Chars.isSpace2_val.16 <- pure (CGrInt unboxed.CGrInt.5.16)
                                  idr_Prelude.Chars.isSpace2_31.16 <- store idr_Prelude.Chars.isSpace2_val.16
                                  idr_Prelude.Chars.isSpace2_val_32.16 <- pure idr_Prelude.Chars.isSpace2_val.16
                                  case idr_Prelude.Chars.isSpace2_val_32.16 of
                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.16) ->
                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.16 of
                                        0 ->
                                          idr_Prelude.Chars.isSpace3_val_34.16 <- pure (CGrInt 13)
                                          idr_Prelude.Chars.isSpace3.16 <- store idr_Prelude.Chars.isSpace3_val_34.16
                                          (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.16) <- pure idr_Prelude.Chars.isSpace3_val_34.16
                                          (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.16) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq0.49.arity.1.2.16 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.16
                                          idris_int_eq1.41.arity.1.2.16 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.16
                                          (CGrInt idris_int_eq0_1.2.16) <- pure (CGrInt idris_int_eq0.49.arity.1.2.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                          (CGrInt idris_int_eq1_1.2.16) <- pure (CGrInt idris_int_eq1.41.arity.1.2.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                          idris_int_eq2.2.16 <- _prim_int_eq idris_int_eq0_1.2.16 idris_int_eq1_1.2.16
                                          ccp.0.2.16 <- case idris_int_eq2.2.16 of
                                            #False ->
                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.16
                                            #True ->
                                              pure 1
                                          unboxed.CGrInt.6.16 <- pure ccp.0.2.16
                                          idr_Prelude.Chars.isSpace3_val.16 <- pure (CGrInt unboxed.CGrInt.6.16)
                                          idr_Prelude.Chars.isSpace3_35.16 <- store idr_Prelude.Chars.isSpace3_val.16
                                          idr_Prelude.Chars.isSpace3_val_36.16 <- pure idr_Prelude.Chars.isSpace3_val.16
                                          case idr_Prelude.Chars.isSpace3_val_36.16 of
                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.16) ->
                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.16 of
                                                0 ->
                                                  idr_Prelude.Chars.isSpace4_val_38.16 <- pure (CGrInt 10)
                                                  idr_Prelude.Chars.isSpace4.16 <- store idr_Prelude.Chars.isSpace4_val_38.16
                                                  (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.16) <- pure idr_Prelude.Chars.isSpace4_val_38.16
                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.16) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq0.49.arity.1.3.16 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.16
                                                  idris_int_eq1.41.arity.1.3.16 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.16
                                                  (CGrInt idris_int_eq0_1.3.16) <- pure (CGrInt idris_int_eq0.49.arity.1.3.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  (CGrInt idris_int_eq1_1.3.16) <- pure (CGrInt idris_int_eq1.41.arity.1.3.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                  idris_int_eq2.3.16 <- _prim_int_eq idris_int_eq0_1.3.16 idris_int_eq1_1.3.16
                                                  ccp.0.3.16 <- case idris_int_eq2.3.16 of
                                                    #False ->
                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.16
                                                    #True ->
                                                      pure 1
                                                  unboxed.CGrInt.7.16 <- pure ccp.0.3.16
                                                  idr_Prelude.Chars.isSpace4_val.16 <- pure (CGrInt unboxed.CGrInt.7.16)
                                                  idr_Prelude.Chars.isSpace4_39.16 <- store idr_Prelude.Chars.isSpace4_val.16
                                                  idr_Prelude.Chars.isSpace4_val_40.16 <- pure idr_Prelude.Chars.isSpace4_val.16
                                                  case idr_Prelude.Chars.isSpace4_val_40.16 of
                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.16) ->
                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.16 of
                                                        0 ->
                                                          idr_Prelude.Chars.isSpace5_val_42.16 <- pure (CGrInt 12)
                                                          idr_Prelude.Chars.isSpace5.16 <- store idr_Prelude.Chars.isSpace5_val_42.16
                                                          (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.16) <- pure idr_Prelude.Chars.isSpace5_val_42.16
                                                          (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.16) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq0.49.arity.1.4.16 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.16
                                                          idris_int_eq1.41.arity.1.4.16 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.16
                                                          (CGrInt idris_int_eq0_1.4.16) <- pure (CGrInt idris_int_eq0.49.arity.1.4.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          (CGrInt idris_int_eq1_1.4.16) <- pure (CGrInt idris_int_eq1.41.arity.1.4.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                          idris_int_eq2.4.16 <- _prim_int_eq idris_int_eq0_1.4.16 idris_int_eq1_1.4.16
                                                          ccp.0.4.16 <- case idris_int_eq2.4.16 of
                                                            #False ->
                                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.16
                                                            #True ->
                                                              pure 1
                                                          unboxed.CGrInt.8.16 <- pure ccp.0.4.16
                                                          idr_Prelude.Chars.isSpace5_val.16 <- pure (CGrInt unboxed.CGrInt.8.16)
                                                          idr_Prelude.Chars.isSpace5_43.16 <- store idr_Prelude.Chars.isSpace5_val.16
                                                          idr_Prelude.Chars.isSpace5_val_44.16 <- pure idr_Prelude.Chars.isSpace5_val.16
                                                          case idr_Prelude.Chars.isSpace5_val_44.16 of
                                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.16) ->
                                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.16 of
                                                                0 ->
                                                                  idr_Prelude.Chars.isSpace6_val_46.16 <- pure (CGrInt 11)
                                                                  idr_Prelude.Chars.isSpace6.16 <- store idr_Prelude.Chars.isSpace6_val_46.16
                                                                  (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.16) <- pure idr_Prelude.Chars.isSpace6_val_46.16
                                                                  (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.16) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  idris_int_eq0.49.arity.1.5.16 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.16
                                                                  idris_int_eq1.41.arity.1.5.16 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.16
                                                                  (CGrInt idris_int_eq0_1.5.16) <- pure (CGrInt idris_int_eq0.49.arity.1.5.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  (CGrInt idris_int_eq1_1.5.16) <- pure (CGrInt idris_int_eq1.41.arity.1.5.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                  idris_int_eq2.5.16 <- _prim_int_eq idris_int_eq0_1.5.16 idris_int_eq1_1.5.16
                                                                  ccp.0.5.16 <- case idris_int_eq2.5.16 of
                                                                    #False ->
                                                                      pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.16
                                                                    #True ->
                                                                      pure 1
                                                                  unboxed.CGrInt.9.16 <- pure ccp.0.5.16
                                                                  idr_Prelude.Chars.isSpace6_val.16 <- pure (CGrInt unboxed.CGrInt.9.16)
                                                                  idr_Prelude.Chars.isSpace6_47.16 <- store idr_Prelude.Chars.isSpace6_val.16
                                                                  idr_Prelude.Chars.isSpace6_val_48.16 <- pure idr_Prelude.Chars.isSpace6_val.16
                                                                  case idr_Prelude.Chars.isSpace6_val_48.16 of
                                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.16) ->
                                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.16 of
                                                                        0 ->
                                                                          idr_Prelude.Chars.isSpace7_val_50.16 <- pure (CGrInt 160)
                                                                          idr_Prelude.Chars.isSpace7.16 <- store idr_Prelude.Chars.isSpace7_val_50.16
                                                                          (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.16) <- pure idr_Prelude.Chars.isSpace7_val_50.16
                                                                          (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.16) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                          idris_int_eq0.49.arity.1.6.16 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.16
                                                                          idris_int_eq1.41.arity.1.6.16 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.16
                                                                          (CGrInt idris_int_eq0_1.6.16) <- pure (CGrInt idris_int_eq0.49.arity.1.6.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                          (CGrInt idris_int_eq1_1.6.16) <- pure (CGrInt idris_int_eq1.41.arity.1.6.16) -- LINT: Syntax error - expected SimpleExp without nodes
                                                                          idris_int_eq2.6.16 <- _prim_int_eq idris_int_eq0_1.6.16 idris_int_eq1_1.6.16
                                                                          ccp.0.6.16 <- case idris_int_eq2.6.16 of
                                                                            #False ->
                                                                              pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.16
                                                                            #True ->
                                                                              pure 1
                                                                          unboxed.CGrInt.10.16 <- pure ccp.0.6.16
                                                                          idr_Prelude.Chars.isSpace7_val.16 <- pure (CGrInt unboxed.CGrInt.10.16)
                                                                          idr_Prelude.Chars.isSpace7_51.16 <- store idr_Prelude.Chars.isSpace7_val.16
                                                                          idr_Prelude.Chars.isSpace7_val_52.16 <- pure idr_Prelude.Chars.isSpace7_val.16
                                                                          case idr_Prelude.Chars.isSpace7_val_52.16 of
                                                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.16) ->
                                                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.16 of
                                                                                0 ->
                                                                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                                                #default ->
                                                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                        #default ->
                                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                                #default ->
                                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                        #default ->
                                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                                #default ->
                                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                        #default ->
                                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                #default ->
                                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                          idr_Prelude.Strings.trim9_1376.0 <- store idr_Prelude.Strings.trim9_val_1369.0
                          idr_Prelude.Strings.trim9_val_1377.0 <- pure idr_Prelude.Strings.trim9_val_1369.0
                          case idr_Prelude.Strings.trim9_val_1377.0 of
                            (Cidr_Prelude.Bool.False) ->
                              (CGrString idr_Prelude.Strings.trim0.41.186.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.86 <- pure idr_Prelude.Strings.trim0.41.186.arity.1.0
                              (CGrString idris_str_rev1_0.86) <- pure (CGrString idris_str_rev1.41.arity.1.86) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.86 <- _prim_string_reverse idris_str_rev1_0.86
                              unboxed.CGrString.221.0 <- pure idris_str_rev2.86
                              idr_Prelude.Strings.trim10_val_1380.0 <- pure (CGrString unboxed.CGrString.221.0)
                              idr_Prelude.Strings.trim10_1381.0 <- store idr_Prelude.Strings.trim10_val_1380.0
                              idris_str_tail1.112 <- pure idr_Prelude.Strings.trim10_1381.0
                              (CGrString idris_str_tail1_0.112) <- fetch idris_str_tail1.112
                              idris_str_tail2.112 <- _prim_string_tail idris_str_tail1_0.112
                              unboxed.CGrString.222.0 <- pure idris_str_tail2.112
                              idr_Prelude.Strings.trim10_val_1379.0 <- pure (CGrString unboxed.CGrString.222.0)
                              idr_Prelude.Strings.trim10_1382.0 <- store idr_Prelude.Strings.trim10_val_1379.0
                              idris_str_head1.40 <- pure idr_Prelude.Strings.trim10_1382.0
                              (CGrString idris_str_head1_0.40) <- fetch idris_str_head1.40
                              idris_str_head2.40 <- _prim_string_head idris_str_head1_0.40
                              unboxed.CGrInt.92.0 <- pure idris_str_head2.40
                              idr_Prelude.Strings.trim10_val_1378.0 <- pure (CGrInt unboxed.CGrInt.92.0)
                              idr_Prelude.Strings.trim10_1383.0 <- store idr_Prelude.Strings.trim10_val_1378.0
                              (CGrString idr_Prelude.Strings.trim0.41.187.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.87 <- pure idr_Prelude.Strings.trim0.41.187.arity.1.0
                              (CGrString idris_str_rev1_0.87) <- pure (CGrString idris_str_rev1.41.arity.1.87) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.87 <- _prim_string_reverse idris_str_rev1_0.87
                              unboxed.CGrString.223.0 <- pure idris_str_rev2.87
                              idr_Prelude.Strings.trim11_val_1386.0 <- pure (CGrString unboxed.CGrString.223.0)
                              idr_Prelude.Strings.trim11_1387.0 <- store idr_Prelude.Strings.trim11_val_1386.0
                              idris_str_tail1.113 <- pure idr_Prelude.Strings.trim11_1387.0
                              (CGrString idris_str_tail1_0.113) <- fetch idris_str_tail1.113
                              idris_str_tail2.113 <- _prim_string_tail idris_str_tail1_0.113
                              unboxed.CGrString.224.0 <- pure idris_str_tail2.113
                              idr_Prelude.Strings.trim11_val_1385.0 <- pure (CGrString unboxed.CGrString.224.0)
                              idr_Prelude.Strings.trim11_1388.0 <- store idr_Prelude.Strings.trim11_val_1385.0
                              idris_str_tail1.114 <- pure idr_Prelude.Strings.trim11_1388.0
                              (CGrString idris_str_tail1_0.114) <- fetch idris_str_tail1.114
                              idris_str_tail2.114 <- _prim_string_tail idris_str_tail1_0.114
                              unboxed.CGrString.225.0 <- pure idris_str_tail2.114
                              idr_Prelude.Strings.trim11_val_1384.0 <- pure (CGrString unboxed.CGrString.225.0)
                              idr_Prelude.Strings.trim11_1389.0 <- store idr_Prelude.Strings.trim11_val_1384.0
                              (CGrInt idr_Prelude.Strings.trim10_1383.41.188.arity.1.0) <- pure idr_Prelude.Strings.trim10_val_1378.0
                              (CGrString idr_Prelude.Strings.trim11_1389.49.42.arity.1.0) <- pure idr_Prelude.Strings.trim11_val_1384.0
                              idris_str_cons1.41.arity.1.16 <- pure idr_Prelude.Strings.trim10_1383.41.188.arity.1.0
                              idris_str_cons2.49.arity.1.16 <- pure idr_Prelude.Strings.trim11_1389.49.42.arity.1.0
                              (CGrInt idris_str_cons1_0.16) <- pure (CGrInt idris_str_cons1.41.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrString idris_str_cons2_0.16) <- pure (CGrString idris_str_cons2.49.arity.1.16) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_cons3.16 <- _prim_string_cons idris_str_cons1_0.16 idris_str_cons2_0.16
                              unboxed.CGrString.281.0 <- pure idris_str_cons3.16
                              pure (CGrString unboxed.CGrString.281.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.281.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.114) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.113) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.40) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.112)
                            (Cidr_Prelude.Bool.True) ->
                              (CGrString idr_Prelude.Strings.trim0.41.189.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev1.41.arity.1.88 <- pure idr_Prelude.Strings.trim0.41.189.arity.1.0
                              (CGrString idris_str_rev1_0.88) <- pure (CGrString idris_str_rev1.41.arity.1.88) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_rev2.88 <- _prim_string_reverse idris_str_rev1_0.88
                              unboxed.CGrString.226.0 <- pure idris_str_rev2.88
                              idr_Prelude.Strings.trim11_val_1398.0 <- pure (CGrString unboxed.CGrString.226.0)
                              idr_Prelude.Strings.trim11_1399.0 <- store idr_Prelude.Strings.trim11_val_1398.0
                              idris_str_tail1.115 <- pure idr_Prelude.Strings.trim11_1399.0
                              (CGrString idris_str_tail1_0.115) <- fetch idris_str_tail1.115
                              idris_str_tail2.115 <- _prim_string_tail idris_str_tail1_0.115
                              unboxed.CGrString.227.0 <- pure idris_str_tail2.115
                              idr_Prelude.Strings.trim11_val_1397.0 <- pure (CGrString unboxed.CGrString.227.0)
                              idr_Prelude.Strings.trim11_1400.0 <- store idr_Prelude.Strings.trim11_val_1397.0
                              idris_str_tail1.116 <- pure idr_Prelude.Strings.trim11_1400.0
                              (CGrString idris_str_tail1_0.116) <- fetch idris_str_tail1.116
                              idris_str_tail2.116 <- _prim_string_tail idris_str_tail1_0.116
                              unboxed.CGrString.228.0 <- pure idris_str_tail2.116
                              idr_Prelude.Strings.trim11_val_1396.0 <- pure (CGrString unboxed.CGrString.228.0)
                              idr_Prelude.Strings.trim11_1401.0 <- store idr_Prelude.Strings.trim11_val_1396.0
                              idr_Prelude.Strings.trim12_val_1402.0 <- pure idr_Prelude.Strings.trim2_val.0
                              idr_Prelude.Strings.trim12_1403.0 <- store idr_Prelude.Strings.trim12_val_1402.0
                              (CGrString idr_Prelude.Strings.trim12_1403.41.190.arity.1.0) <- pure idr_Prelude.Strings.trim12_val_1402.0
                              idris_str_eq1.24 <- pure idr_Prelude.Strings.trim11_1401.0
                              idris_str_eq2.41.arity.1.24 <- pure idr_Prelude.Strings.trim12_1403.41.190.arity.1.0
                              (CGrString idris_str_eq1_0.24) <- fetch idris_str_eq1.24
                              (CGrString idris_str_eq2_0.24) <- pure (CGrString idris_str_eq2.41.arity.1.24) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_str_eq3.24 <- _prim_string_eq idris_str_eq1_0.24 idris_str_eq2_0.24
                              ccp.2.24 <- case idris_str_eq3.24 of
                                #False ->
                                  pure 0
                                #True ->
                                  pure 1
                              unboxed.CGrInt.93.0 <- pure ccp.2.24
                              idr_Prelude.Strings.trim11_val_1395.0 <- pure (CGrInt unboxed.CGrInt.93.0)
                              idr_Prelude.Strings.trim11_1404.0 <- store idr_Prelude.Strings.trim11_val_1395.0
                              idr_Prelude.Strings.trim11_val_1405.0 <- pure idr_Prelude.Strings.trim11_val_1395.0
                              idr_Prelude.Strings.trim11_val_1394.0 <- case idr_Prelude.Strings.trim11_val_1405.0 of
                                (CGrInt idr_Prelude.Strings.trim_cpat_LInt64_0_1406.0) ->
                                  case idr_Prelude.Strings.trim_cpat_LInt64_0_1406.0 of
                                    0 ->
                                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                                    #default ->
                                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                              idr_Prelude.Strings.trim11_1407.0 <- store idr_Prelude.Strings.trim11_val_1394.0
                              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.24" <- pure idr_Prelude.Strings.trim11_1407.0
                              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.24" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
                              idr_Prelude.Strings.trim11_val_1393.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.24" of
                                (Cidr_Prelude.Bool.True) ->
                                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.24" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.24"
                                  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.24" of
                                    (Cidr_Prelude.Bool.False) ->
                                      pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                                    (Cidr_Prelude.Bool.True) ->
                                      pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                              idr_Prelude.Strings.trim11_1410.0 <- store idr_Prelude.Strings.trim11_val_1393.0
                              idr_Prelude.Strings.trim11_val_1411.0 <- pure idr_Prelude.Strings.trim11_val_1393.0
                              idr_Prelude.Strings.trim11_val_1392.0 <- case idr_Prelude.Strings.trim11_val_1411.0 of
                                (Cidr_Prelude.Basics.No) ->
                                  pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                                (Cidr_Prelude.Basics.Yes) ->
                                  (CGrString idr_Prelude.Strings.trim0.41.192.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev1.41.arity.1.89 <- pure idr_Prelude.Strings.trim0.41.192.arity.1.0
                                  (CGrString idris_str_rev1_0.89) <- pure (CGrString idris_str_rev1.41.arity.1.89) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev2.89 <- _prim_string_reverse idris_str_rev1_0.89
                                  unboxed.CGrString.229.0 <- pure idris_str_rev2.89
                                  idr_Prelude.Strings.trim12_val_1415.0 <- pure (CGrString unboxed.CGrString.229.0)
                                  idr_Prelude.Strings.trim12_1416.0 <- store idr_Prelude.Strings.trim12_val_1415.0
                                  idris_str_tail1.117 <- pure idr_Prelude.Strings.trim12_1416.0
                                  (CGrString idris_str_tail1_0.117) <- fetch idris_str_tail1.117
                                  idris_str_tail2.117 <- _prim_string_tail idris_str_tail1_0.117
                                  unboxed.CGrString.230.0 <- pure idris_str_tail2.117
                                  idr_Prelude.Strings.trim12_val_1414.0 <- pure (CGrString unboxed.CGrString.230.0)
                                  idr_Prelude.Strings.trim12_1417.0 <- store idr_Prelude.Strings.trim12_val_1414.0
                                  idris_str_tail1.118 <- pure idr_Prelude.Strings.trim12_1417.0
                                  (CGrString idris_str_tail1_0.118) <- fetch idris_str_tail1.118
                                  idris_str_tail2.118 <- _prim_string_tail idris_str_tail1_0.118
                                  unboxed.CGrString.231.0 <- pure idris_str_tail2.118
                                  idr_Prelude.Strings.trim12_val_1413.0 <- pure (CGrString unboxed.CGrString.231.0)
                                  idr_Prelude.Strings.trim12_1418.0 <- store idr_Prelude.Strings.trim12_val_1413.0
                                  idris_str_head1.41 <- pure idr_Prelude.Strings.trim12_1418.0
                                  (CGrString idris_str_head1_0.41) <- fetch idris_str_head1.41
                                  idris_str_head2.41 <- _prim_string_head idris_str_head1_0.41
                                  unboxed.CGrInt.94.0 <- pure idris_str_head2.41
                                  idr_Prelude.Strings.trim12_val_1412.0 <- pure (CGrInt unboxed.CGrInt.94.0)
                                  idr_Prelude.Strings.trim12_1419.0 <- store idr_Prelude.Strings.trim12_val_1412.0
                                  (CGrString idr_Prelude.Strings.trim0.41.193.arity.1.0) <- pure (CGrString idr_Prelude.Strings.trim0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev1.41.arity.1.90 <- pure idr_Prelude.Strings.trim0.41.193.arity.1.0
                                  (CGrString idris_str_rev1_0.90) <- pure (CGrString idris_str_rev1.41.arity.1.90) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_str_rev2.90 <- _prim_string_reverse idris_str_rev1_0.90
                                  unboxed.CGrString.232.0 <- pure idris_str_rev2.90
                                  idr_Prelude.Strings.trim13_val_1422.0 <- pure (CGrString unboxed.CGrString.232.0)
                                  idr_Prelude.Strings.trim13.0 <- store idr_Prelude.Strings.trim13_val_1422.0
                                  idris_str_tail1.119 <- pure idr_Prelude.Strings.trim13.0
                                  (CGrString idris_str_tail1_0.119) <- fetch idris_str_tail1.119
                                  idris_str_tail2.119 <- _prim_string_tail idris_str_tail1_0.119
                                  unboxed.CGrString.233.0 <- pure idris_str_tail2.119
                                  idr_Prelude.Strings.trim13_val_1421.0 <- pure (CGrString unboxed.CGrString.233.0)
                                  idr_Prelude.Strings.trim13_1423.0 <- store idr_Prelude.Strings.trim13_val_1421.0
                                  idris_str_tail1.120 <- pure idr_Prelude.Strings.trim13_1423.0
                                  (CGrString idris_str_tail1_0.120) <- fetch idris_str_tail1.120
                                  idris_str_tail2.120 <- _prim_string_tail idris_str_tail1_0.120
                                  unboxed.CGrString.234.0 <- pure idris_str_tail2.120
                                  idr_Prelude.Strings.trim13_val_1420.0 <- pure (CGrString unboxed.CGrString.234.0)
                                  idr_Prelude.Strings.trim13_1424.0 <- store idr_Prelude.Strings.trim13_val_1420.0
                                  idris_str_tail1.121 <- pure idr_Prelude.Strings.trim13_1424.0
                                  (CGrString idris_str_tail1_0.121) <- fetch idris_str_tail1.121
                                  idris_str_tail2.121 <- _prim_string_tail idris_str_tail1_0.121
                                  unboxed.CGrString.235.0 <- pure idris_str_tail2.121
                                  idr_Prelude.Strings.trim13_val.0 <- pure (CGrString unboxed.CGrString.235.0)
                                  idr_Prelude.Strings.trim13_1425.0 <- store idr_Prelude.Strings.trim13_val.0
                                  pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim12_1419.0 idr_Prelude.Strings.trim13_1425.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim12_1419.0 idr_Prelude.Strings.trim13_1425.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.121) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.120) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.119) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.41) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.118) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.117)
                              idr_Prelude.Strings.trim11_1426.0 <- store idr_Prelude.Strings.trim11_val_1392.0
                              unboxed.CGrString.236.0 <- idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim11_1426.0
                              pure (CGrString unboxed.CGrString.236.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.236.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.24) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.116) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.115) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.39) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.111) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.23) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.110) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.37)
              idr_Prelude.Strings.trim6_1427.0 <- store idr_Prelude.Strings.trim6_val_1321.0
              (CGrString idr_Prelude.Strings.trim6_1427.41.194.arity.1.0) <- pure idr_Prelude.Strings.trim6_val_1321.0
              idris_str_rev1.41.arity.1.91 <- pure idr_Prelude.Strings.trim6_1427.41.194.arity.1.0
              (CGrString idris_str_rev1_0.91) <- pure (CGrString idris_str_rev1.41.arity.1.91) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_str_rev2.91 <- _prim_string_reverse idris_str_rev1_0.91
              unboxed.CGrString.237.0 <- pure idris_str_rev2.91
              idr_Prelude.Strings.trim6_val_1320.0 <- pure (CGrString unboxed.CGrString.237.0)
              idr_Prelude.Strings.trim6_1428.0 <- store idr_Prelude.Strings.trim6_val_1320.0
              idris_str_tail1.122 <- pure idr_Prelude.Strings.trim6_1428.0
              (CGrString idris_str_tail1_0.122) <- fetch idris_str_tail1.122
              idris_str_tail2.122 <- _prim_string_tail idris_str_tail1_0.122
              unboxed.CGrString.238.0 <- pure idris_str_tail2.122
              idr_Prelude.Strings.trim6_val_1319.0 <- pure (CGrString unboxed.CGrString.238.0)
              idr_Prelude.Strings.trim6_1429.0 <- store idr_Prelude.Strings.trim6_val_1319.0
              idris_str_tail1.123 <- pure idr_Prelude.Strings.trim6_1429.0
              (CGrString idris_str_tail1_0.123) <- fetch idris_str_tail1.123
              idris_str_tail2.123 <- _prim_string_tail idris_str_tail1_0.123
              unboxed.CGrString.239.0 <- pure idris_str_tail2.123
              idr_Prelude.Strings.trim6_val_1318.0 <- pure (CGrString unboxed.CGrString.239.0)
              idr_Prelude.Strings.trim6_1430.0 <- store idr_Prelude.Strings.trim6_val_1318.0
              pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim5_1317.0 idr_Prelude.Strings.trim6_1430.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.trim5_1317.0 idr_Prelude.Strings.trim6_1430.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.123) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.122) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.22) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.36) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.108) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.19)
          idr_Prelude.Strings.trim4_1431.0 <- store idr_Prelude.Strings.trim4_val_1076.0
          idr__Prelude.Strings.ltrim_with_55.unboxed idr_Prelude.Strings.trim4_1431.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.18) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.94) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.15) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.14) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.6)
  idr_Main.main6_val.0 <- pure (CGrString unboxed.CGrString.4.0)
  idr_Main.main6_87.0 <- store idr_Main.main6_val.0
  idr_Main.main3_val_79.0 <- idr_Prelude.Interactive.printLn' idr_Main.main5_85.0 idr_Main.main6_87.0
  idr_Main.main6_val_94.0 <- pure idr_Main.main5_val_84.0
  idr_Main.main6_95.0 <- store idr_Main.main6_val_94.0
  idr_Main.main7_val.0 <- pure (CGrString #"42")
  idr_Main.main7.0 <- store idr_Main.main7_val.0
  idr_Main.main4_val_89.0 <- idr_Prelude.Interactive.printLn' idr_Main.main6_95.0 idr_Main.main7.0
  idr_Main.main7_val_102.0 <- pure (C"idr_{U_Main.{main_8}_1}")
  idr_Main.main7_103.0 <- store idr_Main.main7_val_102.0
  idr_Main.main9_val.0 <- pure (C"idr_{U_Main.{main_9}_2}")
  idr_Main.main9.0 <- store idr_Main.main9_val.0
  idr_Main.main10_val.0 <- pure (CGrInt 0)
  idr_Main.main10.0 <- store idr_Main.main10_val.0
  idr_Main.main11_val.0 <- pure (CGrInt 10)
  idr_Main.main11.0 <- store idr_Main.main11_val.0
  (CGrInt idr_Main.main10.49.12.arity.1.0) <- pure idr_Main.main10_val.0
  idr_Main.adder1.0 <- pure idr_Main.main9.0
  idr_Main.adder2.49.arity.1.0 <- pure idr_Main.main10.49.12.arity.1.0
  idr_Main.adder3.0 <- pure idr_Main.main11.0
  idr_Main.adder2_val.0 <- pure (CGrInt idr_Main.adder2.49.arity.1.0)
  idr_Main.main8_val.0 <- case idr_Main.adder2_val.0 of
    (CGrInt idr_Main.adder_cpat_LInt64_0.0) ->
      case idr_Main.adder_cpat_LInt64_0.0 of
        0 ->
          fetch idr_Main.adder3.0
        #default ->
          idr_Main.adder4_val_1.0 <- pure (CGrInt 1)
          idr_Main.adder4.0 <- store idr_Main.adder4_val_1.0
          (CGrInt idr_Main.adder2.41.0.arity.1.0) <- pure (CGrInt idr_Main.adder2.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idr_Main.adder4.41.0.arity.1.0) <- pure idr_Main.adder4_val_1.0
          idris_int_sub0.41.arity.1.0.0 <- pure idr_Main.adder2.41.0.arity.1.0
          idris_int_sub1.41.arity.1.0.0 <- pure idr_Main.adder4.41.0.arity.1.0
          (CGrInt idris_int_sub0_1.0.0) <- pure (CGrInt idris_int_sub0.41.arity.1.0.0) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_sub1_1.0.0) <- pure (CGrInt idris_int_sub1.41.arity.1.0.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_sub2.0.0 <- _prim_int_sub idris_int_sub0_1.0.0 idris_int_sub1_1.0.0
          unboxed.CGrInt.1.0 <- pure idris_int_sub2.0.0
          idr_Main.adder4_val.0 <- pure (CGrInt unboxed.CGrInt.1.0)
          idr_Main.adder4_2.0 <- store idr_Main.adder4_val.0
          pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.0 idr_Main.adder4_2.0 idr_Main.adder3.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.0 idr_Main.adder4_2.0 idr_Main.adder3.0)
  idr_Main.main8_105.0 <- store idr_Main.main8_val.0
  idr_Main.main5_val_97.0 <- idr_Prelude.Interactive.printLn' idr_Main.main7_103.0 idr_Main.main8_105.0
  idr_Main.main8_val_112.0 <- pure idr_Main.main7_val_102.0
  idr_Main.main8_113.0 <- store idr_Main.main8_val_112.0
  idr_Main.main10_val_118.0 <- pure idr_Main.main9_val.0
  idr_Main.main10_119.0 <- store idr_Main.main10_val_118.0
  idr_Main.main11_val_120.0 <- pure (CGrInt 1)
  idr_Main.main11_121.0 <- store idr_Main.main11_val_120.0
  idr_Main.main12_val.0 <- pure idr_Main.main11_val.0
  idr_Main.main12.0 <- store idr_Main.main12_val.0
  (CGrInt idr_Main.main11_121.49.13.arity.1.0) <- pure idr_Main.main11_val_120.0
  idr_Main.adder1.1 <- pure idr_Main.main10_119.0
  idr_Main.adder2.49.arity.1.1 <- pure idr_Main.main11_121.49.13.arity.1.0
  idr_Main.adder3.1 <- pure idr_Main.main12.0
  idr_Main.adder2_val.1 <- pure (CGrInt idr_Main.adder2.49.arity.1.1)
  idr_Main.main9_val_115.0 <- case idr_Main.adder2_val.1 of
    (CGrInt idr_Main.adder_cpat_LInt64_0.1) ->
      case idr_Main.adder_cpat_LInt64_0.1 of
        0 ->
          fetch idr_Main.adder3.1
        #default ->
          idr_Main.adder4_val_1.1 <- pure idr_Main.main11_val_120.0
          idr_Main.adder4.1 <- store idr_Main.adder4_val_1.1
          (CGrInt idr_Main.adder2.41.0.arity.1.1) <- pure (CGrInt idr_Main.adder2.49.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idr_Main.adder4.41.0.arity.1.1) <- pure idr_Main.adder4_val_1.1
          idris_int_sub0.41.arity.1.0.1 <- pure idr_Main.adder2.41.0.arity.1.1
          idris_int_sub1.41.arity.1.0.1 <- pure idr_Main.adder4.41.0.arity.1.1
          (CGrInt idris_int_sub0_1.0.1) <- pure (CGrInt idris_int_sub0.41.arity.1.0.1) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_sub1_1.0.1) <- pure (CGrInt idris_int_sub1.41.arity.1.0.1) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_sub2.0.1 <- _prim_int_sub idris_int_sub0_1.0.1 idris_int_sub1_1.0.1
          unboxed.CGrInt.1.1 <- pure idris_int_sub2.0.1
          idr_Main.adder4_val.1 <- pure (CGrInt unboxed.CGrInt.1.1)
          idr_Main.adder4_2.1 <- store idr_Main.adder4_val.1
          pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.1 idr_Main.adder4_2.1 idr_Main.adder3.1) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.1 idr_Main.adder4_2.1 idr_Main.adder3.1)
  idr_Main.main9_122.0 <- store idr_Main.main9_val_115.0
  idr_Main.main10_val_123.0 <- pure (CGrInt 15)
  idr_Main.main10_124.0 <- store idr_Main.main10_val_123.0
  "idr_{APPLY_0}0.1.0" <- pure idr_Main.main9_122.0
  "idr_{APPLY_0}1.1.0" <- pure idr_Main.main10_124.0
  "idr_{APPLY_0}0_val.1.0" <- fetch "idr_{APPLY_0}0.1.0"
  idr_Main.main9_val_114.0 <- case "idr_{APPLY_0}0_val.1.0" of
    (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.1.0" "idr_{APPLY_0}3_1445.1.0" "idr_{APPLY_0}4_1446.1.0") ->
      (CGrInt "idr_{APPLY_0}3_1445.1.0.57.0.arity.1") <- fetch "idr_{APPLY_0}3_1445.1.0"
      "idr_Main.{adder_0}0.0" <- pure "idr_{APPLY_0}2_1444.1.0"
      "idr_Main.{adder_0}1.57.arity.1.0" <- pure "idr_{APPLY_0}3_1445.1.0.57.0.arity.1"
      "idr_Main.{adder_0}2.0" <- pure "idr_{APPLY_0}4_1446.1.0"
      "idr_Main.{adder_0}3.0" <- pure "idr_{APPLY_0}1.1.0"
      "idr_{APPLY_0}0.11.0" <- pure "idr_Main.{adder_0}0.0"
      "idr_{APPLY_0}1.11.0" <- pure "idr_Main.{adder_0}3.0"
      "idr_{APPLY_0}0_val.11.0" <- fetch "idr_{APPLY_0}0.11.0"
      "idr_Main.{adder_0}5_val_1458.0" <- case "idr_{APPLY_0}0_val.11.0" of
        (C"idr_{U_Main.{main_9}_2}") ->
          pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.11.0") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.11.0")
      "idr_Main.{adder_0}5.0" <- store "idr_Main.{adder_0}5_val_1458.0"
      "idr_{APPLY_0}0.12.0" <- pure "idr_Main.{adder_0}5.0"
      "idr_{APPLY_0}1.12.0" <- pure "idr_Main.{adder_0}2.0"
      "idr_{APPLY_0}0_val.12.0" <- fetch "idr_{APPLY_0}0.12.0"
      "idr_Main.{adder_0}5_val.0" <- case "idr_{APPLY_0}0_val.12.0" of
        (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.12.0") ->
          "idr_Main.{main_9}0.0.0" <- pure "idr_{APPLY_0}2_1447.12.0"
          "idr_Main.{main_9}1.0.0" <- pure "idr_{APPLY_0}1.12.0"
          idris_int_add0.0.0.0 <- pure "idr_Main.{main_9}0.0.0"
          idris_int_add1.0.0.0 <- pure "idr_Main.{main_9}1.0.0"
          (CGrInt idris_int_add0_1.0.0.0) <- fetch idris_int_add0.0.0.0
          (CGrInt idris_int_add1_1.0.0.0) <- fetch idris_int_add1.0.0.0
          idris_int_add2.0.0.0 <- _prim_int_add idris_int_add0_1.0.0.0 idris_int_add1_1.0.0.0
          unboxed.CGrInt.26.1 <- pure idris_int_add2.0.0.0
          pure (CGrInt unboxed.CGrInt.26.1) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.26.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1.0.0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1.0.0.0)
      "idr_Main.{adder_0}5_1459.0" <- store "idr_Main.{adder_0}5_val.0"
      (CGrInt "idr_Main.{adder_0}1.49.43.arity.1.0") <- pure (CGrInt "idr_Main.{adder_0}1.57.arity.1.0") -- LINT: Syntax error - expected SimpleExp without nodes
      idr_Main.adder1.3.0 <- pure "idr_Main.{adder_0}0.0"
      idr_Main.adder2.49.arity.1.3.0 <- pure "idr_Main.{adder_0}1.49.43.arity.1.0"
      idr_Main.adder3.3.0 <- pure "idr_Main.{adder_0}5_1459.0"
      idr_Main.adder2_val.3.0 <- pure (CGrInt idr_Main.adder2.49.arity.1.3.0)
      case idr_Main.adder2_val.3.0 of
        (CGrInt idr_Main.adder_cpat_LInt64_0.3.0) ->
          case idr_Main.adder_cpat_LInt64_0.3.0 of
            0 ->
              fetch idr_Main.adder3.3.0
            #default ->
              idr_Main.adder4_val_1.3.0 <- pure idr_Main.main11_val_120.0
              idr_Main.adder4.3.0 <- store idr_Main.adder4_val_1.3.0
              (CGrInt idr_Main.adder2.41.0.arity.1.3.0) <- pure (CGrInt idr_Main.adder2.49.arity.1.3.0) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idr_Main.adder4.41.0.arity.1.3.0) <- pure idr_Main.adder4_val_1.3.0
              idris_int_sub0.41.arity.1.0.3.0 <- pure idr_Main.adder2.41.0.arity.1.3.0
              idris_int_sub1.41.arity.1.0.3.0 <- pure idr_Main.adder4.41.0.arity.1.3.0
              (CGrInt idris_int_sub0_1.0.3.0) <- pure (CGrInt idris_int_sub0.41.arity.1.0.3.0) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_sub1_1.0.3.0) <- pure (CGrInt idris_int_sub1.41.arity.1.0.3.0) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_sub2.0.3.0 <- _prim_int_sub idris_int_sub0_1.0.3.0 idris_int_sub1_1.0.3.0
              unboxed.CGrInt.1.3.0 <- pure idris_int_sub2.0.3.0
              idr_Main.adder4_val.3.0 <- pure (CGrInt unboxed.CGrInt.1.3.0)
              idr_Main.adder4_2.3.0 <- store idr_Main.adder4_val.3.0
              pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.3.0 idr_Main.adder4_2.3.0 idr_Main.adder3.3.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.3.0 idr_Main.adder4_2.3.0 idr_Main.adder3.3.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_{APPLY_0}3_1445.1.0.57.0.arity.1")
    #default ->
      pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main9_125.0 <- store idr_Main.main9_val_114.0
  idr_Main.main6_val_107.0 <- idr_Prelude.Interactive.printLn' idr_Main.main8_113.0 idr_Main.main9_125.0
  idr_Main.main9_val_132.0 <- pure idr_Main.main7_val_102.0
  idr_Main.main9_133.0 <- store idr_Main.main9_val_132.0
  idr_Main.main11_val_139.0 <- pure idr_Main.main9_val.0
  idr_Main.main11_140.0 <- store idr_Main.main11_val_139.0
  idr_Main.main12_val_141.0 <- pure (CGrInt 2)
  idr_Main.main12_142.0 <- store idr_Main.main12_val_141.0
  idr_Main.main13_val.0 <- pure idr_Main.main11_val_120.0
  idr_Main.main13.0 <- store idr_Main.main13_val.0
  (CGrInt idr_Main.main12_142.49.14.arity.1.0) <- pure idr_Main.main12_val_141.0
  idr_Main.adder1.2 <- pure idr_Main.main11_140.0
  idr_Main.adder2.49.arity.1.2 <- pure idr_Main.main12_142.49.14.arity.1.0
  idr_Main.adder3.2 <- pure idr_Main.main13.0
  idr_Main.adder2_val.2 <- pure (CGrInt idr_Main.adder2.49.arity.1.2)
  idr_Main.main10_val_136.0 <- case idr_Main.adder2_val.2 of
    (CGrInt idr_Main.adder_cpat_LInt64_0.2) ->
      case idr_Main.adder_cpat_LInt64_0.2 of
        0 ->
          fetch idr_Main.adder3.2
        #default ->
          idr_Main.adder4_val_1.2 <- pure idr_Main.main11_val_120.0
          idr_Main.adder4.2 <- store idr_Main.adder4_val_1.2
          (CGrInt idr_Main.adder2.41.0.arity.1.2) <- pure (CGrInt idr_Main.adder2.49.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idr_Main.adder4.41.0.arity.1.2) <- pure idr_Main.adder4_val_1.2
          idris_int_sub0.41.arity.1.0.2 <- pure idr_Main.adder2.41.0.arity.1.2
          idris_int_sub1.41.arity.1.0.2 <- pure idr_Main.adder4.41.0.arity.1.2
          (CGrInt idris_int_sub0_1.0.2) <- pure (CGrInt idris_int_sub0.41.arity.1.0.2) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_sub1_1.0.2) <- pure (CGrInt idris_int_sub1.41.arity.1.0.2) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_sub2.0.2 <- _prim_int_sub idris_int_sub0_1.0.2 idris_int_sub1_1.0.2
          unboxed.CGrInt.1.2 <- pure idris_int_sub2.0.2
          idr_Main.adder4_val.2 <- pure (CGrInt unboxed.CGrInt.1.2)
          idr_Main.adder4_2.2 <- store idr_Main.adder4_val.2
          pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.2 idr_Main.adder4_2.2 idr_Main.adder3.2) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.2 idr_Main.adder4_2.2 idr_Main.adder3.2)
  idr_Main.main10_143.0 <- store idr_Main.main10_val_136.0
  idr_Main.main11_val_144.0 <- pure (CGrInt 4)
  idr_Main.main11_145.0 <- store idr_Main.main11_val_144.0
  "idr_{APPLY_0}0.2.0" <- pure idr_Main.main10_143.0
  "idr_{APPLY_0}1.2.0" <- pure idr_Main.main11_145.0
  "idr_{APPLY_0}0_val.2.0" <- fetch "idr_{APPLY_0}0.2.0"
  idr_Main.main10_val_135.0 <- case "idr_{APPLY_0}0_val.2.0" of
    (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.2.0" "idr_{APPLY_0}3_1445.2.0" "idr_{APPLY_0}4_1446.2.0") ->
      (CGrInt "idr_{APPLY_0}3_1445.2.0.57.1.arity.1") <- fetch "idr_{APPLY_0}3_1445.2.0"
      "idr_Main.{adder_0}0.1" <- pure "idr_{APPLY_0}2_1444.2.0"
      "idr_Main.{adder_0}1.57.arity.1.1" <- pure "idr_{APPLY_0}3_1445.2.0.57.1.arity.1"
      "idr_Main.{adder_0}2.1" <- pure "idr_{APPLY_0}4_1446.2.0"
      "idr_Main.{adder_0}3.1" <- pure "idr_{APPLY_0}1.2.0"
      "idr_{APPLY_0}0.11.1" <- pure "idr_Main.{adder_0}0.1"
      "idr_{APPLY_0}1.11.1" <- pure "idr_Main.{adder_0}3.1"
      "idr_{APPLY_0}0_val.11.1" <- fetch "idr_{APPLY_0}0.11.1"
      "idr_Main.{adder_0}5_val_1458.1" <- case "idr_{APPLY_0}0_val.11.1" of
        (C"idr_{U_Main.{main_9}_2}") ->
          pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.11.1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.11.1")
      "idr_Main.{adder_0}5.1" <- store "idr_Main.{adder_0}5_val_1458.1"
      "idr_{APPLY_0}0.12.1" <- pure "idr_Main.{adder_0}5.1"
      "idr_{APPLY_0}1.12.1" <- pure "idr_Main.{adder_0}2.1"
      "idr_{APPLY_0}0_val.12.1" <- fetch "idr_{APPLY_0}0.12.1"
      "idr_Main.{adder_0}5_val.1" <- case "idr_{APPLY_0}0_val.12.1" of
        (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.12.1") ->
          "idr_Main.{main_9}0.0.1" <- pure "idr_{APPLY_0}2_1447.12.1"
          "idr_Main.{main_9}1.0.1" <- pure "idr_{APPLY_0}1.12.1"
          idris_int_add0.0.0.1 <- pure "idr_Main.{main_9}0.0.1"
          idris_int_add1.0.0.1 <- pure "idr_Main.{main_9}1.0.1"
          (CGrInt idris_int_add0_1.0.0.1) <- fetch idris_int_add0.0.0.1
          (CGrInt idris_int_add1_1.0.0.1) <- fetch idris_int_add1.0.0.1
          idris_int_add2.0.0.1 <- _prim_int_add idris_int_add0_1.0.0.1 idris_int_add1_1.0.0.1
          unboxed.CGrInt.26.2 <- pure idris_int_add2.0.0.1
          pure (CGrInt unboxed.CGrInt.26.2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.26.2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1.0.0.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1.0.0.1)
      "idr_Main.{adder_0}5_1459.1" <- store "idr_Main.{adder_0}5_val.1"
      (CGrInt "idr_Main.{adder_0}1.49.43.arity.1.1") <- pure (CGrInt "idr_Main.{adder_0}1.57.arity.1.1") -- LINT: Syntax error - expected SimpleExp without nodes
      idr_Main.adder1.3.1 <- pure "idr_Main.{adder_0}0.1"
      idr_Main.adder2.49.arity.1.3.1 <- pure "idr_Main.{adder_0}1.49.43.arity.1.1"
      idr_Main.adder3.3.1 <- pure "idr_Main.{adder_0}5_1459.1"
      idr_Main.adder2_val.3.1 <- pure (CGrInt idr_Main.adder2.49.arity.1.3.1)
      case idr_Main.adder2_val.3.1 of
        (CGrInt idr_Main.adder_cpat_LInt64_0.3.1) ->
          case idr_Main.adder_cpat_LInt64_0.3.1 of
            0 ->
              fetch idr_Main.adder3.3.1
            #default ->
              idr_Main.adder4_val_1.3.1 <- pure idr_Main.main11_val_120.0
              idr_Main.adder4.3.1 <- store idr_Main.adder4_val_1.3.1
              (CGrInt idr_Main.adder2.41.0.arity.1.3.1) <- pure (CGrInt idr_Main.adder2.49.arity.1.3.1) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idr_Main.adder4.41.0.arity.1.3.1) <- pure idr_Main.adder4_val_1.3.1
              idris_int_sub0.41.arity.1.0.3.1 <- pure idr_Main.adder2.41.0.arity.1.3.1
              idris_int_sub1.41.arity.1.0.3.1 <- pure idr_Main.adder4.41.0.arity.1.3.1
              (CGrInt idris_int_sub0_1.0.3.1) <- pure (CGrInt idris_int_sub0.41.arity.1.0.3.1) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_sub1_1.0.3.1) <- pure (CGrInt idris_int_sub1.41.arity.1.0.3.1) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_sub2.0.3.1 <- _prim_int_sub idris_int_sub0_1.0.3.1 idris_int_sub1_1.0.3.1
              unboxed.CGrInt.1.3.1 <- pure idris_int_sub2.0.3.1
              idr_Main.adder4_val.3.1 <- pure (CGrInt unboxed.CGrInt.1.3.1)
              idr_Main.adder4_2.3.1 <- store idr_Main.adder4_val.3.1
              pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.3.1 idr_Main.adder4_2.3.1 idr_Main.adder3.3.1) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.3.1 idr_Main.adder4_2.3.1 idr_Main.adder3.3.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_{APPLY_0}3_1445.2.0.57.1.arity.1")
    #default ->
      pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main10_146.0 <- store idr_Main.main10_val_135.0
  idr_Main.main11_val_147.0 <- pure (CGrInt 7)
  idr_Main.main11_148.0 <- store idr_Main.main11_val_147.0
  "idr_{APPLY_0}0.3.0" <- pure idr_Main.main10_146.0
  "idr_{APPLY_0}1.3.0" <- pure idr_Main.main11_148.0
  "idr_{APPLY_0}0_val.3.0" <- fetch "idr_{APPLY_0}0.3.0"
  idr_Main.main10_val_134.0 <- case "idr_{APPLY_0}0_val.3.0" of
    (C"idr_{U_Main.{adder_0}_1}" "idr_{APPLY_0}2_1444.3.0" "idr_{APPLY_0}3_1445.3.0" "idr_{APPLY_0}4_1446.3.0") ->
      (CGrInt "idr_{APPLY_0}3_1445.3.0.57.2.arity.1") <- fetch "idr_{APPLY_0}3_1445.3.0"
      "idr_Main.{adder_0}0.2" <- pure "idr_{APPLY_0}2_1444.3.0"
      "idr_Main.{adder_0}1.57.arity.1.2" <- pure "idr_{APPLY_0}3_1445.3.0.57.2.arity.1"
      "idr_Main.{adder_0}2.2" <- pure "idr_{APPLY_0}4_1446.3.0"
      "idr_Main.{adder_0}3.2" <- pure "idr_{APPLY_0}1.3.0"
      "idr_{APPLY_0}0.11.2" <- pure "idr_Main.{adder_0}0.2"
      "idr_{APPLY_0}1.11.2" <- pure "idr_Main.{adder_0}3.2"
      "idr_{APPLY_0}0_val.11.2" <- fetch "idr_{APPLY_0}0.11.2"
      "idr_Main.{adder_0}5_val_1458.2" <- case "idr_{APPLY_0}0_val.11.2" of
        (C"idr_{U_Main.{main_9}_2}") ->
          pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.11.2") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}1.11.2")
      "idr_Main.{adder_0}5.2" <- store "idr_Main.{adder_0}5_val_1458.2"
      "idr_{APPLY_0}0.12.2" <- pure "idr_Main.{adder_0}5.2"
      "idr_{APPLY_0}1.12.2" <- pure "idr_Main.{adder_0}2.2"
      "idr_{APPLY_0}0_val.12.2" <- fetch "idr_{APPLY_0}0.12.2"
      "idr_Main.{adder_0}5_val.2" <- case "idr_{APPLY_0}0_val.12.2" of
        (C"idr_{U_Main.{main_9}_1}" "idr_{APPLY_0}2_1447.12.2") ->
          "idr_Main.{main_9}0.0.2" <- pure "idr_{APPLY_0}2_1447.12.2"
          "idr_Main.{main_9}1.0.2" <- pure "idr_{APPLY_0}1.12.2"
          idris_int_add0.0.0.2 <- pure "idr_Main.{main_9}0.0.2"
          idris_int_add1.0.0.2 <- pure "idr_Main.{main_9}1.0.2"
          (CGrInt idris_int_add0_1.0.0.2) <- fetch idris_int_add0.0.0.2
          (CGrInt idris_int_add1_1.0.0.2) <- fetch idris_int_add1.0.0.2
          idris_int_add2.0.0.2 <- _prim_int_add idris_int_add0_1.0.0.2 idris_int_add1_1.0.0.2
          unboxed.CGrInt.26.3 <- pure idris_int_add2.0.0.2
          pure (CGrInt unboxed.CGrInt.26.3) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.26.3) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1.0.0.2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1.0.0.2)
      "idr_Main.{adder_0}5_1459.2" <- store "idr_Main.{adder_0}5_val.2"
      (CGrInt "idr_Main.{adder_0}1.49.43.arity.1.2") <- pure (CGrInt "idr_Main.{adder_0}1.57.arity.1.2") -- LINT: Syntax error - expected SimpleExp without nodes
      idr_Main.adder1.3.2 <- pure "idr_Main.{adder_0}0.2"
      idr_Main.adder2.49.arity.1.3.2 <- pure "idr_Main.{adder_0}1.49.43.arity.1.2"
      idr_Main.adder3.3.2 <- pure "idr_Main.{adder_0}5_1459.2"
      idr_Main.adder2_val.3.2 <- pure (CGrInt idr_Main.adder2.49.arity.1.3.2)
      case idr_Main.adder2_val.3.2 of
        (CGrInt idr_Main.adder_cpat_LInt64_0.3.2) ->
          case idr_Main.adder_cpat_LInt64_0.3.2 of
            0 ->
              fetch idr_Main.adder3.3.2
            #default ->
              idr_Main.adder4_val_1.3.2 <- pure idr_Main.main11_val_120.0
              idr_Main.adder4.3.2 <- store idr_Main.adder4_val_1.3.2
              (CGrInt idr_Main.adder2.41.0.arity.1.3.2) <- pure (CGrInt idr_Main.adder2.49.arity.1.3.2) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idr_Main.adder4.41.0.arity.1.3.2) <- pure idr_Main.adder4_val_1.3.2
              idris_int_sub0.41.arity.1.0.3.2 <- pure idr_Main.adder2.41.0.arity.1.3.2
              idris_int_sub1.41.arity.1.0.3.2 <- pure idr_Main.adder4.41.0.arity.1.3.2
              (CGrInt idris_int_sub0_1.0.3.2) <- pure (CGrInt idris_int_sub0.41.arity.1.0.3.2) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_sub1_1.0.3.2) <- pure (CGrInt idris_int_sub1.41.arity.1.0.3.2) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_sub2.0.3.2 <- _prim_int_sub idris_int_sub0_1.0.3.2 idris_int_sub1_1.0.3.2
              unboxed.CGrInt.1.3.2 <- pure idris_int_sub2.0.3.2
              idr_Main.adder4_val.3.2 <- pure (CGrInt unboxed.CGrInt.1.3.2)
              idr_Main.adder4_2.3.2 <- store idr_Main.adder4_val.3.2
              pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.3.2 idr_Main.adder4_2.3.2 idr_Main.adder3.3.2) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{adder_0}_1}" idr_Main.adder1.3.2 idr_Main.adder4_2.3.2 idr_Main.adder3.3.2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_{APPLY_0}3_1445.3.0.57.2.arity.1")
    #default ->
      pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main10_149.0 <- store idr_Main.main10_val_134.0
  idr_Main.main7_val_127.0 <- idr_Prelude.Interactive.printLn' idr_Main.main9_133.0 idr_Main.main10_149.0
  idr_Main.main8_val_158.0 <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
  idr_Main.main8_159.0 <- store idr_Main.main8_val_158.0
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.25" <- pure idr_Main.main8_159.0
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.25" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
  idr_Main.main8_val_157.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.25" of
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.25" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.25"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.25" of
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
  idr_Main.main8_162.0 <- store idr_Main.main8_val_157.0
  idr_Main.main8_val_163.0 <- pure idr_Main.main8_val_157.0
  idr_Main.main8_val_156.0 <- case idr_Main.main8_val_163.0 of
    (Cidr_Prelude.Basics.Yes) ->
      idr_Main.main9_val_165.0 <- pure (CGrString #"Hello!")
      idr_Main.main9_166.0 <- store idr_Main.main9_val_165.0
      idris_str_head1.42 <- pure idr_Main.main9_166.0
      (CGrString idris_str_head1_0.42) <- fetch idris_str_head1.42
      idris_str_head2.42 <- _prim_string_head idris_str_head1_0.42
      unboxed.CGrInt.11.0 <- pure idris_str_head2.42
      idr_Main.main9_val_164.0 <- pure (CGrInt unboxed.CGrInt.11.0)
      idr_Main.main9_167.0 <- store idr_Main.main9_val_164.0
      idr_Main.main11_val_176.0 <- pure idr_Main.main9_val_165.0
      idr_Main.main11_177.0 <- store idr_Main.main11_val_176.0
      idris_str_tail1.124 <- pure idr_Main.main11_177.0
      (CGrString idris_str_tail1_0.124) <- fetch idris_str_tail1.124
      idris_str_tail2.124 <- _prim_string_tail idris_str_tail1_0.124
      unboxed.CGrString.5.0 <- pure idris_str_tail2.124
      idr_Main.main11_val_175.0 <- pure (CGrString unboxed.CGrString.5.0)
      idr_Main.main11_178.0 <- store idr_Main.main11_val_175.0
      idr_Main.main12_val_179.0 <- pure idr_Prelude.Strings.trim2_val.0
      idr_Main.main12_180.0 <- store idr_Main.main12_val_179.0
      (CGrString idr_Main.main12_180.41.11.arity.1.0) <- pure idr_Main.main12_val_179.0
      idris_str_eq1.25 <- pure idr_Main.main11_178.0
      idris_str_eq2.41.arity.1.25 <- pure idr_Main.main12_180.41.11.arity.1.0
      (CGrString idris_str_eq1_0.25) <- fetch idris_str_eq1.25
      (CGrString idris_str_eq2_0.25) <- pure (CGrString idris_str_eq2.41.arity.1.25) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_eq3.25 <- _prim_string_eq idris_str_eq1_0.25 idris_str_eq2_0.25
      ccp.2.25 <- case idris_str_eq3.25 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.12.0 <- pure ccp.2.25
      idr_Main.main11_val_174.0 <- pure (CGrInt unboxed.CGrInt.12.0)
      idr_Main.main11_181.0 <- store idr_Main.main11_val_174.0
      idr_Main.main11_val_182.0 <- pure idr_Main.main11_val_174.0
      idr_Main.main11_val_173.0 <- case idr_Main.main11_val_182.0 of
        (CGrInt idr_Main.main_cpat_LInt64_0.0) ->
          case idr_Main.main_cpat_LInt64_0.0 of
            0 ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Main.main11_183.0 <- store idr_Main.main11_val_173.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.26" <- pure idr_Main.main11_183.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.26" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
      idr_Main.main11_val_172.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.26" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.26" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.26"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.26" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Main.main11_186.0 <- store idr_Main.main11_val_172.0
      idr_Main.main11_val_187.0 <- pure idr_Main.main11_val_172.0
      idr_Main.main11_val_171.0 <- case idr_Main.main11_val_187.0 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Main.main12_val_190.0 <- pure idr_Main.main9_val_165.0
          idr_Main.main12_191.0 <- store idr_Main.main12_val_190.0
          idris_str_tail1.125 <- pure idr_Main.main12_191.0
          (CGrString idris_str_tail1_0.125) <- fetch idris_str_tail1.125
          idris_str_tail2.125 <- _prim_string_tail idris_str_tail1_0.125
          unboxed.CGrString.6.0 <- pure idris_str_tail2.125
          idr_Main.main12_val_189.0 <- pure (CGrString unboxed.CGrString.6.0)
          idr_Main.main12_192.0 <- store idr_Main.main12_val_189.0
          idris_str_head1.43 <- pure idr_Main.main12_192.0
          (CGrString idris_str_head1_0.43) <- fetch idris_str_head1.43
          idris_str_head2.43 <- _prim_string_head idris_str_head1_0.43
          unboxed.CGrInt.13.0 <- pure idris_str_head2.43
          idr_Main.main12_val_188.0 <- pure (CGrInt unboxed.CGrInt.13.0)
          idr_Main.main12_193.0 <- store idr_Main.main12_val_188.0
          idr_Main.main13_val_196.0 <- pure idr_Main.main9_val_165.0
          idr_Main.main13_197.0 <- store idr_Main.main13_val_196.0
          idris_str_tail1.126 <- pure idr_Main.main13_197.0
          (CGrString idris_str_tail1_0.126) <- fetch idris_str_tail1.126
          idris_str_tail2.126 <- _prim_string_tail idris_str_tail1_0.126
          unboxed.CGrString.7.0 <- pure idris_str_tail2.126
          idr_Main.main13_val_195.0 <- pure (CGrString unboxed.CGrString.7.0)
          idr_Main.main13_198.0 <- store idr_Main.main13_val_195.0
          idris_str_tail1.127 <- pure idr_Main.main13_198.0
          (CGrString idris_str_tail1_0.127) <- fetch idris_str_tail1.127
          idris_str_tail2.127 <- _prim_string_tail idris_str_tail1_0.127
          unboxed.CGrString.8.0 <- pure idris_str_tail2.127
          idr_Main.main13_val_194.0 <- pure (CGrString unboxed.CGrString.8.0)
          idr_Main.main13_199.0 <- store idr_Main.main13_val_194.0
          pure (Cidr_Prelude.Strings.StrCons idr_Main.main12_193.0 idr_Main.main13_199.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Main.main12_193.0 idr_Main.main13_199.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.127) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.126) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.43) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.125)
      idr_Main.main11_200.0 <- store idr_Main.main11_val_171.0
      idr_Main.main10_val_168.0 <- idr__Prelude.Strings.unpack_with_36 idr_Main.main11_200.0
      idr_Main.main10_201.0 <- store idr_Main.main10_val_168.0
      pure (Cidr_Prelude.List.:: idr_Main.main9_167.0 idr_Main.main10_201.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Main.main9_167.0 idr_Main.main10_201.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.25) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.124) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.42)
  idr_Main.main8_202.0 <- store idr_Main.main8_val_156.0
  idr_Main.main8_val_155.0 <- idr_Main.toFormat idr_Main.main8_202.0
  idr_Main.main8_203.0 <- store idr_Main.main8_val_155.0
  idr_Main.main9_val_204.0 <- pure idr_Prelude.Strings.trim2_val.0
  idr_Main.main9_205.0 <- store idr_Main.main9_val_204.0
  idr_Main.main8_val_154.0 <- idr_Main.printFmt idr_Main.main8_203.0 idr_Main.main9_205.0
  idr_Main.main8_206.0 <- store idr_Main.main8_val_154.0
  idr_Main.main9_val_207.0 <- pure (CGrString #"\n")
  idr_Main.main9_208.0 <- store idr_Main.main9_val_207.0
  idris_str_concat1.0 <- pure idr_Main.main8_206.0
  idris_str_concat2.0 <- pure idr_Main.main9_208.0
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.0)
  -- LINT: Invalid pattern match for (CGrString idris_str_concat1_0.0). Expected pattern of type: {CGrString[T_String]}, but got: {CGrString[T_String]
  ,C"idr_{U_Main.{printFmt_14}_1}"[{945}
                                  ,{720,744,770,800,980,981}]
  ,C"idr_{U_Main.{printFmt_15}_1}"[{946}
                                  ,{720,744,770,800,980,981}]}
  (CGrString idris_str_concat1_0.0) <- fetch idris_str_concat1.0
  (CGrString idris_str_concat2_0.0) <- fetch idris_str_concat2.0
  idris_str_concat3.0 <- _prim_string_concat idris_str_concat1_0.0 idris_str_concat2_0.0
  unboxed.CGrString.248.0 <- pure idris_str_concat3.0
  idr_Main.main8_val_153.0 <- pure (CGrString unboxed.CGrString.248.0)
  idr_Main.main8_209.0 <- store idr_Main.main8_val_153.0
  (CGrString idr_Main.main8_209.41.13.arity.1.0) <- pure idr_Main.main8_val_153.0
  idris_write_str2.41.arity.1.0 <- pure idr_Main.main8_209.41.13.arity.1.0
  (CGrString idris_write_str2_0.0) <- pure (CGrString idris_write_str2.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0.0
  idr_Main.main9_val_220.0 <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
  idr_Main.main9_221.0 <- store idr_Main.main9_val_220.0
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.27" <- pure idr_Main.main9_221.0
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.27" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
  idr_Main.main9_val_219.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.27" of
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.27" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.27"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.27" of
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
  idr_Main.main9_224.0 <- store idr_Main.main9_val_219.0
  idr_Main.main9_val_225.0 <- pure idr_Main.main9_val_219.0
  idr_Main.main9_val_218.0 <- case idr_Main.main9_val_225.0 of
    (Cidr_Prelude.Basics.Yes) ->
      idr_Main.main10_val_227.0 <- pure (CGrString #"Answer : %d")
      idr_Main.main10_228.0 <- store idr_Main.main10_val_227.0
      idris_str_head1.44 <- pure idr_Main.main10_228.0
      (CGrString idris_str_head1_0.44) <- fetch idris_str_head1.44
      idris_str_head2.44 <- _prim_string_head idris_str_head1_0.44
      unboxed.CGrInt.14.0 <- pure idris_str_head2.44
      idr_Main.main10_val_226.0 <- pure (CGrInt unboxed.CGrInt.14.0)
      idr_Main.main10_229.0 <- store idr_Main.main10_val_226.0
      idr_Main.main12_val_238.0 <- pure idr_Main.main10_val_227.0
      idr_Main.main12_239.0 <- store idr_Main.main12_val_238.0
      idris_str_tail1.128 <- pure idr_Main.main12_239.0
      (CGrString idris_str_tail1_0.128) <- fetch idris_str_tail1.128
      idris_str_tail2.128 <- _prim_string_tail idris_str_tail1_0.128
      unboxed.CGrString.9.0 <- pure idris_str_tail2.128
      idr_Main.main12_val_237.0 <- pure (CGrString unboxed.CGrString.9.0)
      idr_Main.main12_240.0 <- store idr_Main.main12_val_237.0
      idr_Main.main13_val_241.0 <- pure idr_Prelude.Strings.trim2_val.0
      idr_Main.main13_242.0 <- store idr_Main.main13_val_241.0
      (CGrString idr_Main.main13_242.41.15.arity.1.0) <- pure idr_Main.main13_val_241.0
      idris_str_eq1.26 <- pure idr_Main.main12_240.0
      idris_str_eq2.41.arity.1.26 <- pure idr_Main.main13_242.41.15.arity.1.0
      (CGrString idris_str_eq1_0.26) <- fetch idris_str_eq1.26
      (CGrString idris_str_eq2_0.26) <- pure (CGrString idris_str_eq2.41.arity.1.26) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_eq3.26 <- _prim_string_eq idris_str_eq1_0.26 idris_str_eq2_0.26
      ccp.2.26 <- case idris_str_eq3.26 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.15.0 <- pure ccp.2.26
      idr_Main.main12_val_236.0 <- pure (CGrInt unboxed.CGrInt.15.0)
      idr_Main.main12_243.0 <- store idr_Main.main12_val_236.0
      idr_Main.main12_val_244.0 <- pure idr_Main.main12_val_236.0
      idr_Main.main12_val_235.0 <- case idr_Main.main12_val_244.0 of
        (CGrInt idr_Main.main_cpat_LInt64_0_245.0) ->
          case idr_Main.main_cpat_LInt64_0_245.0 of
            0 ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Main.main12_246.0 <- store idr_Main.main12_val_235.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.28" <- pure idr_Main.main12_246.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.28" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
      idr_Main.main12_val_234.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.28" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.28" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.28"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.28" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Main.main12_249.0 <- store idr_Main.main12_val_234.0
      idr_Main.main12_val_250.0 <- pure idr_Main.main12_val_234.0
      idr_Main.main12_val_233.0 <- case idr_Main.main12_val_250.0 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Main.main13_val_253.0 <- pure idr_Main.main10_val_227.0
          idr_Main.main13_254.0 <- store idr_Main.main13_val_253.0
          idris_str_tail1.129 <- pure idr_Main.main13_254.0
          (CGrString idris_str_tail1_0.129) <- fetch idris_str_tail1.129
          idris_str_tail2.129 <- _prim_string_tail idris_str_tail1_0.129
          unboxed.CGrString.10.0 <- pure idris_str_tail2.129
          idr_Main.main13_val_252.0 <- pure (CGrString unboxed.CGrString.10.0)
          idr_Main.main13_255.0 <- store idr_Main.main13_val_252.0
          idris_str_head1.45 <- pure idr_Main.main13_255.0
          (CGrString idris_str_head1_0.45) <- fetch idris_str_head1.45
          idris_str_head2.45 <- _prim_string_head idris_str_head1_0.45
          unboxed.CGrInt.16.0 <- pure idris_str_head2.45
          idr_Main.main13_val_251.0 <- pure (CGrInt unboxed.CGrInt.16.0)
          idr_Main.main13_256.0 <- store idr_Main.main13_val_251.0
          idr_Main.main14_val_258.0 <- pure idr_Main.main10_val_227.0
          idr_Main.main14.0 <- store idr_Main.main14_val_258.0
          idris_str_tail1.130 <- pure idr_Main.main14.0
          (CGrString idris_str_tail1_0.130) <- fetch idris_str_tail1.130
          idris_str_tail2.130 <- _prim_string_tail idris_str_tail1_0.130
          unboxed.CGrString.11.0 <- pure idris_str_tail2.130
          idr_Main.main14_val_257.0 <- pure (CGrString unboxed.CGrString.11.0)
          idr_Main.main14_259.0 <- store idr_Main.main14_val_257.0
          idris_str_tail1.131 <- pure idr_Main.main14_259.0
          (CGrString idris_str_tail1_0.131) <- fetch idris_str_tail1.131
          idris_str_tail2.131 <- _prim_string_tail idris_str_tail1_0.131
          unboxed.CGrString.12.0 <- pure idris_str_tail2.131
          idr_Main.main14_val.0 <- pure (CGrString unboxed.CGrString.12.0)
          idr_Main.main14_260.0 <- store idr_Main.main14_val.0
          pure (Cidr_Prelude.Strings.StrCons idr_Main.main13_256.0 idr_Main.main14_260.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Main.main13_256.0 idr_Main.main14_260.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.131) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.130) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.45) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.129)
      idr_Main.main12_261.0 <- store idr_Main.main12_val_233.0
      idr_Main.main11_val_230.0 <- idr__Prelude.Strings.unpack_with_36 idr_Main.main12_261.0
      idr_Main.main11_262.0 <- store idr_Main.main11_val_230.0
      pure (Cidr_Prelude.List.:: idr_Main.main10_229.0 idr_Main.main11_262.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Main.main10_229.0 idr_Main.main11_262.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.26) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.128) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.44)
  idr_Main.main9_263.0 <- store idr_Main.main9_val_218.0
  idr_Main.main9_val_217.0 <- idr_Main.toFormat idr_Main.main9_263.0
  idr_Main.main9_264.0 <- store idr_Main.main9_val_217.0
  idr_Main.main10_val_265.0 <- pure idr_Prelude.Strings.trim2_val.0
  idr_Main.main10_266.0 <- store idr_Main.main10_val_265.0
  idr_Main.main9_val_216.0 <- idr_Main.printFmt idr_Main.main9_264.0 idr_Main.main10_266.0
  idr_Main.main9_267.0 <- store idr_Main.main9_val_216.0
  idr_Main.main10_val_268.0 <- pure (CGrInt 42)
  idr_Main.main10_269.0 <- store idr_Main.main10_val_268.0
  "idr_{APPLY_0}0.4.0" <- pure idr_Main.main9_267.0
  "idr_{APPLY_0}1.4.0" <- pure idr_Main.main10_269.0
  "idr_{APPLY_0}0_val.4.0" <- fetch "idr_{APPLY_0}0.4.0"
  idr_Main.main9_val_215.0 <- case "idr_{APPLY_0}0_val.4.0" of
    (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.4.0" "idr_{APPLY_0}3_1449.4.0") ->
      "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.4.0" "idr_{APPLY_0}3_1449.4.0" "idr_{APPLY_0}1.4.0"
    (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.4.0" "idr_{APPLY_0}3_1451.4.0") ->
      "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.4.0" "idr_{APPLY_0}3_1451.4.0" "idr_{APPLY_0}1.4.0"
    #default ->
      pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main9_270.0 <- store idr_Main.main9_val_215.0
  idr_Main.main10_val_271.0 <- pure idr_Main.main9_val_207.0
  idr_Main.main10_272.0 <- store idr_Main.main10_val_271.0
  idris_str_concat1.1 <- pure idr_Main.main9_270.0
  idris_str_concat2.1 <- pure idr_Main.main10_272.0
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.1)
  -- LINT: Invalid pattern match for (CGrString idris_str_concat1_0.1). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
  ,CGrString[T_String]
  ,C"idr_{U_Main.{printFmt_14}_1}"[{945}
                                  ,{720,744,770,800,980,981}]
  ,C"idr_{U_Main.{printFmt_15}_1}"[{946}
                                  ,{720,744,770,800,980,981}]}
  (CGrString idris_str_concat1_0.1) <- fetch idris_str_concat1.1
  (CGrString idris_str_concat2_0.1) <- fetch idris_str_concat2.1
  idris_str_concat3.1 <- _prim_string_concat idris_str_concat1_0.1 idris_str_concat2_0.1
  unboxed.CGrString.249.0 <- pure idris_str_concat3.1
  idr_Main.main9_val_214.0 <- pure (CGrString unboxed.CGrString.249.0)
  idr_Main.main9_273.0 <- store idr_Main.main9_val_214.0
  (CGrString idr_Main.main9_273.41.17.arity.1.0) <- pure idr_Main.main9_val_214.0
  idris_write_str2.41.arity.1.1 <- pure idr_Main.main9_273.41.17.arity.1.0
  (CGrString idris_write_str2_0.1) <- pure (CGrString idris_write_str2.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0.1
  idr_Main.main10_val_284.0 <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
  idr_Main.main10_285.0 <- store idr_Main.main10_val_284.0
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.29" <- pure idr_Main.main10_285.0
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.29" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
  idr_Main.main10_val_283.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.29" of
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.29" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.29"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.29" of
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
  idr_Main.main10_288.0 <- store idr_Main.main10_val_283.0
  idr_Main.main10_val_289.0 <- pure idr_Main.main10_val_283.0
  idr_Main.main10_val_282.0 <- case idr_Main.main10_val_289.0 of
    (Cidr_Prelude.Basics.Yes) ->
      idr_Main.main11_val_291.0 <- pure (CGrString #"%s numner %d")
      idr_Main.main11_292.0 <- store idr_Main.main11_val_291.0
      idris_str_head1.46 <- pure idr_Main.main11_292.0
      (CGrString idris_str_head1_0.46) <- fetch idris_str_head1.46
      idris_str_head2.46 <- _prim_string_head idris_str_head1_0.46
      unboxed.CGrInt.17.0 <- pure idris_str_head2.46
      idr_Main.main11_val_290.0 <- pure (CGrInt unboxed.CGrInt.17.0)
      idr_Main.main11_293.0 <- store idr_Main.main11_val_290.0
      idr_Main.main13_val_302.0 <- pure idr_Main.main11_val_291.0
      idr_Main.main13_303.0 <- store idr_Main.main13_val_302.0
      idris_str_tail1.132 <- pure idr_Main.main13_303.0
      (CGrString idris_str_tail1_0.132) <- fetch idris_str_tail1.132
      idris_str_tail2.132 <- _prim_string_tail idris_str_tail1_0.132
      unboxed.CGrString.13.0 <- pure idris_str_tail2.132
      idr_Main.main13_val_301.0 <- pure (CGrString unboxed.CGrString.13.0)
      idr_Main.main13_304.0 <- store idr_Main.main13_val_301.0
      idr_Main.main14_val_305.0 <- pure idr_Prelude.Strings.trim2_val.0
      idr_Main.main14_306.0 <- store idr_Main.main14_val_305.0
      (CGrString idr_Main.main14_306.41.19.arity.1.0) <- pure idr_Main.main14_val_305.0
      idris_str_eq1.27 <- pure idr_Main.main13_304.0
      idris_str_eq2.41.arity.1.27 <- pure idr_Main.main14_306.41.19.arity.1.0
      (CGrString idris_str_eq1_0.27) <- fetch idris_str_eq1.27
      (CGrString idris_str_eq2_0.27) <- pure (CGrString idris_str_eq2.41.arity.1.27) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_eq3.27 <- _prim_string_eq idris_str_eq1_0.27 idris_str_eq2_0.27
      ccp.2.27 <- case idris_str_eq3.27 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.18.0 <- pure ccp.2.27
      idr_Main.main13_val_300.0 <- pure (CGrInt unboxed.CGrInt.18.0)
      idr_Main.main13_307.0 <- store idr_Main.main13_val_300.0
      idr_Main.main13_val_308.0 <- pure idr_Main.main13_val_300.0
      idr_Main.main13_val_299.0 <- case idr_Main.main13_val_308.0 of
        (CGrInt idr_Main.main_cpat_LInt64_0_309.0) ->
          case idr_Main.main_cpat_LInt64_0_309.0 of
            0 ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Main.main13_310.0 <- store idr_Main.main13_val_299.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.30" <- pure idr_Main.main13_310.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.30" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
      idr_Main.main13_val_298.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.30" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.30" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.30"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.30" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Main.main13_313.0 <- store idr_Main.main13_val_298.0
      idr_Main.main13_val_314.0 <- pure idr_Main.main13_val_298.0
      idr_Main.main13_val_297.0 <- case idr_Main.main13_val_314.0 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Main.main14_val_317.0 <- pure idr_Main.main11_val_291.0
          idr_Main.main14_318.0 <- store idr_Main.main14_val_317.0
          idris_str_tail1.133 <- pure idr_Main.main14_318.0
          (CGrString idris_str_tail1_0.133) <- fetch idris_str_tail1.133
          idris_str_tail2.133 <- _prim_string_tail idris_str_tail1_0.133
          unboxed.CGrString.14.0 <- pure idris_str_tail2.133
          idr_Main.main14_val_316.0 <- pure (CGrString unboxed.CGrString.14.0)
          idr_Main.main14_319.0 <- store idr_Main.main14_val_316.0
          idris_str_head1.47 <- pure idr_Main.main14_319.0
          (CGrString idris_str_head1_0.47) <- fetch idris_str_head1.47
          idris_str_head2.47 <- _prim_string_head idris_str_head1_0.47
          unboxed.CGrInt.19.0 <- pure idris_str_head2.47
          idr_Main.main14_val_315.0 <- pure (CGrInt unboxed.CGrInt.19.0)
          idr_Main.main14_320.0 <- store idr_Main.main14_val_315.0
          idr_Main.main15_val_322.0 <- pure idr_Main.main11_val_291.0
          idr_Main.main15.0 <- store idr_Main.main15_val_322.0
          idris_str_tail1.134 <- pure idr_Main.main15.0
          (CGrString idris_str_tail1_0.134) <- fetch idris_str_tail1.134
          idris_str_tail2.134 <- _prim_string_tail idris_str_tail1_0.134
          unboxed.CGrString.15.0 <- pure idris_str_tail2.134
          idr_Main.main15_val_321.0 <- pure (CGrString unboxed.CGrString.15.0)
          idr_Main.main15_323.0 <- store idr_Main.main15_val_321.0
          idris_str_tail1.135 <- pure idr_Main.main15_323.0
          (CGrString idris_str_tail1_0.135) <- fetch idris_str_tail1.135
          idris_str_tail2.135 <- _prim_string_tail idris_str_tail1_0.135
          unboxed.CGrString.16.0 <- pure idris_str_tail2.135
          idr_Main.main15_val.0 <- pure (CGrString unboxed.CGrString.16.0)
          idr_Main.main15_324.0 <- store idr_Main.main15_val.0
          pure (Cidr_Prelude.Strings.StrCons idr_Main.main14_320.0 idr_Main.main15_324.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Main.main14_320.0 idr_Main.main15_324.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.135) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.134) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.47) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.133)
      idr_Main.main13_325.0 <- store idr_Main.main13_val_297.0
      idr_Main.main12_val_294.0 <- idr__Prelude.Strings.unpack_with_36 idr_Main.main13_325.0
      idr_Main.main12_326.0 <- store idr_Main.main12_val_294.0
      pure (Cidr_Prelude.List.:: idr_Main.main11_293.0 idr_Main.main12_326.0) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Main.main11_293.0 idr_Main.main12_326.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.27) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.132) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.46)
  idr_Main.main10_327.0 <- store idr_Main.main10_val_282.0
  idr_Main.main10_val_281.0 <- idr_Main.toFormat idr_Main.main10_327.0
  idr_Main.main10_328.0 <- store idr_Main.main10_val_281.0
  idr_Main.main11_val_329.0 <- pure idr_Prelude.Strings.trim2_val.0
  idr_Main.main11_330.0 <- store idr_Main.main11_val_329.0
  idr_Main.main10_val_280.0 <- idr_Main.printFmt idr_Main.main10_328.0 idr_Main.main11_330.0
  idr_Main.main10_331.0 <- store idr_Main.main10_val_280.0
  idr_Main.main11_val_332.0 <- pure (CGrString #"Page")
  idr_Main.main11_333.0 <- store idr_Main.main11_val_332.0
  "idr_{APPLY_0}0.5.0" <- pure idr_Main.main10_331.0
  "idr_{APPLY_0}1.5.0" <- pure idr_Main.main11_333.0
  "idr_{APPLY_0}0_val.5.0" <- fetch "idr_{APPLY_0}0.5.0"
  idr_Main.main10_val_279.0 <- case "idr_{APPLY_0}0_val.5.0" of
    (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.5.0" "idr_{APPLY_0}3_1449.5.0") ->
      "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.5.0" "idr_{APPLY_0}3_1449.5.0" "idr_{APPLY_0}1.5.0"
    (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.5.0" "idr_{APPLY_0}3_1451.5.0") ->
      "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.5.0" "idr_{APPLY_0}3_1451.5.0" "idr_{APPLY_0}1.5.0"
    #default ->
      pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main10_334.0 <- store idr_Main.main10_val_279.0
  idr_Main.main11_val_335.0 <- pure (CGrInt 97)
  idr_Main.main11_336.0 <- store idr_Main.main11_val_335.0
  "idr_{APPLY_0}0.6.0" <- pure idr_Main.main10_334.0
  "idr_{APPLY_0}1.6.0" <- pure idr_Main.main11_336.0
  "idr_{APPLY_0}0_val.6.0" <- fetch "idr_{APPLY_0}0.6.0"
  idr_Main.main10_val_278.0 <- case "idr_{APPLY_0}0_val.6.0" of
    (C"idr_{U_Main.{printFmt_14}_1}" "idr_{APPLY_0}2_1448.6.0" "idr_{APPLY_0}3_1449.6.0") ->
      "idr_Main.{printFmt_14}" "idr_{APPLY_0}2_1448.6.0" "idr_{APPLY_0}3_1449.6.0" "idr_{APPLY_0}1.6.0"
    (C"idr_{U_Main.{printFmt_15}_1}" "idr_{APPLY_0}2_1450.6.0" "idr_{APPLY_0}3_1451.6.0") ->
      "idr_Main.{printFmt_15}" "idr_{APPLY_0}2_1450.6.0" "idr_{APPLY_0}3_1451.6.0" "idr_{APPLY_0}1.6.0"
    #default ->
      pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Main.main10_337.0 <- store idr_Main.main10_val_278.0
  idr_Main.main11_val_338.0 <- pure idr_Main.main9_val_207.0
  idr_Main.main11_339.0 <- store idr_Main.main11_val_338.0
  idris_str_concat1.2 <- pure idr_Main.main10_337.0
  idris_str_concat2.2 <- pure idr_Main.main11_339.0
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.2)
  -- LINT: Invalid pattern match for (CGrString idris_str_concat1_0.2). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
  ,CGrString[T_String]
  ,C"idr_{U_Main.{printFmt_14}_1}"[{945}
                                  ,{720,744,770,800,980,981}]
  ,C"idr_{U_Main.{printFmt_15}_1}"[{946}
                                  ,{720,744,770,800,980,981}]}
  (CGrString idris_str_concat1_0.2) <- fetch idris_str_concat1.2
  (CGrString idris_str_concat2_0.2) <- fetch idris_str_concat2.2
  idris_str_concat3.2 <- _prim_string_concat idris_str_concat1_0.2 idris_str_concat2_0.2
  unboxed.CGrString.250.0 <- pure idris_str_concat3.2
  idr_Main.main10_val_277.0 <- pure (CGrString unboxed.CGrString.250.0)
  idr_Main.main10_340.0 <- store idr_Main.main10_val_277.0
  (CGrString idr_Main.main10_340.41.21.arity.1.0) <- pure idr_Main.main10_val_277.0
  idris_write_str2.41.arity.1.2 <- pure idr_Main.main10_340.41.21.arity.1.0
  (CGrString idris_write_str2_0.2) <- pure (CGrString idris_write_str2.41.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0.2
  pure () -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.5) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.0)

idr_Data.Vect.foldrImpl idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl4 idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl6 =
  idr_Data.Vect.foldrImpl6_val <- fetch idr_Data.Vect.foldrImpl6
  -- LINT: case has non-covered alternative CErased
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  -- LINT: case has non-covered alternative C"idr_{U_Main.{adder_0}_1}"
  case idr_Data.Vect.foldrImpl6_val of
    (Cidr_Data.Vect.:: idr_Data.Vect.foldrImpl7 idr_Data.Vect.foldrImpl8) ->
      idr_Data.Vect.foldrImpl12_val <- pure (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl7)
      idr_Data.Vect.foldrImpl12 <- store idr_Data.Vect.foldrImpl12_val
      idr_Data.Vect.foldrImpl idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl4 idr_Data.Vect.foldrImpl12 idr_Data.Vect.foldrImpl8
    (Cidr_Data.Vect.Nil) ->
      "idr_{APPLY_0}0.0" <- pure idr_Data.Vect.foldrImpl5
      "idr_{APPLY_0}1.0" <- pure idr_Data.Vect.foldrImpl4
      "idr_{APPLY_0}0_val.0" <- fetch "idr_{APPLY_0}0.0"
      case "idr_{APPLY_0}0_val.0" of
        (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.0" "idr_{APPLY_0}3.0" "idr_{APPLY_0}4.0") ->
          "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.0" "idr_{APPLY_0}3.0" "idr_{APPLY_0}4.0" "idr_{APPLY_0}1.0"
        (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
          "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}0.0" <- pure "idr_{APPLY_0}1.0"
          fetch "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}0.0"

idr_Prelude.Show.primNumShow.unboxed idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3 =
  "idr_{APPLY_0}0.7" <- pure idr_Prelude.Show.primNumShow1
  "idr_{APPLY_0}1.7" <- pure idr_Prelude.Show.primNumShow3
  "idr_{APPLY_0}0_val.7" <- fetch "idr_{APPLY_0}0.7"
  idr_Prelude.Show.primNumShow4_val <- case "idr_{APPLY_0}0_val.7" of
    (C"idr_{U_prim__floatToStr_1}") ->
      idr_prim__floatToStr0.0 <- pure "idr_{APPLY_0}1.7"
      idris_float_str1.0.0 <- pure idr_prim__floatToStr0.0
      -- LINT: The result of Fetch can only be bound to a variable: (CGrFloat idris_float_str1_0.0.0)
      -- LINT: Invalid pattern match for (CGrFloat idris_float_str1_0.0.0). Expected pattern of type: {CGrFloat[T_Float]}, but got: {CErased[]
      ,CGrFloat[T_Float]
      ,CGrInt[T_Int64]
      ,CGrString[T_String]
      ,Cidr_Data.Vect.::[{3,17}
                        ,{12,26}]
      ,C"idr_{U_Main.{adder_0}_1}"[{662
                                   ,669
                                   ,682}
                                  ,{666,679,698}
                                  ,{664,677,696}]}
      (CGrFloat idris_float_str1_0.0.0) <- fetch idris_float_str1.0.0
      idris_float_str2.0.0 <- _prim_float_string idris_float_str1_0.0.0
      unboxed.CGrString.251 <- pure idris_float_str2.0.0
      pure (CGrString unboxed.CGrString.251) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.251)
    (C"idr_{U_prim__toStrInt_1}") ->
      idr_prim__toStrInt0.0 <- pure "idr_{APPLY_0}1.7"
      idris_int_str1.0.0 <- pure idr_prim__toStrInt0.0
      -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.0.0)
      -- LINT: Invalid pattern match for (CGrInt idris_int_str1_0.0.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CErased[]
      ,CGrFloat[T_Float]
      ,CGrInt[T_Int64]
      ,CGrString[T_String]
      ,Cidr_Data.Vect.::[{3,17}
                        ,{12,26}]
      ,C"idr_{U_Main.{adder_0}_1}"[{662
                                   ,669
                                   ,682}
                                  ,{666,679,698}
                                  ,{664,677,696}]}
      (CGrInt idris_int_str1_0.0.0) <- fetch idris_int_str1.0.0
      idris_int_str2.0.0 <- _prim_int_str idris_int_str1_0.0.0
      unboxed.CGrString.252 <- pure idris_int_str2.0.0
      pure (CGrString unboxed.CGrString.252) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.252)
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- pure (Cidr_Prelude.Show.Open)
  ccp.3 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.Open) ->
      pure 0
  idr_Prelude.Show.primNumShow5_val_344 <- pure (CGrInt ccp.3)
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_344
  idr_Prelude.Show.primNumShow6_val <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6 <- store idr_Prelude.Show.primNumShow6_val
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0" <- pure idr_Prelude.Show.primNumShow5
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0" <- pure idr_Prelude.Show.primNumShow6
  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.212.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0"
  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0.49.15.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0"
  idris_int_eq0.49.arity.1.7 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0.49.15.arity.1"
  idris_int_eq1.41.arity.1.7 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.212.arity.1.0"
  (CGrInt idris_int_eq0_1.7) <- pure (CGrInt idris_int_eq0.49.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrInt idris_int_eq1_1.7) <- pure (CGrInt idris_int_eq1.41.arity.1.7) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_eq2.7 <- _prim_int_eq idris_int_eq0_1.7 idris_int_eq1_1.7
  ccp.0.7 <- case idris_int_eq2.7 of
    #False ->
      pure 0
    #True ->
      pure 1
  unboxed.CGrInt.103.0 <- pure ccp.0.7
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0" <- pure (CGrInt unboxed.CGrInt.103.0)
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02.0" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_1554.0" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0"
  idr_Prelude.Show.primNumShow5_val_343 <- case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_1554.0" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0" of
        0 ->
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.213.arity.1.0") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.212.arity.1.0") -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0.49.16.arity.1") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0.49.15.arity.1") -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_lt0.49.arity.1.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0.49.16.arity.1"
          idris_int_lt1.41.arity.1.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.213.arity.1.0"
          (CGrInt idris_int_lt0_1.0) <- pure (CGrInt idris_int_lt0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_lt1_1.0) <- pure (CGrInt idris_int_lt1.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_lt2.0 <- _prim_int_lt idris_int_lt0_1.0 idris_int_lt1_1.0
          ccp.1.0 <- case idris_int_lt2.0 of
            #False ->
              pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0"
            #True ->
              pure 1
          unboxed.CGrInt.104.0 <- pure ccp.1.0
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0" <- pure (CGrInt unboxed.CGrInt.104.0)
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03.0" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_1555.0" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_1555.0" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_1556.0") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_1556.0" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
  idr_Prelude.Show.primNumShow5_345 <- store idr_Prelude.Show.primNumShow5_val_343
  idr_Prelude.Show.primNumShow5_val_346 <- pure idr_Prelude.Show.primNumShow5_val_343
  idr_Prelude.Show.primNumShow5_val_342 <- case idr_Prelude.Show.primNumShow5_val_346 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Show.primNumShow2_val_349 <- pure idr_Prelude.Show.primNumShow2_val
      ccp.4 <- case idr_Prelude.Show.primNumShow2_val_349 of
        (Cidr_Prelude.Show.Open) ->
          pure 0
      idr_Prelude.Show.primNumShow6_val_348 <- pure (CGrInt ccp.4)
      idr_Prelude.Show.primNumShow6_350 <- store idr_Prelude.Show.primNumShow6_val_348
      idr_Prelude.Show.primNumShow7_val <- pure idr_Prelude.Show.primNumShow6_val
      idr_Prelude.Show.primNumShow7 <- store idr_Prelude.Show.primNumShow7_val
      (CGrInt idr_Prelude.Show.primNumShow7.41.22.arity.1) <- pure idr_Prelude.Show.primNumShow7_val
      (CGrInt idr_Prelude.Show.primNumShow6_350.49.17.arity.1) <- pure idr_Prelude.Show.primNumShow6_val_348
      idris_int_eq0.49.arity.1.8 <- pure idr_Prelude.Show.primNumShow6_350.49.17.arity.1
      idris_int_eq1.41.arity.1.8 <- pure idr_Prelude.Show.primNumShow7.41.22.arity.1
      (CGrInt idris_int_eq0_1.8) <- pure (CGrInt idris_int_eq0.49.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
      (CGrInt idris_int_eq1_1.8) <- pure (CGrInt idris_int_eq1.41.arity.1.8) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_int_eq2.8 <- _prim_int_eq idris_int_eq0_1.8 idris_int_eq1_1.8
      ccp.0.8 <- case idris_int_eq2.8 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.20 <- pure ccp.0.8
      idr_Prelude.Show.primNumShow6_val_347 <- pure (CGrInt unboxed.CGrInt.20)
      idr_Prelude.Show.primNumShow6_351 <- store idr_Prelude.Show.primNumShow6_val_347
      idr_Prelude.Show.primNumShow6_val_352 <- pure idr_Prelude.Show.primNumShow6_val_347
      case idr_Prelude.Show.primNumShow6_val_352 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_353 <- store idr_Prelude.Show.primNumShow5_val_342
  idr_Prelude.Show.primNumShow5_val_354 <- pure idr_Prelude.Show.primNumShow5_val_342
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_354 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_358 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_359 <- store idr_Prelude.Show.primNumShow6_val_358
      (CGrString idr_Prelude.Show.primNumShow6_359.41.23.arity.1) <- pure idr_Prelude.Show.primNumShow6_val_358
      idris_str_eq1.28 <- pure idr_Prelude.Show.primNumShow4
      idris_str_eq2.41.arity.1.28 <- pure idr_Prelude.Show.primNumShow6_359.41.23.arity.1
      (CGrString idris_str_eq1_0.28) <- fetch idris_str_eq1.28
      (CGrString idris_str_eq2_0.28) <- pure (CGrString idris_str_eq2.41.arity.1.28) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_eq3.28 <- _prim_string_eq idris_str_eq1_0.28 idris_str_eq2_0.28
      ccp.2.28 <- case idris_str_eq3.28 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.21 <- pure ccp.2.28
      idr_Prelude.Show.primNumShow6_val_357 <- pure (CGrInt unboxed.CGrInt.21)
      idr_Prelude.Show.primNumShow6_360 <- store idr_Prelude.Show.primNumShow6_val_357
      idr_Prelude.Show.primNumShow6_val_361 <- pure idr_Prelude.Show.primNumShow6_val_357
      idr_Prelude.Show.primNumShow6_val_356 <- case idr_Prelude.Show.primNumShow6_val_361 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_362) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_362 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Show.primNumShow6_363 <- store idr_Prelude.Show.primNumShow6_val_356
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.31" <- pure idr_Prelude.Show.primNumShow6_363
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.31" <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow6_val_355 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.31" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.31" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.31"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.31" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Prelude.Show.primNumShow6_366 <- store idr_Prelude.Show.primNumShow6_val_355
      idr_Prelude.Show.primNumShow6_val_367 <- pure idr_Prelude.Show.primNumShow6_val_355
      case idr_Prelude.Show.primNumShow6_val_367 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_head1.48 <- pure idr_Prelude.Show.primNumShow4
          (CGrString idris_str_head1_0.48) <- fetch idris_str_head1.48
          idris_str_head2.48 <- _prim_string_head idris_str_head1_0.48
          unboxed.CGrInt.22 <- pure idris_str_head2.48
          idr_Prelude.Show.primNumShow7_val_369 <- pure (CGrInt unboxed.CGrInt.22)
          idr_Prelude.Show.primNumShow7_370 <- store idr_Prelude.Show.primNumShow7_val_369
          idr_Prelude.Show.primNumShow8_val <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8 <- store idr_Prelude.Show.primNumShow8_val
          (CGrInt idr_Prelude.Show.primNumShow8.41.25.arity.1) <- pure idr_Prelude.Show.primNumShow8_val
          (CGrInt idr_Prelude.Show.primNumShow7_370.49.18.arity.1) <- pure idr_Prelude.Show.primNumShow7_val_369
          idris_int_eq0.49.arity.1.9 <- pure idr_Prelude.Show.primNumShow7_370.49.18.arity.1
          idris_int_eq1.41.arity.1.9 <- pure idr_Prelude.Show.primNumShow8.41.25.arity.1
          (CGrInt idris_int_eq0_1.9) <- pure (CGrInt idris_int_eq0.49.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_eq1_1.9) <- pure (CGrInt idris_int_eq1.41.arity.1.9) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_eq2.9 <- _prim_int_eq idris_int_eq0_1.9 idris_int_eq1_1.9
          ccp.0.9 <- case idris_int_eq2.9 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.23 <- pure ccp.0.9
          idr_Prelude.Show.primNumShow7_val_368 <- pure (CGrInt unboxed.CGrInt.23)
          idr_Prelude.Show.primNumShow7_371 <- store idr_Prelude.Show.primNumShow7_val_368
          idr_Prelude.Show.primNumShow7_val_372 <- pure idr_Prelude.Show.primNumShow7_val_368
          case idr_Prelude.Show.primNumShow7_val_372 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_373) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_373 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.31" -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.48) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.28)
  idr_Prelude.Show.primNumShow5_374 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_375 <- pure idr_Prelude.Show.primNumShow5_val
  case idr_Prelude.Show.primNumShow5_val_375 of
    (Cidr_Prelude.Bool.False) ->
      (CGrString unboxed.CGrString.247) <- pure idr_Prelude.Show.primNumShow4_val
      pure unboxed.CGrString.247
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_376 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_377 <- store idr_Prelude.Show.primNumShow6_val_376
      idr_Prelude.Show.primNumShow7_val_379 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_380 <- store idr_Prelude.Show.primNumShow7_val_379
      idris_str_concat1.3 <- pure idr_Prelude.Show.primNumShow4
      idris_str_concat2.3 <- pure idr_Prelude.Show.primNumShow7_380
      (CGrString idris_str_concat1_0.3) <- fetch idris_str_concat1.3
      (CGrString idris_str_concat2_0.3) <- fetch idris_str_concat2.3
      idris_str_concat3.3 <- _prim_string_concat idris_str_concat1_0.3 idris_str_concat2_0.3
      unboxed.CGrString.253 <- pure idris_str_concat3.3
      idr_Prelude.Show.primNumShow7_val_378 <- pure (CGrString unboxed.CGrString.253)
      idr_Prelude.Show.primNumShow7_381 <- store idr_Prelude.Show.primNumShow7_val_378
      idris_str_concat1.4 <- pure idr_Prelude.Show.primNumShow6_377
      idris_str_concat2.4 <- pure idr_Prelude.Show.primNumShow7_381
      (CGrString idris_str_concat1_0.4) <- fetch idris_str_concat1.4
      (CGrString idris_str_concat2_0.4) <- fetch idris_str_concat2.4
      idris_str_concat3.4 <- _prim_string_concat idris_str_concat1_0.4 idris_str_concat2_0.4
      pure idris_str_concat3.4 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.4) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.4) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.3) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0.49.15.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.212.arity.1.0")

idr_Main.printFmt idr_Main.printFmt0 idr_Main.printFmt1 =
  idr_Main.printFmt0_val <- fetch idr_Main.printFmt0
  case idr_Main.printFmt0_val of
    (Cidr_Main.End) ->
      fetch idr_Main.printFmt1
    (Cidr_Main.Lit idr_Main.printFmt2 idr_Main.printFmt3) ->
      idris_str_concat1.5 <- pure idr_Main.printFmt1
      idris_str_concat2.5 <- pure idr_Main.printFmt2
      (CGrString idris_str_concat1_0.5) <- fetch idris_str_concat1.5
      (CGrString idris_str_concat2_0.5) <- fetch idris_str_concat2.5
      idris_str_concat3.5 <- _prim_string_concat idris_str_concat1_0.5 idris_str_concat2_0.5
      unboxed.CGrString.254 <- pure idris_str_concat3.5
      idr_Main.printFmt4_val <- pure (CGrString unboxed.CGrString.254)
      idr_Main.printFmt4 <- store idr_Main.printFmt4_val
      idr_Main.printFmt idr_Main.printFmt3 idr_Main.printFmt4 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.5) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.5)
    (Cidr_Main.Number idr_Main.printFmt2_382) ->
      pure (C"idr_{U_Main.{printFmt_14}_1}" idr_Main.printFmt2_382 idr_Main.printFmt1) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{printFmt_14}_1}" idr_Main.printFmt2_382 idr_Main.printFmt1)
    (Cidr_Main.Str idr_Main.printFmt2_383) ->
      pure (C"idr_{U_Main.{printFmt_15}_1}" idr_Main.printFmt2_383 idr_Main.printFmt1) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{printFmt_15}_1}" idr_Main.printFmt2_383 idr_Main.printFmt1)

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  "idr_{APPLY_0}0.8" <- pure idr_Prelude.Interactive.printLn'2
  "idr_{APPLY_0}1.8" <- pure idr_Prelude.Interactive.printLn'3
  "idr_{APPLY_0}0_val.8" <- fetch "idr_{APPLY_0}0.8"
  idr_Prelude.Interactive.printLn'5_val_385 <- case "idr_{APPLY_0}0_val.8" of
    (C"idr_{U_Main.{main_3}_1}") ->
      "idr_Main.{main_3}0.0" <- pure "idr_{APPLY_0}1.8"
      "idr_Main.{main_3}3_val.0" <- pure (C"idr_{U_Main.{main_2}_1}")
      "idr_Main.{main_3}3.0" <- store "idr_Main.{main_3}3_val.0"
      unboxed.CGrString.255 <- "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0.unboxed" "idr_Main.{main_3}3.0" "idr_Main.{main_3}0.0"
      pure (CGrString unboxed.CGrString.255) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.255)
    (C"idr_{U_Main.{main_5}_1}") ->
      "idr_Main.{main_5}0.0" <- pure "idr_{APPLY_0}1.8"
      "idr_Main.{main_5}3_val.0" <- pure (C"idr_{U_Main.{main_4}_1}")
      "idr_Main.{main_5}3.0" <- store "idr_Main.{main_5}3_val.0"
      unboxed.CGrString.256 <- "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0.unboxed" "idr_Main.{main_5}3.0" "idr_Main.{main_5}0.0"
      pure (CGrString unboxed.CGrString.256) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.256)
    (C"idr_{U_Main.{main_6}_1}") ->
      "idr_Main.{main_6}0.0" <- pure "idr_{APPLY_0}1.8"
      "idr_Main.{main_6}1_val.0" <- pure (CGrInt 34)
      "idr_Main.{main_6}1.0" <- store "idr_Main.{main_6}1_val.0"
      "idr_Main.{main_6}2_val_1500.0" <- pure (CGrString #"")
      "idr_Main.{main_6}2.0" <- store "idr_Main.{main_6}2_val_1500.0"
      (CGrString "idr_Main.{main_6}2.41.199.arity.1.0") <- pure "idr_Main.{main_6}2_val_1500.0"
      idris_str_eq1.29 <- pure "idr_Main.{main_6}0.0"
      idris_str_eq2.41.arity.1.29 <- pure "idr_Main.{main_6}2.41.199.arity.1.0"
      -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.29)
      -- LINT: Invalid pattern match for (CGrString idris_str_eq1_0.29). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
      ,CGrInt[T_Int64]
      ,CGrString[T_String]
      ,Cidr_Data.Vect.::[{3,17}
                        ,{12,26}]
      ,C"idr_{U_Main.{adder_0}_1}"[{662
                                   ,669
                                   ,682}
                                  ,{666,679,698}
                                  ,{664,677,696}]}
      (CGrString idris_str_eq1_0.29) <- fetch idris_str_eq1.29
      (CGrString idris_str_eq2_0.29) <- pure (CGrString idris_str_eq2.41.arity.1.29) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_eq3.29 <- _prim_string_eq idris_str_eq1_0.29 idris_str_eq2_0.29
      ccp.2.29 <- case idris_str_eq3.29 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.95.0 <- pure ccp.2.29
      "idr_Main.{main_6}2_val_1499.0" <- pure (CGrInt unboxed.CGrInt.95.0)
      "idr_Main.{main_6}2_1501.0" <- store "idr_Main.{main_6}2_val_1499.0"
      "idr_Main.{main_6}2_val_1502.0" <- pure "idr_Main.{main_6}2_val_1499.0"
      "idr_Main.{main_6}2_val_1498.0" <- case "idr_Main.{main_6}2_val_1502.0" of
        (CGrInt "idr_Main.{main_6}_cpat_LInt64_0.0") ->
          case "idr_Main.{main_6}_cpat_LInt64_0.0" of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Main.{main_6}2_1503.0" <- store "idr_Main.{main_6}2_val_1498.0"
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.32" <- pure "idr_Main.{main_6}2_1503.0"
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.32" <- pure (Cidr_Prelude.Bool.True)
      "idr_Main.{main_6}2_val_1497.0" <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.32" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.32" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.32"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.32" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      "idr_Main.{main_6}2_1504.0" <- store "idr_Main.{main_6}2_val_1497.0"
      "idr_Main.{main_6}2_val_1505.0" <- pure "idr_Main.{main_6}2_val_1497.0"
      "idr_Main.{main_6}2_val_1496.0" <- case "idr_Main.{main_6}2_val_1505.0" of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_head1.49 <- pure "idr_Main.{main_6}0.0"
          -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.49)
          -- LINT: Invalid pattern match for (CGrString idris_str_head1_0.49). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
          ,CGrInt[T_Int64]
          ,CGrString[T_String]
          ,Cidr_Data.Vect.::[{3,17}
                            ,{12,26}]
          ,C"idr_{U_Main.{adder_0}_1}"[{662
                                       ,669
                                       ,682}
                                      ,{666,679,698}
                                      ,{664,677,696}]}
          (CGrString idris_str_head1_0.49) <- fetch idris_str_head1.49
          idris_str_head2.49 <- _prim_string_head idris_str_head1_0.49
          unboxed.CGrInt.96.0 <- pure idris_str_head2.49
          "idr_Main.{main_6}3_val_1506.0" <- pure (CGrInt unboxed.CGrInt.96.0)
          "idr_Main.{main_6}3_1507.0" <- store "idr_Main.{main_6}3_val_1506.0"
          idris_str_tail1.136 <- pure "idr_Main.{main_6}0.0"
          -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.136)
          -- LINT: Invalid pattern match for (CGrString idris_str_tail1_0.136). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
          ,CGrInt[T_Int64]
          ,CGrString[T_String]
          ,Cidr_Data.Vect.::[{3,17}
                            ,{12,26}]
          ,C"idr_{U_Main.{adder_0}_1}"[{662
                                       ,669
                                       ,682}
                                      ,{666,679,698}
                                      ,{664,677,696}]}
          (CGrString idris_str_tail1_0.136) <- fetch idris_str_tail1.136
          idris_str_tail2.136 <- _prim_string_tail idris_str_tail1_0.136
          unboxed.CGrString.240.0 <- pure idris_str_tail2.136
          "idr_Main.{main_6}5_val_1512.0" <- pure (CGrString unboxed.CGrString.240.0)
          "idr_Main.{main_6}5.0" <- store "idr_Main.{main_6}5_val_1512.0"
          "idr_Main.{main_6}6_val.0" <- pure "idr_Main.{main_6}2_val_1500.0"
          "idr_Main.{main_6}6.0" <- store "idr_Main.{main_6}6_val.0"
          (CGrString "idr_Main.{main_6}6.41.201.arity.1.0") <- pure "idr_Main.{main_6}6_val.0"
          idris_str_eq1.30 <- pure "idr_Main.{main_6}5.0"
          idris_str_eq2.41.arity.1.30 <- pure "idr_Main.{main_6}6.41.201.arity.1.0"
          (CGrString idris_str_eq1_0.30) <- fetch idris_str_eq1.30
          (CGrString idris_str_eq2_0.30) <- pure (CGrString idris_str_eq2.41.arity.1.30) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_eq3.30 <- _prim_string_eq idris_str_eq1_0.30 idris_str_eq2_0.30
          ccp.2.30 <- case idris_str_eq3.30 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.97.0 <- pure ccp.2.30
          "idr_Main.{main_6}5_val_1511.0" <- pure (CGrInt unboxed.CGrInt.97.0)
          "idr_Main.{main_6}5_1513.0" <- store "idr_Main.{main_6}5_val_1511.0"
          "idr_Main.{main_6}5_val_1514.0" <- pure "idr_Main.{main_6}5_val_1511.0"
          "idr_Main.{main_6}5_val_1510.0" <- case "idr_Main.{main_6}5_val_1514.0" of
            (CGrInt "idr_Main.{main_6}_cpat_LInt64_0_1515.0") ->
              case "idr_Main.{main_6}_cpat_LInt64_0_1515.0" of
                0 ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.32"
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Main.{main_6}5_1516.0" <- store "idr_Main.{main_6}5_val_1510.0"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.33" <- pure "idr_Main.{main_6}5_1516.0"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.33" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.32"
          "idr_Main.{main_6}5_val_1509.0" <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.33" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.33" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.33"
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.33" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          "idr_Main.{main_6}5_1519.0" <- store "idr_Main.{main_6}5_val_1509.0"
          "idr_Main.{main_6}5_val_1520.0" <- pure "idr_Main.{main_6}5_val_1509.0"
          "idr_Main.{main_6}5_val.0" <- case "idr_Main.{main_6}5_val_1520.0" of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
            (Cidr_Prelude.Basics.Yes) ->
              idris_str_tail1.137 <- pure "idr_Main.{main_6}0.0"
              -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.137)
              -- LINT: Invalid pattern match for (CGrString idris_str_tail1_0.137). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
              ,CGrInt[T_Int64]
              ,CGrString[T_String]
              ,Cidr_Data.Vect.::[{3,17}
                                ,{12,26}]
              ,C"idr_{U_Main.{adder_0}_1}"[{662
                                           ,669
                                           ,682}
                                          ,{666,679,698}
                                          ,{664,677,696}]}
              (CGrString idris_str_tail1_0.137) <- fetch idris_str_tail1.137
              idris_str_tail2.137 <- _prim_string_tail idris_str_tail1_0.137
              unboxed.CGrString.241.0 <- pure idris_str_tail2.137
              "idr_Main.{main_6}6_val_1522.0" <- pure (CGrString unboxed.CGrString.241.0)
              "idr_Main.{main_6}6_1523.0" <- store "idr_Main.{main_6}6_val_1522.0"
              idris_str_head1.50 <- pure "idr_Main.{main_6}6_1523.0"
              (CGrString idris_str_head1_0.50) <- fetch idris_str_head1.50
              idris_str_head2.50 <- _prim_string_head idris_str_head1_0.50
              unboxed.CGrInt.98.0 <- pure idris_str_head2.50
              "idr_Main.{main_6}6_val_1521.0" <- pure (CGrInt unboxed.CGrInt.98.0)
              "idr_Main.{main_6}6_1524.0" <- store "idr_Main.{main_6}6_val_1521.0"
              idris_str_tail1.138 <- pure "idr_Main.{main_6}0.0"
              -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.138)
              -- LINT: Invalid pattern match for (CGrString idris_str_tail1_0.138). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
              ,CGrInt[T_Int64]
              ,CGrString[T_String]
              ,Cidr_Data.Vect.::[{3,17}
                                ,{12,26}]
              ,C"idr_{U_Main.{adder_0}_1}"[{662
                                           ,669
                                           ,682}
                                          ,{666,679,698}
                                          ,{664,677,696}]}
              (CGrString idris_str_tail1_0.138) <- fetch idris_str_tail1.138
              idris_str_tail2.138 <- _prim_string_tail idris_str_tail1_0.138
              unboxed.CGrString.242.0 <- pure idris_str_tail2.138
              "idr_Main.{main_6}7_val_1525.0" <- pure (CGrString unboxed.CGrString.242.0)
              "idr_Main.{main_6}7.0" <- store "idr_Main.{main_6}7_val_1525.0"
              idris_str_tail1.139 <- pure "idr_Main.{main_6}7.0"
              (CGrString idris_str_tail1_0.139) <- fetch idris_str_tail1.139
              idris_str_tail2.139 <- _prim_string_tail idris_str_tail1_0.139
              unboxed.CGrString.243.0 <- pure idris_str_tail2.139
              "idr_Main.{main_6}7_val.0" <- pure (CGrString unboxed.CGrString.243.0)
              "idr_Main.{main_6}7_1526.0" <- store "idr_Main.{main_6}7_val.0"
              pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_6}6_1524.0" "idr_Main.{main_6}7_1526.0") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_6}6_1524.0" "idr_Main.{main_6}7_1526.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.139) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.50)
          "idr_Main.{main_6}5_1527.0" <- store "idr_Main.{main_6}5_val.0"
          "idr_Main.{main_6}4_val.0" <- idr__Prelude.Strings.unpack_with_36 "idr_Main.{main_6}5_1527.0"
          "idr_Main.{main_6}4_1528.0" <- store "idr_Main.{main_6}4_val.0"
          pure (Cidr_Prelude.List.:: "idr_Main.{main_6}3_1507.0" "idr_Main.{main_6}4_1528.0") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{main_6}3_1507.0" "idr_Main.{main_6}4_1528.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.30)
      "idr_Main.{main_6}2_1529.0" <- store "idr_Main.{main_6}2_val_1496.0"
      "idr_Main.{main_6}3_val_1530.0" <- pure (CGrString #"\"")
      "idr_Main.{main_6}3_1531.0" <- store "idr_Main.{main_6}3_val_1530.0"
      (CGrString "idr_Main.{main_6}3_1531.41.203.arity.1.0") <- pure "idr_Main.{main_6}3_val_1530.0"
      unboxed.CGrString.292.0 <- idr_Prelude.Show.showLitString.unboxed "idr_Main.{main_6}2_1529.0" "idr_Main.{main_6}3_1531.41.203.arity.1.0"
      "idr_Main.{main_6}2_val.0" <- pure (CGrString unboxed.CGrString.292.0)
      "idr_Main.{main_6}2_1532.0" <- store "idr_Main.{main_6}2_val.0"
      (CGrInt "idr_Main.{main_6}1.41.204.arity.1.0") <- pure "idr_Main.{main_6}1_val.0"
      (CGrString "idr_Main.{main_6}2_1532.49.44.arity.1.0") <- pure "idr_Main.{main_6}2_val.0"
      idris_str_cons1.41.arity.1.18 <- pure "idr_Main.{main_6}1.41.204.arity.1.0"
      idris_str_cons2.49.arity.1.18 <- pure "idr_Main.{main_6}2_1532.49.44.arity.1.0"
      (CGrInt idris_str_cons1_0.18) <- pure (CGrInt idris_str_cons1.41.arity.1.18) -- LINT: Syntax error - expected SimpleExp without nodes
      (CGrString idris_str_cons2_0.18) <- pure (CGrString idris_str_cons2.49.arity.1.18) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_cons3.18 <- _prim_string_cons idris_str_cons1_0.18 idris_str_cons2_0.18
      unboxed.CGrString.257 <- pure idris_str_cons3.18
      pure (CGrString unboxed.CGrString.257) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.257)
    (C"idr_{U_Main.{main_8}_1}") ->
      "idr_Main.{main_8}0.0" <- pure "idr_{APPLY_0}1.8"
      "idr_Main.{main_8}2_val.0" <- pure (C"idr_{U_prim__toStrInt_1}")
      "idr_Main.{main_8}2.0" <- store "idr_Main.{main_8}2_val.0"
      unboxed.CGrString.258 <- idr_Prelude.Show.primNumShow.unboxed "idr_Main.{main_8}2.0" "idr_Main.{main_8}0.0"
      pure (CGrString unboxed.CGrString.258) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.258)
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_385
  idr_Prelude.Interactive.printLn'6_val <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6 <- store idr_Prelude.Interactive.printLn'6_val
  idris_str_concat1.6 <- pure idr_Prelude.Interactive.printLn'5
  idris_str_concat2.6 <- pure idr_Prelude.Interactive.printLn'6
  (CGrString idris_str_concat1_0.6) <- fetch idris_str_concat1.6
  (CGrString idris_str_concat2_0.6) <- fetch idris_str_concat2.6
  idris_str_concat3.6 <- _prim_string_concat idris_str_concat1_0.6 idris_str_concat2_0.6
  unboxed.CGrString.259 <- pure idris_str_concat3.6
  idr_Prelude.Interactive.printLn'5_val_384 <- pure (CGrString unboxed.CGrString.259)
  idr_Prelude.Interactive.printLn'5_386 <- store idr_Prelude.Interactive.printLn'5_val_384
  (CGrString idr_Prelude.Interactive.printLn'5_386.41.27.arity.1) <- pure idr_Prelude.Interactive.printLn'5_val_384
  idris_write_str2.41.arity.1.3 <- pure idr_Prelude.Interactive.printLn'5_386.41.27.arity.1
  (CGrString idris_write_str2_0.3) <- pure (CGrString idris_write_str2.41.arity.1.3) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0.3
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.6) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.6)

idr_Prelude.Show.protectEsc.unboxed idr_Prelude.Show.protectEsc0 idr_Prelude.Show.protectEsc1 idr_Prelude.Show.protectEsc2 =
  idr_Prelude.Show.protectEsc3_val_393 <- pure (CGrString #"")
  idr_Prelude.Show.protectEsc3 <- store idr_Prelude.Show.protectEsc3_val_393
  (CGrString idr_Prelude.Show.protectEsc3.41.28.arity.1) <- pure idr_Prelude.Show.protectEsc3_val_393
  idris_str_eq1.31 <- pure idr_Prelude.Show.protectEsc2
  idris_str_eq2.41.arity.1.31 <- pure idr_Prelude.Show.protectEsc3.41.28.arity.1
  (CGrString idris_str_eq1_0.31) <- fetch idris_str_eq1.31
  (CGrString idris_str_eq2_0.31) <- pure (CGrString idris_str_eq2.41.arity.1.31) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_eq3.31 <- _prim_string_eq idris_str_eq1_0.31 idris_str_eq2_0.31
  ccp.2.31 <- case idris_str_eq3.31 of
    #False ->
      pure 0
    #True ->
      pure 1
  unboxed.CGrInt.24 <- pure ccp.2.31
  idr_Prelude.Show.protectEsc3_val_392 <- pure (CGrInt unboxed.CGrInt.24)
  idr_Prelude.Show.protectEsc3_394 <- store idr_Prelude.Show.protectEsc3_val_392
  idr_Prelude.Show.protectEsc3_val_395 <- pure idr_Prelude.Show.protectEsc3_val_392
  idr_Prelude.Show.protectEsc3_val_391 <- case idr_Prelude.Show.protectEsc3_val_395 of
    (CGrInt idr_Prelude.Show.protectEsc_cpat_LInt64_0) ->
      case idr_Prelude.Show.protectEsc_cpat_LInt64_0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Show.protectEsc3_396 <- store idr_Prelude.Show.protectEsc3_val_391
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.34" <- pure idr_Prelude.Show.protectEsc3_396
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.34" <- pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.protectEsc3_val_390 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.34" of
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.34" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.34"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.34" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
  idr_Prelude.Show.protectEsc3_397 <- store idr_Prelude.Show.protectEsc3_val_390
  idr_Prelude.Show.protectEsc3_val_398 <- pure idr_Prelude.Show.protectEsc3_val_390
  idr_Prelude.Show.protectEsc3_val_389 <- case idr_Prelude.Show.protectEsc3_val_398 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Basics.Yes) ->
      idris_str_head1.51 <- pure idr_Prelude.Show.protectEsc2
      (CGrString idris_str_head1_0.51) <- fetch idris_str_head1.51
      idris_str_head2.51 <- _prim_string_head idris_str_head1_0.51
      unboxed.CGrInt.25 <- pure idris_str_head2.51
      idr_Prelude.Show.protectEsc4_val_399 <- pure (CGrInt unboxed.CGrInt.25)
      idr_Prelude.Show.protectEsc4_400 <- store idr_Prelude.Show.protectEsc4_val_399
      "idr_{APPLY_0}0.9" <- pure idr_Prelude.Show.protectEsc0
      "idr_{APPLY_0}1.9" <- pure idr_Prelude.Show.protectEsc4_400
      "idr_{APPLY_0}0_val.9" <- fetch "idr_{APPLY_0}0.9"
      case "idr_{APPLY_0}0_val.9" of
        (C"idr_{U_Prelude.Chars.isDigit_1}") ->
          idr_Prelude.Chars.isDigit0.0 <- pure "idr_{APPLY_0}1.9"
          idr_Prelude.Chars.isDigit1_val_10.0 <- pure (CGrInt 48)
          idr_Prelude.Chars.isDigit1.0 <- store idr_Prelude.Chars.isDigit1_val_10.0
          (CGrInt idr_Prelude.Chars.isDigit1.49.0.arity.1.0) <- pure idr_Prelude.Chars.isDigit1_val_10.0
          (CGrInt idr_Prelude.Chars.isDigit0.0.57.3.arity.1) <- fetch idr_Prelude.Chars.isDigit0.0
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.57.arity.1.0" <- pure idr_Prelude.Chars.isDigit0.0.57.3.arity.1
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.49.arity.1.0" <- pure idr_Prelude.Chars.isDigit1.49.0.arity.1.0
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.210.arity.1.0") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.49.arity.1.0") -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.52.arity.1.0") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.57.arity.1.0") -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_eq0.49.arity.1.13.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.52.arity.1.0"
          idris_int_eq1.41.arity.1.13.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.210.arity.1.0"
          (CGrInt idris_int_eq0_1.13.0) <- pure (CGrInt idris_int_eq0.49.arity.1.13.0) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_eq1_1.13.0) <- pure (CGrInt idris_int_eq1.41.arity.1.13.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_eq2.13.0 <- _prim_int_eq idris_int_eq0_1.13.0 idris_int_eq1_1.13.0
          ccp.0.13.0 <- case idris_int_eq2.13.0 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.101.0 <- pure ccp.0.13.0
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.0" <- pure (CGrInt unboxed.CGrInt.101.0)
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02.0" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.0"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_1551.0" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.0"
          idr_Prelude.Chars.isDigit1_val_9.0 <- case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_1551.0" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.0") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.0" of
                0 ->
                  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.211.arity.1.0") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.49.arity.1.0") -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.53.arity.1.0") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.57.arity.1.0") -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_lt0.49.arity.1.1.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.53.arity.1.0"
                  idris_int_lt1.41.arity.1.1.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.211.arity.1.0"
                  (CGrInt idris_int_lt0_1.1.0) <- pure (CGrInt idris_int_lt0.49.arity.1.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_lt1_1.1.0) <- pure (CGrInt idris_int_lt1.41.arity.1.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_lt2.1.0 <- _prim_int_lt idris_int_lt0_1.1.0 idris_int_lt1_1.1.0
                  ccp.1.1.0 <- case idris_int_lt2.1.0 of
                    #False ->
                      pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.0"
                    #True ->
                      pure 1
                  unboxed.CGrInt.102.0 <- pure ccp.1.1.0
                  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.0" <- pure (CGrInt unboxed.CGrInt.102.0)
                  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03.0" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.0"
                  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_1552.0" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.0"
                  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_1552.0" of
                    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_1553.0") ->
                      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_1553.0" of
                        0 ->
                          pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                        #default ->
                          pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
          idr_Prelude.Chars.isDigit1_11.0 <- store idr_Prelude.Chars.isDigit1_val_9.0
          idr_Prelude.Chars.isDigit1_val_12.0 <- pure idr_Prelude.Chars.isDigit1_val_9.0
          idr_Prelude.Chars.isDigit1_val.0 <- case idr_Prelude.Chars.isDigit1_val_12.0 of
            (Cidr_Prelude.Interfaces.GT) ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.34"
            #default ->
              idr_Prelude.Chars.isDigit2_val_13.0 <- pure idr_Prelude.Chars.isDigit1_val_10.0
              idr_Prelude.Chars.isDigit2.0 <- store idr_Prelude.Chars.isDigit2_val_13.0
              (CGrInt idr_Prelude.Chars.isDigit2.41.1.arity.1.0) <- pure idr_Prelude.Chars.isDigit2_val_13.0
              (CGrInt idr_Prelude.Chars.isDigit0.49.1.arity.1.0) <- pure (CGrInt idr_Prelude.Chars.isDigit0.0.57.3.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq0.49.arity.1.10 <- pure idr_Prelude.Chars.isDigit0.49.1.arity.1.0
              idris_int_eq1.41.arity.1.10 <- pure idr_Prelude.Chars.isDigit2.41.1.arity.1.0
              (CGrInt idris_int_eq0_1.10) <- pure (CGrInt idris_int_eq0.49.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_eq1_1.10) <- pure (CGrInt idris_int_eq1.41.arity.1.10) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq2.10 <- _prim_int_eq idris_int_eq0_1.10 idris_int_eq1_1.10
              ccp.0.10 <- case idris_int_eq2.10 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              unboxed.CGrInt.2.0 <- pure ccp.0.10
              idr_Prelude.Chars.isDigit2_val.0 <- pure (CGrInt unboxed.CGrInt.2.0)
              idr_Prelude.Chars.isDigit2_14.0 <- store idr_Prelude.Chars.isDigit2_val.0
              idr_Prelude.Chars.isDigit2_val_15.0 <- pure idr_Prelude.Chars.isDigit2_val.0
              case idr_Prelude.Chars.isDigit2_val_15.0 of
                (CGrInt idr_Prelude.Chars.isDigit_cpat_LInt64_0.0) ->
                  case idr_Prelude.Chars.isDigit_cpat_LInt64_0.0 of
                    0 ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                    #default ->
                      pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.34"
          idr_Prelude.Chars.isDigit1_16.0 <- store idr_Prelude.Chars.isDigit1_val.0
          idr_Prelude.Chars.isDigit1_val_17.0 <- pure idr_Prelude.Chars.isDigit1_val.0
          case idr_Prelude.Chars.isDigit1_val_17.0 of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idr_Prelude.Chars.isDigit2_val_19.0 <- pure (CGrInt 57)
              idr_Prelude.Chars.isDigit2_20.0 <- store idr_Prelude.Chars.isDigit2_val_19.0
              (CGrInt idr_Prelude.Chars.isDigit2_20.49.2.arity.1.0) <- pure idr_Prelude.Chars.isDigit2_val_19.0
              (CGrInt idr_Prelude.Chars.isDigit0.0.57.4.arity.1) <- pure (CGrInt idr_Prelude.Chars.isDigit0.0.57.3.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
              "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.57.arity.1.1" <- pure idr_Prelude.Chars.isDigit0.0.57.4.arity.1
              "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.49.arity.1.1" <- pure idr_Prelude.Chars.isDigit2_20.49.2.arity.1.0
              (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.210.arity.1.1") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.49.arity.1.1") -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.52.arity.1.1") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.57.arity.1.1") -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq0.49.arity.1.13.1 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.52.arity.1.1"
              idris_int_eq1.41.arity.1.13.1 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.210.arity.1.1"
              (CGrInt idris_int_eq0_1.13.1) <- pure (CGrInt idris_int_eq0.49.arity.1.13.1) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_eq1_1.13.1) <- pure (CGrInt idris_int_eq1.41.arity.1.13.1) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq2.13.1 <- _prim_int_eq idris_int_eq0_1.13.1 idris_int_eq1_1.13.1
              ccp.0.13.1 <- case idris_int_eq2.13.1 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              unboxed.CGrInt.101.1 <- pure ccp.0.13.1
              "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.1" <- pure (CGrInt unboxed.CGrInt.101.1)
              "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02.1" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.1"
              "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_1551.1" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.1"
              idr_Prelude.Chars.isDigit2_val_18.0 <- case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_1551.1" of
                (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.1") ->
                  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.1" of
                    0 ->
                      (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.211.arity.1.1") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.49.arity.1.1") -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.53.arity.1.1") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.57.arity.1.1") -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_lt0.49.arity.1.1.1 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.53.arity.1.1"
                      idris_int_lt1.41.arity.1.1.1 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.211.arity.1.1"
                      (CGrInt idris_int_lt0_1.1.1) <- pure (CGrInt idris_int_lt0.49.arity.1.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_lt1_1.1.1) <- pure (CGrInt idris_int_lt1.41.arity.1.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_lt2.1.1 <- _prim_int_lt idris_int_lt0_1.1.1 idris_int_lt1_1.1.1
                      ccp.1.1.1 <- case idris_int_lt2.1.1 of
                        #False ->
                          pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.1"
                        #True ->
                          pure 1
                      unboxed.CGrInt.102.1 <- pure ccp.1.1.1
                      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.1" <- pure (CGrInt unboxed.CGrInt.102.1)
                      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03.1" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.1"
                      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_1552.1" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.1"
                      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_1552.1" of
                        (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_1553.1") ->
                          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_1553.1" of
                            0 ->
                              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                            #default ->
                              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
                    #default ->
                      pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
              idr_Prelude.Chars.isDigit2_21.0 <- store idr_Prelude.Chars.isDigit2_val_18.0
              idr_Prelude.Chars.isDigit2_val_22.0 <- pure idr_Prelude.Chars.isDigit2_val_18.0
              case idr_Prelude.Chars.isDigit2_val_22.0 of
                (Cidr_Prelude.Interfaces.LT) ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.34"
                #default ->
                  idr_Prelude.Chars.isDigit3_val_23.0 <- pure idr_Prelude.Chars.isDigit2_val_19.0
                  idr_Prelude.Chars.isDigit3.0 <- store idr_Prelude.Chars.isDigit3_val_23.0
                  (CGrInt idr_Prelude.Chars.isDigit3.41.2.arity.1.0) <- pure idr_Prelude.Chars.isDigit3_val_23.0
                  (CGrInt idr_Prelude.Chars.isDigit0.49.3.arity.1.0) <- pure (CGrInt idr_Prelude.Chars.isDigit0.0.57.3.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_eq0.49.arity.1.11 <- pure idr_Prelude.Chars.isDigit0.49.3.arity.1.0
                  idris_int_eq1.41.arity.1.11 <- pure idr_Prelude.Chars.isDigit3.41.2.arity.1.0
                  (CGrInt idris_int_eq0_1.11) <- pure (CGrInt idris_int_eq0.49.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_eq1_1.11) <- pure (CGrInt idris_int_eq1.41.arity.1.11) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_eq2.11 <- _prim_int_eq idris_int_eq0_1.11 idris_int_eq1_1.11
                  ccp.0.11 <- case idris_int_eq2.11 of
                    #False ->
                      pure 0
                    #True ->
                      pure 1
                  unboxed.CGrInt.3.0 <- pure ccp.0.11
                  idr_Prelude.Chars.isDigit3_val.0 <- pure (CGrInt unboxed.CGrInt.3.0)
                  idr_Prelude.Chars.isDigit3_24.0 <- store idr_Prelude.Chars.isDigit3_val.0
                  idr_Prelude.Chars.isDigit3_val_25.0 <- pure idr_Prelude.Chars.isDigit3_val.0
                  case idr_Prelude.Chars.isDigit3_val_25.0 of
                    (CGrInt idr_Prelude.Chars.isDigit_cpat_LInt64_0_26.0) ->
                      case idr_Prelude.Chars.isDigit_cpat_LInt64_0_26.0 of
                        0 ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                        #default ->
                          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.34" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isDigit0.0.57.3.arity.1)
        (C"idr_{U_Prelude.Show.{showLitChar_23}_1}") ->
          "idr_Prelude.Show.{showLitChar_23}0.0" <- pure "idr_{APPLY_0}1.9"
          "idr_Prelude.Show.{showLitChar_23}1_val_1537.0" <- pure (CGrInt 72)
          "idr_Prelude.Show.{showLitChar_23}1.0" <- store "idr_Prelude.Show.{showLitChar_23}1_val_1537.0"
          (CGrInt "idr_Prelude.Show.{showLitChar_23}1.41.207.arity.1.0") <- pure "idr_Prelude.Show.{showLitChar_23}1_val_1537.0"
          (CGrInt "idr_Prelude.Show.{showLitChar_23}0.49.45.arity.1.0") <- fetch "idr_Prelude.Show.{showLitChar_23}0.0"
          idris_int_eq0.49.arity.1.12 <- pure "idr_Prelude.Show.{showLitChar_23}0.49.45.arity.1.0"
          idris_int_eq1.41.arity.1.12 <- pure "idr_Prelude.Show.{showLitChar_23}1.41.207.arity.1.0"
          (CGrInt idris_int_eq0_1.12) <- pure (CGrInt idris_int_eq0.49.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_eq1_1.12) <- pure (CGrInt idris_int_eq1.41.arity.1.12) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_eq2.12 <- _prim_int_eq idris_int_eq0_1.12 idris_int_eq1_1.12
          ccp.0.12 <- case idris_int_eq2.12 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.99.0 <- pure ccp.0.12
          "idr_Prelude.Show.{showLitChar_23}1_val.0" <- pure (CGrInt unboxed.CGrInt.99.0)
          "idr_Prelude.Show.{showLitChar_23}1_1538.0" <- store "idr_Prelude.Show.{showLitChar_23}1_val.0"
          "idr_Prelude.Show.{showLitChar_23}1_val_1539.0" <- pure "idr_Prelude.Show.{showLitChar_23}1_val.0"
          case "idr_Prelude.Show.{showLitChar_23}1_val_1539.0" of
            (CGrInt "idr_Prelude.Show.{showLitChar_23}_cpat_LInt64_0.0") ->
              case "idr_Prelude.Show.{showLitChar_23}_cpat_LInt64_0.0" of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.34" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Show.{showLitChar_23}0.49.45.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.51)
  idr_Prelude.Show.protectEsc3_401 <- store idr_Prelude.Show.protectEsc3_val_389
  idr_Prelude.Show.protectEsc3_val_402 <- pure idr_Prelude.Show.protectEsc3_val_389
  ccp.5 <- case idr_Prelude.Show.protectEsc3_val_402 of
    (Cidr_Prelude.Bool.False) ->
      pure #""
    (Cidr_Prelude.Bool.True) ->
      pure #"\\&"
  idr_Prelude.Show.protectEsc3_val_388 <- pure (CGrString ccp.5)
  idr_Prelude.Show.protectEsc3_403 <- store idr_Prelude.Show.protectEsc3_val_388
  idris_str_concat1.7 <- pure idr_Prelude.Show.protectEsc3_403
  idris_str_concat2.7 <- pure idr_Prelude.Show.protectEsc2
  (CGrString idris_str_concat1_0.7) <- fetch idris_str_concat1.7
  (CGrString idris_str_concat2_0.7) <- fetch idris_str_concat2.7
  idris_str_concat3.7 <- _prim_string_concat idris_str_concat1_0.7 idris_str_concat2_0.7
  unboxed.CGrString.260 <- pure idris_str_concat3.7
  idr_Prelude.Show.protectEsc3_val <- pure (CGrString unboxed.CGrString.260)
  idr_Prelude.Show.protectEsc3_404 <- store idr_Prelude.Show.protectEsc3_val
  idris_str_concat1.8 <- pure idr_Prelude.Show.protectEsc1
  idris_str_concat2.8 <- pure idr_Prelude.Show.protectEsc3_404
  (CGrString idris_str_concat1_0.8) <- fetch idris_str_concat1.8
  (CGrString idris_str_concat2_0.8) <- fetch idris_str_concat2.8
  idris_str_concat3.8 <- _prim_string_concat idris_str_concat1_0.8 idris_str_concat2_0.8
  pure idris_str_concat3.8 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.8) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.8) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.7) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.7) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.31)

idr_Prelude.Show.showLitString.unboxed idr_Prelude.Show.showLitString0 idr_Prelude.Show.showLitString1.41.arity.1 =
  idr_Prelude.Show.showLitString0_val <- fetch idr_Prelude.Show.showLitString0
  case idr_Prelude.Show.showLitString0_val of
    (Cidr_Prelude.List.:: idr_Prelude.Show.showLitString2 idr_Prelude.Show.showLitString3) ->
      idr_Prelude.Show.showLitString2_val <- fetch idr_Prelude.Show.showLitString2
      case idr_Prelude.Show.showLitString2_val of
        (CGrInt idr_Prelude.Show.showLitString_cpat_LInt64_34) ->
          case idr_Prelude.Show.showLitString_cpat_LInt64_34 of
            34 ->
              idr_Prelude.Show.showLitString4_val <- pure (CGrString #"\\\"")
              idr_Prelude.Show.showLitString4 <- store idr_Prelude.Show.showLitString4_val
              unboxed.CGrString.261 <- idr_Prelude.Show.showLitString.unboxed idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1.41.arity.1
              idr_Prelude.Show.showLitString5_val <- pure (CGrString unboxed.CGrString.261)
              idr_Prelude.Show.showLitString5 <- store idr_Prelude.Show.showLitString5_val
              idris_str_concat1.9 <- pure idr_Prelude.Show.showLitString4
              idris_str_concat2.9 <- pure idr_Prelude.Show.showLitString5
              (CGrString idris_str_concat1_0.9) <- fetch idris_str_concat1.9
              (CGrString idris_str_concat2_0.9) <- fetch idris_str_concat2.9
              idris_str_concat3.9 <- _prim_string_concat idris_str_concat1_0.9 idris_str_concat2_0.9
              pure idris_str_concat3.9 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.9) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.9)
            #default ->
              idr_Prelude.Show.showLitChar0.0 <- pure idr_Prelude.Show.showLitString2
              idr_Prelude.Show.showLitChar0_val.0 <- fetch idr_Prelude.Show.showLitChar0.0
              idr_Prelude.Show.showLitString4_val_441 <- case idr_Prelude.Show.showLitChar0_val.0 of
                (CGrInt idr_Prelude.Show.showLitChar_cpat_LInt64_7.0) ->
                  case idr_Prelude.Show.showLitChar_cpat_LInt64_7.0 of
                    7 ->
                      pure (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_16}_1}")
                    8 ->
                      pure (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_17}_1}")
                    9 ->
                      pure (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_18}_1}")
                    10 ->
                      pure (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_19}_1}")
                    11 ->
                      pure (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_20}_1}")
                    12 ->
                      pure (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_21}_1}")
                    13 ->
                      pure (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_22}_1}")
                    14 ->
                      idr_Prelude.Show.showLitChar1_val.0 <- pure (C"idr_{U_Prelude.Show.{showLitChar_23}_1}")
                      idr_Prelude.Show.showLitChar1.0 <- store idr_Prelude.Show.showLitChar1_val.0
                      idr_Prelude.Show.showLitChar2_val.0 <- pure (CGrString #"\\SO")
                      idr_Prelude.Show.showLitChar2.0 <- store idr_Prelude.Show.showLitChar2_val.0
                      pure (C"idr_{U_Prelude.Show.protectEsc_1}" idr_Prelude.Show.showLitChar1.0 idr_Prelude.Show.showLitChar2.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.protectEsc_1}" idr_Prelude.Show.showLitChar1.0 idr_Prelude.Show.showLitChar2.0)
                    92 ->
                      pure (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_24}_1}")
                    127 ->
                      pure (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_25}_1}")
                    #default ->
                      (CGrInt idr_Prelude.Show.showLitChar0.41.30.arity.1.0) <- pure idr_Prelude.Show.showLitChar0_val.0
                      idris_ch_int1.41.arity.1.0 <- pure idr_Prelude.Show.showLitChar0.41.30.arity.1.0
                      (CGrInt unboxed.CGrInt.0.0) <- pure (CGrInt idris_ch_int1.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      unboxed.CGrInt.26.0 <- pure unboxed.CGrInt.0.0
                      idr_Prelude.Show.showLitChar2_val_409.0 <- pure (CGrInt unboxed.CGrInt.26.0)
                      idr_Prelude.Show.showLitChar2_410.0 <- store idr_Prelude.Show.showLitChar2_val_409.0
                      (CGrInt idr_Prelude.Show.showLitChar2_410.41.31.arity.1.0) <- pure idr_Prelude.Show.showLitChar2_val_409.0
                      idris_ls_ext1.41.arity.1.0 <- pure idr_Prelude.Show.showLitChar2_410.41.31.arity.1.0
                      (CGrInt idris_ls_ext2.0) <- pure (CGrInt idris_ls_ext1.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_ls_ext3.0 <- _prim_int_add idris_ls_ext2.0 0
                      unboxed.CGrInt.27.0 <- pure idris_ls_ext3.0
                      idr_Prelude.Show.showLitChar2_val_408.0 <- pure (CGrInt unboxed.CGrInt.27.0)
                      idr_Prelude.Show.showLitChar2_411.0 <- store idr_Prelude.Show.showLitChar2_val_408.0
                      idr_Prelude.Show.showLitChar:asciiTab:101_val.0 <- pure (CGrString #"NUL")
                      idr_Prelude.Show.showLitChar:asciiTab:101.0 <- store idr_Prelude.Show.showLitChar:asciiTab:101_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:102_val_1571.0 <- pure (CGrString #"SOH")
                      idr_Prelude.Show.showLitChar:asciiTab:102.0 <- store idr_Prelude.Show.showLitChar:asciiTab:102_val_1571.0
                      idr_Prelude.Show.showLitChar:asciiTab:103_val_1572.0 <- pure (CGrString #"STX")
                      idr_Prelude.Show.showLitChar:asciiTab:103.0 <- store idr_Prelude.Show.showLitChar:asciiTab:103_val_1572.0
                      idr_Prelude.Show.showLitChar:asciiTab:104_val_1573.0 <- pure (CGrString #"ETX")
                      idr_Prelude.Show.showLitChar:asciiTab:104.0 <- store idr_Prelude.Show.showLitChar:asciiTab:104_val_1573.0
                      idr_Prelude.Show.showLitChar:asciiTab:105_val_1574.0 <- pure (CGrString #"EOT")
                      idr_Prelude.Show.showLitChar:asciiTab:105.0 <- store idr_Prelude.Show.showLitChar:asciiTab:105_val_1574.0
                      idr_Prelude.Show.showLitChar:asciiTab:106_val_1575.0 <- pure (CGrString #"ENQ")
                      idr_Prelude.Show.showLitChar:asciiTab:106.0 <- store idr_Prelude.Show.showLitChar:asciiTab:106_val_1575.0
                      idr_Prelude.Show.showLitChar:asciiTab:107_val_1576.0 <- pure (CGrString #"ACK")
                      idr_Prelude.Show.showLitChar:asciiTab:107.0 <- store idr_Prelude.Show.showLitChar:asciiTab:107_val_1576.0
                      idr_Prelude.Show.showLitChar:asciiTab:108_val_1577.0 <- pure (CGrString #"BEL")
                      idr_Prelude.Show.showLitChar:asciiTab:108.0 <- store idr_Prelude.Show.showLitChar:asciiTab:108_val_1577.0
                      idr_Prelude.Show.showLitChar:asciiTab:109_val_1578.0 <- pure (CGrString #"BS")
                      idr_Prelude.Show.showLitChar:asciiTab:109.0 <- store idr_Prelude.Show.showLitChar:asciiTab:109_val_1578.0
                      idr_Prelude.Show.showLitChar:asciiTab:1010_val_1579.0 <- pure (CGrString #"HT")
                      idr_Prelude.Show.showLitChar:asciiTab:1010.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1010_val_1579.0
                      idr_Prelude.Show.showLitChar:asciiTab:1011_val_1580.0 <- pure (CGrString #"LF")
                      idr_Prelude.Show.showLitChar:asciiTab:1011.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1011_val_1580.0
                      idr_Prelude.Show.showLitChar:asciiTab:1012_val_1581.0 <- pure (CGrString #"VT")
                      idr_Prelude.Show.showLitChar:asciiTab:1012.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1012_val_1581.0
                      idr_Prelude.Show.showLitChar:asciiTab:1013_val_1582.0 <- pure (CGrString #"FF")
                      idr_Prelude.Show.showLitChar:asciiTab:1013.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1013_val_1582.0
                      idr_Prelude.Show.showLitChar:asciiTab:1014_val_1583.0 <- pure (CGrString #"CR")
                      idr_Prelude.Show.showLitChar:asciiTab:1014.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1014_val_1583.0
                      idr_Prelude.Show.showLitChar:asciiTab:1015_val_1584.0 <- pure (CGrString #"SO")
                      idr_Prelude.Show.showLitChar:asciiTab:1015.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1015_val_1584.0
                      idr_Prelude.Show.showLitChar:asciiTab:1016_val_1585.0 <- pure (CGrString #"SI")
                      idr_Prelude.Show.showLitChar:asciiTab:1016.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1016_val_1585.0
                      idr_Prelude.Show.showLitChar:asciiTab:1017_val_1586.0 <- pure (CGrString #"DLE")
                      idr_Prelude.Show.showLitChar:asciiTab:1017.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1017_val_1586.0
                      idr_Prelude.Show.showLitChar:asciiTab:1018_val_1587.0 <- pure (CGrString #"DC1")
                      idr_Prelude.Show.showLitChar:asciiTab:1018.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1018_val_1587.0
                      idr_Prelude.Show.showLitChar:asciiTab:1019_val_1588.0 <- pure (CGrString #"DC2")
                      idr_Prelude.Show.showLitChar:asciiTab:1019.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1019_val_1588.0
                      idr_Prelude.Show.showLitChar:asciiTab:1020_val_1589.0 <- pure (CGrString #"DC3")
                      idr_Prelude.Show.showLitChar:asciiTab:1020.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1020_val_1589.0
                      idr_Prelude.Show.showLitChar:asciiTab:1021_val_1590.0 <- pure (CGrString #"DC4")
                      idr_Prelude.Show.showLitChar:asciiTab:1021.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1021_val_1590.0
                      idr_Prelude.Show.showLitChar:asciiTab:1022_val_1591.0 <- pure (CGrString #"NAK")
                      idr_Prelude.Show.showLitChar:asciiTab:1022.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1022_val_1591.0
                      idr_Prelude.Show.showLitChar:asciiTab:1023_val_1592.0 <- pure (CGrString #"SYN")
                      idr_Prelude.Show.showLitChar:asciiTab:1023.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1023_val_1592.0
                      idr_Prelude.Show.showLitChar:asciiTab:1024_val_1593.0 <- pure (CGrString #"ETB")
                      idr_Prelude.Show.showLitChar:asciiTab:1024.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1024_val_1593.0
                      idr_Prelude.Show.showLitChar:asciiTab:1025_val_1594.0 <- pure (CGrString #"CAN")
                      idr_Prelude.Show.showLitChar:asciiTab:1025.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1025_val_1594.0
                      idr_Prelude.Show.showLitChar:asciiTab:1026_val_1595.0 <- pure (CGrString #"EM")
                      idr_Prelude.Show.showLitChar:asciiTab:1026.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1026_val_1595.0
                      idr_Prelude.Show.showLitChar:asciiTab:1027_val_1596.0 <- pure (CGrString #"SUB")
                      idr_Prelude.Show.showLitChar:asciiTab:1027.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1027_val_1596.0
                      idr_Prelude.Show.showLitChar:asciiTab:1028_val_1597.0 <- pure (CGrString #"ESC")
                      idr_Prelude.Show.showLitChar:asciiTab:1028.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1028_val_1597.0
                      idr_Prelude.Show.showLitChar:asciiTab:1029_val_1598.0 <- pure (CGrString #"FS")
                      idr_Prelude.Show.showLitChar:asciiTab:1029.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1029_val_1598.0
                      idr_Prelude.Show.showLitChar:asciiTab:1030_val_1599.0 <- pure (CGrString #"GS")
                      idr_Prelude.Show.showLitChar:asciiTab:1030.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1030_val_1599.0
                      idr_Prelude.Show.showLitChar:asciiTab:1031_val_1600.0 <- pure (CGrString #"RS")
                      idr_Prelude.Show.showLitChar:asciiTab:1031.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1031_val_1600.0
                      idr_Prelude.Show.showLitChar:asciiTab:1032_val_1601.0 <- pure (CGrString #"US")
                      idr_Prelude.Show.showLitChar:asciiTab:1032.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1032_val_1601.0
                      idr_Prelude.Show.showLitChar:asciiTab:1033_val.0 <- pure (Cidr_Prelude.List.Nil)
                      idr_Prelude.Show.showLitChar:asciiTab:1033.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1033_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1032_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1032.0 idr_Prelude.Show.showLitChar:asciiTab:1033.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1032_1602.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1032_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1031_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1031.0 idr_Prelude.Show.showLitChar:asciiTab:1032_1602.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1031_1603.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1031_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1030_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1030.0 idr_Prelude.Show.showLitChar:asciiTab:1031_1603.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1030_1604.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1030_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1029_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1029.0 idr_Prelude.Show.showLitChar:asciiTab:1030_1604.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1029_1605.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1029_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1028_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1028.0 idr_Prelude.Show.showLitChar:asciiTab:1029_1605.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1028_1606.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1028_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1027_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1027.0 idr_Prelude.Show.showLitChar:asciiTab:1028_1606.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1027_1607.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1027_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1026_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1026.0 idr_Prelude.Show.showLitChar:asciiTab:1027_1607.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1026_1608.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1026_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1025_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1025.0 idr_Prelude.Show.showLitChar:asciiTab:1026_1608.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1025_1609.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1025_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1024_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1024.0 idr_Prelude.Show.showLitChar:asciiTab:1025_1609.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1024_1610.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1024_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1023_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1023.0 idr_Prelude.Show.showLitChar:asciiTab:1024_1610.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1023_1611.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1023_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1022_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1022.0 idr_Prelude.Show.showLitChar:asciiTab:1023_1611.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1022_1612.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1022_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1021_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1021.0 idr_Prelude.Show.showLitChar:asciiTab:1022_1612.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1021_1613.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1021_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1020_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1020.0 idr_Prelude.Show.showLitChar:asciiTab:1021_1613.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1020_1614.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1020_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1019_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1019.0 idr_Prelude.Show.showLitChar:asciiTab:1020_1614.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1019_1615.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1019_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1018_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1018.0 idr_Prelude.Show.showLitChar:asciiTab:1019_1615.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1018_1616.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1018_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1017_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1017.0 idr_Prelude.Show.showLitChar:asciiTab:1018_1616.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1017_1617.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1017_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1016_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1016.0 idr_Prelude.Show.showLitChar:asciiTab:1017_1617.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1016_1618.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1016_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1015_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1015.0 idr_Prelude.Show.showLitChar:asciiTab:1016_1618.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1015_1619.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1015_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1014_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1014.0 idr_Prelude.Show.showLitChar:asciiTab:1015_1619.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1014_1620.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1014_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1013_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1013.0 idr_Prelude.Show.showLitChar:asciiTab:1014_1620.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1013_1621.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1013_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1012_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1012.0 idr_Prelude.Show.showLitChar:asciiTab:1013_1621.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1012_1622.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1012_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1011_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1011.0 idr_Prelude.Show.showLitChar:asciiTab:1012_1622.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1011_1623.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1011_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:1010_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1010.0 idr_Prelude.Show.showLitChar:asciiTab:1011_1623.0)
                      idr_Prelude.Show.showLitChar:asciiTab:1010_1624.0 <- store idr_Prelude.Show.showLitChar:asciiTab:1010_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:109_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:109.0 idr_Prelude.Show.showLitChar:asciiTab:1010_1624.0)
                      idr_Prelude.Show.showLitChar:asciiTab:109_1625.0 <- store idr_Prelude.Show.showLitChar:asciiTab:109_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:108_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:108.0 idr_Prelude.Show.showLitChar:asciiTab:109_1625.0)
                      idr_Prelude.Show.showLitChar:asciiTab:108_1626.0 <- store idr_Prelude.Show.showLitChar:asciiTab:108_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:107_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:107.0 idr_Prelude.Show.showLitChar:asciiTab:108_1626.0)
                      idr_Prelude.Show.showLitChar:asciiTab:107_1627.0 <- store idr_Prelude.Show.showLitChar:asciiTab:107_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:106_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:106.0 idr_Prelude.Show.showLitChar:asciiTab:107_1627.0)
                      idr_Prelude.Show.showLitChar:asciiTab:106_1628.0 <- store idr_Prelude.Show.showLitChar:asciiTab:106_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:105_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:105.0 idr_Prelude.Show.showLitChar:asciiTab:106_1628.0)
                      idr_Prelude.Show.showLitChar:asciiTab:105_1629.0 <- store idr_Prelude.Show.showLitChar:asciiTab:105_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:104_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:104.0 idr_Prelude.Show.showLitChar:asciiTab:105_1629.0)
                      idr_Prelude.Show.showLitChar:asciiTab:104_1630.0 <- store idr_Prelude.Show.showLitChar:asciiTab:104_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:103_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:103.0 idr_Prelude.Show.showLitChar:asciiTab:104_1630.0)
                      idr_Prelude.Show.showLitChar:asciiTab:103_1631.0 <- store idr_Prelude.Show.showLitChar:asciiTab:103_val.0
                      idr_Prelude.Show.showLitChar:asciiTab:102_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:102.0 idr_Prelude.Show.showLitChar:asciiTab:103_1631.0)
                      idr_Prelude.Show.showLitChar:asciiTab:102_1632.0 <- store idr_Prelude.Show.showLitChar:asciiTab:102_val.0
                      idr_Prelude.Show.showLitChar3_val.0 <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:101.0 idr_Prelude.Show.showLitChar:asciiTab:102_1632.0)
                      idr_Prelude.Show.showLitChar3_413.0 <- store idr_Prelude.Show.showLitChar3_val.0
                      (CGrInt idr_Prelude.Show.showLitChar2_411.0.49.20.arity.1) <- pure idr_Prelude.Show.showLitChar2_val_408.0
                      idr_Prelude.Show.showLitChar1_val_405.0 <- idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar2_411.0.49.20.arity.1 idr_Prelude.Show.showLitChar3_413.0
                      idr_Prelude.Show.showLitChar1_414.0 <- store idr_Prelude.Show.showLitChar1_val_405.0
                      idr_Prelude.Show.showLitChar1_val_415.0 <- pure idr_Prelude.Show.showLitChar1_val_405.0
                      case idr_Prelude.Show.showLitChar1_val_415.0 of
                        (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar2_416.0) ->
                          pure (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" idr_Prelude.Show.showLitChar2_416.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" idr_Prelude.Show.showLitChar2_416.0)
                        (Cidr_Prelude.Maybe.Nothing) ->
                          idr_Prelude.Show.showLitChar2_val_418.0 <- pure (CGrInt 127)
                          idr_Prelude.Show.showLitChar2_419.0 <- store idr_Prelude.Show.showLitChar2_val_418.0
                          (CGrInt idr_Prelude.Show.showLitChar2_419.0.49.21.arity.1) <- pure idr_Prelude.Show.showLitChar2_val_418.0
                          (CGrInt idr_Prelude.Show.showLitChar0.0.57.5.arity.1) <- pure idr_Prelude.Show.showLitChar0_val.0
                          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.57.arity.1.2" <- pure idr_Prelude.Show.showLitChar0.0.57.5.arity.1
                          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.49.arity.1.2" <- pure idr_Prelude.Show.showLitChar2_419.0.49.21.arity.1
                          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.210.arity.1.2") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.49.arity.1.2") -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.52.arity.1.2") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.57.arity.1.2") -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq0.49.arity.1.13.2 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.52.arity.1.2"
                          idris_int_eq1.41.arity.1.13.2 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.210.arity.1.2"
                          (CGrInt idris_int_eq0_1.13.2) <- pure (CGrInt idris_int_eq0.49.arity.1.13.2) -- LINT: Syntax error - expected SimpleExp without nodes
                          (CGrInt idris_int_eq1_1.13.2) <- pure (CGrInt idris_int_eq1.41.arity.1.13.2) -- LINT: Syntax error - expected SimpleExp without nodes
                          idris_int_eq2.13.2 <- _prim_int_eq idris_int_eq0_1.13.2 idris_int_eq1_1.13.2
                          ccp.0.13.2 <- case idris_int_eq2.13.2 of
                            #False ->
                              pure 0
                            #True ->
                              pure 1
                          unboxed.CGrInt.101.2 <- pure ccp.0.13.2
                          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.2" <- pure (CGrInt unboxed.CGrInt.101.2)
                          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02.2" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.2"
                          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_1551.2" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val.2"
                          idr_Prelude.Show.showLitChar2_val_417.0 <- case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_1551.2" of
                            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.2") ->
                              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.2" of
                                0 ->
                                  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.211.arity.1.2") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.49.arity.1.2") -- LINT: Syntax error - expected SimpleExp without nodes
                                  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.53.arity.1.2") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.57.arity.1.2") -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_lt0.49.arity.1.1.2 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00.49.53.arity.1.2"
                                  idris_int_lt1.41.arity.1.1.2 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01.41.211.arity.1.2"
                                  (CGrInt idris_int_lt0_1.1.2) <- pure (CGrInt idris_int_lt0.49.arity.1.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                  (CGrInt idris_int_lt1_1.1.2) <- pure (CGrInt idris_int_lt1.41.arity.1.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                                  idris_int_lt2.1.2 <- _prim_int_lt idris_int_lt0_1.1.2 idris_int_lt1_1.1.2
                                  ccp.1.1.2 <- case idris_int_lt2.1.2 of
                                    #False ->
                                      pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0.2"
                                    #True ->
                                      pure 1
                                  unboxed.CGrInt.102.2 <- pure ccp.1.1.2
                                  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.2" <- pure (CGrInt unboxed.CGrInt.102.2)
                                  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03.2" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.2"
                                  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_1552.2" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val.2"
                                  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_1552.2" of
                                    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_1553.2") ->
                                      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_1553.2" of
                                        0 ->
                                          pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                                        #default ->
                                          pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
                                #default ->
                                  pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
                          idr_Prelude.Show.showLitChar2_420.0 <- store idr_Prelude.Show.showLitChar2_val_417.0
                          idr_Prelude.Show.showLitChar2_val_421.0 <- pure idr_Prelude.Show.showLitChar2_val_417.0
                          case idr_Prelude.Show.showLitChar2_val_421.0 of
                            (Cidr_Prelude.Interfaces.GT) ->
                              pure (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" idr_Prelude.Show.showLitChar0.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" idr_Prelude.Show.showLitChar0.0)
                            #default ->
                              pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0.0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0.0)
              idr_Prelude.Show.showLitString4_442 <- store idr_Prelude.Show.showLitString4_val_441
              unboxed.CGrString.262 <- idr_Prelude.Show.showLitString.unboxed idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1.41.arity.1
              idr_Prelude.Show.showLitString5_val_443 <- pure (CGrString unboxed.CGrString.262)
              idr_Prelude.Show.showLitString5_444 <- store idr_Prelude.Show.showLitString5_val_443
              "idr_{APPLY_0}0.10" <- pure idr_Prelude.Show.showLitString4_442
              "idr_{APPLY_0}1.10" <- pure idr_Prelude.Show.showLitString5_444
              "idr_{APPLY_0}0_val.10" <- fetch "idr_{APPLY_0}0.10"
              case "idr_{APPLY_0}0_val.10" of
                (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_1452.10" "idr_{APPLY_0}3_1453.10") ->
                  idr_Prelude.Show.protectEsc.unboxed "idr_{APPLY_0}2_1452.10" "idr_{APPLY_0}3_1453.10" "idr_{APPLY_0}1.10"
                (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
                  "idr_Prelude.Show.{showLitChar_16}0.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_16}1_val.0" <- pure (CGrString #"\\a")
                  "idr_Prelude.Show.{showLitChar_16}1.0" <- store "idr_Prelude.Show.{showLitChar_16}1_val.0"
                  idris_str_concat1.10 <- pure "idr_Prelude.Show.{showLitChar_16}1.0"
                  idris_str_concat2.10 <- pure "idr_Prelude.Show.{showLitChar_16}0.0"
                  (CGrString idris_str_concat1_0.10) <- fetch idris_str_concat1.10
                  (CGrString idris_str_concat2_0.10) <- fetch idris_str_concat2.10
                  idris_str_concat3.10 <- _prim_string_concat idris_str_concat1_0.10 idris_str_concat2_0.10
                  pure idris_str_concat3.10 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.10) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.10)
                (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
                  "idr_Prelude.Show.{showLitChar_17}0.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_17}1_val.0" <- pure (CGrString #"\\b")
                  "idr_Prelude.Show.{showLitChar_17}1.0" <- store "idr_Prelude.Show.{showLitChar_17}1_val.0"
                  idris_str_concat1.11 <- pure "idr_Prelude.Show.{showLitChar_17}1.0"
                  idris_str_concat2.11 <- pure "idr_Prelude.Show.{showLitChar_17}0.0"
                  (CGrString idris_str_concat1_0.11) <- fetch idris_str_concat1.11
                  (CGrString idris_str_concat2_0.11) <- fetch idris_str_concat2.11
                  idris_str_concat3.11 <- _prim_string_concat idris_str_concat1_0.11 idris_str_concat2_0.11
                  pure idris_str_concat3.11 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.11) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.11)
                (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
                  "idr_Prelude.Show.{showLitChar_18}0.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_18}1_val.0" <- pure (CGrString #"\\t")
                  "idr_Prelude.Show.{showLitChar_18}1.0" <- store "idr_Prelude.Show.{showLitChar_18}1_val.0"
                  idris_str_concat1.12 <- pure "idr_Prelude.Show.{showLitChar_18}1.0"
                  idris_str_concat2.12 <- pure "idr_Prelude.Show.{showLitChar_18}0.0"
                  (CGrString idris_str_concat1_0.12) <- fetch idris_str_concat1.12
                  (CGrString idris_str_concat2_0.12) <- fetch idris_str_concat2.12
                  idris_str_concat3.12 <- _prim_string_concat idris_str_concat1_0.12 idris_str_concat2_0.12
                  pure idris_str_concat3.12 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.12) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.12)
                (C"idr_{U_Prelude.Show.{showLitChar_19}_1}") ->
                  "idr_Prelude.Show.{showLitChar_19}0.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_19}1_val.0" <- pure (CGrString #"\\n")
                  "idr_Prelude.Show.{showLitChar_19}1.0" <- store "idr_Prelude.Show.{showLitChar_19}1_val.0"
                  idris_str_concat1.13 <- pure "idr_Prelude.Show.{showLitChar_19}1.0"
                  idris_str_concat2.13 <- pure "idr_Prelude.Show.{showLitChar_19}0.0"
                  (CGrString idris_str_concat1_0.13) <- fetch idris_str_concat1.13
                  (CGrString idris_str_concat2_0.13) <- fetch idris_str_concat2.13
                  idris_str_concat3.13 <- _prim_string_concat idris_str_concat1_0.13 idris_str_concat2_0.13
                  pure idris_str_concat3.13 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.13) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.13)
                (C"idr_{U_Prelude.Show.{showLitChar_20}_1}") ->
                  "idr_Prelude.Show.{showLitChar_20}0.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_20}1_val.0" <- pure (CGrString #"\\v")
                  "idr_Prelude.Show.{showLitChar_20}1.0" <- store "idr_Prelude.Show.{showLitChar_20}1_val.0"
                  idris_str_concat1.14 <- pure "idr_Prelude.Show.{showLitChar_20}1.0"
                  idris_str_concat2.14 <- pure "idr_Prelude.Show.{showLitChar_20}0.0"
                  (CGrString idris_str_concat1_0.14) <- fetch idris_str_concat1.14
                  (CGrString idris_str_concat2_0.14) <- fetch idris_str_concat2.14
                  idris_str_concat3.14 <- _prim_string_concat idris_str_concat1_0.14 idris_str_concat2_0.14
                  pure idris_str_concat3.14 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.14) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.14)
                (C"idr_{U_Prelude.Show.{showLitChar_21}_1}") ->
                  "idr_Prelude.Show.{showLitChar_21}0.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_21}1_val.0" <- pure (CGrString #"\\f")
                  "idr_Prelude.Show.{showLitChar_21}1.0" <- store "idr_Prelude.Show.{showLitChar_21}1_val.0"
                  idris_str_concat1.15 <- pure "idr_Prelude.Show.{showLitChar_21}1.0"
                  idris_str_concat2.15 <- pure "idr_Prelude.Show.{showLitChar_21}0.0"
                  (CGrString idris_str_concat1_0.15) <- fetch idris_str_concat1.15
                  (CGrString idris_str_concat2_0.15) <- fetch idris_str_concat2.15
                  idris_str_concat3.15 <- _prim_string_concat idris_str_concat1_0.15 idris_str_concat2_0.15
                  pure idris_str_concat3.15 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.15) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.15)
                (C"idr_{U_Prelude.Show.{showLitChar_22}_1}") ->
                  "idr_Prelude.Show.{showLitChar_22}0.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_22}1_val.0" <- pure (CGrString #"\\r")
                  "idr_Prelude.Show.{showLitChar_22}1.0" <- store "idr_Prelude.Show.{showLitChar_22}1_val.0"
                  idris_str_concat1.16 <- pure "idr_Prelude.Show.{showLitChar_22}1.0"
                  idris_str_concat2.16 <- pure "idr_Prelude.Show.{showLitChar_22}0.0"
                  (CGrString idris_str_concat1_0.16) <- fetch idris_str_concat1.16
                  (CGrString idris_str_concat2_0.16) <- fetch idris_str_concat2.16
                  idris_str_concat3.16 <- _prim_string_concat idris_str_concat1_0.16 idris_str_concat2_0.16
                  pure idris_str_concat3.16 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.16) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.16)
                (C"idr_{U_Prelude.Show.{showLitChar_24}_1}") ->
                  "idr_Prelude.Show.{showLitChar_24}0.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_24}1_val.0" <- pure (CGrString #"\\\\")
                  "idr_Prelude.Show.{showLitChar_24}1.0" <- store "idr_Prelude.Show.{showLitChar_24}1_val.0"
                  idris_str_concat1.17 <- pure "idr_Prelude.Show.{showLitChar_24}1.0"
                  idris_str_concat2.17 <- pure "idr_Prelude.Show.{showLitChar_24}0.0"
                  (CGrString idris_str_concat1_0.17) <- fetch idris_str_concat1.17
                  (CGrString idris_str_concat2_0.17) <- fetch idris_str_concat2.17
                  idris_str_concat3.17 <- _prim_string_concat idris_str_concat1_0.17 idris_str_concat2_0.17
                  pure idris_str_concat3.17 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.17) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.17)
                (C"idr_{U_Prelude.Show.{showLitChar_25}_1}") ->
                  "idr_Prelude.Show.{showLitChar_25}0.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_25}1_val.0" <- pure (CGrString #"\\DEL")
                  "idr_Prelude.Show.{showLitChar_25}1.0" <- store "idr_Prelude.Show.{showLitChar_25}1_val.0"
                  idris_str_concat1.18 <- pure "idr_Prelude.Show.{showLitChar_25}1.0"
                  idris_str_concat2.18 <- pure "idr_Prelude.Show.{showLitChar_25}0.0"
                  (CGrString idris_str_concat1_0.18) <- fetch idris_str_concat1.18
                  (CGrString idris_str_concat2_0.18) <- fetch idris_str_concat2.18
                  idris_str_concat3.18 <- _prim_string_concat idris_str_concat1_0.18 idris_str_concat2_0.18
                  pure idris_str_concat3.18 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.18) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.18)
                (C"idr_{U_Prelude.Show.{showLitChar_26}_1}" "idr_{APPLY_0}2_1455.10") ->
                  "idr_Prelude.Show.{showLitChar_26}0.0" <- pure "idr_{APPLY_0}2_1455.10"
                  "idr_Prelude.Show.{showLitChar_26}1.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_26}2_val.0" <- pure (CGrInt 92)
                  "idr_Prelude.Show.{showLitChar_26}2.0" <- store "idr_Prelude.Show.{showLitChar_26}2_val.0"
                  idris_str_concat1.19 <- pure "idr_Prelude.Show.{showLitChar_26}0.0"
                  idris_str_concat2.19 <- pure "idr_Prelude.Show.{showLitChar_26}1.0"
                  (CGrString idris_str_concat1_0.19) <- fetch idris_str_concat1.19
                  (CGrString idris_str_concat2_0.19) <- fetch idris_str_concat2.19
                  idris_str_concat3.19 <- _prim_string_concat idris_str_concat1_0.19 idris_str_concat2_0.19
                  unboxed.CGrString.296.0 <- pure idris_str_concat3.19
                  "idr_Prelude.Show.{showLitChar_26}3_val.0" <- pure (CGrString unboxed.CGrString.296.0)
                  "idr_Prelude.Show.{showLitChar_26}3.0" <- store "idr_Prelude.Show.{showLitChar_26}3_val.0"
                  (CGrInt "idr_Prelude.Show.{showLitChar_26}2.49.46.arity.1.0") <- pure "idr_Prelude.Show.{showLitChar_26}2_val.0"
                  (CGrString "idr_Prelude.Show.{showLitChar_26}3.0.57.6.arity.1") <- pure "idr_Prelude.Show.{showLitChar_26}3_val.0"
                  idr_prim__strCons0.49.arity.1.0 <- pure "idr_Prelude.Show.{showLitChar_26}2.49.46.arity.1.0"
                  idr_prim__strCons1.57.arity.1.0 <- pure "idr_Prelude.Show.{showLitChar_26}3.0.57.6.arity.1"
                  (CGrInt idr_prim__strCons0.41.26.arity.1.0) <- pure (CGrInt idr_prim__strCons0.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idr_prim__strCons1.49.19.arity.1.0) <- pure (CGrString idr_prim__strCons1.57.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons1.41.arity.1.17.0 <- pure idr_prim__strCons0.41.26.arity.1.0
                  idris_str_cons2.49.arity.1.17.0 <- pure idr_prim__strCons1.49.19.arity.1.0
                  (CGrInt idris_str_cons1_0.17.0) <- pure (CGrInt idris_str_cons1.41.arity.1.17.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idris_str_cons2_0.17.0) <- pure (CGrString idris_str_cons2.49.arity.1.17.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons3.17.0 <- _prim_string_cons idris_str_cons1_0.17.0 idris_str_cons2_0.17.0
                  pure idris_str_cons3.17.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.19) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.19)
                (C"idr_{U_Prelude.Show.{showLitChar_27}_1}" "idr_{APPLY_0}2_1456.10") ->
                  (CGrInt "idr_{APPLY_0}2_1456.10.49.22.arity.1") <- fetch "idr_{APPLY_0}2_1456.10"
                  "idr_Prelude.Show.{showLitChar_27}0.49.arity.1.0" <- pure "idr_{APPLY_0}2_1456.10.49.22.arity.1"
                  "idr_Prelude.Show.{showLitChar_27}1.0" <- pure "idr_{APPLY_0}1.10"
                  "idr_Prelude.Show.{showLitChar_27}2_val.0" <- pure (CGrInt 92)
                  "idr_Prelude.Show.{showLitChar_27}2.0" <- store "idr_Prelude.Show.{showLitChar_27}2_val.0"
                  "idr_Prelude.Show.{showLitChar_27}3_val_1540.0" <- pure (C"idr_{U_Prelude.Chars.isDigit_1}")
                  "idr_Prelude.Show.{showLitChar_27}3.0" <- store "idr_Prelude.Show.{showLitChar_27}3_val_1540.0"
                  "idr_Prelude.Show.{showLitChar_27}5_val.0" <- pure (C"idr_{U_prim__toStrInt_1}")
                  "idr_Prelude.Show.{showLitChar_27}5.0" <- store "idr_Prelude.Show.{showLitChar_27}5_val.0"
                  (CGrInt "idr_Prelude.Show.{showLitChar_27}0.41.208.arity.1.0") <- pure (CGrInt "idr_Prelude.Show.{showLitChar_27}0.49.arity.1.0") -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_ch_int1.41.arity.1.1 <- pure "idr_Prelude.Show.{showLitChar_27}0.41.208.arity.1.0"
                  (CGrInt unboxed.CGrInt.0.1) <- pure (CGrInt idris_ch_int1.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                  unboxed.CGrInt.100.0 <- pure unboxed.CGrInt.0.1
                  "idr_Prelude.Show.{showLitChar_27}7_val.0" <- pure (CGrInt unboxed.CGrInt.100.0)
                  "idr_Prelude.Show.{showLitChar_27}7.0" <- store "idr_Prelude.Show.{showLitChar_27}7_val.0"
                  unboxed.CGrString.297.0 <- idr_Prelude.Show.primNumShow.unboxed "idr_Prelude.Show.{showLitChar_27}5.0" "idr_Prelude.Show.{showLitChar_27}7.0"
                  "idr_Prelude.Show.{showLitChar_27}4_val.0" <- pure (CGrString unboxed.CGrString.297.0)
                  "idr_Prelude.Show.{showLitChar_27}4_1542.0" <- store "idr_Prelude.Show.{showLitChar_27}4_val.0"
                  unboxed.CGrString.298.0 <- idr_Prelude.Show.protectEsc.unboxed "idr_Prelude.Show.{showLitChar_27}3.0" "idr_Prelude.Show.{showLitChar_27}4_1542.0" "idr_Prelude.Show.{showLitChar_27}1.0"
                  "idr_Prelude.Show.{showLitChar_27}3_val.0" <- pure (CGrString unboxed.CGrString.298.0)
                  "idr_Prelude.Show.{showLitChar_27}3_1543.0" <- store "idr_Prelude.Show.{showLitChar_27}3_val.0"
                  (CGrInt "idr_Prelude.Show.{showLitChar_27}2.49.47.arity.1.0") <- pure "idr_Prelude.Show.{showLitChar_27}2_val.0"
                  (CGrString "idr_Prelude.Show.{showLitChar_27}3_1543.0.57.7.arity.1") <- pure "idr_Prelude.Show.{showLitChar_27}3_val.0"
                  idr_prim__strCons0.49.arity.1.1 <- pure "idr_Prelude.Show.{showLitChar_27}2.49.47.arity.1.0"
                  idr_prim__strCons1.57.arity.1.1 <- pure "idr_Prelude.Show.{showLitChar_27}3_1543.0.57.7.arity.1"
                  (CGrInt idr_prim__strCons0.41.26.arity.1.1) <- pure (CGrInt idr_prim__strCons0.49.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idr_prim__strCons1.49.19.arity.1.1) <- pure (CGrString idr_prim__strCons1.57.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons1.41.arity.1.17.1 <- pure idr_prim__strCons0.41.26.arity.1.1
                  idris_str_cons2.49.arity.1.17.1 <- pure idr_prim__strCons1.49.19.arity.1.1
                  (CGrInt idris_str_cons1_0.17.1) <- pure (CGrInt idris_str_cons1.41.arity.1.17.1) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idris_str_cons2_0.17.1) <- pure (CGrString idris_str_cons2.49.arity.1.17.1) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons3.17.1 <- _prim_string_cons idris_str_cons1_0.17.1 idris_str_cons2_0.17.1
                  pure idris_str_cons3.17.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_{APPLY_0}2_1456.10.49.22.arity.1")
                (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_1457.10") ->
                  (CGrInt "idr_{APPLY_0}2_1457.10.49.23.arity.1") <- fetch "idr_{APPLY_0}2_1457.10"
                  (CGrString "idr_{APPLY_0}1.10.57.8.arity.1") <- fetch "idr_{APPLY_0}1.10"
                  idr_prim__strCons0.49.arity.1.2 <- pure "idr_{APPLY_0}2_1457.10.49.23.arity.1"
                  idr_prim__strCons1.57.arity.1.2 <- pure "idr_{APPLY_0}1.10.57.8.arity.1"
                  (CGrInt idr_prim__strCons0.41.26.arity.1.2) <- pure (CGrInt idr_prim__strCons0.49.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idr_prim__strCons1.49.19.arity.1.2) <- pure (CGrString idr_prim__strCons1.57.arity.1.2) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons1.41.arity.1.17.2 <- pure idr_prim__strCons0.41.26.arity.1.2
                  idris_str_cons2.49.arity.1.17.2 <- pure idr_prim__strCons1.49.19.arity.1.2
                  (CGrInt idris_str_cons1_0.17.2) <- pure (CGrInt idris_str_cons1.41.arity.1.17.2) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idris_str_cons2_0.17.2) <- pure (CGrString idris_str_cons2.49.arity.1.17.2) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons3.17.2 <- _prim_string_cons idris_str_cons1_0.17.2 idris_str_cons2_0.17.2
                  pure idris_str_cons3.17.2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_{APPLY_0}1.10.57.8.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_{APPLY_0}2_1457.10.49.23.arity.1")
    (Cidr_Prelude.List.Nil) ->
      pure idr_Prelude.Show.showLitString1.41.arity.1

idr_Main.toFormat idr_Main.toFormat0 =
  idr_Main.toFormat0_val <- fetch idr_Main.toFormat0
  case idr_Main.toFormat0_val of
    (Cidr_Prelude.List.:: idr_Main.toFormat1 idr_Main.toFormat2) ->
      idr_Main.toFormat1_val <- fetch idr_Main.toFormat1
      case idr_Main.toFormat1_val of
        (CGrInt idr_Main.toFormat_cpat_LInt64_37) ->
          case idr_Main.toFormat_cpat_LInt64_37 of
            37 ->
              idr_Main.toFormat2_val <- fetch idr_Main.toFormat2
              case idr_Main.toFormat2_val of
                (Cidr_Prelude.List.:: idr_Main.toFormat3 idr_Main.toFormat4) ->
                  idr_Main.toFormat3_val <- fetch idr_Main.toFormat3
                  case idr_Main.toFormat3_val of
                    (CGrInt idr_Main.toFormat_cpat_LInt64_100) ->
                      case idr_Main.toFormat_cpat_LInt64_100 of
                        100 ->
                          idr_Main.toFormat5_val <- idr_Main.toFormat idr_Main.toFormat4
                          idr_Main.toFormat5 <- store idr_Main.toFormat5_val
                          pure (Cidr_Main.Number idr_Main.toFormat5) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Number idr_Main.toFormat5)
                        115 ->
                          idr_Main.toFormat5_val_451 <- idr_Main.toFormat idr_Main.toFormat4
                          idr_Main.toFormat5_452 <- store idr_Main.toFormat5_val_451
                          pure (Cidr_Main.Str idr_Main.toFormat5_452) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Str idr_Main.toFormat5_452)
                        #default ->
                          idr_Main.toFormat5_val_453 <- pure (CGrString #"%")
                          idr_Main.toFormat5_454 <- store idr_Main.toFormat5_val_453
                          idr_Main.toFormat6_val <- idr_Main.toFormat idr_Main.toFormat2
                          idr_Main.toFormat6 <- store idr_Main.toFormat6_val
                          pure (Cidr_Main.Lit idr_Main.toFormat5_454 idr_Main.toFormat6) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Lit idr_Main.toFormat5_454 idr_Main.toFormat6)
                #default ->
                  idr_Main.toFormat3_val_459 <- pure (CGrString #"%")
                  idr_Main.toFormat3_460 <- store idr_Main.toFormat3_val_459
                  idr_Main.toFormat4_val <- idr_Main.toFormat idr_Main.toFormat2
                  idr_Main.toFormat4_461 <- store idr_Main.toFormat4_val
                  pure (Cidr_Main.Lit idr_Main.toFormat3_460 idr_Main.toFormat4_461) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Lit idr_Main.toFormat3_460 idr_Main.toFormat4_461)
            #default ->
              idr_Main.toFormat3_val_462 <- idr_Main.toFormat idr_Main.toFormat2
              idr_Main.toFormat3_463 <- store idr_Main.toFormat3_val_462
              idr_Main.toFormat3_val_464 <- pure idr_Main.toFormat3_val_462
              case idr_Main.toFormat3_val_464 of
                (Cidr_Main.Lit idr_Main.toFormat4_465 idr_Main.toFormat5_466) ->
                  (CGrInt idr_Main.toFormat1.41.34.arity.1) <- pure idr_Main.toFormat1_val
                  (CGrString idr_Main.toFormat4_465.49.24.arity.1) <- fetch idr_Main.toFormat4_465
                  idris_str_cons1.41.arity.1.19 <- pure idr_Main.toFormat1.41.34.arity.1
                  idris_str_cons2.49.arity.1.19 <- pure idr_Main.toFormat4_465.49.24.arity.1
                  (CGrInt idris_str_cons1_0.19) <- pure (CGrInt idris_str_cons1.41.arity.1.19) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idris_str_cons2_0.19) <- pure (CGrString idris_str_cons2.49.arity.1.19) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons3.19 <- _prim_string_cons idris_str_cons1_0.19 idris_str_cons2_0.19
                  unboxed.CGrString.263 <- pure idris_str_cons3.19
                  idr_Main.toFormat6_val_467 <- pure (CGrString unboxed.CGrString.263)
                  idr_Main.toFormat6_468 <- store idr_Main.toFormat6_val_467
                  pure (Cidr_Main.Lit idr_Main.toFormat6_468 idr_Main.toFormat5_466) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Lit idr_Main.toFormat6_468 idr_Main.toFormat5_466) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.toFormat4_465.49.24.arity.1)
                #default ->
                  idr_Main.toFormat4_val_470 <- pure (CGrString #"")
                  idr_Main.toFormat4_471 <- store idr_Main.toFormat4_val_470
                  (CGrInt idr_Main.toFormat1.41.35.arity.1) <- pure idr_Main.toFormat1_val
                  (CGrString idr_Main.toFormat4_471.49.25.arity.1) <- pure idr_Main.toFormat4_val_470
                  idris_str_cons1.41.arity.1.20 <- pure idr_Main.toFormat1.41.35.arity.1
                  idris_str_cons2.49.arity.1.20 <- pure idr_Main.toFormat4_471.49.25.arity.1
                  (CGrInt idris_str_cons1_0.20) <- pure (CGrInt idris_str_cons1.41.arity.1.20) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrString idris_str_cons2_0.20) <- pure (CGrString idris_str_cons2.49.arity.1.20) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_str_cons3.20 <- _prim_string_cons idris_str_cons1_0.20 idris_str_cons2_0.20
                  unboxed.CGrString.264 <- pure idris_str_cons3.20
                  idr_Main.toFormat4_val_469 <- pure (CGrString unboxed.CGrString.264)
                  idr_Main.toFormat4_472 <- store idr_Main.toFormat4_val_469
                  idr_Main.toFormat5_val_473 <- pure idr_Main.toFormat3_val_462
                  idr_Main.toFormat5_474 <- store idr_Main.toFormat5_val_473
                  pure (Cidr_Main.Lit idr_Main.toFormat4_472 idr_Main.toFormat5_474) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Lit idr_Main.toFormat4_472 idr_Main.toFormat5_474)
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Main.End) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.End)

"idr_Data.Vect.{foldrImpl_1}" "idr_Data.Vect.{foldrImpl_1}0" "idr_Data.Vect.{foldrImpl_1}1" "idr_Data.Vect.{foldrImpl_1}2" "idr_Data.Vect.{foldrImpl_1}3" =
  "idr_{APPLY_0}0.13" <- pure "idr_Data.Vect.{foldrImpl_1}1"
  "idr_{APPLY_0}1.13" <- pure "idr_Data.Vect.{foldrImpl_1}2"
  "idr_{APPLY_0}0_val.13" <- fetch "idr_{APPLY_0}0.13"
  "idr_Data.Vect.{foldrImpl_1}4_val_1462" <- case "idr_{APPLY_0}0_val.13" of
    (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}") ->
      pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.13") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}1.13")
  "idr_Data.Vect.{foldrImpl_1}4" <- store "idr_Data.Vect.{foldrImpl_1}4_val_1462"
  "idr_{APPLY_0}0.14" <- pure "idr_Data.Vect.{foldrImpl_1}4"
  "idr_{APPLY_0}1.14" <- pure "idr_Data.Vect.{foldrImpl_1}3"
  "idr_{APPLY_0}0_val.14" <- fetch "idr_{APPLY_0}0.14"
  "idr_Data.Vect.{foldrImpl_1}4_val" <- case "idr_{APPLY_0}0_val.14" of
    (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_1}" "idr_{APPLY_0}2_1454.14") ->
      "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}0.0" <- pure "idr_{APPLY_0}2_1454.14"
      "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}1.0" <- pure "idr_{APPLY_0}1.14"
      pure (Cidr_Prelude.List.:: "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}0.0" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}1.0") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}0.0" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}1.0")
  "idr_Data.Vect.{foldrImpl_1}4_1463" <- store "idr_Data.Vect.{foldrImpl_1}4_val"
  "idr_{APPLY_0}0.15" <- pure "idr_Data.Vect.{foldrImpl_1}0"
  "idr_{APPLY_0}1.15" <- pure "idr_Data.Vect.{foldrImpl_1}4_1463"
  "idr_{APPLY_0}0_val.15" <- fetch "idr_{APPLY_0}0.15"
  case "idr_{APPLY_0}0_val.15" of
    (C"idr_{U_Data.Vect.{foldrImpl_1}_1}" "idr_{APPLY_0}2.15" "idr_{APPLY_0}3.15" "idr_{APPLY_0}4.15") ->
      "idr_Data.Vect.{foldrImpl_1}" "idr_{APPLY_0}2.15" "idr_{APPLY_0}3.15" "idr_{APPLY_0}4.15" "idr_{APPLY_0}1.15"
    (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}") ->
      "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}0.1" <- pure "idr_{APPLY_0}1.15"
      fetch "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}0.1"

"idr_Main.{main_2}.unboxed" "idr_Main.{main_2}0.49.arity.1" "idr_Main.{main_2}0.49.arity.2" =
  "idr_Main.{main_2}0_val" <- pure (Cidr_Builtins.MkPair "idr_Main.{main_2}0.49.arity.1" "idr_Main.{main_2}0.49.arity.2")
  (Cidr_Builtins.MkPair "idr_Main.{main_2}1" "idr_Main.{main_2}2") <- pure "idr_Main.{main_2}0_val"
  "idr_Main.{main_2}3_val" <- pure (CGrString #"(")
  "idr_Main.{main_2}3" <- store "idr_Main.{main_2}3_val"
  "idr_Main.{main_2}5_val" <- pure (C"idr_{U_prim__floatToStr_1}")
  "idr_Main.{main_2}5" <- store "idr_Main.{main_2}5_val"
  unboxed.CGrString.282 <- idr_Prelude.Show.primNumShow.unboxed "idr_Main.{main_2}5" "idr_Main.{main_2}1"
  "idr_Main.{main_2}4_val_1464" <- pure (CGrString unboxed.CGrString.282)
  "idr_Main.{main_2}4_1466" <- store "idr_Main.{main_2}4_val_1464"
  "idr_Main.{main_2}5_val_1468" <- pure (CGrString #", ")
  "idr_Main.{main_2}5_1469" <- store "idr_Main.{main_2}5_val_1468"
  "idr_Main.{main_2}7_val" <- pure "idr_Main.{main_2}5_val"
  "idr_Main.{main_2}7" <- store "idr_Main.{main_2}7_val"
  unboxed.CGrString.283 <- idr_Prelude.Show.primNumShow.unboxed "idr_Main.{main_2}7" "idr_Main.{main_2}2"
  "idr_Main.{main_2}6_val_1471" <- pure (CGrString unboxed.CGrString.283)
  "idr_Main.{main_2}6_1474" <- store "idr_Main.{main_2}6_val_1471"
  "idr_Main.{main_2}7_val_1475" <- pure (CGrString #")")
  "idr_Main.{main_2}7_1476" <- store "idr_Main.{main_2}7_val_1475"
  idris_str_concat1.20 <- pure "idr_Main.{main_2}6_1474"
  idris_str_concat2.20 <- pure "idr_Main.{main_2}7_1476"
  (CGrString idris_str_concat1_0.20) <- fetch idris_str_concat1.20
  (CGrString idris_str_concat2_0.20) <- fetch idris_str_concat2.20
  idris_str_concat3.20 <- _prim_string_concat idris_str_concat1_0.20 idris_str_concat2_0.20
  unboxed.CGrString.284 <- pure idris_str_concat3.20
  "idr_Main.{main_2}6_val_1470" <- pure (CGrString unboxed.CGrString.284)
  "idr_Main.{main_2}6_1477" <- store "idr_Main.{main_2}6_val_1470"
  idris_str_concat1.21 <- pure "idr_Main.{main_2}5_1469"
  idris_str_concat2.21 <- pure "idr_Main.{main_2}6_1477"
  (CGrString idris_str_concat1_0.21) <- fetch idris_str_concat1.21
  (CGrString idris_str_concat2_0.21) <- fetch idris_str_concat2.21
  idris_str_concat3.21 <- _prim_string_concat idris_str_concat1_0.21 idris_str_concat2_0.21
  unboxed.CGrString.285 <- pure idris_str_concat3.21
  "idr_Main.{main_2}5_val_1467" <- pure (CGrString unboxed.CGrString.285)
  "idr_Main.{main_2}5_1478" <- store "idr_Main.{main_2}5_val_1467"
  idris_str_concat1.22 <- pure "idr_Main.{main_2}4_1466"
  idris_str_concat2.22 <- pure "idr_Main.{main_2}5_1478"
  (CGrString idris_str_concat1_0.22) <- fetch idris_str_concat1.22
  (CGrString idris_str_concat2_0.22) <- fetch idris_str_concat2.22
  idris_str_concat3.22 <- _prim_string_concat idris_str_concat1_0.22 idris_str_concat2_0.22
  unboxed.CGrString.286 <- pure idris_str_concat3.22
  "idr_Main.{main_2}4_val" <- pure (CGrString unboxed.CGrString.286)
  "idr_Main.{main_2}4_1479" <- store "idr_Main.{main_2}4_val"
  idris_str_concat1.23 <- pure "idr_Main.{main_2}3"
  idris_str_concat2.23 <- pure "idr_Main.{main_2}4_1479"
  (CGrString idris_str_concat1_0.23) <- fetch idris_str_concat1.23
  (CGrString idris_str_concat2_0.23) <- fetch idris_str_concat2.23
  idris_str_concat3.23 <- _prim_string_concat idris_str_concat1_0.23 idris_str_concat2_0.23
  pure idris_str_concat3.23 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.23) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.23) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.22) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.22) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.21) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.21) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.20) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.20)

"idr_Main.{main_4}.unboxed" "idr_Main.{main_4}0.49.arity.1" "idr_Main.{main_4}0.49.arity.2" =
  "idr_Main.{main_4}0_val" <- pure (Cidr_Builtins.MkPair "idr_Main.{main_4}0.49.arity.1" "idr_Main.{main_4}0.49.arity.2")
  (Cidr_Builtins.MkPair "idr_Main.{main_4}1" "idr_Main.{main_4}2") <- pure "idr_Main.{main_4}0_val"
  "idr_Main.{main_4}3_val" <- pure (CGrString #"(")
  "idr_Main.{main_4}3" <- store "idr_Main.{main_4}3_val"
  "idr_Main.{main_4}5_val" <- pure (C"idr_{U_prim__floatToStr_1}")
  "idr_Main.{main_4}5" <- store "idr_Main.{main_4}5_val"
  unboxed.CGrString.287 <- idr_Prelude.Show.primNumShow.unboxed "idr_Main.{main_4}5" "idr_Main.{main_4}1"
  "idr_Main.{main_4}4_val_1480" <- pure (CGrString unboxed.CGrString.287)
  "idr_Main.{main_4}4_1482" <- store "idr_Main.{main_4}4_val_1480"
  "idr_Main.{main_4}5_val_1484" <- pure (CGrString #", ")
  "idr_Main.{main_4}5_1485" <- store "idr_Main.{main_4}5_val_1484"
  "idr_Main.{main_4}7_val" <- pure "idr_Main.{main_4}5_val"
  "idr_Main.{main_4}7" <- store "idr_Main.{main_4}7_val"
  unboxed.CGrString.288 <- idr_Prelude.Show.primNumShow.unboxed "idr_Main.{main_4}7" "idr_Main.{main_4}2"
  "idr_Main.{main_4}6_val_1487" <- pure (CGrString unboxed.CGrString.288)
  "idr_Main.{main_4}6_1490" <- store "idr_Main.{main_4}6_val_1487"
  "idr_Main.{main_4}7_val_1491" <- pure (CGrString #")")
  "idr_Main.{main_4}7_1492" <- store "idr_Main.{main_4}7_val_1491"
  idris_str_concat1.24 <- pure "idr_Main.{main_4}6_1490"
  idris_str_concat2.24 <- pure "idr_Main.{main_4}7_1492"
  (CGrString idris_str_concat1_0.24) <- fetch idris_str_concat1.24
  (CGrString idris_str_concat2_0.24) <- fetch idris_str_concat2.24
  idris_str_concat3.24 <- _prim_string_concat idris_str_concat1_0.24 idris_str_concat2_0.24
  unboxed.CGrString.289 <- pure idris_str_concat3.24
  "idr_Main.{main_4}6_val_1486" <- pure (CGrString unboxed.CGrString.289)
  "idr_Main.{main_4}6_1493" <- store "idr_Main.{main_4}6_val_1486"
  idris_str_concat1.25 <- pure "idr_Main.{main_4}5_1485"
  idris_str_concat2.25 <- pure "idr_Main.{main_4}6_1493"
  (CGrString idris_str_concat1_0.25) <- fetch idris_str_concat1.25
  (CGrString idris_str_concat2_0.25) <- fetch idris_str_concat2.25
  idris_str_concat3.25 <- _prim_string_concat idris_str_concat1_0.25 idris_str_concat2_0.25
  unboxed.CGrString.290 <- pure idris_str_concat3.25
  "idr_Main.{main_4}5_val_1483" <- pure (CGrString unboxed.CGrString.290)
  "idr_Main.{main_4}5_1494" <- store "idr_Main.{main_4}5_val_1483"
  idris_str_concat1.26 <- pure "idr_Main.{main_4}4_1482"
  idris_str_concat2.26 <- pure "idr_Main.{main_4}5_1494"
  (CGrString idris_str_concat1_0.26) <- fetch idris_str_concat1.26
  (CGrString idris_str_concat2_0.26) <- fetch idris_str_concat2.26
  idris_str_concat3.26 <- _prim_string_concat idris_str_concat1_0.26 idris_str_concat2_0.26
  unboxed.CGrString.291 <- pure idris_str_concat3.26
  "idr_Main.{main_4}4_val" <- pure (CGrString unboxed.CGrString.291)
  "idr_Main.{main_4}4_1495" <- store "idr_Main.{main_4}4_val"
  idris_str_concat1.27 <- pure "idr_Main.{main_4}3"
  idris_str_concat2.27 <- pure "idr_Main.{main_4}4_1495"
  (CGrString idris_str_concat1_0.27) <- fetch idris_str_concat1.27
  (CGrString idris_str_concat2_0.27) <- fetch idris_str_concat2.27
  idris_str_concat3.27 <- _prim_string_concat idris_str_concat1_0.27 idris_str_concat2_0.27
  pure idris_str_concat3.27 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.27) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.27) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.26) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.26) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.25) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.25) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.24) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.24)

"idr_Main.{printFmt_14}" "idr_Main.{printFmt_14}0" "idr_Main.{printFmt_14}1" "idr_Main.{printFmt_14}2" =
  "idr_Main.{printFmt_14}4_val" <- pure (C"idr_{U_prim__toStrInt_1}")
  "idr_Main.{printFmt_14}4" <- store "idr_Main.{printFmt_14}4_val"
  unboxed.CGrString.293 <- idr_Prelude.Show.primNumShow.unboxed "idr_Main.{printFmt_14}4" "idr_Main.{printFmt_14}2"
  "idr_Main.{printFmt_14}3_val_1533" <- pure (CGrString unboxed.CGrString.293)
  "idr_Main.{printFmt_14}3_1535" <- store "idr_Main.{printFmt_14}3_val_1533"
  idris_str_concat1.28 <- pure "idr_Main.{printFmt_14}1"
  idris_str_concat2.28 <- pure "idr_Main.{printFmt_14}3_1535"
  (CGrString idris_str_concat1_0.28) <- fetch idris_str_concat1.28
  (CGrString idris_str_concat2_0.28) <- fetch idris_str_concat2.28
  idris_str_concat3.28 <- _prim_string_concat idris_str_concat1_0.28 idris_str_concat2_0.28
  unboxed.CGrString.294 <- pure idris_str_concat3.28
  "idr_Main.{printFmt_14}3_val" <- pure (CGrString unboxed.CGrString.294)
  "idr_Main.{printFmt_14}3_1536" <- store "idr_Main.{printFmt_14}3_val"
  idr_Main.printFmt "idr_Main.{printFmt_14}0" "idr_Main.{printFmt_14}3_1536" -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.28) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.28)

"idr_Main.{printFmt_15}" "idr_Main.{printFmt_15}0" "idr_Main.{printFmt_15}1" "idr_Main.{printFmt_15}2" =
  idris_str_concat1.29 <- pure "idr_Main.{printFmt_15}1"
  idris_str_concat2.29 <- pure "idr_Main.{printFmt_15}2"
  (CGrString idris_str_concat1_0.29) <- fetch idris_str_concat1.29
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.29)
  -- LINT: Invalid pattern match for (CGrString idris_str_concat2_0.29). Expected pattern of type: {CGrString[T_String]}, but got: {CGrInt[T_Int64]
  ,CGrString[T_String]}
  (CGrString idris_str_concat2_0.29) <- fetch idris_str_concat2.29
  idris_str_concat3.29 <- _prim_string_concat idris_str_concat1_0.29 idris_str_concat2_0.29
  unboxed.CGrString.295 <- pure idris_str_concat3.29
  "idr_Main.{printFmt_15}3_val" <- pure (CGrString unboxed.CGrString.295)
  "idr_Main.{printFmt_15}3" <- store "idr_Main.{printFmt_15}3_val"
  idr_Main.printFmt "idr_Main.{printFmt_15}0" "idr_Main.{printFmt_15}3" -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.29)

"idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04" =
  "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04"
  case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06") ->
      "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
      case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" of
        (Cidr_Prelude.List.Nil) ->
          "idr_{APPLY_0}0.16" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02"
          "idr_{APPLY_0}1.16" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_{APPLY_0}0_val.16" <- fetch "idr_{APPLY_0}0.16"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val" <- case "idr_{APPLY_0}0_val.16" of
            (C"idr_{U_Main.{main_2}_1}") ->
              (Cidr_Builtins.MkPair "idr_{APPLY_0}1.16.49.48.arity.1" "idr_{APPLY_0}1.16.49.48.arity.2") <- fetch "idr_{APPLY_0}1.16"
              unboxed.CGrString.299 <- "idr_Main.{main_2}.unboxed" "idr_{APPLY_0}1.16.49.48.arity.1" "idr_{APPLY_0}1.16.49.48.arity.2"
              pure (CGrString unboxed.CGrString.299) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.299) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Builtins.MkPair "idr_{APPLY_0}1.16.49.48.arity.1" "idr_{APPLY_0}1.16.49.48.arity.2")
            (C"idr_{U_Main.{main_4}_1}") ->
              (Cidr_Builtins.MkPair "idr_{APPLY_0}1.16.49.49.arity.1" "idr_{APPLY_0}1.16.49.49.arity.2") <- fetch "idr_{APPLY_0}1.16"
              unboxed.CGrString.300 <- "idr_Main.{main_4}.unboxed" "idr_{APPLY_0}1.16.49.49.arity.1" "idr_{APPLY_0}1.16.49.49.arity.2"
              pure (CGrString unboxed.CGrString.300) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.300) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Builtins.MkPair "idr_{APPLY_0}1.16.49.49.arity.1" "idr_{APPLY_0}1.16.49.49.arity.2")
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val"
          idris_str_concat1.30 <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"
          idris_str_concat2.30 <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07"
          (CGrString idris_str_concat1_0.30) <- fetch idris_str_concat1.30
          (CGrString idris_str_concat2_0.30) <- fetch idris_str_concat2.30
          idris_str_concat3.30 <- _prim_string_concat idris_str_concat1_0.30 idris_str_concat2_0.30
          unboxed.CGrString.301 <- pure idris_str_concat3.30
          (CGrString unboxed.CGrString.1) <- pure (CGrString unboxed.CGrString.301) -- LINT: Syntax error - expected SimpleExp without nodes
          pure unboxed.CGrString.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.30) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.30)
        #default ->
          "idr_{APPLY_0}0.17" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02"
          "idr_{APPLY_0}1.17" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_{APPLY_0}0_val.17" <- fetch "idr_{APPLY_0}0.17"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1547" <- case "idr_{APPLY_0}0_val.17" of
            (C"idr_{U_Main.{main_2}_1}") ->
              (Cidr_Builtins.MkPair "idr_{APPLY_0}1.17.49.50.arity.1" "idr_{APPLY_0}1.17.49.50.arity.2") <- fetch "idr_{APPLY_0}1.17"
              unboxed.CGrString.302 <- "idr_Main.{main_2}.unboxed" "idr_{APPLY_0}1.17.49.50.arity.1" "idr_{APPLY_0}1.17.49.50.arity.2"
              pure (CGrString unboxed.CGrString.302) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.302) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Builtins.MkPair "idr_{APPLY_0}1.17.49.50.arity.1" "idr_{APPLY_0}1.17.49.50.arity.2")
            (C"idr_{U_Main.{main_4}_1}") ->
              (Cidr_Builtins.MkPair "idr_{APPLY_0}1.17.49.51.arity.1" "idr_{APPLY_0}1.17.49.51.arity.2") <- fetch "idr_{APPLY_0}1.17"
              unboxed.CGrString.303 <- "idr_Main.{main_4}.unboxed" "idr_{APPLY_0}1.17.49.51.arity.1" "idr_{APPLY_0}1.17.49.51.arity.2"
              pure (CGrString unboxed.CGrString.303) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.303) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Builtins.MkPair "idr_{APPLY_0}1.17.49.51.arity.1" "idr_{APPLY_0}1.17.49.51.arity.2")
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1547"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val" <- pure (CGrString #", ")
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val"
          idris_str_concat1.31 <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09"
          idris_str_concat2.31 <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010"
          (CGrString idris_str_concat1_0.31) <- fetch idris_str_concat1.31
          (CGrString idris_str_concat2_0.31) <- fetch idris_str_concat2.31
          idris_str_concat3.31 <- _prim_string_concat idris_str_concat1_0.31 idris_str_concat2_0.31
          unboxed.CGrString.304 <- pure idris_str_concat3.31
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1546" <- pure (CGrString unboxed.CGrString.304)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1548" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1546"
          idris_str_concat1.32 <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"
          idris_str_concat2.32 <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1548"
          (CGrString idris_str_concat1_0.32) <- fetch idris_str_concat1.32
          (CGrString idris_str_concat2_0.32) <- fetch idris_str_concat2.32
          idris_str_concat3.32 <- _prim_string_concat idris_str_concat1_0.32 idris_str_concat2_0.32
          unboxed.CGrString.305 <- pure idris_str_concat3.32
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val" <- pure (CGrString unboxed.CGrString.305)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1549" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1549" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06" -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.32) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.32) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.31) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.31)
    (Cidr_Prelude.List.Nil) ->
      (CGrString unboxed.CGrString.2) <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"
      pure unboxed.CGrString.2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString unboxed.CGrString.2)

"idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0.unboxed" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:02" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:03" =
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04_val" <- pure (CGrString #"[")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07_val" <- pure (CGrString #"")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011_val" <- pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_28}_2}")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012_val" <- pure (Cidr_Prelude.List.Nil)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013_val" <- pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_29}_1}")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val" <- idr_Data.Vect.foldrImpl "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:03"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_1566" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val"
  unboxed.CGrString.244 <- "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:02" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_1566"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_1563" <- pure (CGrString unboxed.CGrString.244)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1567" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_1563"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val_1568" <- pure (CGrString #"]")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_1569" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val_1568"
  idris_str_concat1.33 <- pure "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1567"
  idris_str_concat2.33 <- pure "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_1569"
  (CGrString idris_str_concat1_0.33) <- fetch idris_str_concat1.33
  (CGrString idris_str_concat2_0.33) <- fetch idris_str_concat2.33
  idris_str_concat3.33 <- _prim_string_concat idris_str_concat1_0.33 idris_str_concat2_0.33
  unboxed.CGrString.306 <- pure idris_str_concat3.33
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val" <- pure (CGrString unboxed.CGrString.306)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1570" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val"
  idris_str_concat1.34 <- pure "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04"
  idris_str_concat2.34 <- pure "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1570"
  (CGrString idris_str_concat1_0.34) <- fetch idris_str_concat1.34
  (CGrString idris_str_concat2_0.34) <- fetch idris_str_concat2.34
  idris_str_concat3.34 <- _prim_string_concat idris_str_concat1_0.34 idris_str_concat2_0.34
  pure idris_str_concat3.34 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.34) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.34) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0.33) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0.33)

idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:101.49.arity.1 idr_Prelude.Show.showLitChar:getAt:102 =
  idr_Prelude.Show.showLitChar:getAt:102_val <- fetch idr_Prelude.Show.showLitChar:getAt:102
  case idr_Prelude.Show.showLitChar:getAt:102_val of
    (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:getAt:103 idr_Prelude.Show.showLitChar:getAt:104) ->
      idr_Prelude.Show.showLitChar:getAt:101_val <- pure (CGrInt idr_Prelude.Show.showLitChar:getAt:101.49.arity.1)
      case idr_Prelude.Show.showLitChar:getAt:101_val of
        (CGrInt idr_Prelude.Show.showLitChar:getAt:10_cpat_LInt64_0) ->
          case idr_Prelude.Show.showLitChar:getAt:10_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar:getAt:103) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar:getAt:103)
            #default ->
              idr_Prelude.Show.showLitChar:getAt:105_val_1633 <- pure (CGrInt 1)
              idr_Prelude.Show.showLitChar:getAt:105 <- store idr_Prelude.Show.showLitChar:getAt:105_val_1633
              (CGrInt idr_Prelude.Show.showLitChar:getAt:101.41.214.arity.1) <- pure (CGrInt idr_Prelude.Show.showLitChar:getAt:101.49.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idr_Prelude.Show.showLitChar:getAt:105.41.214.arity.1) <- pure idr_Prelude.Show.showLitChar:getAt:105_val_1633
              idris_int_sub0.41.arity.1.1 <- pure idr_Prelude.Show.showLitChar:getAt:101.41.214.arity.1
              idris_int_sub1.41.arity.1.1 <- pure idr_Prelude.Show.showLitChar:getAt:105.41.214.arity.1
              (CGrInt idris_int_sub0_1.1) <- pure (CGrInt idris_int_sub0.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_sub1_1.1) <- pure (CGrInt idris_int_sub1.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_sub2.1 <- _prim_int_sub idris_int_sub0_1.1 idris_int_sub1_1.1
              unboxed.CGrInt.105 <- pure idris_int_sub2.1
              idr_Prelude.Show.showLitChar:getAt:105_val <- pure (CGrInt unboxed.CGrInt.105)
              idr_Prelude.Show.showLitChar:getAt:105_1634 <- store idr_Prelude.Show.showLitChar:getAt:105_val
              (CGrInt idr_Prelude.Show.showLitChar:getAt:105_1634.49.54.arity.1) <- pure idr_Prelude.Show.showLitChar:getAt:105_val
              idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:105_1634.49.54.arity.1 idr_Prelude.Show.showLitChar:getAt:104
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)

idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_361 =
  idr__Prelude.Strings.unpack_with_361_val <- fetch idr__Prelude.Strings.unpack_with_361
  case idr__Prelude.Strings.unpack_with_361_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_363) ->
      idr__Prelude.Strings.unpack_with_365_val_1645 <- pure (CGrString #"")
      idr__Prelude.Strings.unpack_with_365 <- store idr__Prelude.Strings.unpack_with_365_val_1645
      (CGrString idr__Prelude.Strings.unpack_with_365.41.215.arity.1) <- pure idr__Prelude.Strings.unpack_with_365_val_1645
      idris_str_eq1.32 <- pure idr__Prelude.Strings.unpack_with_363
      idris_str_eq2.41.arity.1.32 <- pure idr__Prelude.Strings.unpack_with_365.41.215.arity.1
      (CGrString idris_str_eq1_0.32) <- fetch idris_str_eq1.32
      (CGrString idris_str_eq2_0.32) <- pure (CGrString idris_str_eq2.41.arity.1.32) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_eq3.32 <- _prim_string_eq idris_str_eq1_0.32 idris_str_eq2_0.32
      ccp.2.32 <- case idris_str_eq3.32 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.106 <- pure ccp.2.32
      idr__Prelude.Strings.unpack_with_365_val_1644 <- pure (CGrInt unboxed.CGrInt.106)
      idr__Prelude.Strings.unpack_with_365_1646 <- store idr__Prelude.Strings.unpack_with_365_val_1644
      idr__Prelude.Strings.unpack_with_365_val_1647 <- pure idr__Prelude.Strings.unpack_with_365_val_1644
      idr__Prelude.Strings.unpack_with_365_val_1643 <- case idr__Prelude.Strings.unpack_with_365_val_1647 of
        (CGrInt idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0) ->
          case idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr__Prelude.Strings.unpack_with_365_1648 <- store idr__Prelude.Strings.unpack_with_365_val_1643
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.35" <- pure idr__Prelude.Strings.unpack_with_365_1648
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.35" <- pure (Cidr_Prelude.Bool.True)
      idr__Prelude.Strings.unpack_with_365_val_1642 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.35" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.35" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.35"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.35" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr__Prelude.Strings.unpack_with_365_1649 <- store idr__Prelude.Strings.unpack_with_365_val_1642
      idr__Prelude.Strings.unpack_with_365_val_1650 <- pure idr__Prelude.Strings.unpack_with_365_val_1642
      idr__Prelude.Strings.unpack_with_365_val <- case idr__Prelude.Strings.unpack_with_365_val_1650 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_head1.52 <- pure idr__Prelude.Strings.unpack_with_363
          (CGrString idris_str_head1_0.52) <- fetch idris_str_head1.52
          idris_str_head2.52 <- _prim_string_head idris_str_head1_0.52
          unboxed.CGrInt.107 <- pure idris_str_head2.52
          idr__Prelude.Strings.unpack_with_366_val_1651 <- pure (CGrInt unboxed.CGrInt.107)
          idr__Prelude.Strings.unpack_with_366_1652 <- store idr__Prelude.Strings.unpack_with_366_val_1651
          idris_str_tail1.140 <- pure idr__Prelude.Strings.unpack_with_363
          (CGrString idris_str_tail1_0.140) <- fetch idris_str_tail1.140
          idris_str_tail2.140 <- _prim_string_tail idris_str_tail1_0.140
          unboxed.CGrString.245 <- pure idris_str_tail2.140
          idr__Prelude.Strings.unpack_with_367_val <- pure (CGrString unboxed.CGrString.245)
          idr__Prelude.Strings.unpack_with_367 <- store idr__Prelude.Strings.unpack_with_367_val
          pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_1652 idr__Prelude.Strings.unpack_with_367) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_1652 idr__Prelude.Strings.unpack_with_367) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.140) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.52)
      idr__Prelude.Strings.unpack_with_365_1653 <- store idr__Prelude.Strings.unpack_with_365_val
      idr__Prelude.Strings.unpack_with_364_val <- idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_365_1653
      idr__Prelude.Strings.unpack_with_364_1654 <- store idr__Prelude.Strings.unpack_with_364_val
      pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_1654) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_1654) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.32)
    (Cidr_Prelude.Strings.StrNil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)

idr__Prelude.Strings.ltrim_with_55.unboxed idr__Prelude.Strings.ltrim_with_551 =
  idr__Prelude.Strings.ltrim_with_551_val <- fetch idr__Prelude.Strings.ltrim_with_551
  case idr__Prelude.Strings.ltrim_with_551_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.ltrim_with_552 idr__Prelude.Strings.ltrim_with_553) ->
      (CGrInt idr__Prelude.Strings.ltrim_with_552.57.26.arity.1) <- fetch idr__Prelude.Strings.ltrim_with_552
      idr_Prelude.Chars.isSpace0.57.arity.1.17 <- pure idr__Prelude.Strings.ltrim_with_552.57.26.arity.1
      idr_Prelude.Chars.isSpace1_val_27.17 <- pure (CGrInt 32)
      idr_Prelude.Chars.isSpace1.17 <- store idr_Prelude.Chars.isSpace1_val_27.17
      (CGrInt idr_Prelude.Chars.isSpace1.41.3.arity.1.17) <- pure idr_Prelude.Chars.isSpace1_val_27.17
      (CGrInt idr_Prelude.Chars.isSpace0.49.4.arity.1.17) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_int_eq0.49.arity.1.0.17 <- pure idr_Prelude.Chars.isSpace0.49.4.arity.1.17
      idris_int_eq1.41.arity.1.0.17 <- pure idr_Prelude.Chars.isSpace1.41.3.arity.1.17
      (CGrInt idris_int_eq0_1.0.17) <- pure (CGrInt idris_int_eq0.49.arity.1.0.17) -- LINT: Syntax error - expected SimpleExp without nodes
      (CGrInt idris_int_eq1_1.0.17) <- pure (CGrInt idris_int_eq1.41.arity.1.0.17) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_int_eq2.0.17 <- _prim_int_eq idris_int_eq0_1.0.17 idris_int_eq1_1.0.17
      ccp.0.0.17 <- case idris_int_eq2.0.17 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.4.17 <- pure ccp.0.0.17
      idr_Prelude.Chars.isSpace1_val.17 <- pure (CGrInt unboxed.CGrInt.4.17)
      idr_Prelude.Chars.isSpace1_28.17 <- store idr_Prelude.Chars.isSpace1_val.17
      idr_Prelude.Chars.isSpace1_val_29.17 <- pure idr_Prelude.Chars.isSpace1_val.17
      idr__Prelude.Strings.ltrim_with_554_val <- case idr_Prelude.Chars.isSpace1_val_29.17 of
        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0.17) ->
          case idr_Prelude.Chars.isSpace_cpat_LInt64_0.17 of
            0 ->
              idr_Prelude.Chars.isSpace2_val_30.17 <- pure (CGrInt 9)
              idr_Prelude.Chars.isSpace2.17 <- store idr_Prelude.Chars.isSpace2_val_30.17
              (CGrInt idr_Prelude.Chars.isSpace2.41.4.arity.1.17) <- pure idr_Prelude.Chars.isSpace2_val_30.17
              (CGrInt idr_Prelude.Chars.isSpace0.49.5.arity.1.17) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq0.49.arity.1.1.17 <- pure idr_Prelude.Chars.isSpace0.49.5.arity.1.17
              idris_int_eq1.41.arity.1.1.17 <- pure idr_Prelude.Chars.isSpace2.41.4.arity.1.17
              (CGrInt idris_int_eq0_1.1.17) <- pure (CGrInt idris_int_eq0.49.arity.1.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
              (CGrInt idris_int_eq1_1.1.17) <- pure (CGrInt idris_int_eq1.41.arity.1.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
              idris_int_eq2.1.17 <- _prim_int_eq idris_int_eq0_1.1.17 idris_int_eq1_1.1.17
              ccp.0.1.17 <- case idris_int_eq2.1.17 of
                #False ->
                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.17
                #True ->
                  pure 1
              unboxed.CGrInt.5.17 <- pure ccp.0.1.17
              idr_Prelude.Chars.isSpace2_val.17 <- pure (CGrInt unboxed.CGrInt.5.17)
              idr_Prelude.Chars.isSpace2_31.17 <- store idr_Prelude.Chars.isSpace2_val.17
              idr_Prelude.Chars.isSpace2_val_32.17 <- pure idr_Prelude.Chars.isSpace2_val.17
              case idr_Prelude.Chars.isSpace2_val_32.17 of
                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.17) ->
                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_33.17 of
                    0 ->
                      idr_Prelude.Chars.isSpace3_val_34.17 <- pure (CGrInt 13)
                      idr_Prelude.Chars.isSpace3.17 <- store idr_Prelude.Chars.isSpace3_val_34.17
                      (CGrInt idr_Prelude.Chars.isSpace3.41.5.arity.1.17) <- pure idr_Prelude.Chars.isSpace3_val_34.17
                      (CGrInt idr_Prelude.Chars.isSpace0.49.6.arity.1.17) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq0.49.arity.1.2.17 <- pure idr_Prelude.Chars.isSpace0.49.6.arity.1.17
                      idris_int_eq1.41.arity.1.2.17 <- pure idr_Prelude.Chars.isSpace3.41.5.arity.1.17
                      (CGrInt idris_int_eq0_1.2.17) <- pure (CGrInt idris_int_eq0.49.arity.1.2.17) -- LINT: Syntax error - expected SimpleExp without nodes
                      (CGrInt idris_int_eq1_1.2.17) <- pure (CGrInt idris_int_eq1.41.arity.1.2.17) -- LINT: Syntax error - expected SimpleExp without nodes
                      idris_int_eq2.2.17 <- _prim_int_eq idris_int_eq0_1.2.17 idris_int_eq1_1.2.17
                      ccp.0.2.17 <- case idris_int_eq2.2.17 of
                        #False ->
                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.17
                        #True ->
                          pure 1
                      unboxed.CGrInt.6.17 <- pure ccp.0.2.17
                      idr_Prelude.Chars.isSpace3_val.17 <- pure (CGrInt unboxed.CGrInt.6.17)
                      idr_Prelude.Chars.isSpace3_35.17 <- store idr_Prelude.Chars.isSpace3_val.17
                      idr_Prelude.Chars.isSpace3_val_36.17 <- pure idr_Prelude.Chars.isSpace3_val.17
                      case idr_Prelude.Chars.isSpace3_val_36.17 of
                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.17) ->
                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_37.17 of
                            0 ->
                              idr_Prelude.Chars.isSpace4_val_38.17 <- pure (CGrInt 10)
                              idr_Prelude.Chars.isSpace4.17 <- store idr_Prelude.Chars.isSpace4_val_38.17
                              (CGrInt idr_Prelude.Chars.isSpace4.41.6.arity.1.17) <- pure idr_Prelude.Chars.isSpace4_val_38.17
                              (CGrInt idr_Prelude.Chars.isSpace0.49.7.arity.1.17) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq0.49.arity.1.3.17 <- pure idr_Prelude.Chars.isSpace0.49.7.arity.1.17
                              idris_int_eq1.41.arity.1.3.17 <- pure idr_Prelude.Chars.isSpace4.41.6.arity.1.17
                              (CGrInt idris_int_eq0_1.3.17) <- pure (CGrInt idris_int_eq0.49.arity.1.3.17) -- LINT: Syntax error - expected SimpleExp without nodes
                              (CGrInt idris_int_eq1_1.3.17) <- pure (CGrInt idris_int_eq1.41.arity.1.3.17) -- LINT: Syntax error - expected SimpleExp without nodes
                              idris_int_eq2.3.17 <- _prim_int_eq idris_int_eq0_1.3.17 idris_int_eq1_1.3.17
                              ccp.0.3.17 <- case idris_int_eq2.3.17 of
                                #False ->
                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.17
                                #True ->
                                  pure 1
                              unboxed.CGrInt.7.17 <- pure ccp.0.3.17
                              idr_Prelude.Chars.isSpace4_val.17 <- pure (CGrInt unboxed.CGrInt.7.17)
                              idr_Prelude.Chars.isSpace4_39.17 <- store idr_Prelude.Chars.isSpace4_val.17
                              idr_Prelude.Chars.isSpace4_val_40.17 <- pure idr_Prelude.Chars.isSpace4_val.17
                              case idr_Prelude.Chars.isSpace4_val_40.17 of
                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.17) ->
                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_41.17 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace5_val_42.17 <- pure (CGrInt 12)
                                      idr_Prelude.Chars.isSpace5.17 <- store idr_Prelude.Chars.isSpace5_val_42.17
                                      (CGrInt idr_Prelude.Chars.isSpace5.41.7.arity.1.17) <- pure idr_Prelude.Chars.isSpace5_val_42.17
                                      (CGrInt idr_Prelude.Chars.isSpace0.49.8.arity.1.17) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq0.49.arity.1.4.17 <- pure idr_Prelude.Chars.isSpace0.49.8.arity.1.17
                                      idris_int_eq1.41.arity.1.4.17 <- pure idr_Prelude.Chars.isSpace5.41.7.arity.1.17
                                      (CGrInt idris_int_eq0_1.4.17) <- pure (CGrInt idris_int_eq0.49.arity.1.4.17) -- LINT: Syntax error - expected SimpleExp without nodes
                                      (CGrInt idris_int_eq1_1.4.17) <- pure (CGrInt idris_int_eq1.41.arity.1.4.17) -- LINT: Syntax error - expected SimpleExp without nodes
                                      idris_int_eq2.4.17 <- _prim_int_eq idris_int_eq0_1.4.17 idris_int_eq1_1.4.17
                                      ccp.0.4.17 <- case idris_int_eq2.4.17 of
                                        #False ->
                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.17
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.8.17 <- pure ccp.0.4.17
                                      idr_Prelude.Chars.isSpace5_val.17 <- pure (CGrInt unboxed.CGrInt.8.17)
                                      idr_Prelude.Chars.isSpace5_43.17 <- store idr_Prelude.Chars.isSpace5_val.17
                                      idr_Prelude.Chars.isSpace5_val_44.17 <- pure idr_Prelude.Chars.isSpace5_val.17
                                      case idr_Prelude.Chars.isSpace5_val_44.17 of
                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.17) ->
                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_45.17 of
                                            0 ->
                                              idr_Prelude.Chars.isSpace6_val_46.17 <- pure (CGrInt 11)
                                              idr_Prelude.Chars.isSpace6.17 <- store idr_Prelude.Chars.isSpace6_val_46.17
                                              (CGrInt idr_Prelude.Chars.isSpace6.41.8.arity.1.17) <- pure idr_Prelude.Chars.isSpace6_val_46.17
                                              (CGrInt idr_Prelude.Chars.isSpace0.49.9.arity.1.17) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq0.49.arity.1.5.17 <- pure idr_Prelude.Chars.isSpace0.49.9.arity.1.17
                                              idris_int_eq1.41.arity.1.5.17 <- pure idr_Prelude.Chars.isSpace6.41.8.arity.1.17
                                              (CGrInt idris_int_eq0_1.5.17) <- pure (CGrInt idris_int_eq0.49.arity.1.5.17) -- LINT: Syntax error - expected SimpleExp without nodes
                                              (CGrInt idris_int_eq1_1.5.17) <- pure (CGrInt idris_int_eq1.41.arity.1.5.17) -- LINT: Syntax error - expected SimpleExp without nodes
                                              idris_int_eq2.5.17 <- _prim_int_eq idris_int_eq0_1.5.17 idris_int_eq1_1.5.17
                                              ccp.0.5.17 <- case idris_int_eq2.5.17 of
                                                #False ->
                                                  pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.17
                                                #True ->
                                                  pure 1
                                              unboxed.CGrInt.9.17 <- pure ccp.0.5.17
                                              idr_Prelude.Chars.isSpace6_val.17 <- pure (CGrInt unboxed.CGrInt.9.17)
                                              idr_Prelude.Chars.isSpace6_47.17 <- store idr_Prelude.Chars.isSpace6_val.17
                                              idr_Prelude.Chars.isSpace6_val_48.17 <- pure idr_Prelude.Chars.isSpace6_val.17
                                              case idr_Prelude.Chars.isSpace6_val_48.17 of
                                                (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.17) ->
                                                  case idr_Prelude.Chars.isSpace_cpat_LInt64_0_49.17 of
                                                    0 ->
                                                      idr_Prelude.Chars.isSpace7_val_50.17 <- pure (CGrInt 160)
                                                      idr_Prelude.Chars.isSpace7.17 <- store idr_Prelude.Chars.isSpace7_val_50.17
                                                      (CGrInt idr_Prelude.Chars.isSpace7.41.9.arity.1.17) <- pure idr_Prelude.Chars.isSpace7_val_50.17
                                                      (CGrInt idr_Prelude.Chars.isSpace0.49.10.arity.1.17) <- pure (CGrInt idr_Prelude.Chars.isSpace0.57.arity.1.17) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq0.49.arity.1.6.17 <- pure idr_Prelude.Chars.isSpace0.49.10.arity.1.17
                                                      idris_int_eq1.41.arity.1.6.17 <- pure idr_Prelude.Chars.isSpace7.41.9.arity.1.17
                                                      (CGrInt idris_int_eq0_1.6.17) <- pure (CGrInt idris_int_eq0.49.arity.1.6.17) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      (CGrInt idris_int_eq1_1.6.17) <- pure (CGrInt idris_int_eq1.41.arity.1.6.17) -- LINT: Syntax error - expected SimpleExp without nodes
                                                      idris_int_eq2.6.17 <- _prim_int_eq idris_int_eq0_1.6.17 idris_int_eq1_1.6.17
                                                      ccp.0.6.17 <- case idris_int_eq2.6.17 of
                                                        #False ->
                                                          pure idr_Prelude.Chars.isSpace_cpat_LInt64_0.17
                                                        #True ->
                                                          pure 1
                                                      unboxed.CGrInt.10.17 <- pure ccp.0.6.17
                                                      idr_Prelude.Chars.isSpace7_val.17 <- pure (CGrInt unboxed.CGrInt.10.17)
                                                      idr_Prelude.Chars.isSpace7_51.17 <- store idr_Prelude.Chars.isSpace7_val.17
                                                      idr_Prelude.Chars.isSpace7_val_52.17 <- pure idr_Prelude.Chars.isSpace7_val.17
                                                      case idr_Prelude.Chars.isSpace7_val_52.17 of
                                                        (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.17) ->
                                                          case idr_Prelude.Chars.isSpace_cpat_LInt64_0_53.17 of
                                                            0 ->
                                                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                            #default ->
                                                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                                    #default ->
                                                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                            #default ->
                                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                    #default ->
                                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                            #default ->
                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr__Prelude.Strings.ltrim_with_554 <- store idr__Prelude.Strings.ltrim_with_554_val
      idr__Prelude.Strings.ltrim_with_554_val_1655 <- pure idr__Prelude.Strings.ltrim_with_554_val
      case idr__Prelude.Strings.ltrim_with_554_val_1655 of
        (Cidr_Prelude.Bool.False) ->
          (CGrInt idr__Prelude.Strings.ltrim_with_552.41.217.arity.1) <- pure (CGrInt idr__Prelude.Strings.ltrim_with_552.57.26.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrString idr__Prelude.Strings.ltrim_with_553.49.55.arity.1) <- fetch idr__Prelude.Strings.ltrim_with_553
          idris_str_cons1.41.arity.1.21 <- pure idr__Prelude.Strings.ltrim_with_552.41.217.arity.1
          idris_str_cons2.49.arity.1.21 <- pure idr__Prelude.Strings.ltrim_with_553.49.55.arity.1
          (CGrInt idris_str_cons1_0.21) <- pure (CGrInt idris_str_cons1.41.arity.1.21) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrString idris_str_cons2_0.21) <- pure (CGrString idris_str_cons2.49.arity.1.21) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_cons3.21 <- _prim_string_cons idris_str_cons1_0.21 idris_str_cons2_0.21
          unboxed.CGrString.307 <- pure idris_str_cons3.21
          (CGrString unboxed.CGrString.3) <- pure (CGrString unboxed.CGrString.307) -- LINT: Syntax error - expected SimpleExp without nodes
          pure unboxed.CGrString.3 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.ltrim_with_553.49.55.arity.1)
        (Cidr_Prelude.Bool.True) ->
          idr__Prelude.Strings.ltrim_with_556_val_1659 <- pure (CGrString #"")
          idr__Prelude.Strings.ltrim_with_556 <- store idr__Prelude.Strings.ltrim_with_556_val_1659
          (CGrString idr__Prelude.Strings.ltrim_with_556.41.218.arity.1) <- pure idr__Prelude.Strings.ltrim_with_556_val_1659
          idris_str_eq1.33 <- pure idr__Prelude.Strings.ltrim_with_553
          idris_str_eq2.41.arity.1.33 <- pure idr__Prelude.Strings.ltrim_with_556.41.218.arity.1
          (CGrString idris_str_eq1_0.33) <- fetch idris_str_eq1.33
          (CGrString idris_str_eq2_0.33) <- pure (CGrString idris_str_eq2.41.arity.1.33) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_eq3.33 <- _prim_string_eq idris_str_eq1_0.33 idris_str_eq2_0.33
          ccp.2.33 <- case idris_str_eq3.33 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.108 <- pure ccp.2.33
          idr__Prelude.Strings.ltrim_with_556_val_1658 <- pure (CGrInt unboxed.CGrInt.108)
          idr__Prelude.Strings.ltrim_with_556_1660 <- store idr__Prelude.Strings.ltrim_with_556_val_1658
          idr__Prelude.Strings.ltrim_with_556_val_1661 <- pure idr__Prelude.Strings.ltrim_with_556_val_1658
          idr__Prelude.Strings.ltrim_with_556_val_1657 <- case idr__Prelude.Strings.ltrim_with_556_val_1661 of
            (CGrInt idr__Prelude.Strings.ltrim_with_55_cpat_LInt64_0) ->
              case idr__Prelude.Strings.ltrim_with_55_cpat_LInt64_0 of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          idr__Prelude.Strings.ltrim_with_556_1662 <- store idr__Prelude.Strings.ltrim_with_556_val_1657
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.36" <- pure idr__Prelude.Strings.ltrim_with_556_1662
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.36" <- pure (Cidr_Prelude.Bool.True)
          idr__Prelude.Strings.ltrim_with_556_val_1656 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.36" of
            (Cidr_Prelude.Bool.True) ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.36" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.36"
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1550.36" of
                (Cidr_Prelude.Bool.False) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Bool.True) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          idr__Prelude.Strings.ltrim_with_556_1663 <- store idr__Prelude.Strings.ltrim_with_556_val_1656
          idr__Prelude.Strings.ltrim_with_556_val_1664 <- pure idr__Prelude.Strings.ltrim_with_556_val_1656
          idr__Prelude.Strings.ltrim_with_556_val <- case idr__Prelude.Strings.ltrim_with_556_val_1664 of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
            (Cidr_Prelude.Basics.Yes) ->
              idris_str_head1.53 <- pure idr__Prelude.Strings.ltrim_with_553
              (CGrString idris_str_head1_0.53) <- fetch idris_str_head1.53
              idris_str_head2.53 <- _prim_string_head idris_str_head1_0.53
              unboxed.CGrInt.109 <- pure idris_str_head2.53
              idr__Prelude.Strings.ltrim_with_557_val_1665 <- pure (CGrInt unboxed.CGrInt.109)
              idr__Prelude.Strings.ltrim_with_557_1666 <- store idr__Prelude.Strings.ltrim_with_557_val_1665
              idris_str_tail1.141 <- pure idr__Prelude.Strings.ltrim_with_553
              (CGrString idris_str_tail1_0.141) <- fetch idris_str_tail1.141
              idris_str_tail2.141 <- _prim_string_tail idris_str_tail1_0.141
              unboxed.CGrString.246 <- pure idris_str_tail2.141
              idr__Prelude.Strings.ltrim_with_558_val <- pure (CGrString unboxed.CGrString.246)
              idr__Prelude.Strings.ltrim_with_558 <- store idr__Prelude.Strings.ltrim_with_558_val
              pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.ltrim_with_557_1666 idr__Prelude.Strings.ltrim_with_558) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.ltrim_with_557_1666 idr__Prelude.Strings.ltrim_with_558) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0.141) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0.53)
          idr__Prelude.Strings.ltrim_with_556_1667 <- store idr__Prelude.Strings.ltrim_with_556_val
          idr__Prelude.Strings.ltrim_with_55.unboxed idr__Prelude.Strings.ltrim_with_556_1667 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0.33) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr__Prelude.Strings.ltrim_with_552.57.26.arity.1)
    (Cidr_Prelude.Strings.StrNil) ->
      pure #""
