idris_int_eq idris_int_eq0 idris_int_eq1 =
  -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1)
  -- LINT: Invalid pattern match for (CGrInt idris_int_eq0_1). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CErased[]
  ,CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Builtins.MkDPair[{0
                         ,169
                         ,171}
                        ,{7,170,172}]
  ,Cidr_Builtins.MkPair[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Data.Vect.::[{1
                     ,2
                     ,3
                     ,164
                     ,178
                     ,219}
                    ,{4,5,6,170,172,179,224}]
  ,Cidr_Data.Vect.Nil[]
  ,Cidr_MkUnit[]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Prelude.List.Nil[]
  ,C"idr_{U_Main.countdowns_1}"[]
  ,C"idr_{U_Main.readVect_1}"[]
  ,C"idr_{U_Main.{countdowns_0}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"[T_Dead]
  ,C"idr_{U_Main.{readNumber_8}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_24}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_25}_1}"[{169
                                    ,171}
                                   ,{170,172}
                                   ,{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"[]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"[T_Dead
                                                                                                   ,T_Dead]
  ,C"idr_{U_Prelude.Interactive.getLine'_1}"[{548}]
  ,C"idr_{U_Prelude.Interactive.printLn'_1}"[{675}
                                            ,{676}
                                            ,{677}
                                            ,{683}]
  ,C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"[{0
                                                                                         ,1
                                                                                         ,2
                                                                                         ,3
                                                                                         ,16
                                                                                         ,77
                                                                                         ,90
                                                                                         ,98
                                                                                         ,131
                                                                                         ,140
                                                                                         ,146
                                                                                         ,155
                                                                                         ,164
                                                                                         ,169
                                                                                         ,171
                                                                                         ,178
                                                                                         ,206
                                                                                         ,219
                                                                                         ,232
                                                                                         ,237
                                                                                         ,253
                                                                                         ,301
                                                                                         ,345
                                                                                         ,418
                                                                                         ,503
                                                                                         ,539
                                                                                         ,544
                                                                                         ,546
                                                                                         ,549
                                                                                         ,551
                                                                                         ,552
                                                                                         ,554
                                                                                         ,556
                                                                                         ,558
                                                                                         ,603
                                                                                         ,654
                                                                                         ,683
                                                                                         ,684
                                                                                         ,686
                                                                                         ,688
                                                                                         ,690
                                                                                         ,721
                                                                                         ,734
                                                                                         ,816}]}
  (CGrInt idris_int_eq0_1) <- fetch idris_int_eq0
  (CGrInt idris_int_eq1_1) <- fetch idris_int_eq1
  idris_int_eq2 <- _prim_int_eq idris_int_eq0_1 idris_int_eq1_1
  case idris_int_eq2 of
    #False ->
      pure (CGrInt 0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 0)
    #True ->
      pure (CGrInt 1) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq1_1)

idris_int_lt idris_int_lt0 idris_int_lt1 =
  -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_lt0_1)
  -- LINT: Invalid pattern match for (CGrInt idris_int_lt0_1). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CErased[]
  ,CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Builtins.MkDPair[{0
                         ,169
                         ,171}
                        ,{7,170,172}]
  ,Cidr_Builtins.MkPair[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Data.Vect.::[{1
                     ,2
                     ,3
                     ,164
                     ,178
                     ,219}
                    ,{4,5,6,170,172,179,224}]
  ,Cidr_Data.Vect.Nil[]
  ,Cidr_MkUnit[]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Prelude.List.Nil[]
  ,C"idr_{U_Main.countdowns_1}"[]
  ,C"idr_{U_Main.readVect_1}"[]
  ,C"idr_{U_Main.{countdowns_0}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"[T_Dead]
  ,C"idr_{U_Main.{readNumber_8}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_24}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_25}_1}"[{169
                                    ,171}
                                   ,{170,172}
                                   ,{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"[]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"[T_Dead
                                                                                                   ,T_Dead]
  ,C"idr_{U_Prelude.Interactive.getLine'_1}"[{548}]
  ,C"idr_{U_Prelude.Interactive.printLn'_1}"[{675}
                                            ,{676}
                                            ,{677}
                                            ,{683}]
  ,C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"[{0
                                                                                         ,1
                                                                                         ,2
                                                                                         ,3
                                                                                         ,16
                                                                                         ,77
                                                                                         ,90
                                                                                         ,98
                                                                                         ,131
                                                                                         ,140
                                                                                         ,146
                                                                                         ,155
                                                                                         ,164
                                                                                         ,169
                                                                                         ,171
                                                                                         ,178
                                                                                         ,206
                                                                                         ,219
                                                                                         ,232
                                                                                         ,237
                                                                                         ,253
                                                                                         ,301
                                                                                         ,345
                                                                                         ,418
                                                                                         ,503
                                                                                         ,539
                                                                                         ,544
                                                                                         ,546
                                                                                         ,549
                                                                                         ,551
                                                                                         ,552
                                                                                         ,554
                                                                                         ,556
                                                                                         ,558
                                                                                         ,603
                                                                                         ,654
                                                                                         ,683
                                                                                         ,684
                                                                                         ,686
                                                                                         ,688
                                                                                         ,690
                                                                                         ,721
                                                                                         ,734
                                                                                         ,816}]}
  (CGrInt idris_int_lt0_1) <- fetch idris_int_lt0
  (CGrInt idris_int_lt1_1) <- fetch idris_int_lt1
  idris_int_lt2 <- _prim_int_lt idris_int_lt0_1 idris_int_lt1_1
  case idris_int_lt2 of
    #False ->
      pure (CGrInt 0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 0)
    #True ->
      pure (CGrInt 1) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_lt1_1)

idris_int_add idris_int_add0 idris_int_add1 =
  (CGrInt idris_int_add0_1) <- fetch idris_int_add0
  (CGrInt idris_int_add1_1) <- fetch idris_int_add1
  idris_int_add2 <- _prim_int_add idris_int_add0_1 idris_int_add1_1
  pure (CGrInt idris_int_add2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_int_add2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1)

idris_int_sub idris_int_sub0 idris_int_sub1 =
  (CGrInt idris_int_sub0_1) <- fetch idris_int_sub0
  (CGrInt idris_int_sub1_1) <- fetch idris_int_sub1
  idris_int_sub2 <- _prim_int_sub idris_int_sub0_1 idris_int_sub1_1
  pure (CGrInt idris_int_sub2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_int_sub2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_sub1_1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_sub0_1)

idris_write_str idris_write_str1 idris_write_str2 =
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_write_str2_0)
  -- LINT: Invalid pattern match for (CGrString idris_write_str2_0). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
  ,CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Builtins.MkDPair[{0
                         ,169
                         ,171}
                        ,{7,170,172}]
  ,Cidr_Builtins.MkPair[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Data.Vect.::[{1
                     ,2
                     ,3
                     ,164
                     ,178
                     ,219}
                    ,{4,5,6,170,172,179,224}]
  ,Cidr_Data.Vect.Nil[]
  ,Cidr_MkUnit[]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Prelude.List.Nil[]
  ,C"idr_{U_Main.countdowns_1}"[]
  ,C"idr_{U_Main.readVect_1}"[]
  ,C"idr_{U_Main.{countdowns_0}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"[T_Dead]
  ,C"idr_{U_Main.{readNumber_8}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_24}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_25}_1}"[{169
                                    ,171}
                                   ,{170,172}
                                   ,{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"[]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"[T_Dead
                                                                                                   ,T_Dead]
  ,C"idr_{U_Prelude.Interactive.getLine'_1}"[{548}]
  ,C"idr_{U_Prelude.Interactive.printLn'_1}"[{675}
                                            ,{676}
                                            ,{677}
                                            ,{683}]
  ,C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"[{0
                                                                                         ,1
                                                                                         ,2
                                                                                         ,3
                                                                                         ,16
                                                                                         ,77
                                                                                         ,90
                                                                                         ,98
                                                                                         ,131
                                                                                         ,140
                                                                                         ,146
                                                                                         ,155
                                                                                         ,164
                                                                                         ,169
                                                                                         ,171
                                                                                         ,178
                                                                                         ,206
                                                                                         ,219
                                                                                         ,232
                                                                                         ,237
                                                                                         ,253
                                                                                         ,301
                                                                                         ,345
                                                                                         ,418
                                                                                         ,503
                                                                                         ,539
                                                                                         ,544
                                                                                         ,546
                                                                                         ,549
                                                                                         ,551
                                                                                         ,552
                                                                                         ,554
                                                                                         ,556
                                                                                         ,558
                                                                                         ,603
                                                                                         ,654
                                                                                         ,683
                                                                                         ,684
                                                                                         ,686
                                                                                         ,688
                                                                                         ,690
                                                                                         ,721
                                                                                         ,734
                                                                                         ,816}]}
  (CGrString idris_write_str2_0) <- fetch idris_write_str2
  _prim_string_print idris_write_str2_0
  pure (CUnit) -- LINT: Last return expressions can only return non-node values: pure (CUnit)

idris_read_str idris_read_str0 =
  idris_read_str1 <- _prim_read_string
  pure (CGrString idris_read_str1) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_read_str1)

idris_str_concat idris_str_concat1 idris_str_concat2 =
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0)
  -- LINT: Invalid pattern match for (CGrString idris_str_concat1_0). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
  ,CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Builtins.MkDPair[{0
                         ,169
                         ,171}
                        ,{7,170,172}]
  ,Cidr_Builtins.MkPair[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Data.Vect.::[{1
                     ,2
                     ,3
                     ,164
                     ,178
                     ,219}
                    ,{4,5,6,170,172,179,224}]
  ,Cidr_Data.Vect.Nil[]
  ,Cidr_MkUnit[]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Prelude.List.Nil[]
  ,C"idr_{U_Main.countdowns_1}"[]
  ,C"idr_{U_Main.readVect_1}"[]
  ,C"idr_{U_Main.{countdowns_0}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"[T_Dead]
  ,C"idr_{U_Main.{readNumber_8}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_24}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_25}_1}"[{169
                                    ,171}
                                   ,{170,172}
                                   ,{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"[]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"[T_Dead
                                                                                                   ,T_Dead]
  ,C"idr_{U_Prelude.Interactive.getLine'_1}"[{548}]
  ,C"idr_{U_Prelude.Interactive.printLn'_1}"[{675}
                                            ,{676}
                                            ,{677}
                                            ,{683}]
  ,C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"[{0
                                                                                         ,1
                                                                                         ,2
                                                                                         ,3
                                                                                         ,16
                                                                                         ,77
                                                                                         ,90
                                                                                         ,98
                                                                                         ,131
                                                                                         ,140
                                                                                         ,146
                                                                                         ,155
                                                                                         ,164
                                                                                         ,169
                                                                                         ,171
                                                                                         ,178
                                                                                         ,206
                                                                                         ,219
                                                                                         ,232
                                                                                         ,237
                                                                                         ,253
                                                                                         ,301
                                                                                         ,345
                                                                                         ,418
                                                                                         ,503
                                                                                         ,539
                                                                                         ,544
                                                                                         ,546
                                                                                         ,549
                                                                                         ,551
                                                                                         ,552
                                                                                         ,554
                                                                                         ,556
                                                                                         ,558
                                                                                         ,603
                                                                                         ,654
                                                                                         ,683
                                                                                         ,684
                                                                                         ,686
                                                                                         ,688
                                                                                         ,690
                                                                                         ,721
                                                                                         ,734
                                                                                         ,816}]}
  (CGrString idris_str_concat1_0) <- fetch idris_str_concat1
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0)
  -- LINT: Invalid pattern match for (CGrString idris_str_concat2_0). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
  ,CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Builtins.MkDPair[{0
                         ,169
                         ,171}
                        ,{7,170,172}]
  ,Cidr_Builtins.MkPair[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Data.Vect.::[{1
                     ,2
                     ,3
                     ,164
                     ,178
                     ,219}
                    ,{4,5,6,170,172,179,224}]
  ,Cidr_Data.Vect.Nil[]
  ,Cidr_MkUnit[]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Prelude.List.Nil[]
  ,C"idr_{U_Main.countdowns_1}"[]
  ,C"idr_{U_Main.readVect_1}"[]
  ,C"idr_{U_Main.{countdowns_0}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"[T_Dead]
  ,C"idr_{U_Main.{readNumber_8}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_24}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_25}_1}"[{169
                                    ,171}
                                   ,{170,172}
                                   ,{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"[]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"[T_Dead
                                                                                                   ,T_Dead]
  ,C"idr_{U_Prelude.Interactive.getLine'_1}"[{548}]
  ,C"idr_{U_Prelude.Interactive.printLn'_1}"[{675}
                                            ,{676}
                                            ,{677}
                                            ,{683}]
  ,C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"[{0
                                                                                         ,1
                                                                                         ,2
                                                                                         ,3
                                                                                         ,16
                                                                                         ,77
                                                                                         ,90
                                                                                         ,98
                                                                                         ,131
                                                                                         ,140
                                                                                         ,146
                                                                                         ,155
                                                                                         ,164
                                                                                         ,169
                                                                                         ,171
                                                                                         ,178
                                                                                         ,206
                                                                                         ,219
                                                                                         ,232
                                                                                         ,237
                                                                                         ,253
                                                                                         ,301
                                                                                         ,345
                                                                                         ,418
                                                                                         ,503
                                                                                         ,539
                                                                                         ,544
                                                                                         ,546
                                                                                         ,549
                                                                                         ,551
                                                                                         ,552
                                                                                         ,554
                                                                                         ,556
                                                                                         ,558
                                                                                         ,603
                                                                                         ,654
                                                                                         ,683
                                                                                         ,684
                                                                                         ,686
                                                                                         ,688
                                                                                         ,690
                                                                                         ,721
                                                                                         ,734
                                                                                         ,816}]}
  (CGrString idris_str_concat2_0) <- fetch idris_str_concat2
  idris_str_concat3 <- _prim_string_concat idris_str_concat1_0 idris_str_concat2_0
  pure (CGrString idris_str_concat3) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_concat3)

idris_str_eq idris_str_eq1 idris_str_eq2 =
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0)
  -- LINT: Invalid pattern match for (CGrString idris_str_eq1_0). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
  ,CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Builtins.MkDPair[{0
                         ,169
                         ,171}
                        ,{7,170,172}]
  ,Cidr_Builtins.MkPair[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Data.Vect.::[{1
                     ,2
                     ,3
                     ,164
                     ,178
                     ,219}
                    ,{4,5,6,170,172,179,224}]
  ,Cidr_Data.Vect.Nil[]
  ,Cidr_MkUnit[]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Prelude.List.Nil[]
  ,C"idr_{U_Main.countdowns_1}"[]
  ,C"idr_{U_Main.readVect_1}"[]
  ,C"idr_{U_Main.{countdowns_0}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"[T_Dead]
  ,C"idr_{U_Main.{readNumber_8}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_24}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_25}_1}"[{169
                                    ,171}
                                   ,{170,172}
                                   ,{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"[]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"[T_Dead
                                                                                                   ,T_Dead]
  ,C"idr_{U_Prelude.Interactive.getLine'_1}"[{548}]
  ,C"idr_{U_Prelude.Interactive.printLn'_1}"[{675}
                                            ,{676}
                                            ,{677}
                                            ,{683}]
  ,C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"[{0
                                                                                         ,1
                                                                                         ,2
                                                                                         ,3
                                                                                         ,16
                                                                                         ,77
                                                                                         ,90
                                                                                         ,98
                                                                                         ,131
                                                                                         ,140
                                                                                         ,146
                                                                                         ,155
                                                                                         ,164
                                                                                         ,169
                                                                                         ,171
                                                                                         ,178
                                                                                         ,206
                                                                                         ,219
                                                                                         ,232
                                                                                         ,237
                                                                                         ,253
                                                                                         ,301
                                                                                         ,345
                                                                                         ,418
                                                                                         ,503
                                                                                         ,539
                                                                                         ,544
                                                                                         ,546
                                                                                         ,549
                                                                                         ,551
                                                                                         ,552
                                                                                         ,554
                                                                                         ,556
                                                                                         ,558
                                                                                         ,603
                                                                                         ,654
                                                                                         ,683
                                                                                         ,684
                                                                                         ,686
                                                                                         ,688
                                                                                         ,690
                                                                                         ,721
                                                                                         ,734
                                                                                         ,816}]}
  (CGrString idris_str_eq1_0) <- fetch idris_str_eq1
  (CGrString idris_str_eq2_0) <- fetch idris_str_eq2
  idris_str_eq3 <- _prim_string_eq idris_str_eq1_0 idris_str_eq2_0
  case idris_str_eq3 of
    #False ->
      pure (CGrInt 0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 0)
    #True ->
      pure (CGrInt 1) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq2_0)

idris_str_rev idris_str_rev1 =
  (CGrString idris_str_rev1_0) <- fetch idris_str_rev1
  idris_str_rev2 <- _prim_string_reverse idris_str_rev1_0
  pure (CGrString idris_str_rev2) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_rev2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_rev1_0)

idris_str_head idris_str_head1 =
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0)
  -- LINT: Invalid pattern match for (CGrString idris_str_head1_0). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
  ,CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Builtins.MkDPair[{0
                         ,169
                         ,171}
                        ,{7,170,172}]
  ,Cidr_Builtins.MkPair[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Data.Vect.::[{1
                     ,2
                     ,3
                     ,164
                     ,178
                     ,219}
                    ,{4,5,6,170,172,179,224}]
  ,Cidr_Data.Vect.Nil[]
  ,Cidr_MkUnit[]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Prelude.List.Nil[]
  ,C"idr_{U_Main.countdowns_1}"[]
  ,C"idr_{U_Main.readVect_1}"[]
  ,C"idr_{U_Main.{countdowns_0}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"[T_Dead]
  ,C"idr_{U_Main.{readNumber_8}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_24}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_25}_1}"[{169
                                    ,171}
                                   ,{170,172}
                                   ,{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"[]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"[T_Dead
                                                                                                   ,T_Dead]
  ,C"idr_{U_Prelude.Interactive.getLine'_1}"[{548}]
  ,C"idr_{U_Prelude.Interactive.printLn'_1}"[{675}
                                            ,{676}
                                            ,{677}
                                            ,{683}]
  ,C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"[{0
                                                                                         ,1
                                                                                         ,2
                                                                                         ,3
                                                                                         ,16
                                                                                         ,77
                                                                                         ,90
                                                                                         ,98
                                                                                         ,131
                                                                                         ,140
                                                                                         ,146
                                                                                         ,155
                                                                                         ,164
                                                                                         ,169
                                                                                         ,171
                                                                                         ,178
                                                                                         ,206
                                                                                         ,219
                                                                                         ,232
                                                                                         ,237
                                                                                         ,253
                                                                                         ,301
                                                                                         ,345
                                                                                         ,418
                                                                                         ,503
                                                                                         ,539
                                                                                         ,544
                                                                                         ,546
                                                                                         ,549
                                                                                         ,551
                                                                                         ,552
                                                                                         ,554
                                                                                         ,556
                                                                                         ,558
                                                                                         ,603
                                                                                         ,654
                                                                                         ,683
                                                                                         ,684
                                                                                         ,686
                                                                                         ,688
                                                                                         ,690
                                                                                         ,721
                                                                                         ,734
                                                                                         ,816}]}
  (CGrString idris_str_head1_0) <- fetch idris_str_head1
  idris_str_head2 <- _prim_string_head idris_str_head1_0
  pure (CGrInt idris_str_head2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_str_head2)

idris_str_tail idris_str_tail1 =
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0)
  -- LINT: Invalid pattern match for (CGrString idris_str_tail1_0). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
  ,CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Builtins.MkDPair[{0
                         ,169
                         ,171}
                        ,{7,170,172}]
  ,Cidr_Builtins.MkPair[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Data.Vect.::[{1
                     ,2
                     ,3
                     ,164
                     ,178
                     ,219}
                    ,{4,5,6,170,172,179,224}]
  ,Cidr_Data.Vect.Nil[]
  ,Cidr_MkUnit[]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Prelude.List.Nil[]
  ,C"idr_{U_Main.countdowns_1}"[]
  ,C"idr_{U_Main.readVect_1}"[]
  ,C"idr_{U_Main.{countdowns_0}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"[T_Dead]
  ,C"idr_{U_Main.{readNumber_8}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_24}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_25}_1}"[{169
                                    ,171}
                                   ,{170,172}
                                   ,{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"[]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"[T_Dead
                                                                                                   ,T_Dead]
  ,C"idr_{U_Prelude.Interactive.getLine'_1}"[{548}]
  ,C"idr_{U_Prelude.Interactive.printLn'_1}"[{675}
                                            ,{676}
                                            ,{677}
                                            ,{683}]
  ,C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"[{0
                                                                                         ,1
                                                                                         ,2
                                                                                         ,3
                                                                                         ,16
                                                                                         ,77
                                                                                         ,90
                                                                                         ,98
                                                                                         ,131
                                                                                         ,140
                                                                                         ,146
                                                                                         ,155
                                                                                         ,164
                                                                                         ,169
                                                                                         ,171
                                                                                         ,178
                                                                                         ,206
                                                                                         ,219
                                                                                         ,232
                                                                                         ,237
                                                                                         ,253
                                                                                         ,301
                                                                                         ,345
                                                                                         ,418
                                                                                         ,503
                                                                                         ,539
                                                                                         ,544
                                                                                         ,546
                                                                                         ,549
                                                                                         ,551
                                                                                         ,552
                                                                                         ,554
                                                                                         ,556
                                                                                         ,558
                                                                                         ,603
                                                                                         ,654
                                                                                         ,683
                                                                                         ,684
                                                                                         ,686
                                                                                         ,688
                                                                                         ,690
                                                                                         ,721
                                                                                         ,734
                                                                                         ,816}]}
  (CGrString idris_str_tail1_0) <- fetch idris_str_tail1
  idris_str_tail2 <- _prim_string_tail idris_str_tail1_0
  pure (CGrString idris_str_tail2) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_tail2)

idris_str_cons idris_str_cons1 idris_str_cons2 =
  (CGrInt idris_str_cons1_0) <- fetch idris_str_cons1
  -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_cons2_0)
  -- LINT: Invalid pattern match for (CGrString idris_str_cons2_0). Expected pattern of type: {CGrString[T_String]}, but got: {CErased[]
  ,CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Builtins.MkDPair[{0
                         ,169
                         ,171}
                        ,{7,170,172}]
  ,Cidr_Builtins.MkPair[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Data.Vect.::[{1
                     ,2
                     ,3
                     ,164
                     ,178
                     ,219}
                    ,{4,5,6,170,172,179,224}]
  ,Cidr_Data.Vect.Nil[]
  ,Cidr_MkUnit[]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Prelude.List.Nil[]
  ,C"idr_{U_Main.countdowns_1}"[]
  ,C"idr_{U_Main.readVect_1}"[]
  ,C"idr_{U_Main.{countdowns_0}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"[T_Dead]
  ,C"idr_{U_Main.{readNumber_8}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_24}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_25}_1}"[{169
                                    ,171}
                                   ,{170,172}
                                   ,{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"[]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"[T_Dead
                                                                                                   ,T_Dead]
  ,C"idr_{U_Prelude.Interactive.getLine'_1}"[{548}]
  ,C"idr_{U_Prelude.Interactive.printLn'_1}"[{675}
                                            ,{676}
                                            ,{677}
                                            ,{683}]
  ,C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"[{0
                                                                                         ,1
                                                                                         ,2
                                                                                         ,3
                                                                                         ,16
                                                                                         ,77
                                                                                         ,90
                                                                                         ,98
                                                                                         ,131
                                                                                         ,140
                                                                                         ,146
                                                                                         ,155
                                                                                         ,164
                                                                                         ,169
                                                                                         ,171
                                                                                         ,178
                                                                                         ,206
                                                                                         ,219
                                                                                         ,232
                                                                                         ,237
                                                                                         ,253
                                                                                         ,301
                                                                                         ,345
                                                                                         ,418
                                                                                         ,503
                                                                                         ,539
                                                                                         ,544
                                                                                         ,546
                                                                                         ,549
                                                                                         ,551
                                                                                         ,552
                                                                                         ,554
                                                                                         ,556
                                                                                         ,558
                                                                                         ,603
                                                                                         ,654
                                                                                         ,683
                                                                                         ,684
                                                                                         ,686
                                                                                         ,688
                                                                                         ,690
                                                                                         ,721
                                                                                         ,734
                                                                                         ,816}]}
  (CGrString idris_str_cons2_0) <- fetch idris_str_cons2
  idris_str_cons3 <- _prim_string_cons idris_str_cons1_0 idris_str_cons2_0
  pure (CGrString idris_str_cons3) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_cons3) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_str_cons1_0)

idris_int_str idris_int_str1 =
  -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0)
  -- LINT: Invalid pattern match for (CGrInt idris_int_str1_0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CErased[]
  ,CGrInt[T_Int64]
  ,CGrString[T_String]
  ,Cidr_Builtins.MkDPair[{0
                         ,169
                         ,171}
                        ,{7,170,172}]
  ,Cidr_Builtins.MkPair[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Data.Vect.::[{1
                     ,2
                     ,3
                     ,164
                     ,178
                     ,219}
                    ,{4,5,6,170,172,179,224}]
  ,Cidr_Data.Vect.Nil[]
  ,Cidr_MkUnit[]
  ,Cidr_Prelude.Bool.False[]
  ,Cidr_Prelude.Bool.True[]
  ,Cidr_Prelude.List.::[{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}
                       ,{0
                        ,1
                        ,2
                        ,3
                        ,16
                        ,77
                        ,90
                        ,98
                        ,131
                        ,140
                        ,146
                        ,155
                        ,164
                        ,169
                        ,171
                        ,178
                        ,206
                        ,219
                        ,232
                        ,237
                        ,253
                        ,301
                        ,345
                        ,418
                        ,503
                        ,539
                        ,544
                        ,546
                        ,549
                        ,551
                        ,552
                        ,554
                        ,556
                        ,558
                        ,603
                        ,654
                        ,683
                        ,684
                        ,686
                        ,688
                        ,690
                        ,721
                        ,734
                        ,816}]
  ,Cidr_Prelude.List.Nil[]
  ,C"idr_{U_Main.countdowns_1}"[]
  ,C"idr_{U_Main.readVect_1}"[]
  ,C"idr_{U_Main.{countdowns_0}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"[]
  ,C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"[T_Dead]
  ,C"idr_{U_Main.{readNumber_8}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_24}_1}"[{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_25}_1}"[{169
                                    ,171}
                                   ,{170,172}
                                   ,{0
                                    ,1
                                    ,2
                                    ,3
                                    ,16
                                    ,77
                                    ,90
                                    ,98
                                    ,131
                                    ,140
                                    ,146
                                    ,155
                                    ,164
                                    ,169
                                    ,171
                                    ,178
                                    ,206
                                    ,219
                                    ,232
                                    ,237
                                    ,253
                                    ,301
                                    ,345
                                    ,418
                                    ,503
                                    ,539
                                    ,544
                                    ,546
                                    ,549
                                    ,551
                                    ,552
                                    ,554
                                    ,556
                                    ,558
                                    ,603
                                    ,654
                                    ,683
                                    ,684
                                    ,686
                                    ,688
                                    ,690
                                    ,721
                                    ,734
                                    ,816}]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"[]
  ,C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"[T_Dead
                                                                                                   ,T_Dead]
  ,C"idr_{U_Prelude.Interactive.getLine'_1}"[{548}]
  ,C"idr_{U_Prelude.Interactive.printLn'_1}"[{675}
                                            ,{676}
                                            ,{677}
                                            ,{683}]
  ,C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"[{0
                                                                                         ,1
                                                                                         ,2
                                                                                         ,3
                                                                                         ,16
                                                                                         ,77
                                                                                         ,90
                                                                                         ,98
                                                                                         ,131
                                                                                         ,140
                                                                                         ,146
                                                                                         ,155
                                                                                         ,164
                                                                                         ,169
                                                                                         ,171
                                                                                         ,178
                                                                                         ,206
                                                                                         ,219
                                                                                         ,232
                                                                                         ,237
                                                                                         ,253
                                                                                         ,301
                                                                                         ,345
                                                                                         ,418
                                                                                         ,503
                                                                                         ,539
                                                                                         ,544
                                                                                         ,546
                                                                                         ,549
                                                                                         ,551
                                                                                         ,552
                                                                                         ,554
                                                                                         ,556
                                                                                         ,558
                                                                                         ,603
                                                                                         ,654
                                                                                         ,683
                                                                                         ,684
                                                                                         ,686
                                                                                         ,688
                                                                                         ,690
                                                                                         ,721
                                                                                         ,734
                                                                                         ,816}]}
  (CGrInt idris_int_str1_0) <- fetch idris_int_str1
  idris_int_str2 <- _prim_int_str idris_int_str1_0
  pure (CGrString idris_int_str2) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_int_str2)

idris_str_int idris_str_int1 =
  (CGrString idris_str_int1_0) <- fetch idris_str_int1
  idris_str_int2 <- _prim_str_int idris_str_int1_0
  pure (CGrInt idris_str_int2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_str_int2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_int1_0)

idris_ls_ext idris_ls_ext1 =
  (CGrInt idris_ls_ext2) <- fetch idris_ls_ext1
  idris_ls_ext3 <- _prim_int_add idris_ls_ext2 0
  pure (CGrInt idris_ls_ext3) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_ls_ext3) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_ls_ext2)

idris_ch_int idris_ch_int1 =
  (CGrInt idris_ch_int2) <- fetch idris_ch_int1
  pure (CGrInt idris_ch_int2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_ch_int2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_ch_int2)

idris_usleep idris_usleep1 =
  (CGrInt idris_usleep1_0) <- fetch idris_usleep1
  _prim_usleep idris_usleep1_0
  pure () -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_usleep1_0)

grinMain =
  r <- "idr_{runMain_0}"
  pure ()

idr_Main.anyVect =
  idr_Main.anyVect0_val <- pure (CGrInt 3)
  idr_Main.anyVect0 <- store idr_Main.anyVect0_val
  idr_Main.anyVect1_val_1 <- pure (CGrString #"a")
  idr_Main.anyVect1 <- store idr_Main.anyVect1_val_1
  idr_Main.anyVect2_val_2 <- pure (CGrString #"b")
  idr_Main.anyVect2 <- store idr_Main.anyVect2_val_2
  idr_Main.anyVect3_val_3 <- pure (CGrString #"c")
  idr_Main.anyVect3 <- store idr_Main.anyVect3_val_3
  idr_Main.anyVect4_val <- pure (Cidr_Data.Vect.Nil)
  idr_Main.anyVect4 <- store idr_Main.anyVect4_val
  idr_Main.anyVect3_val <- pure (Cidr_Data.Vect.:: idr_Main.anyVect3 idr_Main.anyVect4)
  idr_Main.anyVect3_4 <- store idr_Main.anyVect3_val
  idr_Main.anyVect2_val <- pure (Cidr_Data.Vect.:: idr_Main.anyVect2 idr_Main.anyVect3_4)
  idr_Main.anyVect2_5 <- store idr_Main.anyVect2_val
  idr_Main.anyVect1_val <- pure (Cidr_Data.Vect.:: idr_Main.anyVect1 idr_Main.anyVect2_5)
  idr_Main.anyVect1_6 <- store idr_Main.anyVect1_val
  pure (Cidr_Builtins.MkDPair idr_Main.anyVect0 idr_Main.anyVect1_6) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkDPair idr_Main.anyVect0 idr_Main.anyVect1_6)

idr_Main.countdown idr_Main.countdown0 idr_Main.countdown1 =
  idr_Main.countdown0_val <- fetch idr_Main.countdown0
  case idr_Main.countdown0_val of
    (CGrInt idr_Main.countdown_cpat_LInt64_0) ->
      case idr_Main.countdown_cpat_LInt64_0 of
        0 ->
          idr_Main.countdown2_val_7 <- pure (CGrString #"Left off!\n")
          idr_Main.countdown2 <- store idr_Main.countdown2_val_7
          idr_Main.countdown2_val <- idris_write_str idr_Main.countdown1 idr_Main.countdown2
          idr_Main.countdown2_8 <- store idr_Main.countdown2_val
          pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)
        #default ->
          idr_Main.countdown2_val_10 <- pure (CGrInt 1)
          idr_Main.countdown2_11 <- store idr_Main.countdown2_val_10
          idr_Main.countdown2_val_9 <- idris_int_sub idr_Main.countdown0 idr_Main.countdown2_11
          idr_Main.countdown2_12 <- store idr_Main.countdown2_val_9
          idr_Main.countdown3_val_16 <- pure (CErased)
          idr_Main.countdown3 <- store idr_Main.countdown3_val_16
          idr_Main.countdown4_val <- pure (C"idr_{U_prim__toStrBigInt_1}")
          idr_Main.countdown4 <- store idr_Main.countdown4_val
          idr_Main.countdown5_val <- pure (Cidr_Prelude.Show.Open)
          idr_Main.countdown5 <- store idr_Main.countdown5_val
          idr_Main.countdown6_val_17 <- pure (CGrInt 1)
          idr_Main.countdown6 <- store idr_Main.countdown6_val_17
          idr_Main.countdown6_val <- idris_int_add idr_Main.countdown2_12 idr_Main.countdown6
          idr_Main.countdown6_18 <- store idr_Main.countdown6_val
          idr_Main.countdown3_val_15 <- idr_Prelude.Show.primNumShow idr_Main.countdown3 idr_Main.countdown4 idr_Main.countdown5 idr_Main.countdown6_18
          idr_Main.countdown3_19 <- store idr_Main.countdown3_val_15
          idr_Main.countdown4_val_20 <- pure (CGrString #"\n")
          idr_Main.countdown4_21 <- store idr_Main.countdown4_val_20
          idr_Main.countdown3_val_14 <- idris_str_concat idr_Main.countdown3_19 idr_Main.countdown4_21
          idr_Main.countdown3_22 <- store idr_Main.countdown3_val_14
          idr_Main.countdown3_val_13 <- idris_write_str idr_Main.countdown1 idr_Main.countdown3_22
          idr_Main.countdown3_23 <- store idr_Main.countdown3_val_13
          idr_Main.countdown3_val <- pure (Cidr_MkUnit)
          idr_Main.countdown3_24 <- store idr_Main.countdown3_val
          idr_Main.countdown4_val_26 <- pure (CGrInt 1000000)
          idr_Main.countdown4_27 <- store idr_Main.countdown4_val_26
          idr_Main.countdown5_val_28 <- pure (CErased)
          idr_Main.countdown5_29 <- store idr_Main.countdown5_val_28
          idr_Main.countdown4_val_25 <- idr_System.usleep idr_Main.countdown4_27 idr_Main.countdown5_29 idr_Main.countdown1
          idr_Main.countdown4_30 <- store idr_Main.countdown4_val_25 -- LINT: store has given a primitive value: idr_Main.countdown4_val_25 :: T_Unit
          idr_Main.countdown idr_Main.countdown2_12 idr_Main.countdown1
    #default ->
      idr_Main.countdown2_val_32 <- pure (CGrInt 1)
      idr_Main.countdown2_33 <- store idr_Main.countdown2_val_32
      idr_Main.countdown2_val_31 <- idris_int_sub idr_Main.countdown0 idr_Main.countdown2_33
      idr_Main.countdown2_34 <- store idr_Main.countdown2_val_31
      idr_Main.countdown3_val_39 <- pure (CErased)
      idr_Main.countdown3_40 <- store idr_Main.countdown3_val_39
      idr_Main.countdown4_val_41 <- pure (C"idr_{U_prim__toStrBigInt_1}")
      idr_Main.countdown4_42 <- store idr_Main.countdown4_val_41
      idr_Main.countdown5_val_43 <- pure (Cidr_Prelude.Show.Open)
      idr_Main.countdown5_44 <- store idr_Main.countdown5_val_43
      idr_Main.countdown6_val_46 <- pure (CGrInt 1)
      idr_Main.countdown6_47 <- store idr_Main.countdown6_val_46
      idr_Main.countdown6_val_45 <- idris_int_add idr_Main.countdown2_34 idr_Main.countdown6_47
      idr_Main.countdown6_48 <- store idr_Main.countdown6_val_45
      idr_Main.countdown3_val_38 <- idr_Prelude.Show.primNumShow idr_Main.countdown3_40 idr_Main.countdown4_42 idr_Main.countdown5_44 idr_Main.countdown6_48
      idr_Main.countdown3_49 <- store idr_Main.countdown3_val_38
      idr_Main.countdown4_val_50 <- pure (CGrString #"\n")
      idr_Main.countdown4_51 <- store idr_Main.countdown4_val_50
      idr_Main.countdown3_val_37 <- idris_str_concat idr_Main.countdown3_49 idr_Main.countdown4_51
      idr_Main.countdown3_52 <- store idr_Main.countdown3_val_37
      idr_Main.countdown3_val_36 <- idris_write_str idr_Main.countdown1 idr_Main.countdown3_52
      idr_Main.countdown3_53 <- store idr_Main.countdown3_val_36
      idr_Main.countdown3_val_35 <- pure (Cidr_MkUnit)
      idr_Main.countdown3_54 <- store idr_Main.countdown3_val_35
      idr_Main.countdown4_val_56 <- pure (CGrInt 1000000)
      idr_Main.countdown4_57 <- store idr_Main.countdown4_val_56
      idr_Main.countdown5_val_58 <- pure (CErased)
      idr_Main.countdown5_59 <- store idr_Main.countdown5_val_58
      idr_Main.countdown4_val_55 <- idr_System.usleep idr_Main.countdown4_57 idr_Main.countdown5_59 idr_Main.countdown1
      idr_Main.countdown4_60 <- store idr_Main.countdown4_val_55 -- LINT: store has given a primitive value: idr_Main.countdown4_val_55 :: T_Unit
      idr_Main.countdown idr_Main.countdown2_34 idr_Main.countdown1

idr_Main.countdowns idr_Main.countdowns0 =
  idr_Main.countdowns1_val_62 <- pure (CGrString #"Enter a starting number: ")
  idr_Main.countdowns1 <- store idr_Main.countdowns1_val_62
  idr_Main.countdowns1_val_61 <- idris_write_str idr_Main.countdowns0 idr_Main.countdowns1
  idr_Main.countdowns1_63 <- store idr_Main.countdowns1_val_61
  idr_Main.countdowns1_val <- pure (Cidr_MkUnit)
  idr_Main.countdowns1_64 <- store idr_Main.countdowns1_val
  idr_Main.countdowns2_val <- idr_Main.readNumber idr_Main.countdowns0
  idr_Main.countdowns2 <- store idr_Main.countdowns2_val
  idr_Main.countdowns2_val_65 <- fetch idr_Main.countdowns2
  case idr_Main.countdowns2_val_65 of
    (Cidr_Prelude.Maybe.Just idr_Main.countdowns3) ->
      idr_Main.countdowns4_val <- pure (CErased)
      idr_Main.countdowns4 <- store idr_Main.countdowns4_val
      idr_Main.countdowns5_val <- pure (CErased)
      idr_Main.countdowns5 <- store idr_Main.countdowns5_val
      idr_Main.countdowns6_val <- pure (CErased)
      idr_Main.countdowns6 <- store idr_Main.countdowns6_val
      idr_Main.countdowns7_val <- pure (C"idr_{U_Main.countdown_1}" idr_Main.countdowns3)
      idr_Main.countdowns7 <- store idr_Main.countdowns7_val
      idr_Main.countdowns8_val <- pure (C"idr_{U_Main.{countdowns_0}_2}")
      idr_Main.countdowns8 <- store idr_Main.countdowns8_val
      idr_io_bind idr_Main.countdowns4 idr_Main.countdowns5 idr_Main.countdowns6 idr_Main.countdowns7 idr_Main.countdowns8 idr_Main.countdowns0
    (Cidr_Prelude.Maybe.Nothing) ->
      idr_Main.countdowns3_val <- pure (CErased)
      idr_Main.countdowns3_66 <- store idr_Main.countdowns3_val
      idr_Main.countdowns4_val_67 <- pure (CErased)
      idr_Main.countdowns4_68 <- store idr_Main.countdowns4_val_67
      idr_Main.countdowns5_val_69 <- pure (CErased)
      idr_Main.countdowns5_70 <- store idr_Main.countdowns5_val_69
      idr_Main.countdowns6_val_71 <- pure (C"idr_{U_Main.{countdowns_1}_1}")
      idr_Main.countdowns6_72 <- store idr_Main.countdowns6_val_71
      idr_Main.countdowns7_val_73 <- pure (C"idr_{U_Main.{countdowns_2}_1}")
      idr_Main.countdowns7_74 <- store idr_Main.countdowns7_val_73
      idr_io_bind idr_Main.countdowns3_66 idr_Main.countdowns4_68 idr_Main.countdowns5_70 idr_Main.countdowns6_72 idr_Main.countdowns7_74 idr_Main.countdowns0

idr_Data.Vect.foldrImpl idr_Data.Vect.foldrImpl0 idr_Data.Vect.foldrImpl1 idr_Data.Vect.foldrImpl2 idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl4 idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl6 =
  idr_Data.Vect.foldrImpl6_val <- fetch idr_Data.Vect.foldrImpl6
  -- LINT: case has non-covered alternative CErased
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  -- LINT: case has non-covered alternative Cidr_Builtins.MkDPair
  -- LINT: case has non-covered alternative Cidr_Builtins.MkPair
  -- LINT: case has non-covered alternative Cidr_MkUnit
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.False
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.True
  -- LINT: case has non-covered alternative Cidr_Prelude.List.::
  -- LINT: case has non-covered alternative Cidr_Prelude.List.Nil
  -- LINT: case has non-covered alternative C"idr_{U_Main.countdowns_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.readVect_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_0}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{readNumber_8}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_24}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_25}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.getLine'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.printLn'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"
  case idr_Data.Vect.foldrImpl6_val of
    (Cidr_Data.Vect.:: idr_Data.Vect.foldrImpl7 idr_Data.Vect.foldrImpl8) ->
      idr_Data.Vect.foldrImpl9_val <- pure (CErased)
      idr_Data.Vect.foldrImpl9 <- store idr_Data.Vect.foldrImpl9_val
      idr_Data.Vect.foldrImpl10_val <- pure (CErased)
      idr_Data.Vect.foldrImpl10 <- store idr_Data.Vect.foldrImpl10_val
      idr_Data.Vect.foldrImpl11_val <- pure (CErased)
      idr_Data.Vect.foldrImpl11 <- store idr_Data.Vect.foldrImpl11_val
      idr_Data.Vect.foldrImpl12_val <- pure (C"idr_{U_Data.Vect.{foldrImpl_3}_1}" idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl7)
      idr_Data.Vect.foldrImpl12 <- store idr_Data.Vect.foldrImpl12_val
      idr_Data.Vect.foldrImpl idr_Data.Vect.foldrImpl9 idr_Data.Vect.foldrImpl10 idr_Data.Vect.foldrImpl11 idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl4 idr_Data.Vect.foldrImpl12 idr_Data.Vect.foldrImpl8
    (Cidr_Data.Vect.Nil) ->
      "idr_{APPLY_0}" idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl4

idr_Prelude.Interactive.getLine' idr_Prelude.Interactive.getLine'0 idr_Prelude.Interactive.getLine'1 =
  idr_Prelude.Interactive.getLine'2_val <- idris_read_str idr_Prelude.Interactive.getLine'1
  idr_Prelude.Interactive.getLine'2 <- store idr_Prelude.Interactive.getLine'2_val
  idr_Prelude.Interactive.getLine'3_val_78 <- idris_str_rev idr_Prelude.Interactive.getLine'2
  idr_Prelude.Interactive.getLine'3 <- store idr_Prelude.Interactive.getLine'3_val_78
  idr_Prelude.Interactive.getLine'4_val <- pure (CGrString #"")
  idr_Prelude.Interactive.getLine'4 <- store idr_Prelude.Interactive.getLine'4_val
  idr_Prelude.Interactive.getLine'3_val_77 <- idris_str_eq idr_Prelude.Interactive.getLine'3 idr_Prelude.Interactive.getLine'4
  idr_Prelude.Interactive.getLine'3_79 <- store idr_Prelude.Interactive.getLine'3_val_77
  idr_Prelude.Interactive.getLine'3_val_80 <- fetch idr_Prelude.Interactive.getLine'3_79
  idr_Prelude.Interactive.getLine'3_val_76 <- case idr_Prelude.Interactive.getLine'3_val_80 of
    (CGrInt idr_Prelude.Interactive.getLine'_cpat_LInt64_0) ->
      case idr_Prelude.Interactive.getLine'_cpat_LInt64_0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Interactive.getLine'3_81 <- store idr_Prelude.Interactive.getLine'3_val_76
  idr_Prelude.Interactive.getLine'4_val_82 <- pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Interactive.getLine'4_83 <- store idr_Prelude.Interactive.getLine'4_val_82
  idr_Prelude.Interactive.getLine'3_val_75 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Interactive.getLine'3_81 idr_Prelude.Interactive.getLine'4_83
  idr_Prelude.Interactive.getLine'3_84 <- store idr_Prelude.Interactive.getLine'3_val_75
  idr_Prelude.Interactive.getLine'3_val_85 <- fetch idr_Prelude.Interactive.getLine'3_84
  idr_Prelude.Interactive.getLine'3_val <- case idr_Prelude.Interactive.getLine'3_val_85 of
    (Cidr_Prelude.Basics.No) ->
      pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
    (Cidr_Prelude.Basics.Yes) ->
      idr_Prelude.Interactive.getLine'4_val_87 <- idris_str_rev idr_Prelude.Interactive.getLine'2
      idr_Prelude.Interactive.getLine'4_88 <- store idr_Prelude.Interactive.getLine'4_val_87
      idr_Prelude.Interactive.getLine'4_val_86 <- idris_str_head idr_Prelude.Interactive.getLine'4_88
      idr_Prelude.Interactive.getLine'4_89 <- store idr_Prelude.Interactive.getLine'4_val_86
      idr_Prelude.Interactive.getLine'4_val_90 <- fetch idr_Prelude.Interactive.getLine'4_89
      case idr_Prelude.Interactive.getLine'4_val_90 of
        (CGrInt idr_Prelude.Interactive.getLine'_cpat_LInt64_10) ->
          case idr_Prelude.Interactive.getLine'_cpat_LInt64_10 of
            10 ->
              idr_Prelude.Interactive.getLine'5_val <- idris_str_rev idr_Prelude.Interactive.getLine'2
              idr_Prelude.Interactive.getLine'5 <- store idr_Prelude.Interactive.getLine'5_val
              idris_str_tail idr_Prelude.Interactive.getLine'5
            #default ->
              idr_Prelude.Interactive.getLine'5_val_92 <- idris_str_rev idr_Prelude.Interactive.getLine'2
              idr_Prelude.Interactive.getLine'5_93 <- store idr_Prelude.Interactive.getLine'5_val_92
              idr_Prelude.Interactive.getLine'5_val_91 <- idris_str_head idr_Prelude.Interactive.getLine'5_93
              idr_Prelude.Interactive.getLine'5_94 <- store idr_Prelude.Interactive.getLine'5_val_91
              idr_Prelude.Interactive.getLine'6_val_95 <- idris_str_rev idr_Prelude.Interactive.getLine'2
              idr_Prelude.Interactive.getLine'6 <- store idr_Prelude.Interactive.getLine'6_val_95
              idr_Prelude.Interactive.getLine'6_val <- idris_str_tail idr_Prelude.Interactive.getLine'6
              idr_Prelude.Interactive.getLine'6_96 <- store idr_Prelude.Interactive.getLine'6_val
              idris_str_cons idr_Prelude.Interactive.getLine'5_94 idr_Prelude.Interactive.getLine'6_96
        #default ->
          idr_Prelude.Interactive.getLine'5_val_98 <- idris_str_rev idr_Prelude.Interactive.getLine'2
          idr_Prelude.Interactive.getLine'5_99 <- store idr_Prelude.Interactive.getLine'5_val_98
          idr_Prelude.Interactive.getLine'5_val_97 <- idris_str_head idr_Prelude.Interactive.getLine'5_99
          idr_Prelude.Interactive.getLine'5_100 <- store idr_Prelude.Interactive.getLine'5_val_97
          idr_Prelude.Interactive.getLine'6_val_102 <- idris_str_rev idr_Prelude.Interactive.getLine'2
          idr_Prelude.Interactive.getLine'6_103 <- store idr_Prelude.Interactive.getLine'6_val_102
          idr_Prelude.Interactive.getLine'6_val_101 <- idris_str_tail idr_Prelude.Interactive.getLine'6_103
          idr_Prelude.Interactive.getLine'6_104 <- store idr_Prelude.Interactive.getLine'6_val_101
          idris_str_cons idr_Prelude.Interactive.getLine'5_100 idr_Prelude.Interactive.getLine'6_104
  idr_Prelude.Interactive.getLine'3_105 <- store idr_Prelude.Interactive.getLine'3_val
  idris_str_rev idr_Prelude.Interactive.getLine'3_105

idr_io_bind idr_io_bind0 idr_io_bind1 idr_io_bind2 idr_io_bind3 idr_io_bind4 idr_io_bind5 =
  idr_io_bind6_val_106 <- "idr_{APPLY_0}" idr_io_bind3 idr_io_bind5
  idr_io_bind6 <- store idr_io_bind6_val_106
  idr_io_bind6_val <- "idr_{APPLY_0}" idr_io_bind4 idr_io_bind6
  idr_io_bind6_107 <- store idr_io_bind6_val
  "idr_{APPLY_0}" idr_io_bind6_107 idr_io_bind5

idr_Prelude.Chars.isDigit idr_Prelude.Chars.isDigit0 =
  idr_Prelude.Chars.isDigit1_val_109 <- pure (CGrInt 48)
  idr_Prelude.Chars.isDigit1 <- store idr_Prelude.Chars.isDigit1_val_109
  idr_Prelude.Chars.isDigit1_val_108 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit1
  idr_Prelude.Chars.isDigit1_110 <- store idr_Prelude.Chars.isDigit1_val_108
  idr_Prelude.Chars.isDigit1_val_111 <- fetch idr_Prelude.Chars.isDigit1_110
  idr_Prelude.Chars.isDigit1_val <- case idr_Prelude.Chars.isDigit1_val_111 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Chars.isDigit2_val_112 <- pure (CGrInt 48)
      idr_Prelude.Chars.isDigit2 <- store idr_Prelude.Chars.isDigit2_val_112
      idr_Prelude.Chars.isDigit2_val <- idris_int_eq idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit2
      idr_Prelude.Chars.isDigit2_113 <- store idr_Prelude.Chars.isDigit2_val
      idr_Prelude.Chars.isDigit2_val_114 <- fetch idr_Prelude.Chars.isDigit2_113
      case idr_Prelude.Chars.isDigit2_val_114 of
        (CGrInt idr_Prelude.Chars.isDigit_cpat_LInt64_0) ->
          case idr_Prelude.Chars.isDigit_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Chars.isDigit1_115 <- store idr_Prelude.Chars.isDigit1_val
  idr_Prelude.Chars.isDigit1_val_116 <- fetch idr_Prelude.Chars.isDigit1_115
  case idr_Prelude.Chars.isDigit1_val_116 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Chars.isDigit2_val_118 <- pure (CGrInt 57)
      idr_Prelude.Chars.isDigit2_119 <- store idr_Prelude.Chars.isDigit2_val_118
      idr_Prelude.Chars.isDigit2_val_117 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit2_119
      idr_Prelude.Chars.isDigit2_120 <- store idr_Prelude.Chars.isDigit2_val_117
      idr_Prelude.Chars.isDigit2_val_121 <- fetch idr_Prelude.Chars.isDigit2_120
      case idr_Prelude.Chars.isDigit2_val_121 of
        (Cidr_Prelude.Interfaces.LT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idr_Prelude.Chars.isDigit3_val_122 <- pure (CGrInt 57)
          idr_Prelude.Chars.isDigit3 <- store idr_Prelude.Chars.isDigit3_val_122
          idr_Prelude.Chars.isDigit3_val <- idris_int_eq idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit3
          idr_Prelude.Chars.isDigit3_123 <- store idr_Prelude.Chars.isDigit3_val
          idr_Prelude.Chars.isDigit3_val_124 <- fetch idr_Prelude.Chars.isDigit3_123
          case idr_Prelude.Chars.isDigit3_val_124 of
            (CGrInt idr_Prelude.Chars.isDigit_cpat_LInt64_0_125) ->
              case idr_Prelude.Chars.isDigit_cpat_LInt64_0_125 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)

idr_Main.main idr_Main.main0 =
  idr_Main.main1_val <- idr_Main.countdowns idr_Main.main0
  idr_Main.main1 <- store idr_Main.main1_val
  idr_Main.main2_val_126 <- pure (CGrInt 3)
  idr_Main.main2 <- store idr_Main.main2_val_126
  idr_Main.main2_val <- idr_Main.readVectLen idr_Main.main2 idr_Main.main0
  idr_Main.main2_127 <- store idr_Main.main2_val
  idr_Main.main3_val_128 <- pure (CErased)
  idr_Main.main3 <- store idr_Main.main3_val_128
  idr_Main.main4_val <- pure (CErased)
  idr_Main.main4 <- store idr_Main.main4_val
  idr_Main.main5_val <- pure (C"idr_{U_Main.{main_5}_1}")
  idr_Main.main5 <- store idr_Main.main5_val
  idr_Main.main3_val <- idr_Prelude.Interactive.print' idr_Main.main3 idr_Main.main4 idr_Main.main5 idr_Main.main2_127 idr_Main.main0
  idr_Main.main3_129 <- store idr_Main.main3_val
  idr_Main.main4_val_131 <- pure (CErased)
  idr_Main.main4_132 <- store idr_Main.main4_val_131
  idr_Main.main5_val_133 <- pure (CErased)
  idr_Main.main5_134 <- store idr_Main.main5_val_133
  idr_Main.main6_val <- pure (C"idr_{U_Main.{main_7}_1}")
  idr_Main.main6 <- store idr_Main.main6_val
  idr_Main.main7_val <- idr_Main.anyVect
  idr_Main.main7 <- store idr_Main.main7_val
  idr_Main.main4_val_130 <- idr_Prelude.Interactive.print' idr_Main.main4_132 idr_Main.main5_134 idr_Main.main6 idr_Main.main7 idr_Main.main0
  idr_Main.main4_135 <- store idr_Main.main4_val_130
  idr_Main.zipInputs idr_Main.main0

idr_Prelude.Show.primNumShow idr_Prelude.Show.primNumShow0 idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow2 idr_Prelude.Show.primNumShow3 =
  idr_Prelude.Show.primNumShow4_val <- "idr_{APPLY_0}" idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- fetch idr_Prelude.Show.primNumShow2
  idr_Prelude.Show.primNumShow5_val_138 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.App) ->
      pure (CGrInt 6) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 6)
    (Cidr_Prelude.Show.Backtick) ->
      pure (CGrInt 3) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 3)
    (Cidr_Prelude.Show.Dollar) ->
      pure (CGrInt 2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 2)
    (Cidr_Prelude.Show.Eq) ->
      pure (CGrInt 1) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 1)
    (Cidr_Prelude.Show.Open) ->
      pure (CGrInt 0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 0)
    (Cidr_Prelude.Show.PrefixMinus) ->
      pure (CGrInt 5) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 5)
    (Cidr_Prelude.Show.User) ->
      pure (CGrInt 4) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 4)
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_138
  idr_Prelude.Show.primNumShow6_val <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6 <- store idr_Prelude.Show.primNumShow6_val
  idr_Prelude.Show.primNumShow5_val_137 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" idr_Prelude.Show.primNumShow5 idr_Prelude.Show.primNumShow6
  idr_Prelude.Show.primNumShow5_139 <- store idr_Prelude.Show.primNumShow5_val_137
  idr_Prelude.Show.primNumShow5_val_140 <- fetch idr_Prelude.Show.primNumShow5_139
  idr_Prelude.Show.primNumShow5_val_136 <- case idr_Prelude.Show.primNumShow5_val_140 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Show.primNumShow2_val_143 <- fetch idr_Prelude.Show.primNumShow2
      idr_Prelude.Show.primNumShow6_val_142 <- case idr_Prelude.Show.primNumShow2_val_143 of
        (Cidr_Prelude.Show.App) ->
          pure (CGrInt 6) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 6)
        (Cidr_Prelude.Show.Backtick) ->
          pure (CGrInt 3) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 3)
        (Cidr_Prelude.Show.Dollar) ->
          pure (CGrInt 2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 2)
        (Cidr_Prelude.Show.Eq) ->
          pure (CGrInt 1) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 1)
        (Cidr_Prelude.Show.Open) ->
          pure (CGrInt 0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 0)
        (Cidr_Prelude.Show.PrefixMinus) ->
          pure (CGrInt 5) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 5)
        (Cidr_Prelude.Show.User) ->
          pure (CGrInt 4) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 4)
      idr_Prelude.Show.primNumShow6_144 <- store idr_Prelude.Show.primNumShow6_val_142
      idr_Prelude.Show.primNumShow7_val <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7 <- store idr_Prelude.Show.primNumShow7_val
      idr_Prelude.Show.primNumShow6_val_141 <- idris_int_eq idr_Prelude.Show.primNumShow6_144 idr_Prelude.Show.primNumShow7
      idr_Prelude.Show.primNumShow6_145 <- store idr_Prelude.Show.primNumShow6_val_141
      idr_Prelude.Show.primNumShow6_val_146 <- fetch idr_Prelude.Show.primNumShow6_145
      case idr_Prelude.Show.primNumShow6_val_146 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_147 <- store idr_Prelude.Show.primNumShow5_val_136
  idr_Prelude.Show.primNumShow5_val_148 <- fetch idr_Prelude.Show.primNumShow5_147
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_148 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_152 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_153 <- store idr_Prelude.Show.primNumShow6_val_152
      idr_Prelude.Show.primNumShow6_val_151 <- idris_str_eq idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow6_153
      idr_Prelude.Show.primNumShow6_154 <- store idr_Prelude.Show.primNumShow6_val_151
      idr_Prelude.Show.primNumShow6_val_155 <- fetch idr_Prelude.Show.primNumShow6_154
      idr_Prelude.Show.primNumShow6_val_150 <- case idr_Prelude.Show.primNumShow6_val_155 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_156) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_156 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Show.primNumShow6_157 <- store idr_Prelude.Show.primNumShow6_val_150
      idr_Prelude.Show.primNumShow7_val_158 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_159 <- store idr_Prelude.Show.primNumShow7_val_158
      idr_Prelude.Show.primNumShow6_val_149 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Show.primNumShow6_157 idr_Prelude.Show.primNumShow7_159
      idr_Prelude.Show.primNumShow6_160 <- store idr_Prelude.Show.primNumShow6_val_149
      idr_Prelude.Show.primNumShow6_val_161 <- fetch idr_Prelude.Show.primNumShow6_160
      case idr_Prelude.Show.primNumShow6_val_161 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Prelude.Show.primNumShow7_val_163 <- idris_str_head idr_Prelude.Show.primNumShow4
          idr_Prelude.Show.primNumShow7_164 <- store idr_Prelude.Show.primNumShow7_val_163
          idr_Prelude.Show.primNumShow8_val <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8 <- store idr_Prelude.Show.primNumShow8_val
          idr_Prelude.Show.primNumShow7_val_162 <- idris_int_eq idr_Prelude.Show.primNumShow7_164 idr_Prelude.Show.primNumShow8
          idr_Prelude.Show.primNumShow7_165 <- store idr_Prelude.Show.primNumShow7_val_162
          idr_Prelude.Show.primNumShow7_val_166 <- fetch idr_Prelude.Show.primNumShow7_165
          case idr_Prelude.Show.primNumShow7_val_166 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_167) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_167 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_168 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_169 <- fetch idr_Prelude.Show.primNumShow5_168
  case idr_Prelude.Show.primNumShow5_val_169 of
    (Cidr_Prelude.Bool.False) ->
      fetch idr_Prelude.Show.primNumShow4
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_170 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_171 <- store idr_Prelude.Show.primNumShow6_val_170
      idr_Prelude.Show.primNumShow7_val_173 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_174 <- store idr_Prelude.Show.primNumShow7_val_173
      idr_Prelude.Show.primNumShow7_val_172 <- idris_str_concat idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow7_174
      idr_Prelude.Show.primNumShow7_175 <- store idr_Prelude.Show.primNumShow7_val_172
      idris_str_concat idr_Prelude.Show.primNumShow6_171 idr_Prelude.Show.primNumShow7_175

idr_prim__strCons idr_prim__strCons0 idr_prim__strCons1 =
  idris_str_cons idr_prim__strCons0 idr_prim__strCons1

idr_prim__toStrBigInt idr_prim__toStrBigInt0 =
  idris_int_str idr_prim__toStrBigInt0

idr_prim__toStrInt idr_prim__toStrInt0 =
  idris_int_str idr_prim__toStrInt0

idr_Prelude.Interactive.print' idr_Prelude.Interactive.print'0 idr_Prelude.Interactive.print'1 idr_Prelude.Interactive.print'2 idr_Prelude.Interactive.print'3 idr_Prelude.Interactive.print'4 =
  idr_Prelude.Interactive.print'5_val_176 <- "idr_{APPLY_0}" idr_Prelude.Interactive.print'2 idr_Prelude.Interactive.print'3
  idr_Prelude.Interactive.print'5 <- store idr_Prelude.Interactive.print'5_val_176
  idr_Prelude.Interactive.print'5_val <- idris_write_str idr_Prelude.Interactive.print'4 idr_Prelude.Interactive.print'5
  idr_Prelude.Interactive.print'5_177 <- store idr_Prelude.Interactive.print'5_val
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'0 idr_Prelude.Interactive.printLn'1 idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 idr_Prelude.Interactive.printLn'4 =
  idr_Prelude.Interactive.printLn'5_val_179 <- "idr_{APPLY_0}" idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_179
  idr_Prelude.Interactive.printLn'6_val <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6 <- store idr_Prelude.Interactive.printLn'6_val
  idr_Prelude.Interactive.printLn'5_val_178 <- idris_str_concat idr_Prelude.Interactive.printLn'5 idr_Prelude.Interactive.printLn'6
  idr_Prelude.Interactive.printLn'5_180 <- store idr_Prelude.Interactive.printLn'5_val_178
  idr_Prelude.Interactive.printLn'5_val <- idris_write_str idr_Prelude.Interactive.printLn'4 idr_Prelude.Interactive.printLn'5_180
  idr_Prelude.Interactive.printLn'5_181 <- store idr_Prelude.Interactive.printLn'5_val
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

idr_Prelude.Show.protectEsc idr_Prelude.Show.protectEsc0 idr_Prelude.Show.protectEsc1 idr_Prelude.Show.protectEsc2 =
  idr_Prelude.Show.protectEsc3_val_187 <- pure (CGrString #"")
  idr_Prelude.Show.protectEsc3 <- store idr_Prelude.Show.protectEsc3_val_187
  idr_Prelude.Show.protectEsc3_val_186 <- idris_str_eq idr_Prelude.Show.protectEsc2 idr_Prelude.Show.protectEsc3
  idr_Prelude.Show.protectEsc3_188 <- store idr_Prelude.Show.protectEsc3_val_186
  idr_Prelude.Show.protectEsc3_val_189 <- fetch idr_Prelude.Show.protectEsc3_188
  idr_Prelude.Show.protectEsc3_val_185 <- case idr_Prelude.Show.protectEsc3_val_189 of
    (CGrInt idr_Prelude.Show.protectEsc_cpat_LInt64_0) ->
      case idr_Prelude.Show.protectEsc_cpat_LInt64_0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Show.protectEsc3_190 <- store idr_Prelude.Show.protectEsc3_val_185
  idr_Prelude.Show.protectEsc4_val <- pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.protectEsc4 <- store idr_Prelude.Show.protectEsc4_val
  idr_Prelude.Show.protectEsc3_val_184 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Show.protectEsc3_190 idr_Prelude.Show.protectEsc4
  idr_Prelude.Show.protectEsc3_191 <- store idr_Prelude.Show.protectEsc3_val_184
  idr_Prelude.Show.protectEsc3_val_192 <- fetch idr_Prelude.Show.protectEsc3_191
  idr_Prelude.Show.protectEsc3_val_183 <- case idr_Prelude.Show.protectEsc3_val_192 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Basics.Yes) ->
      idr_Prelude.Show.protectEsc4_val_193 <- idris_str_head idr_Prelude.Show.protectEsc2
      idr_Prelude.Show.protectEsc4_194 <- store idr_Prelude.Show.protectEsc4_val_193
      "idr_{APPLY_0}" idr_Prelude.Show.protectEsc0 idr_Prelude.Show.protectEsc4_194
  idr_Prelude.Show.protectEsc3_195 <- store idr_Prelude.Show.protectEsc3_val_183
  idr_Prelude.Show.protectEsc3_val_196 <- fetch idr_Prelude.Show.protectEsc3_195
  idr_Prelude.Show.protectEsc3_val_182 <- -- LINT: case has non-covered alternative CErased
                                          -- LINT: case has non-covered alternative CGrInt
                                          -- LINT: case has non-covered alternative CGrString
                                          -- LINT: case has non-covered alternative Cidr_Builtins.MkDPair
                                          -- LINT: case has non-covered alternative Cidr_Builtins.MkPair
                                          -- LINT: case has non-covered alternative Cidr_Data.Vect.::
                                          -- LINT: case has non-covered alternative Cidr_Data.Vect.Nil
                                          -- LINT: case has non-covered alternative Cidr_MkUnit
                                          -- LINT: case has non-covered alternative Cidr_Prelude.List.::
                                          -- LINT: case has non-covered alternative Cidr_Prelude.List.Nil
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.countdowns_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.readVect_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_0}_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.{readNumber_8}_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_24}_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_25}_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.getLine'_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.printLn'_1}"
                                          -- LINT: case has non-covered alternative C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"
  case idr_Prelude.Show.protectEsc3_val_196 of
    (Cidr_Prelude.Bool.False) ->
      pure (CGrString #"") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"")
    (Cidr_Prelude.Bool.True) ->
      pure (CGrString #"\\&") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"\\&")
  idr_Prelude.Show.protectEsc3_197 <- store idr_Prelude.Show.protectEsc3_val_182
  idr_Prelude.Show.protectEsc3_val <- idris_str_concat idr_Prelude.Show.protectEsc3_197 idr_Prelude.Show.protectEsc2
  idr_Prelude.Show.protectEsc3_198 <- store idr_Prelude.Show.protectEsc3_val
  idris_str_concat idr_Prelude.Show.protectEsc1 idr_Prelude.Show.protectEsc3_198

idr_Main.readNumber idr_Main.readNumber0 =
  idr_Main.readNumber1_val_199 <- pure (CErased)
  idr_Main.readNumber1 <- store idr_Main.readNumber1_val_199
  idr_Main.readNumber1_val <- idr_Prelude.Interactive.getLine' idr_Main.readNumber1 idr_Main.readNumber0
  idr_Main.readNumber1_200 <- store idr_Main.readNumber1_val
  idr_Main.readNumber2_val_201 <- pure (CErased)
  idr_Main.readNumber2 <- store idr_Main.readNumber2_val_201
  idr_Main.readNumber3_val <- pure (CErased)
  idr_Main.readNumber3 <- store idr_Main.readNumber3_val
  idr_Main.readNumber4_val <- pure (C"idr_{U_Main.{readNumber_8}_2}")
  idr_Main.readNumber4 <- store idr_Main.readNumber4_val
  idr_Main.readNumber5_val <- pure (Cidr_Prelude.Bool.True)
  idr_Main.readNumber5 <- store idr_Main.readNumber5_val
  idr_Main.readNumber6_val_205 <- pure (CGrString #"")
  idr_Main.readNumber6 <- store idr_Main.readNumber6_val_205
  idr_Main.readNumber6_val_204 <- idris_str_eq idr_Main.readNumber1_200 idr_Main.readNumber6
  idr_Main.readNumber6_206 <- store idr_Main.readNumber6_val_204
  idr_Main.readNumber6_val_207 <- fetch idr_Main.readNumber6_206
  idr_Main.readNumber6_val_203 <- case idr_Main.readNumber6_val_207 of
    (CGrInt idr_Main.readNumber_cpat_LInt64_0) ->
      case idr_Main.readNumber_cpat_LInt64_0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Main.readNumber6_208 <- store idr_Main.readNumber6_val_203
  idr_Main.readNumber7_val <- pure (Cidr_Prelude.Bool.True)
  idr_Main.readNumber7 <- store idr_Main.readNumber7_val
  idr_Main.readNumber6_val_202 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Main.readNumber6_208 idr_Main.readNumber7
  idr_Main.readNumber6_209 <- store idr_Main.readNumber6_val_202
  idr_Main.readNumber6_val_210 <- fetch idr_Main.readNumber6_209
  idr_Main.readNumber6_val <- case idr_Main.readNumber6_val_210 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      idr_Main.readNumber7_val_211 <- idris_str_head idr_Main.readNumber1_200
      idr_Main.readNumber7_212 <- store idr_Main.readNumber7_val_211
      idr_Main.readNumber8_val_213 <- pure (CErased)
      idr_Main.readNumber8 <- store idr_Main.readNumber8_val_213
      idr_Main.readNumber9_val_217 <- idris_str_tail idr_Main.readNumber1_200
      idr_Main.readNumber9 <- store idr_Main.readNumber9_val_217
      idr_Main.readNumber10_val <- pure (CGrString #"")
      idr_Main.readNumber10 <- store idr_Main.readNumber10_val
      idr_Main.readNumber9_val_216 <- idris_str_eq idr_Main.readNumber9 idr_Main.readNumber10
      idr_Main.readNumber9_218 <- store idr_Main.readNumber9_val_216
      idr_Main.readNumber9_val_219 <- fetch idr_Main.readNumber9_218
      idr_Main.readNumber9_val_215 <- case idr_Main.readNumber9_val_219 of
        (CGrInt idr_Main.readNumber_cpat_LInt64_0_220) ->
          case idr_Main.readNumber_cpat_LInt64_0_220 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Main.readNumber9_221 <- store idr_Main.readNumber9_val_215
      idr_Main.readNumber10_val_222 <- pure (Cidr_Prelude.Bool.True)
      idr_Main.readNumber10_223 <- store idr_Main.readNumber10_val_222
      idr_Main.readNumber9_val_214 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Main.readNumber9_221 idr_Main.readNumber10_223
      idr_Main.readNumber9_224 <- store idr_Main.readNumber9_val_214
      idr_Main.readNumber9_val_225 <- fetch idr_Main.readNumber9_224
      idr_Main.readNumber9_val <- case idr_Main.readNumber9_val_225 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Main.readNumber10_val_227 <- idris_str_tail idr_Main.readNumber1_200
          idr_Main.readNumber10_228 <- store idr_Main.readNumber10_val_227
          idr_Main.readNumber10_val_226 <- idris_str_head idr_Main.readNumber10_228
          idr_Main.readNumber10_229 <- store idr_Main.readNumber10_val_226
          idr_Main.readNumber11_val_230 <- idris_str_tail idr_Main.readNumber1_200
          idr_Main.readNumber11 <- store idr_Main.readNumber11_val_230
          idr_Main.readNumber11_val <- idris_str_tail idr_Main.readNumber11
          idr_Main.readNumber11_231 <- store idr_Main.readNumber11_val
          pure (Cidr_Prelude.Strings.StrCons idr_Main.readNumber10_229 idr_Main.readNumber11_231) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Main.readNumber10_229 idr_Main.readNumber11_231)
      idr_Main.readNumber9_232 <- store idr_Main.readNumber9_val
      idr_Main.readNumber8_val <- idr__Prelude.Strings.unpack_with_36 idr_Main.readNumber8 idr_Main.readNumber9_232
      idr_Main.readNumber8_233 <- store idr_Main.readNumber8_val
      pure (Cidr_Prelude.List.:: idr_Main.readNumber7_212 idr_Main.readNumber8_233) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Main.readNumber7_212 idr_Main.readNumber8_233)
  idr_Main.readNumber6_234 <- store idr_Main.readNumber6_val
  idr_Main.readNumber2_val <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:0" idr_Main.readNumber2 idr_Main.readNumber3 idr_Main.readNumber4 idr_Main.readNumber5 idr_Main.readNumber6_234
  idr_Main.readNumber2_235 <- store idr_Main.readNumber2_val
  idr_Main.readNumber2_val_236 <- fetch idr_Main.readNumber2_235
  -- LINT: case has non-covered alternative CErased
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  -- LINT: case has non-covered alternative Cidr_Builtins.MkDPair
  -- LINT: case has non-covered alternative Cidr_Builtins.MkPair
  -- LINT: case has non-covered alternative Cidr_Data.Vect.::
  -- LINT: case has non-covered alternative Cidr_Data.Vect.Nil
  -- LINT: case has non-covered alternative Cidr_MkUnit
  -- LINT: case has non-covered alternative Cidr_Prelude.List.::
  -- LINT: case has non-covered alternative Cidr_Prelude.List.Nil
  -- LINT: case has non-covered alternative C"idr_{U_Main.countdowns_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.readVect_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_0}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{readNumber_8}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_24}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_25}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.getLine'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.printLn'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"
  case idr_Main.readNumber2_val_236 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)
    (Cidr_Prelude.Bool.True) ->
      idr_Main.readNumber3_val_237 <- idris_str_int idr_Main.readNumber1_200
      idr_Main.readNumber3_238 <- store idr_Main.readNumber3_val_237
      pure (Cidr_Prelude.Maybe.Just idr_Main.readNumber3_238) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Main.readNumber3_238)

idr_Main.readVect idr_Main.readVect0 =
  idr_Main.readVect1_val_239 <- pure (CErased)
  idr_Main.readVect1 <- store idr_Main.readVect1_val_239
  idr_Main.readVect1_val <- idr_Prelude.Interactive.getLine' idr_Main.readVect1 idr_Main.readVect0
  idr_Main.readVect1_240 <- store idr_Main.readVect1_val
  idr_Main.readVect2_val_241 <- pure (CGrString #"")
  idr_Main.readVect2 <- store idr_Main.readVect2_val_241
  idr_Main.readVect2_val <- idris_str_eq idr_Main.readVect1_240 idr_Main.readVect2
  idr_Main.readVect2_242 <- store idr_Main.readVect2_val
  idr_Main.readVect2_val_243 <- fetch idr_Main.readVect2_242
  case idr_Main.readVect2_val_243 of
    (CGrInt idr_Main.readVect_cpat_LInt64_0) ->
      case idr_Main.readVect_cpat_LInt64_0 of
        0 ->
          idr_Main.readVect3_val <- idr_Main.readVect idr_Main.readVect0
          idr_Main.readVect3 <- store idr_Main.readVect3_val
          idr_Main.readVect3_val_244 <- fetch idr_Main.readVect3
          case idr_Main.readVect3_val_244 of
            (Cidr_Builtins.MkDPair idr_Main.readVect4 idr_Main.readVect5) ->
              idr_Main.readVect6_val_245 <- pure (CGrInt 1)
              idr_Main.readVect6 <- store idr_Main.readVect6_val_245
              idr_Main.readVect6_val <- idris_int_add idr_Main.readVect4 idr_Main.readVect6
              idr_Main.readVect6_246 <- store idr_Main.readVect6_val
              idr_Main.readVect7_val <- pure (Cidr_Data.Vect.:: idr_Main.readVect1_240 idr_Main.readVect5)
              idr_Main.readVect7 <- store idr_Main.readVect7_val
              pure (Cidr_Builtins.MkDPair idr_Main.readVect6_246 idr_Main.readVect7) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkDPair idr_Main.readVect6_246 idr_Main.readVect7)
        #default ->
          idr_Main.readVect3_val_247 <- pure (CGrInt 0)
          idr_Main.readVect3_248 <- store idr_Main.readVect3_val_247
          idr_Main.readVect4_val <- pure (Cidr_Data.Vect.Nil)
          idr_Main.readVect4_249 <- store idr_Main.readVect4_val
          pure (Cidr_Builtins.MkDPair idr_Main.readVect3_248 idr_Main.readVect4_249) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkDPair idr_Main.readVect3_248 idr_Main.readVect4_249)
    #default ->
      idr_Main.readVect3_val_250 <- pure (CGrInt 0)
      idr_Main.readVect3_251 <- store idr_Main.readVect3_val_250
      idr_Main.readVect4_val_252 <- pure (Cidr_Data.Vect.Nil)
      idr_Main.readVect4_253 <- store idr_Main.readVect4_val_252
      pure (Cidr_Builtins.MkDPair idr_Main.readVect3_251 idr_Main.readVect4_253) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkDPair idr_Main.readVect3_251 idr_Main.readVect4_253)

idr_Main.readVectLen idr_Main.readVectLen0 idr_Main.readVectLen1 =
  idr_Main.readVectLen0_val <- fetch idr_Main.readVectLen0
  case idr_Main.readVectLen0_val of
    (CGrInt idr_Main.readVectLen_cpat_LInt64_0) ->
      case idr_Main.readVectLen_cpat_LInt64_0 of
        0 ->
          pure (Cidr_Data.Vect.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.Nil)
        #default ->
          idr_Main.readVectLen2_val_254 <- pure (CGrInt 1)
          idr_Main.readVectLen2 <- store idr_Main.readVectLen2_val_254
          idr_Main.readVectLen2_val <- idris_int_sub idr_Main.readVectLen0 idr_Main.readVectLen2
          idr_Main.readVectLen2_255 <- store idr_Main.readVectLen2_val
          idr_Main.readVectLen3_val_256 <- pure (CErased)
          idr_Main.readVectLen3 <- store idr_Main.readVectLen3_val_256
          idr_Main.readVectLen3_val <- idr_Prelude.Interactive.getLine' idr_Main.readVectLen3 idr_Main.readVectLen1
          idr_Main.readVectLen3_257 <- store idr_Main.readVectLen3_val
          idr_Main.readVectLen4_val <- idr_Main.readVectLen idr_Main.readVectLen2_255 idr_Main.readVectLen1
          idr_Main.readVectLen4 <- store idr_Main.readVectLen4_val
          pure (Cidr_Data.Vect.:: idr_Main.readVectLen3_257 idr_Main.readVectLen4) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Main.readVectLen3_257 idr_Main.readVectLen4)
    #default ->
      idr_Main.readVectLen2_val_259 <- pure (CGrInt 1)
      idr_Main.readVectLen2_260 <- store idr_Main.readVectLen2_val_259
      idr_Main.readVectLen2_val_258 <- idris_int_sub idr_Main.readVectLen0 idr_Main.readVectLen2_260
      idr_Main.readVectLen2_261 <- store idr_Main.readVectLen2_val_258
      idr_Main.readVectLen3_val_263 <- pure (CErased)
      idr_Main.readVectLen3_264 <- store idr_Main.readVectLen3_val_263
      idr_Main.readVectLen3_val_262 <- idr_Prelude.Interactive.getLine' idr_Main.readVectLen3_264 idr_Main.readVectLen1
      idr_Main.readVectLen3_265 <- store idr_Main.readVectLen3_val_262
      idr_Main.readVectLen4_val_266 <- idr_Main.readVectLen idr_Main.readVectLen2_261 idr_Main.readVectLen1
      idr_Main.readVectLen4_267 <- store idr_Main.readVectLen4_val_266
      pure (Cidr_Data.Vect.:: idr_Main.readVectLen3_265 idr_Main.readVectLen4_267) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Main.readVectLen3_265 idr_Main.readVectLen4_267)

idr_Prelude.Show.showLitChar idr_Prelude.Show.showLitChar0 =
  idr_Prelude.Show.showLitChar0_val <- fetch idr_Prelude.Show.showLitChar0
  case idr_Prelude.Show.showLitChar0_val of
    (CGrInt idr_Prelude.Show.showLitChar_cpat_LInt64_7) ->
      case idr_Prelude.Show.showLitChar_cpat_LInt64_7 of
        7 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_9}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_9}_1}")
        8 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_10}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_10}_1}")
        9 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_11}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_11}_1}")
        10 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_12}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_12}_1}")
        11 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_13}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_13}_1}")
        12 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_14}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_14}_1}")
        13 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_15}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_15}_1}")
        14 ->
          idr_Prelude.Show.showLitChar1_val <- pure (C"idr_{U_Prelude.Show.{showLitChar_16}_1}")
          idr_Prelude.Show.showLitChar1 <- store idr_Prelude.Show.showLitChar1_val
          idr_Prelude.Show.showLitChar2_val <- pure (CGrString #"\\SO")
          idr_Prelude.Show.showLitChar2 <- store idr_Prelude.Show.showLitChar2_val
          pure (C"idr_{U_Prelude.Show.protectEsc_1}" idr_Prelude.Show.showLitChar1 idr_Prelude.Show.showLitChar2) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.protectEsc_1}" idr_Prelude.Show.showLitChar1 idr_Prelude.Show.showLitChar2)
        92 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_17}_1}")
        127 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_18}_1}")
        #default ->
          idr_Prelude.Show.showLitChar1_val_269 <- pure (CErased)
          idr_Prelude.Show.showLitChar1_270 <- store idr_Prelude.Show.showLitChar1_val_269
          idr_Prelude.Show.showLitChar2_val_272 <- idris_ch_int idr_Prelude.Show.showLitChar0
          idr_Prelude.Show.showLitChar2_273 <- store idr_Prelude.Show.showLitChar2_val_272
          idr_Prelude.Show.showLitChar2_val_271 <- idris_ls_ext idr_Prelude.Show.showLitChar2_273
          idr_Prelude.Show.showLitChar2_274 <- store idr_Prelude.Show.showLitChar2_val_271
          idr_Prelude.Show.showLitChar3_val_275 <- pure (CErased)
          idr_Prelude.Show.showLitChar3 <- store idr_Prelude.Show.showLitChar3_val_275
          idr_Prelude.Show.showLitChar3_val <- idr_Prelude.Show.showLitChar:asciiTab:10 idr_Prelude.Show.showLitChar3
          idr_Prelude.Show.showLitChar3_276 <- store idr_Prelude.Show.showLitChar3_val
          idr_Prelude.Show.showLitChar1_val_268 <- idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar1_270 idr_Prelude.Show.showLitChar2_274 idr_Prelude.Show.showLitChar3_276
          idr_Prelude.Show.showLitChar1_277 <- store idr_Prelude.Show.showLitChar1_val_268
          idr_Prelude.Show.showLitChar1_val_278 <- fetch idr_Prelude.Show.showLitChar1_277
          case idr_Prelude.Show.showLitChar1_val_278 of
            (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar2_279) ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_19}_1}" idr_Prelude.Show.showLitChar2_279) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_19}_1}" idr_Prelude.Show.showLitChar2_279)
            (Cidr_Prelude.Maybe.Nothing) ->
              idr_Prelude.Show.showLitChar2_val_281 <- pure (CGrInt 127)
              idr_Prelude.Show.showLitChar2_282 <- store idr_Prelude.Show.showLitChar2_val_281
              idr_Prelude.Show.showLitChar2_val_280 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Show.showLitChar0 idr_Prelude.Show.showLitChar2_282
              idr_Prelude.Show.showLitChar2_283 <- store idr_Prelude.Show.showLitChar2_val_280
              idr_Prelude.Show.showLitChar2_val_284 <- fetch idr_Prelude.Show.showLitChar2_283
              case idr_Prelude.Show.showLitChar2_val_284 of
                (Cidr_Prelude.Interfaces.GT) ->
                  pure (C"idr_{U_Prelude.Show.{showLitChar_20}_1}" idr_Prelude.Show.showLitChar0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_20}_1}" idr_Prelude.Show.showLitChar0)
                #default ->
                  pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0)
    #default ->
      idr_Prelude.Show.showLitChar1_val_286 <- pure (CErased)
      idr_Prelude.Show.showLitChar1_287 <- store idr_Prelude.Show.showLitChar1_val_286
      idr_Prelude.Show.showLitChar2_val_289 <- idris_ch_int idr_Prelude.Show.showLitChar0
      idr_Prelude.Show.showLitChar2_290 <- store idr_Prelude.Show.showLitChar2_val_289
      idr_Prelude.Show.showLitChar2_val_288 <- idris_ls_ext idr_Prelude.Show.showLitChar2_290
      idr_Prelude.Show.showLitChar2_291 <- store idr_Prelude.Show.showLitChar2_val_288
      idr_Prelude.Show.showLitChar3_val_293 <- pure (CErased)
      idr_Prelude.Show.showLitChar3_294 <- store idr_Prelude.Show.showLitChar3_val_293
      idr_Prelude.Show.showLitChar3_val_292 <- idr_Prelude.Show.showLitChar:asciiTab:10 idr_Prelude.Show.showLitChar3_294
      idr_Prelude.Show.showLitChar3_295 <- store idr_Prelude.Show.showLitChar3_val_292
      idr_Prelude.Show.showLitChar1_val_285 <- idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar1_287 idr_Prelude.Show.showLitChar2_291 idr_Prelude.Show.showLitChar3_295
      idr_Prelude.Show.showLitChar1_296 <- store idr_Prelude.Show.showLitChar1_val_285
      idr_Prelude.Show.showLitChar1_val_297 <- fetch idr_Prelude.Show.showLitChar1_296
      case idr_Prelude.Show.showLitChar1_val_297 of
        (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar2_298) ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_19}_1}" idr_Prelude.Show.showLitChar2_298) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_19}_1}" idr_Prelude.Show.showLitChar2_298)
        (Cidr_Prelude.Maybe.Nothing) ->
          idr_Prelude.Show.showLitChar2_val_300 <- pure (CGrInt 127)
          idr_Prelude.Show.showLitChar2_301 <- store idr_Prelude.Show.showLitChar2_val_300
          idr_Prelude.Show.showLitChar2_val_299 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Show.showLitChar0 idr_Prelude.Show.showLitChar2_301
          idr_Prelude.Show.showLitChar2_302 <- store idr_Prelude.Show.showLitChar2_val_299
          idr_Prelude.Show.showLitChar2_val_303 <- fetch idr_Prelude.Show.showLitChar2_302
          case idr_Prelude.Show.showLitChar2_val_303 of
            (Cidr_Prelude.Interfaces.GT) ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_20}_1}" idr_Prelude.Show.showLitChar0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_20}_1}" idr_Prelude.Show.showLitChar0)
            #default ->
              pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0)

idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString0 idr_Prelude.Show.showLitString1 =
  idr_Prelude.Show.showLitString0_val <- fetch idr_Prelude.Show.showLitString0
  case idr_Prelude.Show.showLitString0_val of
    (Cidr_Prelude.List.:: idr_Prelude.Show.showLitString2 idr_Prelude.Show.showLitString3) ->
      idr_Prelude.Show.showLitString2_val <- fetch idr_Prelude.Show.showLitString2
      case idr_Prelude.Show.showLitString2_val of
        (CGrInt idr_Prelude.Show.showLitString_cpat_LInt64_34) ->
          case idr_Prelude.Show.showLitString_cpat_LInt64_34 of
            34 ->
              idr_Prelude.Show.showLitString4_val <- pure (CGrString #"\\\"")
              idr_Prelude.Show.showLitString4 <- store idr_Prelude.Show.showLitString4_val
              idr_Prelude.Show.showLitString5_val <- idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1
              idr_Prelude.Show.showLitString5 <- store idr_Prelude.Show.showLitString5_val
              idris_str_concat idr_Prelude.Show.showLitString4 idr_Prelude.Show.showLitString5
            #default ->
              idr_Prelude.Show.showLitString4_val_304 <- idr_Prelude.Show.showLitChar idr_Prelude.Show.showLitString2
              idr_Prelude.Show.showLitString4_305 <- store idr_Prelude.Show.showLitString4_val_304
              idr_Prelude.Show.showLitString5_val_306 <- idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1
              idr_Prelude.Show.showLitString5_307 <- store idr_Prelude.Show.showLitString5_val_306
              "idr_{APPLY_0}" idr_Prelude.Show.showLitString4_305 idr_Prelude.Show.showLitString5_307
        #default ->
          idr_Prelude.Show.showLitString4_val_308 <- idr_Prelude.Show.showLitChar idr_Prelude.Show.showLitString2
          idr_Prelude.Show.showLitString4_309 <- store idr_Prelude.Show.showLitString4_val_308
          idr_Prelude.Show.showLitString5_val_310 <- idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1
          idr_Prelude.Show.showLitString5_311 <- store idr_Prelude.Show.showLitString5_val_310
          "idr_{APPLY_0}" idr_Prelude.Show.showLitString4_309 idr_Prelude.Show.showLitString5_311
    (Cidr_Prelude.List.Nil) ->
      fetch idr_Prelude.Show.showLitString1

idr_System.usleep idr_System.usleep0 idr_System.usleep1 idr_System.usleep2 =
  idris_usleep idr_System.usleep0

idr_Main.zipInputs idr_Main.zipInputs0 =
  idr_Main.zipInputs1_val_327 <- pure (CGrString #"Enter the first vector (blank line to end): \n")
  idr_Main.zipInputs1 <- store idr_Main.zipInputs1_val_327
  idr_Main.zipInputs1_val_326 <- idris_write_str idr_Main.zipInputs0 idr_Main.zipInputs1
  idr_Main.zipInputs1_328 <- store idr_Main.zipInputs1_val_326
  idr_Main.zipInputs1_val <- pure (Cidr_MkUnit)
  idr_Main.zipInputs1_329 <- store idr_Main.zipInputs1_val
  idr_Main.zipInputs2_val <- idr_Main.readVect idr_Main.zipInputs0
  idr_Main.zipInputs2 <- store idr_Main.zipInputs2_val
  idr_Main.zipInputs2_val_330 <- fetch idr_Main.zipInputs2
  case idr_Main.zipInputs2_val_330 of
    (Cidr_Builtins.MkDPair idr_Main.zipInputs3 idr_Main.zipInputs4) ->
      idr_Main.zipInputs5_val <- pure (CErased)
      idr_Main.zipInputs5 <- store idr_Main.zipInputs5_val
      idr_Main.zipInputs6_val <- pure (CErased)
      idr_Main.zipInputs6 <- store idr_Main.zipInputs6_val
      idr_Main.zipInputs7_val <- pure (CErased)
      idr_Main.zipInputs7 <- store idr_Main.zipInputs7_val
      idr_Main.zipInputs8_val <- pure (C"idr_{U_Main.{zipInputs_21}_1}")
      idr_Main.zipInputs8 <- store idr_Main.zipInputs8_val
      idr_Main.zipInputs9_val <- pure (C"idr_{U_Main.{zipInputs_25}_2}" idr_Main.zipInputs3 idr_Main.zipInputs4)
      idr_Main.zipInputs9 <- store idr_Main.zipInputs9_val
      idr_io_bind idr_Main.zipInputs5 idr_Main.zipInputs6 idr_Main.zipInputs7 idr_Main.zipInputs8 idr_Main.zipInputs9 idr_Main.zipInputs0

idr_Data.Vect.zipWith idr_Data.Vect.zipWith0 idr_Data.Vect.zipWith1 idr_Data.Vect.zipWith2 idr_Data.Vect.zipWith3 idr_Data.Vect.zipWith4 idr_Data.Vect.zipWith5 idr_Data.Vect.zipWith6 =
  idr_Data.Vect.zipWith6_val <- fetch idr_Data.Vect.zipWith6
  case idr_Data.Vect.zipWith6_val of
    (Cidr_Data.Vect.:: idr_Data.Vect.zipWith7 idr_Data.Vect.zipWith8) ->
      idr_Data.Vect.zipWith5_val <- fetch idr_Data.Vect.zipWith5
      -- LINT: case has non-covered alternative Cidr_Data.Vect.Nil
      case idr_Data.Vect.zipWith5_val of
        (Cidr_Data.Vect.:: idr_Data.Vect.zipWith9 idr_Data.Vect.zipWith10) ->
          idr_Data.Vect.zipWith11_val_331 <- "idr_{APPLY_0}" idr_Data.Vect.zipWith4 idr_Data.Vect.zipWith9
          idr_Data.Vect.zipWith11 <- store idr_Data.Vect.zipWith11_val_331
          idr_Data.Vect.zipWith11_val <- "idr_{APPLY_0}" idr_Data.Vect.zipWith11 idr_Data.Vect.zipWith7
          idr_Data.Vect.zipWith11_332 <- store idr_Data.Vect.zipWith11_val
          idr_Data.Vect.zipWith12_val_333 <- pure (CErased)
          idr_Data.Vect.zipWith12 <- store idr_Data.Vect.zipWith12_val_333
          idr_Data.Vect.zipWith13_val <- pure (CErased)
          idr_Data.Vect.zipWith13 <- store idr_Data.Vect.zipWith13_val
          idr_Data.Vect.zipWith14_val <- pure (CErased)
          idr_Data.Vect.zipWith14 <- store idr_Data.Vect.zipWith14_val
          idr_Data.Vect.zipWith15_val <- pure (CErased)
          idr_Data.Vect.zipWith15 <- store idr_Data.Vect.zipWith15_val
          idr_Data.Vect.zipWith12_val <- idr_Data.Vect.zipWith idr_Data.Vect.zipWith12 idr_Data.Vect.zipWith13 idr_Data.Vect.zipWith14 idr_Data.Vect.zipWith15 idr_Data.Vect.zipWith4 idr_Data.Vect.zipWith10 idr_Data.Vect.zipWith8
          idr_Data.Vect.zipWith12_334 <- store idr_Data.Vect.zipWith12_val
          pure (Cidr_Data.Vect.:: idr_Data.Vect.zipWith11_332 idr_Data.Vect.zipWith12_334) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Data.Vect.zipWith11_332 idr_Data.Vect.zipWith12_334)
    (Cidr_Data.Vect.Nil) ->
      fetch idr_Data.Vect.zipWith6

"idr_{APPLY_0}" "idr_{APPLY_0}0" "idr_{APPLY_0}1" =
  "idr_{APPLY_0}0_val" <- fetch "idr_{APPLY_0}0"
  case "idr_{APPLY_0}0_val" of
    (C"idr_{U_Data.Vect.{foldrImpl_3}_1}" "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}4") ->
      "idr_Data.Vect.{foldrImpl_3}" "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}4" "idr_{APPLY_0}1"
    (C"idr_{U_Main.countdown_1}" "idr_{APPLY_0}2_335") ->
      idr_Main.countdown "idr_{APPLY_0}2_335" "idr_{APPLY_0}1"
    (C"idr_{U_Main.countdowns_1}") ->
      idr_Main.countdowns "idr_{APPLY_0}1"
    (C"idr_{U_Main.readVect_1}") ->
      idr_Main.readVect "idr_{APPLY_0}1"
    (C"idr_{U_Main.{countdowns_0}_1}" "idr_{APPLY_0}2_336") ->
      "idr_Main.{countdowns_0}" "idr_{APPLY_0}2_336" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{countdowns_1}_1}") ->
      "idr_Main.{countdowns_1}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{countdowns_2}_1}") ->
      "idr_Main.{countdowns_2}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}") ->
      "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}") ->
      "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}") ->
      "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}" "idr_{APPLY_0}2_337") ->
      "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}" "idr_{APPLY_0}2_337" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}_1}" "idr_{APPLY_0}2_338") ->
      "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}" "idr_{APPLY_0}2_338" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}_1}") ->
      "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{main_4}_1}") ->
      "idr_Main.{main_4}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{main_5}_1}") ->
      "idr_Main.{main_5}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{main_6}_1}") ->
      "idr_Main.{main_6}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{main_7}_1}") ->
      "idr_Main.{main_7}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{readNumber_8}_1}" "idr_{APPLY_0}2_339") ->
      "idr_Main.{readNumber_8}" "idr_{APPLY_0}2_339" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_21}_1}") ->
      "idr_Main.{zipInputs_21}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_22}_1}") ->
      "idr_Main.{zipInputs_22}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_23}_1}") ->
      "idr_Main.{zipInputs_23}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_24}_1}" "idr_{APPLY_0}2_340") ->
      "idr_Main.{zipInputs_24}" "idr_{APPLY_0}2_340" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_25}_1}" "idr_{APPLY_0}2_341" "idr_{APPLY_0}3_342" "idr_{APPLY_0}4_343") ->
      "idr_Main.{zipInputs_25}" "idr_{APPLY_0}2_341" "idr_{APPLY_0}3_342" "idr_{APPLY_0}4_343" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}_1}") ->
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}") ->
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_1}") ->
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}_1}") ->
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}" "idr_{APPLY_0}2_344" "idr_{APPLY_0}3_345") ->
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}" "idr_{APPLY_0}2_344" "idr_{APPLY_0}3_345" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}_1}" "idr_{APPLY_0}2_346" "idr_{APPLY_0}3_347" "idr_{APPLY_0}4_348") ->
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}" "idr_{APPLY_0}2_346" "idr_{APPLY_0}3_347" "idr_{APPLY_0}4_348" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Chars.isDigit_1}") ->
      idr_Prelude.Chars.isDigit "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Interactive.getLine'_1}" "idr_{APPLY_0}2_349") ->
      idr_Prelude.Interactive.getLine' "idr_{APPLY_0}2_349" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Interactive.printLn'_1}" "idr_{APPLY_0}2_350" "idr_{APPLY_0}3_351" "idr_{APPLY_0}4_352" "idr_{APPLY_0}5") ->
      idr_Prelude.Interactive.printLn' "idr_{APPLY_0}2_350" "idr_{APPLY_0}3_351" "idr_{APPLY_0}4_352" "idr_{APPLY_0}5" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2_353" "idr_{APPLY_0}3_354") ->
      idr_Prelude.Show.protectEsc "idr_{APPLY_0}2_353" "idr_{APPLY_0}3_354" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}" "idr_{APPLY_0}2_355") ->
      "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}" "idr_{APPLY_0}2_355" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_27}_1}") ->
      "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_27}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_10}_1}") ->
      "idr_Prelude.Show.{showLitChar_10}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_11}_1}") ->
      "idr_Prelude.Show.{showLitChar_11}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_12}_1}") ->
      "idr_Prelude.Show.{showLitChar_12}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_13}_1}") ->
      "idr_Prelude.Show.{showLitChar_13}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_14}_1}") ->
      "idr_Prelude.Show.{showLitChar_14}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_15}_1}") ->
      "idr_Prelude.Show.{showLitChar_15}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_16}_1}") ->
      "idr_Prelude.Show.{showLitChar_16}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_17}_1}") ->
      "idr_Prelude.Show.{showLitChar_17}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_18}_1}") ->
      "idr_Prelude.Show.{showLitChar_18}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_19}_1}" "idr_{APPLY_0}2_356") ->
      "idr_Prelude.Show.{showLitChar_19}" "idr_{APPLY_0}2_356" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_20}_1}" "idr_{APPLY_0}2_357") ->
      "idr_Prelude.Show.{showLitChar_20}" "idr_{APPLY_0}2_357" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_9}_1}") ->
      "idr_Prelude.Show.{showLitChar_9}" "idr_{APPLY_0}1"
    (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_358") ->
      idr_prim__strCons "idr_{APPLY_0}2_358" "idr_{APPLY_0}1"
    (C"idr_{U_prim__toStrBigInt_1}") ->
      idr_prim__toStrBigInt "idr_{APPLY_0}1"
    (C"idr_{U_prim__toStrInt_1}") ->
      idr_prim__toStrInt "idr_{APPLY_0}1"
    (C"idr_{U_Main.{countdowns_0}_2}") ->
      pure (C"idr_{U_Main.{countdowns_0}_1}" "idr_{APPLY_0}1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{countdowns_0}_1}" "idr_{APPLY_0}1")
    (C"idr_{U_Main.{readNumber_8}_2}") ->
      pure (C"idr_{U_Main.{readNumber_8}_1}" "idr_{APPLY_0}1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{readNumber_8}_1}" "idr_{APPLY_0}1")
    (C"idr_{U_Main.{zipInputs_24}_2}") ->
      pure (C"idr_{U_Main.{zipInputs_24}_1}" "idr_{APPLY_0}1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{zipInputs_24}_1}" "idr_{APPLY_0}1")
    (C"idr_{U_Main.{zipInputs_25}_2}" "idr_{APPLY_0}2_359" "idr_{APPLY_0}3_360") ->
      pure (C"idr_{U_Main.{zipInputs_25}_1}" "idr_{APPLY_0}2_359" "idr_{APPLY_0}3_360" "idr_{APPLY_0}1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{zipInputs_25}_1}" "idr_{APPLY_0}2_359" "idr_{APPLY_0}3_360" "idr_{APPLY_0}1")
    (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_2}") ->
      pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}" "idr_{APPLY_0}1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}" "idr_{APPLY_0}1")
    #default ->
      pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)

"idr_{EVAL_0}" "idr_{EVAL_0}0" =
  "idr_{EVAL_0}0_val" <- fetch "idr_{EVAL_0}0"
  case "idr_{EVAL_0}0_val" of
    #default ->
      fetch "idr_{EVAL_0}0"

"idr_Main.{countdowns_0}" "idr_Main.{countdowns_0}0" "idr_Main.{countdowns_0}1" =
  "idr_Main.{countdowns_0}2_val_363" <- pure (CGrString #"Another (y/n)? ")
  "idr_Main.{countdowns_0}2" <- store "idr_Main.{countdowns_0}2_val_363"
  "idr_Main.{countdowns_0}2_val_362" <- idris_write_str "idr_Main.{countdowns_0}1" "idr_Main.{countdowns_0}2"
  "idr_Main.{countdowns_0}2_364" <- store "idr_Main.{countdowns_0}2_val_362"
  "idr_Main.{countdowns_0}2_val" <- pure (Cidr_MkUnit)
  "idr_Main.{countdowns_0}2_365" <- store "idr_Main.{countdowns_0}2_val"
  "idr_Main.{countdowns_0}3_val_366" <- pure (CErased)
  "idr_Main.{countdowns_0}3" <- store "idr_Main.{countdowns_0}3_val_366"
  "idr_Main.{countdowns_0}3_val" <- idr_Prelude.Interactive.getLine' "idr_Main.{countdowns_0}3" "idr_Main.{countdowns_0}1"
  "idr_Main.{countdowns_0}3_367" <- store "idr_Main.{countdowns_0}3_val"
  "idr_Main.{countdowns_0}4_val_368" <- pure (CGrString #"y")
  "idr_Main.{countdowns_0}4" <- store "idr_Main.{countdowns_0}4_val_368"
  "idr_Main.{countdowns_0}4_val" <- idris_str_eq "idr_Main.{countdowns_0}3_367" "idr_Main.{countdowns_0}4"
  "idr_Main.{countdowns_0}4_369" <- store "idr_Main.{countdowns_0}4_val"
  "idr_Main.{countdowns_0}4_val_370" <- fetch "idr_Main.{countdowns_0}4_369"
  case "idr_Main.{countdowns_0}4_val_370" of
    (CGrInt "idr_Main.{countdowns_0}_cpat_LInt64_0") ->
      case "idr_Main.{countdowns_0}_cpat_LInt64_0" of
        0 ->
          pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)
        #default ->
          idr_Main.countdowns "idr_Main.{countdowns_0}1"
    #default ->
      idr_Main.countdowns "idr_Main.{countdowns_0}1"

"idr_{runMain_0}" =
  "idr_{runMain_0}0_val_371" <- pure (CErased)
  "idr_{runMain_0}0" <- store "idr_{runMain_0}0_val_371"
  "idr_{runMain_0}0_val" <- idr_Main.main "idr_{runMain_0}0"
  "idr_{runMain_0}0_372" <- store "idr_{runMain_0}0_val"
  "idr_{EVAL_0}" "idr_{runMain_0}0_372"

"idr_Main.{countdowns_1}" "idr_Main.{countdowns_1}0" =
  "idr_Main.{countdowns_1}1_val_373" <- pure (CGrString #"Invalid input\n")
  "idr_Main.{countdowns_1}1" <- store "idr_Main.{countdowns_1}1_val_373"
  "idr_Main.{countdowns_1}1_val" <- idris_write_str "idr_Main.{countdowns_1}0" "idr_Main.{countdowns_1}1"
  "idr_Main.{countdowns_1}1_374" <- store "idr_Main.{countdowns_1}1_val"
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

"idr_Main.{countdowns_2}" "idr_Main.{countdowns_2}0" =
  pure (C"idr_{U_Main.countdowns_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.countdowns_1}")

"idr_Data.Vect.{foldrImpl_3}" "idr_Data.Vect.{foldrImpl_3}0" "idr_Data.Vect.{foldrImpl_3}1" "idr_Data.Vect.{foldrImpl_3}2" "idr_Data.Vect.{foldrImpl_3}3" =
  "idr_Data.Vect.{foldrImpl_3}4_val_375" <- "idr_{APPLY_0}" "idr_Data.Vect.{foldrImpl_3}1" "idr_Data.Vect.{foldrImpl_3}2"
  "idr_Data.Vect.{foldrImpl_3}4" <- store "idr_Data.Vect.{foldrImpl_3}4_val_375"
  "idr_Data.Vect.{foldrImpl_3}4_val" <- "idr_{APPLY_0}" "idr_Data.Vect.{foldrImpl_3}4" "idr_Data.Vect.{foldrImpl_3}3"
  "idr_Data.Vect.{foldrImpl_3}4_376" <- store "idr_Data.Vect.{foldrImpl_3}4_val"
  "idr_{APPLY_0}" "idr_Data.Vect.{foldrImpl_3}0" "idr_Data.Vect.{foldrImpl_3}4_376"

"idr_Main.{main_4}" "idr_Main.{main_4}0" =
  "idr_Main.{main_4}1_val" <- pure (CGrInt 34)
  "idr_Main.{main_4}1" <- store "idr_Main.{main_4}1_val"
  "idr_Main.{main_4}2_val_381" <- pure (CGrString #"")
  "idr_Main.{main_4}2" <- store "idr_Main.{main_4}2_val_381"
  "idr_Main.{main_4}2_val_380" <- idris_str_eq "idr_Main.{main_4}0" "idr_Main.{main_4}2"
  "idr_Main.{main_4}2_382" <- store "idr_Main.{main_4}2_val_380"
  "idr_Main.{main_4}2_val_383" <- fetch "idr_Main.{main_4}2_382"
  "idr_Main.{main_4}2_val_379" <- case "idr_Main.{main_4}2_val_383" of
    (CGrInt "idr_Main.{main_4}_cpat_LInt64_0") ->
      case "idr_Main.{main_4}_cpat_LInt64_0" of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  "idr_Main.{main_4}2_384" <- store "idr_Main.{main_4}2_val_379"
  "idr_Main.{main_4}3_val" <- pure (Cidr_Prelude.Bool.True)
  "idr_Main.{main_4}3" <- store "idr_Main.{main_4}3_val"
  "idr_Main.{main_4}2_val_378" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{main_4}2_384" "idr_Main.{main_4}3"
  "idr_Main.{main_4}2_385" <- store "idr_Main.{main_4}2_val_378"
  "idr_Main.{main_4}2_val_386" <- fetch "idr_Main.{main_4}2_385"
  "idr_Main.{main_4}2_val_377" <- case "idr_Main.{main_4}2_val_386" of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      "idr_Main.{main_4}3_val_387" <- idris_str_head "idr_Main.{main_4}0"
      "idr_Main.{main_4}3_388" <- store "idr_Main.{main_4}3_val_387"
      "idr_Main.{main_4}4_val_389" <- pure (CErased)
      "idr_Main.{main_4}4" <- store "idr_Main.{main_4}4_val_389"
      "idr_Main.{main_4}5_val_393" <- idris_str_tail "idr_Main.{main_4}0"
      "idr_Main.{main_4}5" <- store "idr_Main.{main_4}5_val_393"
      "idr_Main.{main_4}6_val" <- pure (CGrString #"")
      "idr_Main.{main_4}6" <- store "idr_Main.{main_4}6_val"
      "idr_Main.{main_4}5_val_392" <- idris_str_eq "idr_Main.{main_4}5" "idr_Main.{main_4}6"
      "idr_Main.{main_4}5_394" <- store "idr_Main.{main_4}5_val_392"
      "idr_Main.{main_4}5_val_395" <- fetch "idr_Main.{main_4}5_394"
      "idr_Main.{main_4}5_val_391" <- case "idr_Main.{main_4}5_val_395" of
        (CGrInt "idr_Main.{main_4}_cpat_LInt64_0_396") ->
          case "idr_Main.{main_4}_cpat_LInt64_0_396" of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Main.{main_4}5_397" <- store "idr_Main.{main_4}5_val_391"
      "idr_Main.{main_4}6_val_398" <- pure (Cidr_Prelude.Bool.True)
      "idr_Main.{main_4}6_399" <- store "idr_Main.{main_4}6_val_398"
      "idr_Main.{main_4}5_val_390" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{main_4}5_397" "idr_Main.{main_4}6_399"
      "idr_Main.{main_4}5_400" <- store "idr_Main.{main_4}5_val_390"
      "idr_Main.{main_4}5_val_401" <- fetch "idr_Main.{main_4}5_400"
      "idr_Main.{main_4}5_val" <- case "idr_Main.{main_4}5_val_401" of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          "idr_Main.{main_4}6_val_403" <- idris_str_tail "idr_Main.{main_4}0"
          "idr_Main.{main_4}6_404" <- store "idr_Main.{main_4}6_val_403"
          "idr_Main.{main_4}6_val_402" <- idris_str_head "idr_Main.{main_4}6_404"
          "idr_Main.{main_4}6_405" <- store "idr_Main.{main_4}6_val_402"
          "idr_Main.{main_4}7_val_406" <- idris_str_tail "idr_Main.{main_4}0"
          "idr_Main.{main_4}7" <- store "idr_Main.{main_4}7_val_406"
          "idr_Main.{main_4}7_val" <- idris_str_tail "idr_Main.{main_4}7"
          "idr_Main.{main_4}7_407" <- store "idr_Main.{main_4}7_val"
          pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_4}6_405" "idr_Main.{main_4}7_407") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_4}6_405" "idr_Main.{main_4}7_407")
      "idr_Main.{main_4}5_408" <- store "idr_Main.{main_4}5_val"
      "idr_Main.{main_4}4_val" <- idr__Prelude.Strings.unpack_with_36 "idr_Main.{main_4}4" "idr_Main.{main_4}5_408"
      "idr_Main.{main_4}4_409" <- store "idr_Main.{main_4}4_val"
      pure (Cidr_Prelude.List.:: "idr_Main.{main_4}3_388" "idr_Main.{main_4}4_409") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{main_4}3_388" "idr_Main.{main_4}4_409")
  "idr_Main.{main_4}2_410" <- store "idr_Main.{main_4}2_val_377"
  "idr_Main.{main_4}3_val_411" <- pure (CGrString #"\"")
  "idr_Main.{main_4}3_412" <- store "idr_Main.{main_4}3_val_411"
  "idr_Main.{main_4}2_val" <- idr_Prelude.Show.showLitString "idr_Main.{main_4}2_410" "idr_Main.{main_4}3_412"
  "idr_Main.{main_4}2_413" <- store "idr_Main.{main_4}2_val"
  idris_str_cons "idr_Main.{main_4}1" "idr_Main.{main_4}2_413"

"idr_Main.{main_5}" "idr_Main.{main_5}0" =
  "idr_Main.{main_5}1_val" <- pure (CErased)
  "idr_Main.{main_5}1" <- store "idr_Main.{main_5}1_val"
  "idr_Main.{main_5}2_val" <- pure (CErased)
  "idr_Main.{main_5}2" <- store "idr_Main.{main_5}2_val"
  "idr_Main.{main_5}3_val" <- pure (C"idr_{U_Main.{main_4}_1}")
  "idr_Main.{main_5}3" <- store "idr_Main.{main_5}3_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0" "idr_Main.{main_5}1" "idr_Main.{main_5}2" "idr_Main.{main_5}3" "idr_Main.{main_5}0"

"idr_Main.{main_6}" "idr_Main.{main_6}0" =
  "idr_Main.{main_6}1_val" <- pure (CGrInt 34)
  "idr_Main.{main_6}1" <- store "idr_Main.{main_6}1_val"
  "idr_Main.{main_6}2_val_418" <- pure (CGrString #"")
  "idr_Main.{main_6}2" <- store "idr_Main.{main_6}2_val_418"
  "idr_Main.{main_6}2_val_417" <- idris_str_eq "idr_Main.{main_6}0" "idr_Main.{main_6}2"
  "idr_Main.{main_6}2_419" <- store "idr_Main.{main_6}2_val_417"
  "idr_Main.{main_6}2_val_420" <- fetch "idr_Main.{main_6}2_419"
  "idr_Main.{main_6}2_val_416" <- case "idr_Main.{main_6}2_val_420" of
    (CGrInt "idr_Main.{main_6}_cpat_LInt64_0") ->
      case "idr_Main.{main_6}_cpat_LInt64_0" of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  "idr_Main.{main_6}2_421" <- store "idr_Main.{main_6}2_val_416"
  "idr_Main.{main_6}3_val" <- pure (Cidr_Prelude.Bool.True)
  "idr_Main.{main_6}3" <- store "idr_Main.{main_6}3_val"
  "idr_Main.{main_6}2_val_415" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{main_6}2_421" "idr_Main.{main_6}3"
  "idr_Main.{main_6}2_422" <- store "idr_Main.{main_6}2_val_415"
  "idr_Main.{main_6}2_val_423" <- fetch "idr_Main.{main_6}2_422"
  "idr_Main.{main_6}2_val_414" <- case "idr_Main.{main_6}2_val_423" of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      "idr_Main.{main_6}3_val_424" <- idris_str_head "idr_Main.{main_6}0"
      "idr_Main.{main_6}3_425" <- store "idr_Main.{main_6}3_val_424"
      "idr_Main.{main_6}4_val_429" <- idris_str_tail "idr_Main.{main_6}0"
      "idr_Main.{main_6}4" <- store "idr_Main.{main_6}4_val_429"
      "idr_Main.{main_6}5_val" <- pure (CGrString #"")
      "idr_Main.{main_6}5" <- store "idr_Main.{main_6}5_val"
      "idr_Main.{main_6}4_val_428" <- idris_str_eq "idr_Main.{main_6}4" "idr_Main.{main_6}5"
      "idr_Main.{main_6}4_430" <- store "idr_Main.{main_6}4_val_428"
      "idr_Main.{main_6}4_val_431" <- fetch "idr_Main.{main_6}4_430"
      "idr_Main.{main_6}4_val_427" <- case "idr_Main.{main_6}4_val_431" of
        (CGrInt "idr_Main.{main_6}_cpat_LInt64_0_432") ->
          case "idr_Main.{main_6}_cpat_LInt64_0_432" of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Main.{main_6}4_433" <- store "idr_Main.{main_6}4_val_427"
      "idr_Main.{main_6}5_val_434" <- pure (Cidr_Prelude.Bool.True)
      "idr_Main.{main_6}5_435" <- store "idr_Main.{main_6}5_val_434"
      "idr_Main.{main_6}4_val_426" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{main_6}4_433" "idr_Main.{main_6}5_435"
      "idr_Main.{main_6}4_436" <- store "idr_Main.{main_6}4_val_426"
      "idr_Main.{main_6}4_val_437" <- fetch "idr_Main.{main_6}4_436"
      "idr_Main.{main_6}4_val" <- case "idr_Main.{main_6}4_val_437" of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
        (Cidr_Prelude.Basics.Yes) ->
          "idr_Main.{main_6}5_val_439" <- idris_str_tail "idr_Main.{main_6}0"
          "idr_Main.{main_6}5_440" <- store "idr_Main.{main_6}5_val_439"
          "idr_Main.{main_6}5_val_438" <- idris_str_head "idr_Main.{main_6}5_440"
          "idr_Main.{main_6}5_441" <- store "idr_Main.{main_6}5_val_438"
          "idr_Main.{main_6}6_val_446" <- idris_str_tail "idr_Main.{main_6}0"
          "idr_Main.{main_6}6" <- store "idr_Main.{main_6}6_val_446"
          "idr_Main.{main_6}6_val_445" <- idris_str_tail "idr_Main.{main_6}6"
          "idr_Main.{main_6}6_447" <- store "idr_Main.{main_6}6_val_445"
          "idr_Main.{main_6}7_val" <- pure (CGrString #"")
          "idr_Main.{main_6}7" <- store "idr_Main.{main_6}7_val"
          "idr_Main.{main_6}6_val_444" <- idris_str_eq "idr_Main.{main_6}6_447" "idr_Main.{main_6}7"
          "idr_Main.{main_6}6_448" <- store "idr_Main.{main_6}6_val_444"
          "idr_Main.{main_6}6_val_449" <- fetch "idr_Main.{main_6}6_448"
          "idr_Main.{main_6}6_val_443" <- case "idr_Main.{main_6}6_val_449" of
            (CGrInt "idr_Main.{main_6}_cpat_LInt64_0_450") ->
              case "idr_Main.{main_6}_cpat_LInt64_0_450" of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Main.{main_6}6_451" <- store "idr_Main.{main_6}6_val_443"
          "idr_Main.{main_6}7_val_452" <- pure (Cidr_Prelude.Bool.True)
          "idr_Main.{main_6}7_453" <- store "idr_Main.{main_6}7_val_452"
          "idr_Main.{main_6}6_val_442" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{main_6}6_451" "idr_Main.{main_6}7_453"
          "idr_Main.{main_6}6_454" <- store "idr_Main.{main_6}6_val_442"
          "idr_Main.{main_6}6_val_455" <- fetch "idr_Main.{main_6}6_454"
          "idr_Main.{main_6}6_val" <- case "idr_Main.{main_6}6_val_455" of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
            (Cidr_Prelude.Basics.Yes) ->
              "idr_Main.{main_6}7_val_458" <- idris_str_tail "idr_Main.{main_6}0"
              "idr_Main.{main_6}7_459" <- store "idr_Main.{main_6}7_val_458"
              "idr_Main.{main_6}7_val_457" <- idris_str_tail "idr_Main.{main_6}7_459"
              "idr_Main.{main_6}7_460" <- store "idr_Main.{main_6}7_val_457"
              "idr_Main.{main_6}7_val_456" <- idris_str_head "idr_Main.{main_6}7_460"
              "idr_Main.{main_6}7_461" <- store "idr_Main.{main_6}7_val_456"
              "idr_Main.{main_6}8_val_462" <- pure (CErased)
              "idr_Main.{main_6}8" <- store "idr_Main.{main_6}8_val_462"
              "idr_Main.{main_6}9_val_468" <- idris_str_tail "idr_Main.{main_6}0"
              "idr_Main.{main_6}9" <- store "idr_Main.{main_6}9_val_468"
              "idr_Main.{main_6}9_val_467" <- idris_str_tail "idr_Main.{main_6}9"
              "idr_Main.{main_6}9_469" <- store "idr_Main.{main_6}9_val_467"
              "idr_Main.{main_6}9_val_466" <- idris_str_tail "idr_Main.{main_6}9_469"
              "idr_Main.{main_6}9_470" <- store "idr_Main.{main_6}9_val_466"
              "idr_Main.{main_6}10_val" <- pure (CGrString #"")
              "idr_Main.{main_6}10" <- store "idr_Main.{main_6}10_val"
              "idr_Main.{main_6}9_val_465" <- idris_str_eq "idr_Main.{main_6}9_470" "idr_Main.{main_6}10"
              "idr_Main.{main_6}9_471" <- store "idr_Main.{main_6}9_val_465"
              "idr_Main.{main_6}9_val_472" <- fetch "idr_Main.{main_6}9_471"
              "idr_Main.{main_6}9_val_464" <- case "idr_Main.{main_6}9_val_472" of
                (CGrInt "idr_Main.{main_6}_cpat_LInt64_0_473") ->
                  case "idr_Main.{main_6}_cpat_LInt64_0_473" of
                    0 ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              "idr_Main.{main_6}9_474" <- store "idr_Main.{main_6}9_val_464"
              "idr_Main.{main_6}10_val_475" <- pure (Cidr_Prelude.Bool.True)
              "idr_Main.{main_6}10_476" <- store "idr_Main.{main_6}10_val_475"
              "idr_Main.{main_6}9_val_463" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{main_6}9_474" "idr_Main.{main_6}10_476"
              "idr_Main.{main_6}9_477" <- store "idr_Main.{main_6}9_val_463"
              "idr_Main.{main_6}9_val_478" <- fetch "idr_Main.{main_6}9_477"
              "idr_Main.{main_6}9_val" <- case "idr_Main.{main_6}9_val_478" of
                (Cidr_Prelude.Basics.No) ->
                  pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                (Cidr_Prelude.Basics.Yes) ->
                  "idr_Main.{main_6}10_val_482" <- idris_str_tail "idr_Main.{main_6}0"
                  "idr_Main.{main_6}10_483" <- store "idr_Main.{main_6}10_val_482"
                  "idr_Main.{main_6}10_val_481" <- idris_str_tail "idr_Main.{main_6}10_483"
                  "idr_Main.{main_6}10_484" <- store "idr_Main.{main_6}10_val_481"
                  "idr_Main.{main_6}10_val_480" <- idris_str_tail "idr_Main.{main_6}10_484"
                  "idr_Main.{main_6}10_485" <- store "idr_Main.{main_6}10_val_480"
                  "idr_Main.{main_6}10_val_479" <- idris_str_head "idr_Main.{main_6}10_485"
                  "idr_Main.{main_6}10_486" <- store "idr_Main.{main_6}10_val_479"
                  "idr_Main.{main_6}11_val_489" <- idris_str_tail "idr_Main.{main_6}0"
                  "idr_Main.{main_6}11" <- store "idr_Main.{main_6}11_val_489"
                  "idr_Main.{main_6}11_val_488" <- idris_str_tail "idr_Main.{main_6}11"
                  "idr_Main.{main_6}11_490" <- store "idr_Main.{main_6}11_val_488"
                  "idr_Main.{main_6}11_val_487" <- idris_str_tail "idr_Main.{main_6}11_490"
                  "idr_Main.{main_6}11_491" <- store "idr_Main.{main_6}11_val_487"
                  "idr_Main.{main_6}11_val" <- idris_str_tail "idr_Main.{main_6}11_491"
                  "idr_Main.{main_6}11_492" <- store "idr_Main.{main_6}11_val"
                  pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_6}10_486" "idr_Main.{main_6}11_492") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_6}10_486" "idr_Main.{main_6}11_492")
              "idr_Main.{main_6}9_493" <- store "idr_Main.{main_6}9_val"
              "idr_Main.{main_6}8_val" <- idr__Prelude.Strings.unpack_with_36 "idr_Main.{main_6}8" "idr_Main.{main_6}9_493"
              "idr_Main.{main_6}8_494" <- store "idr_Main.{main_6}8_val"
              pure (Cidr_Prelude.List.:: "idr_Main.{main_6}7_461" "idr_Main.{main_6}8_494") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{main_6}7_461" "idr_Main.{main_6}8_494")
          "idr_Main.{main_6}6_495" <- store "idr_Main.{main_6}6_val"
          pure (Cidr_Prelude.List.:: "idr_Main.{main_6}5_441" "idr_Main.{main_6}6_495") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{main_6}5_441" "idr_Main.{main_6}6_495")
      "idr_Main.{main_6}4_496" <- store "idr_Main.{main_6}4_val"
      pure (Cidr_Prelude.List.:: "idr_Main.{main_6}3_425" "idr_Main.{main_6}4_496") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{main_6}3_425" "idr_Main.{main_6}4_496")
  "idr_Main.{main_6}2_497" <- store "idr_Main.{main_6}2_val_414"
  "idr_Main.{main_6}3_val_498" <- pure (CGrString #"\"")
  "idr_Main.{main_6}3_499" <- store "idr_Main.{main_6}3_val_498"
  "idr_Main.{main_6}2_val" <- idr_Prelude.Show.showLitString "idr_Main.{main_6}2_497" "idr_Main.{main_6}3_499"
  "idr_Main.{main_6}2_500" <- store "idr_Main.{main_6}2_val"
  idris_str_cons "idr_Main.{main_6}1" "idr_Main.{main_6}2_500"

"idr_Main.{main_7}" "idr_Main.{main_7}0" =
  "idr_Main.{main_7}0_val" <- fetch "idr_Main.{main_7}0"
  -- LINT: case has non-covered alternative CErased
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  -- LINT: case has non-covered alternative Cidr_Builtins.MkPair
  -- LINT: case has non-covered alternative Cidr_Data.Vect.::
  -- LINT: case has non-covered alternative Cidr_Data.Vect.Nil
  -- LINT: case has non-covered alternative Cidr_MkUnit
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.False
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.True
  -- LINT: case has non-covered alternative Cidr_Prelude.List.::
  -- LINT: case has non-covered alternative Cidr_Prelude.List.Nil
  -- LINT: case has non-covered alternative C"idr_{U_Main.countdowns_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.readVect_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_0}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{readNumber_8}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_24}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_25}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.getLine'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.printLn'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"
  case "idr_Main.{main_7}0_val" of
    (Cidr_Builtins.MkDPair "idr_Main.{main_7}1" "idr_Main.{main_7}2") ->
      "idr_Main.{main_7}3_val" <- pure (CGrString #"(")
      "idr_Main.{main_7}3" <- store "idr_Main.{main_7}3_val"
      "idr_Main.{main_7}4_val_502" <- pure (CErased)
      "idr_Main.{main_7}4" <- store "idr_Main.{main_7}4_val_502"
      "idr_Main.{main_7}5_val" <- pure (C"idr_{U_prim__toStrBigInt_1}")
      "idr_Main.{main_7}5" <- store "idr_Main.{main_7}5_val"
      "idr_Main.{main_7}6_val" <- pure (Cidr_Prelude.Show.Open)
      "idr_Main.{main_7}6" <- store "idr_Main.{main_7}6_val"
      "idr_Main.{main_7}4_val_501" <- idr_Prelude.Show.primNumShow "idr_Main.{main_7}4" "idr_Main.{main_7}5" "idr_Main.{main_7}6" "idr_Main.{main_7}1"
      "idr_Main.{main_7}4_503" <- store "idr_Main.{main_7}4_val_501"
      "idr_Main.{main_7}5_val_505" <- pure (CGrString #" ** ")
      "idr_Main.{main_7}5_506" <- store "idr_Main.{main_7}5_val_505"
      "idr_Main.{main_7}6_val_509" <- pure (CErased)
      "idr_Main.{main_7}6_510" <- store "idr_Main.{main_7}6_val_509"
      "idr_Main.{main_7}7_val" <- pure (CErased)
      "idr_Main.{main_7}7" <- store "idr_Main.{main_7}7_val"
      "idr_Main.{main_7}8_val" <- pure (C"idr_{U_Main.{main_6}_1}")
      "idr_Main.{main_7}8" <- store "idr_Main.{main_7}8_val"
      "idr_Main.{main_7}6_val_508" <- "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0" "idr_Main.{main_7}6_510" "idr_Main.{main_7}7" "idr_Main.{main_7}8" "idr_Main.{main_7}2"
      "idr_Main.{main_7}6_511" <- store "idr_Main.{main_7}6_val_508"
      "idr_Main.{main_7}7_val_512" <- pure (CGrString #")")
      "idr_Main.{main_7}7_513" <- store "idr_Main.{main_7}7_val_512"
      "idr_Main.{main_7}6_val_507" <- idris_str_concat "idr_Main.{main_7}6_511" "idr_Main.{main_7}7_513"
      "idr_Main.{main_7}6_514" <- store "idr_Main.{main_7}6_val_507"
      "idr_Main.{main_7}5_val_504" <- idris_str_concat "idr_Main.{main_7}5_506" "idr_Main.{main_7}6_514"
      "idr_Main.{main_7}5_515" <- store "idr_Main.{main_7}5_val_504"
      "idr_Main.{main_7}4_val" <- idris_str_concat "idr_Main.{main_7}4_503" "idr_Main.{main_7}5_515"
      "idr_Main.{main_7}4_516" <- store "idr_Main.{main_7}4_val"
      idris_str_concat "idr_Main.{main_7}3" "idr_Main.{main_7}4_516"

"idr_Main.{readNumber_8}" "idr_Main.{readNumber_8}0" "idr_Main.{readNumber_8}1" =
  "idr_Main.{readNumber_8}0_val" <- fetch "idr_Main.{readNumber_8}0"
  -- LINT: case has non-covered alternative CErased
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  -- LINT: case has non-covered alternative Cidr_Builtins.MkDPair
  -- LINT: case has non-covered alternative Cidr_Builtins.MkPair
  -- LINT: case has non-covered alternative Cidr_Data.Vect.::
  -- LINT: case has non-covered alternative Cidr_Data.Vect.Nil
  -- LINT: case has non-covered alternative Cidr_MkUnit
  -- LINT: case has non-covered alternative Cidr_Prelude.List.::
  -- LINT: case has non-covered alternative Cidr_Prelude.List.Nil
  -- LINT: case has non-covered alternative C"idr_{U_Main.countdowns_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.readVect_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_0}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{readNumber_8}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_24}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_25}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.getLine'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.printLn'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"
  case "idr_Main.{readNumber_8}0_val" of
    (Cidr_Prelude.Bool.False) ->
      fetch "idr_Main.{readNumber_8}0"
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Chars.isDigit "idr_Main.{readNumber_8}1"

"idr_Prelude.Show.{showLitChar_9}" "idr_Prelude.Show.{showLitChar_9}0" =
  "idr_Prelude.Show.{showLitChar_9}1_val" <- pure (CGrString #"\\a")
  "idr_Prelude.Show.{showLitChar_9}1" <- store "idr_Prelude.Show.{showLitChar_9}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_9}1" "idr_Prelude.Show.{showLitChar_9}0"

"idr_Prelude.Show.{showLitChar_10}" "idr_Prelude.Show.{showLitChar_10}0" =
  "idr_Prelude.Show.{showLitChar_10}1_val" <- pure (CGrString #"\\b")
  "idr_Prelude.Show.{showLitChar_10}1" <- store "idr_Prelude.Show.{showLitChar_10}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_10}1" "idr_Prelude.Show.{showLitChar_10}0"

"idr_Prelude.Show.{showLitChar_11}" "idr_Prelude.Show.{showLitChar_11}0" =
  "idr_Prelude.Show.{showLitChar_11}1_val" <- pure (CGrString #"\\t")
  "idr_Prelude.Show.{showLitChar_11}1" <- store "idr_Prelude.Show.{showLitChar_11}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_11}1" "idr_Prelude.Show.{showLitChar_11}0"

"idr_Prelude.Show.{showLitChar_12}" "idr_Prelude.Show.{showLitChar_12}0" =
  "idr_Prelude.Show.{showLitChar_12}1_val" <- pure (CGrString #"\\n")
  "idr_Prelude.Show.{showLitChar_12}1" <- store "idr_Prelude.Show.{showLitChar_12}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_12}1" "idr_Prelude.Show.{showLitChar_12}0"

"idr_Prelude.Show.{showLitChar_13}" "idr_Prelude.Show.{showLitChar_13}0" =
  "idr_Prelude.Show.{showLitChar_13}1_val" <- pure (CGrString #"\\v")
  "idr_Prelude.Show.{showLitChar_13}1" <- store "idr_Prelude.Show.{showLitChar_13}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_13}1" "idr_Prelude.Show.{showLitChar_13}0"

"idr_Prelude.Show.{showLitChar_14}" "idr_Prelude.Show.{showLitChar_14}0" =
  "idr_Prelude.Show.{showLitChar_14}1_val" <- pure (CGrString #"\\f")
  "idr_Prelude.Show.{showLitChar_14}1" <- store "idr_Prelude.Show.{showLitChar_14}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_14}1" "idr_Prelude.Show.{showLitChar_14}0"

"idr_Prelude.Show.{showLitChar_15}" "idr_Prelude.Show.{showLitChar_15}0" =
  "idr_Prelude.Show.{showLitChar_15}1_val" <- pure (CGrString #"\\r")
  "idr_Prelude.Show.{showLitChar_15}1" <- store "idr_Prelude.Show.{showLitChar_15}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_15}1" "idr_Prelude.Show.{showLitChar_15}0"

"idr_Prelude.Show.{showLitChar_16}" "idr_Prelude.Show.{showLitChar_16}0" =
  "idr_Prelude.Show.{showLitChar_16}1_val_517" <- pure (CGrInt 72)
  "idr_Prelude.Show.{showLitChar_16}1" <- store "idr_Prelude.Show.{showLitChar_16}1_val_517"
  "idr_Prelude.Show.{showLitChar_16}1_val" <- idris_int_eq "idr_Prelude.Show.{showLitChar_16}0" "idr_Prelude.Show.{showLitChar_16}1"
  "idr_Prelude.Show.{showLitChar_16}1_518" <- store "idr_Prelude.Show.{showLitChar_16}1_val"
  "idr_Prelude.Show.{showLitChar_16}1_val_519" <- fetch "idr_Prelude.Show.{showLitChar_16}1_518"
  case "idr_Prelude.Show.{showLitChar_16}1_val_519" of
    (CGrInt "idr_Prelude.Show.{showLitChar_16}_cpat_LInt64_0") ->
      case "idr_Prelude.Show.{showLitChar_16}_cpat_LInt64_0" of
        0 ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)

"idr_Prelude.Show.{showLitChar_17}" "idr_Prelude.Show.{showLitChar_17}0" =
  "idr_Prelude.Show.{showLitChar_17}1_val" <- pure (CGrString #"\\\\")
  "idr_Prelude.Show.{showLitChar_17}1" <- store "idr_Prelude.Show.{showLitChar_17}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_17}1" "idr_Prelude.Show.{showLitChar_17}0"

"idr_Prelude.Show.{showLitChar_18}" "idr_Prelude.Show.{showLitChar_18}0" =
  "idr_Prelude.Show.{showLitChar_18}1_val" <- pure (CGrString #"\\DEL")
  "idr_Prelude.Show.{showLitChar_18}1" <- store "idr_Prelude.Show.{showLitChar_18}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_18}1" "idr_Prelude.Show.{showLitChar_18}0"

"idr_Prelude.Show.{showLitChar_19}" "idr_Prelude.Show.{showLitChar_19}0" "idr_Prelude.Show.{showLitChar_19}1" =
  "idr_Prelude.Show.{showLitChar_19}2_val" <- pure (CGrInt 92)
  "idr_Prelude.Show.{showLitChar_19}2" <- store "idr_Prelude.Show.{showLitChar_19}2_val"
  "idr_Prelude.Show.{showLitChar_19}3_val" <- idris_str_concat "idr_Prelude.Show.{showLitChar_19}0" "idr_Prelude.Show.{showLitChar_19}1"
  "idr_Prelude.Show.{showLitChar_19}3" <- store "idr_Prelude.Show.{showLitChar_19}3_val"
  idr_prim__strCons "idr_Prelude.Show.{showLitChar_19}2" "idr_Prelude.Show.{showLitChar_19}3"

"idr_Prelude.Show.{showLitChar_20}" "idr_Prelude.Show.{showLitChar_20}0" "idr_Prelude.Show.{showLitChar_20}1" =
  "idr_Prelude.Show.{showLitChar_20}2_val" <- pure (CGrInt 92)
  "idr_Prelude.Show.{showLitChar_20}2" <- store "idr_Prelude.Show.{showLitChar_20}2_val"
  "idr_Prelude.Show.{showLitChar_20}3_val_520" <- pure (C"idr_{U_Prelude.Chars.isDigit_1}")
  "idr_Prelude.Show.{showLitChar_20}3" <- store "idr_Prelude.Show.{showLitChar_20}3_val_520"
  "idr_Prelude.Show.{showLitChar_20}4_val_521" <- pure (CErased)
  "idr_Prelude.Show.{showLitChar_20}4" <- store "idr_Prelude.Show.{showLitChar_20}4_val_521"
  "idr_Prelude.Show.{showLitChar_20}5_val" <- pure (C"idr_{U_prim__toStrInt_1}")
  "idr_Prelude.Show.{showLitChar_20}5" <- store "idr_Prelude.Show.{showLitChar_20}5_val"
  "idr_Prelude.Show.{showLitChar_20}6_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Prelude.Show.{showLitChar_20}6" <- store "idr_Prelude.Show.{showLitChar_20}6_val"
  "idr_Prelude.Show.{showLitChar_20}7_val" <- idris_ch_int "idr_Prelude.Show.{showLitChar_20}0"
  "idr_Prelude.Show.{showLitChar_20}7" <- store "idr_Prelude.Show.{showLitChar_20}7_val"
  "idr_Prelude.Show.{showLitChar_20}4_val" <- idr_Prelude.Show.primNumShow "idr_Prelude.Show.{showLitChar_20}4" "idr_Prelude.Show.{showLitChar_20}5" "idr_Prelude.Show.{showLitChar_20}6" "idr_Prelude.Show.{showLitChar_20}7"
  "idr_Prelude.Show.{showLitChar_20}4_522" <- store "idr_Prelude.Show.{showLitChar_20}4_val"
  "idr_Prelude.Show.{showLitChar_20}3_val" <- idr_Prelude.Show.protectEsc "idr_Prelude.Show.{showLitChar_20}3" "idr_Prelude.Show.{showLitChar_20}4_522" "idr_Prelude.Show.{showLitChar_20}1"
  "idr_Prelude.Show.{showLitChar_20}3_523" <- store "idr_Prelude.Show.{showLitChar_20}3_val"
  idr_prim__strCons "idr_Prelude.Show.{showLitChar_20}2" "idr_Prelude.Show.{showLitChar_20}3_523"

"idr_Main.{zipInputs_21}" "idr_Main.{zipInputs_21}0" =
  "idr_Main.{zipInputs_21}1_val_524" <- pure (CGrString #"Enter the second vector (blank line to end): \n")
  "idr_Main.{zipInputs_21}1" <- store "idr_Main.{zipInputs_21}1_val_524"
  "idr_Main.{zipInputs_21}1_val" <- idris_write_str "idr_Main.{zipInputs_21}0" "idr_Main.{zipInputs_21}1"
  "idr_Main.{zipInputs_21}1_525" <- store "idr_Main.{zipInputs_21}1_val"
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

"idr_Main.{zipInputs_22}" "idr_Main.{zipInputs_22}0" =
  "idr_Main.{zipInputs_22}0_val" <- fetch "idr_Main.{zipInputs_22}0"
  -- LINT: case has non-covered alternative CErased
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  -- LINT: case has non-covered alternative Cidr_Builtins.MkDPair
  -- LINT: case has non-covered alternative Cidr_Data.Vect.::
  -- LINT: case has non-covered alternative Cidr_Data.Vect.Nil
  -- LINT: case has non-covered alternative Cidr_MkUnit
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.False
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.True
  -- LINT: case has non-covered alternative Cidr_Prelude.List.::
  -- LINT: case has non-covered alternative Cidr_Prelude.List.Nil
  -- LINT: case has non-covered alternative C"idr_{U_Main.countdowns_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.readVect_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_0}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{readNumber_8}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_24}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_25}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.getLine'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.printLn'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"
  case "idr_Main.{zipInputs_22}0_val" of
    (Cidr_Builtins.MkPair "idr_Main.{zipInputs_22}1" "idr_Main.{zipInputs_22}2") ->
      "idr_Main.{zipInputs_22}3_val" <- pure (CGrString #"(")
      "idr_Main.{zipInputs_22}3" <- store "idr_Main.{zipInputs_22}3_val"
      "idr_Main.{zipInputs_22}4_val_527" <- pure (CGrInt 34)
      "idr_Main.{zipInputs_22}4" <- store "idr_Main.{zipInputs_22}4_val_527"
      "idr_Main.{zipInputs_22}5_val_532" <- pure (CGrString #"")
      "idr_Main.{zipInputs_22}5" <- store "idr_Main.{zipInputs_22}5_val_532"
      "idr_Main.{zipInputs_22}5_val_531" <- idris_str_eq "idr_Main.{zipInputs_22}1" "idr_Main.{zipInputs_22}5"
      "idr_Main.{zipInputs_22}5_533" <- store "idr_Main.{zipInputs_22}5_val_531"
      "idr_Main.{zipInputs_22}5_val_534" <- fetch "idr_Main.{zipInputs_22}5_533"
      "idr_Main.{zipInputs_22}5_val_530" <- case "idr_Main.{zipInputs_22}5_val_534" of
        (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0") ->
          case "idr_Main.{zipInputs_22}_cpat_LInt64_0" of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Main.{zipInputs_22}5_535" <- store "idr_Main.{zipInputs_22}5_val_530"
      "idr_Main.{zipInputs_22}6_val" <- pure (Cidr_Prelude.Bool.True)
      "idr_Main.{zipInputs_22}6" <- store "idr_Main.{zipInputs_22}6_val"
      "idr_Main.{zipInputs_22}5_val_529" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}5_535" "idr_Main.{zipInputs_22}6"
      "idr_Main.{zipInputs_22}5_536" <- store "idr_Main.{zipInputs_22}5_val_529"
      "idr_Main.{zipInputs_22}5_val_537" <- fetch "idr_Main.{zipInputs_22}5_536"
      "idr_Main.{zipInputs_22}5_val_528" <- case "idr_Main.{zipInputs_22}5_val_537" of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
        (Cidr_Prelude.Basics.Yes) ->
          "idr_Main.{zipInputs_22}6_val_538" <- idris_str_head "idr_Main.{zipInputs_22}1"
          "idr_Main.{zipInputs_22}6_539" <- store "idr_Main.{zipInputs_22}6_val_538"
          "idr_Main.{zipInputs_22}7_val_543" <- idris_str_tail "idr_Main.{zipInputs_22}1"
          "idr_Main.{zipInputs_22}7" <- store "idr_Main.{zipInputs_22}7_val_543"
          "idr_Main.{zipInputs_22}8_val" <- pure (CGrString #"")
          "idr_Main.{zipInputs_22}8" <- store "idr_Main.{zipInputs_22}8_val"
          "idr_Main.{zipInputs_22}7_val_542" <- idris_str_eq "idr_Main.{zipInputs_22}7" "idr_Main.{zipInputs_22}8"
          "idr_Main.{zipInputs_22}7_544" <- store "idr_Main.{zipInputs_22}7_val_542"
          "idr_Main.{zipInputs_22}7_val_545" <- fetch "idr_Main.{zipInputs_22}7_544"
          "idr_Main.{zipInputs_22}7_val_541" <- case "idr_Main.{zipInputs_22}7_val_545" of
            (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_546") ->
              case "idr_Main.{zipInputs_22}_cpat_LInt64_0_546" of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Main.{zipInputs_22}7_547" <- store "idr_Main.{zipInputs_22}7_val_541"
          "idr_Main.{zipInputs_22}8_val_548" <- pure (Cidr_Prelude.Bool.True)
          "idr_Main.{zipInputs_22}8_549" <- store "idr_Main.{zipInputs_22}8_val_548"
          "idr_Main.{zipInputs_22}7_val_540" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}7_547" "idr_Main.{zipInputs_22}8_549"
          "idr_Main.{zipInputs_22}7_550" <- store "idr_Main.{zipInputs_22}7_val_540"
          "idr_Main.{zipInputs_22}7_val_551" <- fetch "idr_Main.{zipInputs_22}7_550"
          "idr_Main.{zipInputs_22}7_val" <- case "idr_Main.{zipInputs_22}7_val_551" of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
            (Cidr_Prelude.Basics.Yes) ->
              "idr_Main.{zipInputs_22}8_val_553" <- idris_str_tail "idr_Main.{zipInputs_22}1"
              "idr_Main.{zipInputs_22}8_554" <- store "idr_Main.{zipInputs_22}8_val_553"
              "idr_Main.{zipInputs_22}8_val_552" <- idris_str_head "idr_Main.{zipInputs_22}8_554"
              "idr_Main.{zipInputs_22}8_555" <- store "idr_Main.{zipInputs_22}8_val_552"
              "idr_Main.{zipInputs_22}9_val_560" <- idris_str_tail "idr_Main.{zipInputs_22}1"
              "idr_Main.{zipInputs_22}9" <- store "idr_Main.{zipInputs_22}9_val_560"
              "idr_Main.{zipInputs_22}9_val_559" <- idris_str_tail "idr_Main.{zipInputs_22}9"
              "idr_Main.{zipInputs_22}9_561" <- store "idr_Main.{zipInputs_22}9_val_559"
              "idr_Main.{zipInputs_22}10_val" <- pure (CGrString #"")
              "idr_Main.{zipInputs_22}10" <- store "idr_Main.{zipInputs_22}10_val"
              "idr_Main.{zipInputs_22}9_val_558" <- idris_str_eq "idr_Main.{zipInputs_22}9_561" "idr_Main.{zipInputs_22}10"
              "idr_Main.{zipInputs_22}9_562" <- store "idr_Main.{zipInputs_22}9_val_558"
              "idr_Main.{zipInputs_22}9_val_563" <- fetch "idr_Main.{zipInputs_22}9_562"
              "idr_Main.{zipInputs_22}9_val_557" <- case "idr_Main.{zipInputs_22}9_val_563" of
                (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_564") ->
                  case "idr_Main.{zipInputs_22}_cpat_LInt64_0_564" of
                    0 ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              "idr_Main.{zipInputs_22}9_565" <- store "idr_Main.{zipInputs_22}9_val_557"
              "idr_Main.{zipInputs_22}10_val_566" <- pure (Cidr_Prelude.Bool.True)
              "idr_Main.{zipInputs_22}10_567" <- store "idr_Main.{zipInputs_22}10_val_566"
              "idr_Main.{zipInputs_22}9_val_556" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}9_565" "idr_Main.{zipInputs_22}10_567"
              "idr_Main.{zipInputs_22}9_568" <- store "idr_Main.{zipInputs_22}9_val_556"
              "idr_Main.{zipInputs_22}9_val_569" <- fetch "idr_Main.{zipInputs_22}9_568"
              "idr_Main.{zipInputs_22}9_val" <- case "idr_Main.{zipInputs_22}9_val_569" of
                (Cidr_Prelude.Basics.No) ->
                  pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
                (Cidr_Prelude.Basics.Yes) ->
                  "idr_Main.{zipInputs_22}10_val_572" <- idris_str_tail "idr_Main.{zipInputs_22}1"
                  "idr_Main.{zipInputs_22}10_573" <- store "idr_Main.{zipInputs_22}10_val_572"
                  "idr_Main.{zipInputs_22}10_val_571" <- idris_str_tail "idr_Main.{zipInputs_22}10_573"
                  "idr_Main.{zipInputs_22}10_574" <- store "idr_Main.{zipInputs_22}10_val_571"
                  "idr_Main.{zipInputs_22}10_val_570" <- idris_str_head "idr_Main.{zipInputs_22}10_574"
                  "idr_Main.{zipInputs_22}10_575" <- store "idr_Main.{zipInputs_22}10_val_570"
                  "idr_Main.{zipInputs_22}11_val_581" <- idris_str_tail "idr_Main.{zipInputs_22}1"
                  "idr_Main.{zipInputs_22}11" <- store "idr_Main.{zipInputs_22}11_val_581"
                  "idr_Main.{zipInputs_22}11_val_580" <- idris_str_tail "idr_Main.{zipInputs_22}11"
                  "idr_Main.{zipInputs_22}11_582" <- store "idr_Main.{zipInputs_22}11_val_580"
                  "idr_Main.{zipInputs_22}11_val_579" <- idris_str_tail "idr_Main.{zipInputs_22}11_582"
                  "idr_Main.{zipInputs_22}11_583" <- store "idr_Main.{zipInputs_22}11_val_579"
                  "idr_Main.{zipInputs_22}12_val" <- pure (CGrString #"")
                  "idr_Main.{zipInputs_22}12" <- store "idr_Main.{zipInputs_22}12_val"
                  "idr_Main.{zipInputs_22}11_val_578" <- idris_str_eq "idr_Main.{zipInputs_22}11_583" "idr_Main.{zipInputs_22}12"
                  "idr_Main.{zipInputs_22}11_584" <- store "idr_Main.{zipInputs_22}11_val_578"
                  "idr_Main.{zipInputs_22}11_val_585" <- fetch "idr_Main.{zipInputs_22}11_584"
                  "idr_Main.{zipInputs_22}11_val_577" <- case "idr_Main.{zipInputs_22}11_val_585" of
                    (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_586") ->
                      case "idr_Main.{zipInputs_22}_cpat_LInt64_0_586" of
                        0 ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  "idr_Main.{zipInputs_22}11_587" <- store "idr_Main.{zipInputs_22}11_val_577"
                  "idr_Main.{zipInputs_22}12_val_588" <- pure (Cidr_Prelude.Bool.True)
                  "idr_Main.{zipInputs_22}12_589" <- store "idr_Main.{zipInputs_22}12_val_588"
                  "idr_Main.{zipInputs_22}11_val_576" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}11_587" "idr_Main.{zipInputs_22}12_589"
                  "idr_Main.{zipInputs_22}11_590" <- store "idr_Main.{zipInputs_22}11_val_576"
                  "idr_Main.{zipInputs_22}11_val_591" <- fetch "idr_Main.{zipInputs_22}11_590"
                  "idr_Main.{zipInputs_22}11_val" <- case "idr_Main.{zipInputs_22}11_val_591" of
                    (Cidr_Prelude.Basics.No) ->
                      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
                    (Cidr_Prelude.Basics.Yes) ->
                      "idr_Main.{zipInputs_22}12_val_595" <- idris_str_tail "idr_Main.{zipInputs_22}1"
                      "idr_Main.{zipInputs_22}12_596" <- store "idr_Main.{zipInputs_22}12_val_595"
                      "idr_Main.{zipInputs_22}12_val_594" <- idris_str_tail "idr_Main.{zipInputs_22}12_596"
                      "idr_Main.{zipInputs_22}12_597" <- store "idr_Main.{zipInputs_22}12_val_594"
                      "idr_Main.{zipInputs_22}12_val_593" <- idris_str_tail "idr_Main.{zipInputs_22}12_597"
                      "idr_Main.{zipInputs_22}12_598" <- store "idr_Main.{zipInputs_22}12_val_593"
                      "idr_Main.{zipInputs_22}12_val_592" <- idris_str_head "idr_Main.{zipInputs_22}12_598"
                      "idr_Main.{zipInputs_22}12_599" <- store "idr_Main.{zipInputs_22}12_val_592"
                      "idr_Main.{zipInputs_22}13_val_606" <- idris_str_tail "idr_Main.{zipInputs_22}1"
                      "idr_Main.{zipInputs_22}13" <- store "idr_Main.{zipInputs_22}13_val_606"
                      "idr_Main.{zipInputs_22}13_val_605" <- idris_str_tail "idr_Main.{zipInputs_22}13"
                      "idr_Main.{zipInputs_22}13_607" <- store "idr_Main.{zipInputs_22}13_val_605"
                      "idr_Main.{zipInputs_22}13_val_604" <- idris_str_tail "idr_Main.{zipInputs_22}13_607"
                      "idr_Main.{zipInputs_22}13_608" <- store "idr_Main.{zipInputs_22}13_val_604"
                      "idr_Main.{zipInputs_22}13_val_603" <- idris_str_tail "idr_Main.{zipInputs_22}13_608"
                      "idr_Main.{zipInputs_22}13_609" <- store "idr_Main.{zipInputs_22}13_val_603"
                      "idr_Main.{zipInputs_22}14_val" <- pure (CGrString #"")
                      "idr_Main.{zipInputs_22}14" <- store "idr_Main.{zipInputs_22}14_val"
                      "idr_Main.{zipInputs_22}13_val_602" <- idris_str_eq "idr_Main.{zipInputs_22}13_609" "idr_Main.{zipInputs_22}14"
                      "idr_Main.{zipInputs_22}13_610" <- store "idr_Main.{zipInputs_22}13_val_602"
                      "idr_Main.{zipInputs_22}13_val_611" <- fetch "idr_Main.{zipInputs_22}13_610"
                      "idr_Main.{zipInputs_22}13_val_601" <- case "idr_Main.{zipInputs_22}13_val_611" of
                        (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_612") ->
                          case "idr_Main.{zipInputs_22}_cpat_LInt64_0_612" of
                            0 ->
                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      "idr_Main.{zipInputs_22}13_613" <- store "idr_Main.{zipInputs_22}13_val_601"
                      "idr_Main.{zipInputs_22}14_val_614" <- pure (Cidr_Prelude.Bool.True)
                      "idr_Main.{zipInputs_22}14_615" <- store "idr_Main.{zipInputs_22}14_val_614"
                      "idr_Main.{zipInputs_22}13_val_600" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}13_613" "idr_Main.{zipInputs_22}14_615"
                      "idr_Main.{zipInputs_22}13_616" <- store "idr_Main.{zipInputs_22}13_val_600"
                      "idr_Main.{zipInputs_22}13_val_617" <- fetch "idr_Main.{zipInputs_22}13_616"
                      "idr_Main.{zipInputs_22}13_val" <- case "idr_Main.{zipInputs_22}13_val_617" of
                        (Cidr_Prelude.Basics.No) ->
                          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
                        (Cidr_Prelude.Basics.Yes) ->
                          "idr_Main.{zipInputs_22}14_val_622" <- idris_str_tail "idr_Main.{zipInputs_22}1"
                          "idr_Main.{zipInputs_22}14_623" <- store "idr_Main.{zipInputs_22}14_val_622"
                          "idr_Main.{zipInputs_22}14_val_621" <- idris_str_tail "idr_Main.{zipInputs_22}14_623"
                          "idr_Main.{zipInputs_22}14_624" <- store "idr_Main.{zipInputs_22}14_val_621"
                          "idr_Main.{zipInputs_22}14_val_620" <- idris_str_tail "idr_Main.{zipInputs_22}14_624"
                          "idr_Main.{zipInputs_22}14_625" <- store "idr_Main.{zipInputs_22}14_val_620"
                          "idr_Main.{zipInputs_22}14_val_619" <- idris_str_tail "idr_Main.{zipInputs_22}14_625"
                          "idr_Main.{zipInputs_22}14_626" <- store "idr_Main.{zipInputs_22}14_val_619"
                          "idr_Main.{zipInputs_22}14_val_618" <- idris_str_head "idr_Main.{zipInputs_22}14_626"
                          "idr_Main.{zipInputs_22}14_627" <- store "idr_Main.{zipInputs_22}14_val_618"
                          "idr_Main.{zipInputs_22}15_val_628" <- pure (CErased)
                          "idr_Main.{zipInputs_22}15" <- store "idr_Main.{zipInputs_22}15_val_628"
                          "idr_Main.{zipInputs_22}16_val_636" <- idris_str_tail "idr_Main.{zipInputs_22}1"
                          "idr_Main.{zipInputs_22}16" <- store "idr_Main.{zipInputs_22}16_val_636"
                          "idr_Main.{zipInputs_22}16_val_635" <- idris_str_tail "idr_Main.{zipInputs_22}16"
                          "idr_Main.{zipInputs_22}16_637" <- store "idr_Main.{zipInputs_22}16_val_635"
                          "idr_Main.{zipInputs_22}16_val_634" <- idris_str_tail "idr_Main.{zipInputs_22}16_637"
                          "idr_Main.{zipInputs_22}16_638" <- store "idr_Main.{zipInputs_22}16_val_634"
                          "idr_Main.{zipInputs_22}16_val_633" <- idris_str_tail "idr_Main.{zipInputs_22}16_638"
                          "idr_Main.{zipInputs_22}16_639" <- store "idr_Main.{zipInputs_22}16_val_633"
                          "idr_Main.{zipInputs_22}16_val_632" <- idris_str_tail "idr_Main.{zipInputs_22}16_639"
                          "idr_Main.{zipInputs_22}16_640" <- store "idr_Main.{zipInputs_22}16_val_632"
                          "idr_Main.{zipInputs_22}17_val" <- pure (CGrString #"")
                          "idr_Main.{zipInputs_22}17" <- store "idr_Main.{zipInputs_22}17_val"
                          "idr_Main.{zipInputs_22}16_val_631" <- idris_str_eq "idr_Main.{zipInputs_22}16_640" "idr_Main.{zipInputs_22}17"
                          "idr_Main.{zipInputs_22}16_641" <- store "idr_Main.{zipInputs_22}16_val_631"
                          "idr_Main.{zipInputs_22}16_val_642" <- fetch "idr_Main.{zipInputs_22}16_641"
                          "idr_Main.{zipInputs_22}16_val_630" <- case "idr_Main.{zipInputs_22}16_val_642" of
                            (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_643") ->
                              case "idr_Main.{zipInputs_22}_cpat_LInt64_0_643" of
                                0 ->
                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          "idr_Main.{zipInputs_22}16_644" <- store "idr_Main.{zipInputs_22}16_val_630"
                          "idr_Main.{zipInputs_22}17_val_645" <- pure (Cidr_Prelude.Bool.True)
                          "idr_Main.{zipInputs_22}17_646" <- store "idr_Main.{zipInputs_22}17_val_645"
                          "idr_Main.{zipInputs_22}16_val_629" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}16_644" "idr_Main.{zipInputs_22}17_646"
                          "idr_Main.{zipInputs_22}16_647" <- store "idr_Main.{zipInputs_22}16_val_629"
                          "idr_Main.{zipInputs_22}16_val_648" <- fetch "idr_Main.{zipInputs_22}16_647"
                          "idr_Main.{zipInputs_22}16_val" <- case "idr_Main.{zipInputs_22}16_val_648" of
                            (Cidr_Prelude.Basics.No) ->
                              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                            (Cidr_Prelude.Basics.Yes) ->
                              "idr_Main.{zipInputs_22}17_val_654" <- idris_str_tail "idr_Main.{zipInputs_22}1"
                              "idr_Main.{zipInputs_22}17_655" <- store "idr_Main.{zipInputs_22}17_val_654"
                              "idr_Main.{zipInputs_22}17_val_653" <- idris_str_tail "idr_Main.{zipInputs_22}17_655"
                              "idr_Main.{zipInputs_22}17_656" <- store "idr_Main.{zipInputs_22}17_val_653"
                              "idr_Main.{zipInputs_22}17_val_652" <- idris_str_tail "idr_Main.{zipInputs_22}17_656"
                              "idr_Main.{zipInputs_22}17_657" <- store "idr_Main.{zipInputs_22}17_val_652"
                              "idr_Main.{zipInputs_22}17_val_651" <- idris_str_tail "idr_Main.{zipInputs_22}17_657"
                              "idr_Main.{zipInputs_22}17_658" <- store "idr_Main.{zipInputs_22}17_val_651"
                              "idr_Main.{zipInputs_22}17_val_650" <- idris_str_tail "idr_Main.{zipInputs_22}17_658"
                              "idr_Main.{zipInputs_22}17_659" <- store "idr_Main.{zipInputs_22}17_val_650"
                              "idr_Main.{zipInputs_22}17_val_649" <- idris_str_head "idr_Main.{zipInputs_22}17_659"
                              "idr_Main.{zipInputs_22}17_660" <- store "idr_Main.{zipInputs_22}17_val_649"
                              "idr_Main.{zipInputs_22}18_val_665" <- idris_str_tail "idr_Main.{zipInputs_22}1"
                              "idr_Main.{zipInputs_22}18" <- store "idr_Main.{zipInputs_22}18_val_665"
                              "idr_Main.{zipInputs_22}18_val_664" <- idris_str_tail "idr_Main.{zipInputs_22}18"
                              "idr_Main.{zipInputs_22}18_666" <- store "idr_Main.{zipInputs_22}18_val_664"
                              "idr_Main.{zipInputs_22}18_val_663" <- idris_str_tail "idr_Main.{zipInputs_22}18_666"
                              "idr_Main.{zipInputs_22}18_667" <- store "idr_Main.{zipInputs_22}18_val_663"
                              "idr_Main.{zipInputs_22}18_val_662" <- idris_str_tail "idr_Main.{zipInputs_22}18_667"
                              "idr_Main.{zipInputs_22}18_668" <- store "idr_Main.{zipInputs_22}18_val_662"
                              "idr_Main.{zipInputs_22}18_val_661" <- idris_str_tail "idr_Main.{zipInputs_22}18_668"
                              "idr_Main.{zipInputs_22}18_669" <- store "idr_Main.{zipInputs_22}18_val_661"
                              "idr_Main.{zipInputs_22}18_val" <- idris_str_tail "idr_Main.{zipInputs_22}18_669"
                              "idr_Main.{zipInputs_22}18_670" <- store "idr_Main.{zipInputs_22}18_val"
                              pure (Cidr_Prelude.Strings.StrCons "idr_Main.{zipInputs_22}17_660" "idr_Main.{zipInputs_22}18_670") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons "idr_Main.{zipInputs_22}17_660" "idr_Main.{zipInputs_22}18_670")
                          "idr_Main.{zipInputs_22}16_671" <- store "idr_Main.{zipInputs_22}16_val"
                          "idr_Main.{zipInputs_22}15_val" <- idr__Prelude.Strings.unpack_with_36 "idr_Main.{zipInputs_22}15" "idr_Main.{zipInputs_22}16_671"
                          "idr_Main.{zipInputs_22}15_672" <- store "idr_Main.{zipInputs_22}15_val"
                          pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}14_627" "idr_Main.{zipInputs_22}15_672") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}14_627" "idr_Main.{zipInputs_22}15_672")
                      "idr_Main.{zipInputs_22}13_673" <- store "idr_Main.{zipInputs_22}13_val"
                      pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}12_599" "idr_Main.{zipInputs_22}13_673") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}12_599" "idr_Main.{zipInputs_22}13_673")
                  "idr_Main.{zipInputs_22}11_674" <- store "idr_Main.{zipInputs_22}11_val"
                  pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}10_575" "idr_Main.{zipInputs_22}11_674") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}10_575" "idr_Main.{zipInputs_22}11_674")
              "idr_Main.{zipInputs_22}9_675" <- store "idr_Main.{zipInputs_22}9_val"
              pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}8_555" "idr_Main.{zipInputs_22}9_675") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}8_555" "idr_Main.{zipInputs_22}9_675")
          "idr_Main.{zipInputs_22}7_676" <- store "idr_Main.{zipInputs_22}7_val"
          pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}6_539" "idr_Main.{zipInputs_22}7_676") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}6_539" "idr_Main.{zipInputs_22}7_676")
      "idr_Main.{zipInputs_22}5_677" <- store "idr_Main.{zipInputs_22}5_val_528"
      "idr_Main.{zipInputs_22}6_val_678" <- pure (CGrString #"\"")
      "idr_Main.{zipInputs_22}6_679" <- store "idr_Main.{zipInputs_22}6_val_678"
      "idr_Main.{zipInputs_22}5_val" <- idr_Prelude.Show.showLitString "idr_Main.{zipInputs_22}5_677" "idr_Main.{zipInputs_22}6_679"
      "idr_Main.{zipInputs_22}5_680" <- store "idr_Main.{zipInputs_22}5_val"
      "idr_Main.{zipInputs_22}4_val_526" <- idris_str_cons "idr_Main.{zipInputs_22}4" "idr_Main.{zipInputs_22}5_680"
      "idr_Main.{zipInputs_22}4_681" <- store "idr_Main.{zipInputs_22}4_val_526"
      "idr_Main.{zipInputs_22}5_val_683" <- pure (CGrString #", ")
      "idr_Main.{zipInputs_22}5_684" <- store "idr_Main.{zipInputs_22}5_val_683"
      "idr_Main.{zipInputs_22}6_val_687" <- pure (CGrInt 34)
      "idr_Main.{zipInputs_22}6_688" <- store "idr_Main.{zipInputs_22}6_val_687"
      "idr_Main.{zipInputs_22}7_val_694" <- pure (CGrString #"")
      "idr_Main.{zipInputs_22}7_695" <- store "idr_Main.{zipInputs_22}7_val_694"
      "idr_Main.{zipInputs_22}7_val_693" <- idris_str_eq "idr_Main.{zipInputs_22}2" "idr_Main.{zipInputs_22}7_695"
      "idr_Main.{zipInputs_22}7_696" <- store "idr_Main.{zipInputs_22}7_val_693"
      "idr_Main.{zipInputs_22}7_val_697" <- fetch "idr_Main.{zipInputs_22}7_696"
      "idr_Main.{zipInputs_22}7_val_692" <- case "idr_Main.{zipInputs_22}7_val_697" of
        (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_698") ->
          case "idr_Main.{zipInputs_22}_cpat_LInt64_0_698" of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Main.{zipInputs_22}7_699" <- store "idr_Main.{zipInputs_22}7_val_692"
      "idr_Main.{zipInputs_22}8_val_700" <- pure (Cidr_Prelude.Bool.True)
      "idr_Main.{zipInputs_22}8_701" <- store "idr_Main.{zipInputs_22}8_val_700"
      "idr_Main.{zipInputs_22}7_val_691" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}7_699" "idr_Main.{zipInputs_22}8_701"
      "idr_Main.{zipInputs_22}7_702" <- store "idr_Main.{zipInputs_22}7_val_691"
      "idr_Main.{zipInputs_22}7_val_703" <- fetch "idr_Main.{zipInputs_22}7_702"
      "idr_Main.{zipInputs_22}7_val_690" <- case "idr_Main.{zipInputs_22}7_val_703" of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
        (Cidr_Prelude.Basics.Yes) ->
          "idr_Main.{zipInputs_22}8_val_704" <- idris_str_head "idr_Main.{zipInputs_22}2"
          "idr_Main.{zipInputs_22}8_705" <- store "idr_Main.{zipInputs_22}8_val_704"
          "idr_Main.{zipInputs_22}9_val_710" <- idris_str_tail "idr_Main.{zipInputs_22}2"
          "idr_Main.{zipInputs_22}9_711" <- store "idr_Main.{zipInputs_22}9_val_710"
          "idr_Main.{zipInputs_22}10_val_712" <- pure (CGrString #"")
          "idr_Main.{zipInputs_22}10_713" <- store "idr_Main.{zipInputs_22}10_val_712"
          "idr_Main.{zipInputs_22}9_val_709" <- idris_str_eq "idr_Main.{zipInputs_22}9_711" "idr_Main.{zipInputs_22}10_713"
          "idr_Main.{zipInputs_22}9_714" <- store "idr_Main.{zipInputs_22}9_val_709"
          "idr_Main.{zipInputs_22}9_val_715" <- fetch "idr_Main.{zipInputs_22}9_714"
          "idr_Main.{zipInputs_22}9_val_708" <- case "idr_Main.{zipInputs_22}9_val_715" of
            (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_716") ->
              case "idr_Main.{zipInputs_22}_cpat_LInt64_0_716" of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Main.{zipInputs_22}9_717" <- store "idr_Main.{zipInputs_22}9_val_708"
          "idr_Main.{zipInputs_22}10_val_718" <- pure (Cidr_Prelude.Bool.True)
          "idr_Main.{zipInputs_22}10_719" <- store "idr_Main.{zipInputs_22}10_val_718"
          "idr_Main.{zipInputs_22}9_val_707" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}9_717" "idr_Main.{zipInputs_22}10_719"
          "idr_Main.{zipInputs_22}9_720" <- store "idr_Main.{zipInputs_22}9_val_707"
          "idr_Main.{zipInputs_22}9_val_721" <- fetch "idr_Main.{zipInputs_22}9_720"
          "idr_Main.{zipInputs_22}9_val_706" <- case "idr_Main.{zipInputs_22}9_val_721" of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
            (Cidr_Prelude.Basics.Yes) ->
              "idr_Main.{zipInputs_22}10_val_723" <- idris_str_tail "idr_Main.{zipInputs_22}2"
              "idr_Main.{zipInputs_22}10_724" <- store "idr_Main.{zipInputs_22}10_val_723"
              "idr_Main.{zipInputs_22}10_val_722" <- idris_str_head "idr_Main.{zipInputs_22}10_724"
              "idr_Main.{zipInputs_22}10_725" <- store "idr_Main.{zipInputs_22}10_val_722"
              "idr_Main.{zipInputs_22}11_val_731" <- idris_str_tail "idr_Main.{zipInputs_22}2"
              "idr_Main.{zipInputs_22}11_732" <- store "idr_Main.{zipInputs_22}11_val_731"
              "idr_Main.{zipInputs_22}11_val_730" <- idris_str_tail "idr_Main.{zipInputs_22}11_732"
              "idr_Main.{zipInputs_22}11_733" <- store "idr_Main.{zipInputs_22}11_val_730"
              "idr_Main.{zipInputs_22}12_val_734" <- pure (CGrString #"")
              "idr_Main.{zipInputs_22}12_735" <- store "idr_Main.{zipInputs_22}12_val_734"
              "idr_Main.{zipInputs_22}11_val_729" <- idris_str_eq "idr_Main.{zipInputs_22}11_733" "idr_Main.{zipInputs_22}12_735"
              "idr_Main.{zipInputs_22}11_736" <- store "idr_Main.{zipInputs_22}11_val_729"
              "idr_Main.{zipInputs_22}11_val_737" <- fetch "idr_Main.{zipInputs_22}11_736"
              "idr_Main.{zipInputs_22}11_val_728" <- case "idr_Main.{zipInputs_22}11_val_737" of
                (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_738") ->
                  case "idr_Main.{zipInputs_22}_cpat_LInt64_0_738" of
                    0 ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              "idr_Main.{zipInputs_22}11_739" <- store "idr_Main.{zipInputs_22}11_val_728"
              "idr_Main.{zipInputs_22}12_val_740" <- pure (Cidr_Prelude.Bool.True)
              "idr_Main.{zipInputs_22}12_741" <- store "idr_Main.{zipInputs_22}12_val_740"
              "idr_Main.{zipInputs_22}11_val_727" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}11_739" "idr_Main.{zipInputs_22}12_741"
              "idr_Main.{zipInputs_22}11_742" <- store "idr_Main.{zipInputs_22}11_val_727"
              "idr_Main.{zipInputs_22}11_val_743" <- fetch "idr_Main.{zipInputs_22}11_742"
              "idr_Main.{zipInputs_22}11_val_726" <- case "idr_Main.{zipInputs_22}11_val_743" of
                (Cidr_Prelude.Basics.No) ->
                  pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
                (Cidr_Prelude.Basics.Yes) ->
                  "idr_Main.{zipInputs_22}12_val_746" <- idris_str_tail "idr_Main.{zipInputs_22}2"
                  "idr_Main.{zipInputs_22}12_747" <- store "idr_Main.{zipInputs_22}12_val_746"
                  "idr_Main.{zipInputs_22}12_val_745" <- idris_str_tail "idr_Main.{zipInputs_22}12_747"
                  "idr_Main.{zipInputs_22}12_748" <- store "idr_Main.{zipInputs_22}12_val_745"
                  "idr_Main.{zipInputs_22}12_val_744" <- idris_str_head "idr_Main.{zipInputs_22}12_748"
                  "idr_Main.{zipInputs_22}12_749" <- store "idr_Main.{zipInputs_22}12_val_744"
                  "idr_Main.{zipInputs_22}13_val_756" <- idris_str_tail "idr_Main.{zipInputs_22}2"
                  "idr_Main.{zipInputs_22}13_757" <- store "idr_Main.{zipInputs_22}13_val_756"
                  "idr_Main.{zipInputs_22}13_val_755" <- idris_str_tail "idr_Main.{zipInputs_22}13_757"
                  "idr_Main.{zipInputs_22}13_758" <- store "idr_Main.{zipInputs_22}13_val_755"
                  "idr_Main.{zipInputs_22}13_val_754" <- idris_str_tail "idr_Main.{zipInputs_22}13_758"
                  "idr_Main.{zipInputs_22}13_759" <- store "idr_Main.{zipInputs_22}13_val_754"
                  "idr_Main.{zipInputs_22}14_val_760" <- pure (CGrString #"")
                  "idr_Main.{zipInputs_22}14_761" <- store "idr_Main.{zipInputs_22}14_val_760"
                  "idr_Main.{zipInputs_22}13_val_753" <- idris_str_eq "idr_Main.{zipInputs_22}13_759" "idr_Main.{zipInputs_22}14_761"
                  "idr_Main.{zipInputs_22}13_762" <- store "idr_Main.{zipInputs_22}13_val_753"
                  "idr_Main.{zipInputs_22}13_val_763" <- fetch "idr_Main.{zipInputs_22}13_762"
                  "idr_Main.{zipInputs_22}13_val_752" <- case "idr_Main.{zipInputs_22}13_val_763" of
                    (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_764") ->
                      case "idr_Main.{zipInputs_22}_cpat_LInt64_0_764" of
                        0 ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  "idr_Main.{zipInputs_22}13_765" <- store "idr_Main.{zipInputs_22}13_val_752"
                  "idr_Main.{zipInputs_22}14_val_766" <- pure (Cidr_Prelude.Bool.True)
                  "idr_Main.{zipInputs_22}14_767" <- store "idr_Main.{zipInputs_22}14_val_766"
                  "idr_Main.{zipInputs_22}13_val_751" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}13_765" "idr_Main.{zipInputs_22}14_767"
                  "idr_Main.{zipInputs_22}13_768" <- store "idr_Main.{zipInputs_22}13_val_751"
                  "idr_Main.{zipInputs_22}13_val_769" <- fetch "idr_Main.{zipInputs_22}13_768"
                  "idr_Main.{zipInputs_22}13_val_750" <- case "idr_Main.{zipInputs_22}13_val_769" of
                    (Cidr_Prelude.Basics.No) ->
                      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
                    (Cidr_Prelude.Basics.Yes) ->
                      "idr_Main.{zipInputs_22}14_val_773" <- idris_str_tail "idr_Main.{zipInputs_22}2"
                      "idr_Main.{zipInputs_22}14_774" <- store "idr_Main.{zipInputs_22}14_val_773"
                      "idr_Main.{zipInputs_22}14_val_772" <- idris_str_tail "idr_Main.{zipInputs_22}14_774"
                      "idr_Main.{zipInputs_22}14_775" <- store "idr_Main.{zipInputs_22}14_val_772"
                      "idr_Main.{zipInputs_22}14_val_771" <- idris_str_tail "idr_Main.{zipInputs_22}14_775"
                      "idr_Main.{zipInputs_22}14_776" <- store "idr_Main.{zipInputs_22}14_val_771"
                      "idr_Main.{zipInputs_22}14_val_770" <- idris_str_head "idr_Main.{zipInputs_22}14_776"
                      "idr_Main.{zipInputs_22}14_777" <- store "idr_Main.{zipInputs_22}14_val_770"
                      "idr_Main.{zipInputs_22}15_val_785" <- idris_str_tail "idr_Main.{zipInputs_22}2"
                      "idr_Main.{zipInputs_22}15_786" <- store "idr_Main.{zipInputs_22}15_val_785"
                      "idr_Main.{zipInputs_22}15_val_784" <- idris_str_tail "idr_Main.{zipInputs_22}15_786"
                      "idr_Main.{zipInputs_22}15_787" <- store "idr_Main.{zipInputs_22}15_val_784"
                      "idr_Main.{zipInputs_22}15_val_783" <- idris_str_tail "idr_Main.{zipInputs_22}15_787"
                      "idr_Main.{zipInputs_22}15_788" <- store "idr_Main.{zipInputs_22}15_val_783"
                      "idr_Main.{zipInputs_22}15_val_782" <- idris_str_tail "idr_Main.{zipInputs_22}15_788"
                      "idr_Main.{zipInputs_22}15_789" <- store "idr_Main.{zipInputs_22}15_val_782"
                      "idr_Main.{zipInputs_22}16_val_790" <- pure (CGrString #"")
                      "idr_Main.{zipInputs_22}16_791" <- store "idr_Main.{zipInputs_22}16_val_790"
                      "idr_Main.{zipInputs_22}15_val_781" <- idris_str_eq "idr_Main.{zipInputs_22}15_789" "idr_Main.{zipInputs_22}16_791"
                      "idr_Main.{zipInputs_22}15_792" <- store "idr_Main.{zipInputs_22}15_val_781"
                      "idr_Main.{zipInputs_22}15_val_793" <- fetch "idr_Main.{zipInputs_22}15_792"
                      "idr_Main.{zipInputs_22}15_val_780" <- case "idr_Main.{zipInputs_22}15_val_793" of
                        (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_794") ->
                          case "idr_Main.{zipInputs_22}_cpat_LInt64_0_794" of
                            0 ->
                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                      "idr_Main.{zipInputs_22}15_795" <- store "idr_Main.{zipInputs_22}15_val_780"
                      "idr_Main.{zipInputs_22}16_val_796" <- pure (Cidr_Prelude.Bool.True)
                      "idr_Main.{zipInputs_22}16_797" <- store "idr_Main.{zipInputs_22}16_val_796"
                      "idr_Main.{zipInputs_22}15_val_779" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}15_795" "idr_Main.{zipInputs_22}16_797"
                      "idr_Main.{zipInputs_22}15_798" <- store "idr_Main.{zipInputs_22}15_val_779"
                      "idr_Main.{zipInputs_22}15_val_799" <- fetch "idr_Main.{zipInputs_22}15_798"
                      "idr_Main.{zipInputs_22}15_val_778" <- case "idr_Main.{zipInputs_22}15_val_799" of
                        (Cidr_Prelude.Basics.No) ->
                          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
                        (Cidr_Prelude.Basics.Yes) ->
                          "idr_Main.{zipInputs_22}16_val_804" <- idris_str_tail "idr_Main.{zipInputs_22}2"
                          "idr_Main.{zipInputs_22}16_805" <- store "idr_Main.{zipInputs_22}16_val_804"
                          "idr_Main.{zipInputs_22}16_val_803" <- idris_str_tail "idr_Main.{zipInputs_22}16_805"
                          "idr_Main.{zipInputs_22}16_806" <- store "idr_Main.{zipInputs_22}16_val_803"
                          "idr_Main.{zipInputs_22}16_val_802" <- idris_str_tail "idr_Main.{zipInputs_22}16_806"
                          "idr_Main.{zipInputs_22}16_807" <- store "idr_Main.{zipInputs_22}16_val_802"
                          "idr_Main.{zipInputs_22}16_val_801" <- idris_str_tail "idr_Main.{zipInputs_22}16_807"
                          "idr_Main.{zipInputs_22}16_808" <- store "idr_Main.{zipInputs_22}16_val_801"
                          "idr_Main.{zipInputs_22}16_val_800" <- idris_str_head "idr_Main.{zipInputs_22}16_808"
                          "idr_Main.{zipInputs_22}16_809" <- store "idr_Main.{zipInputs_22}16_val_800"
                          "idr_Main.{zipInputs_22}17_val_811" <- pure (CErased)
                          "idr_Main.{zipInputs_22}17_812" <- store "idr_Main.{zipInputs_22}17_val_811"
                          "idr_Main.{zipInputs_22}18_val_821" <- idris_str_tail "idr_Main.{zipInputs_22}2"
                          "idr_Main.{zipInputs_22}18_822" <- store "idr_Main.{zipInputs_22}18_val_821"
                          "idr_Main.{zipInputs_22}18_val_820" <- idris_str_tail "idr_Main.{zipInputs_22}18_822"
                          "idr_Main.{zipInputs_22}18_823" <- store "idr_Main.{zipInputs_22}18_val_820"
                          "idr_Main.{zipInputs_22}18_val_819" <- idris_str_tail "idr_Main.{zipInputs_22}18_823"
                          "idr_Main.{zipInputs_22}18_824" <- store "idr_Main.{zipInputs_22}18_val_819"
                          "idr_Main.{zipInputs_22}18_val_818" <- idris_str_tail "idr_Main.{zipInputs_22}18_824"
                          "idr_Main.{zipInputs_22}18_825" <- store "idr_Main.{zipInputs_22}18_val_818"
                          "idr_Main.{zipInputs_22}18_val_817" <- idris_str_tail "idr_Main.{zipInputs_22}18_825"
                          "idr_Main.{zipInputs_22}18_826" <- store "idr_Main.{zipInputs_22}18_val_817"
                          "idr_Main.{zipInputs_22}19_val" <- pure (CGrString #"")
                          "idr_Main.{zipInputs_22}19" <- store "idr_Main.{zipInputs_22}19_val"
                          "idr_Main.{zipInputs_22}18_val_816" <- idris_str_eq "idr_Main.{zipInputs_22}18_826" "idr_Main.{zipInputs_22}19"
                          "idr_Main.{zipInputs_22}18_827" <- store "idr_Main.{zipInputs_22}18_val_816"
                          "idr_Main.{zipInputs_22}18_val_828" <- fetch "idr_Main.{zipInputs_22}18_827"
                          "idr_Main.{zipInputs_22}18_val_815" <- case "idr_Main.{zipInputs_22}18_val_828" of
                            (CGrInt "idr_Main.{zipInputs_22}_cpat_LInt64_0_829") ->
                              case "idr_Main.{zipInputs_22}_cpat_LInt64_0_829" of
                                0 ->
                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                #default ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                            #default ->
                              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                          "idr_Main.{zipInputs_22}18_830" <- store "idr_Main.{zipInputs_22}18_val_815"
                          "idr_Main.{zipInputs_22}19_val_831" <- pure (Cidr_Prelude.Bool.True)
                          "idr_Main.{zipInputs_22}19_832" <- store "idr_Main.{zipInputs_22}19_val_831"
                          "idr_Main.{zipInputs_22}18_val_814" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_22}18_830" "idr_Main.{zipInputs_22}19_832"
                          "idr_Main.{zipInputs_22}18_833" <- store "idr_Main.{zipInputs_22}18_val_814"
                          "idr_Main.{zipInputs_22}18_val_834" <- fetch "idr_Main.{zipInputs_22}18_833"
                          "idr_Main.{zipInputs_22}18_val_813" <- case "idr_Main.{zipInputs_22}18_val_834" of
                            (Cidr_Prelude.Basics.No) ->
                              pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                            (Cidr_Prelude.Basics.Yes) ->
                              "idr_Main.{zipInputs_22}19_val_840" <- idris_str_tail "idr_Main.{zipInputs_22}2"
                              "idr_Main.{zipInputs_22}19_841" <- store "idr_Main.{zipInputs_22}19_val_840"
                              "idr_Main.{zipInputs_22}19_val_839" <- idris_str_tail "idr_Main.{zipInputs_22}19_841"
                              "idr_Main.{zipInputs_22}19_842" <- store "idr_Main.{zipInputs_22}19_val_839"
                              "idr_Main.{zipInputs_22}19_val_838" <- idris_str_tail "idr_Main.{zipInputs_22}19_842"
                              "idr_Main.{zipInputs_22}19_843" <- store "idr_Main.{zipInputs_22}19_val_838"
                              "idr_Main.{zipInputs_22}19_val_837" <- idris_str_tail "idr_Main.{zipInputs_22}19_843"
                              "idr_Main.{zipInputs_22}19_844" <- store "idr_Main.{zipInputs_22}19_val_837"
                              "idr_Main.{zipInputs_22}19_val_836" <- idris_str_tail "idr_Main.{zipInputs_22}19_844"
                              "idr_Main.{zipInputs_22}19_845" <- store "idr_Main.{zipInputs_22}19_val_836"
                              "idr_Main.{zipInputs_22}19_val_835" <- idris_str_head "idr_Main.{zipInputs_22}19_845"
                              "idr_Main.{zipInputs_22}19_846" <- store "idr_Main.{zipInputs_22}19_val_835"
                              "idr_Main.{zipInputs_22}20_val_851" <- idris_str_tail "idr_Main.{zipInputs_22}2"
                              "idr_Main.{zipInputs_22}20" <- store "idr_Main.{zipInputs_22}20_val_851"
                              "idr_Main.{zipInputs_22}20_val_850" <- idris_str_tail "idr_Main.{zipInputs_22}20"
                              "idr_Main.{zipInputs_22}20_852" <- store "idr_Main.{zipInputs_22}20_val_850"
                              "idr_Main.{zipInputs_22}20_val_849" <- idris_str_tail "idr_Main.{zipInputs_22}20_852"
                              "idr_Main.{zipInputs_22}20_853" <- store "idr_Main.{zipInputs_22}20_val_849"
                              "idr_Main.{zipInputs_22}20_val_848" <- idris_str_tail "idr_Main.{zipInputs_22}20_853"
                              "idr_Main.{zipInputs_22}20_854" <- store "idr_Main.{zipInputs_22}20_val_848"
                              "idr_Main.{zipInputs_22}20_val_847" <- idris_str_tail "idr_Main.{zipInputs_22}20_854"
                              "idr_Main.{zipInputs_22}20_855" <- store "idr_Main.{zipInputs_22}20_val_847"
                              "idr_Main.{zipInputs_22}20_val" <- idris_str_tail "idr_Main.{zipInputs_22}20_855"
                              "idr_Main.{zipInputs_22}20_856" <- store "idr_Main.{zipInputs_22}20_val"
                              pure (Cidr_Prelude.Strings.StrCons "idr_Main.{zipInputs_22}19_846" "idr_Main.{zipInputs_22}20_856") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons "idr_Main.{zipInputs_22}19_846" "idr_Main.{zipInputs_22}20_856")
                          "idr_Main.{zipInputs_22}18_857" <- store "idr_Main.{zipInputs_22}18_val_813"
                          "idr_Main.{zipInputs_22}17_val_810" <- idr__Prelude.Strings.unpack_with_36 "idr_Main.{zipInputs_22}17_812" "idr_Main.{zipInputs_22}18_857"
                          "idr_Main.{zipInputs_22}17_858" <- store "idr_Main.{zipInputs_22}17_val_810"
                          pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}16_809" "idr_Main.{zipInputs_22}17_858") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}16_809" "idr_Main.{zipInputs_22}17_858")
                      "idr_Main.{zipInputs_22}15_859" <- store "idr_Main.{zipInputs_22}15_val_778"
                      pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}14_777" "idr_Main.{zipInputs_22}15_859") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}14_777" "idr_Main.{zipInputs_22}15_859")
                  "idr_Main.{zipInputs_22}13_860" <- store "idr_Main.{zipInputs_22}13_val_750"
                  pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}12_749" "idr_Main.{zipInputs_22}13_860") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}12_749" "idr_Main.{zipInputs_22}13_860")
              "idr_Main.{zipInputs_22}11_861" <- store "idr_Main.{zipInputs_22}11_val_726"
              pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}10_725" "idr_Main.{zipInputs_22}11_861") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}10_725" "idr_Main.{zipInputs_22}11_861")
          "idr_Main.{zipInputs_22}9_862" <- store "idr_Main.{zipInputs_22}9_val_706"
          pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}8_705" "idr_Main.{zipInputs_22}9_862") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_22}8_705" "idr_Main.{zipInputs_22}9_862")
      "idr_Main.{zipInputs_22}7_863" <- store "idr_Main.{zipInputs_22}7_val_690"
      "idr_Main.{zipInputs_22}8_val_864" <- pure (CGrString #"\"")
      "idr_Main.{zipInputs_22}8_865" <- store "idr_Main.{zipInputs_22}8_val_864"
      "idr_Main.{zipInputs_22}7_val_689" <- idr_Prelude.Show.showLitString "idr_Main.{zipInputs_22}7_863" "idr_Main.{zipInputs_22}8_865"
      "idr_Main.{zipInputs_22}7_866" <- store "idr_Main.{zipInputs_22}7_val_689"
      "idr_Main.{zipInputs_22}6_val_686" <- idris_str_cons "idr_Main.{zipInputs_22}6_688" "idr_Main.{zipInputs_22}7_866"
      "idr_Main.{zipInputs_22}6_867" <- store "idr_Main.{zipInputs_22}6_val_686"
      "idr_Main.{zipInputs_22}7_val_868" <- pure (CGrString #")")
      "idr_Main.{zipInputs_22}7_869" <- store "idr_Main.{zipInputs_22}7_val_868"
      "idr_Main.{zipInputs_22}6_val_685" <- idris_str_concat "idr_Main.{zipInputs_22}6_867" "idr_Main.{zipInputs_22}7_869"
      "idr_Main.{zipInputs_22}6_870" <- store "idr_Main.{zipInputs_22}6_val_685"
      "idr_Main.{zipInputs_22}5_val_682" <- idris_str_concat "idr_Main.{zipInputs_22}5_684" "idr_Main.{zipInputs_22}6_870"
      "idr_Main.{zipInputs_22}5_871" <- store "idr_Main.{zipInputs_22}5_val_682"
      "idr_Main.{zipInputs_22}4_val" <- idris_str_concat "idr_Main.{zipInputs_22}4_681" "idr_Main.{zipInputs_22}5_871"
      "idr_Main.{zipInputs_22}4_872" <- store "idr_Main.{zipInputs_22}4_val"
      idris_str_concat "idr_Main.{zipInputs_22}3" "idr_Main.{zipInputs_22}4_872"

"idr_Main.{zipInputs_23}" "idr_Main.{zipInputs_23}0" =
  "idr_Main.{zipInputs_23}1_val" <- pure (CErased)
  "idr_Main.{zipInputs_23}1" <- store "idr_Main.{zipInputs_23}1_val"
  "idr_Main.{zipInputs_23}2_val" <- pure (CErased)
  "idr_Main.{zipInputs_23}2" <- store "idr_Main.{zipInputs_23}2_val"
  "idr_Main.{zipInputs_23}3_val" <- pure (C"idr_{U_Main.{zipInputs_22}_1}")
  "idr_Main.{zipInputs_23}3" <- store "idr_Main.{zipInputs_23}3_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0" "idr_Main.{zipInputs_23}1" "idr_Main.{zipInputs_23}2" "idr_Main.{zipInputs_23}3" "idr_Main.{zipInputs_23}0"

"idr_Main.{zipInputs_24}" "idr_Main.{zipInputs_24}0" "idr_Main.{zipInputs_24}1" =
  pure (Cidr_Builtins.MkPair "idr_Main.{zipInputs_24}0" "idr_Main.{zipInputs_24}1") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair "idr_Main.{zipInputs_24}0" "idr_Main.{zipInputs_24}1")

"idr_Main.{zipInputs_25}" "idr_Main.{zipInputs_25}0" "idr_Main.{zipInputs_25}1" "idr_Main.{zipInputs_25}2" "idr_Main.{zipInputs_25}3" =
  "idr_Main.{zipInputs_25}4_val" <- idr_Main.readVect "idr_Main.{zipInputs_25}3"
  "idr_Main.{zipInputs_25}4" <- store "idr_Main.{zipInputs_25}4_val"
  "idr_Main.{zipInputs_25}4_val_873" <- fetch "idr_Main.{zipInputs_25}4"
  case "idr_Main.{zipInputs_25}4_val_873" of
    (Cidr_Builtins.MkDPair "idr_Main.{zipInputs_25}5" "idr_Main.{zipInputs_25}6") ->
      "idr_Main.{zipInputs_25}7_val" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0" "idr_Main.{zipInputs_25}5" "idr_Main.{zipInputs_25}0"
      "idr_Main.{zipInputs_25}7" <- store "idr_Main.{zipInputs_25}7_val"
      "idr_Main.{zipInputs_25}7_val_874" <- fetch "idr_Main.{zipInputs_25}7"
      case "idr_Main.{zipInputs_25}7_val_874" of
        (Cidr_Prelude.Basics.No) ->
          "idr_Main.{zipInputs_25}8_val_875" <- pure (CGrString #"Vectors are different lengths\n")
          "idr_Main.{zipInputs_25}8" <- store "idr_Main.{zipInputs_25}8_val_875"
          "idr_Main.{zipInputs_25}8_val" <- idris_write_str "idr_Main.{zipInputs_25}3" "idr_Main.{zipInputs_25}8"
          "idr_Main.{zipInputs_25}8_876" <- store "idr_Main.{zipInputs_25}8_val"
          pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)
        (Cidr_Prelude.Basics.Yes) ->
          "idr_Main.{zipInputs_25}8_val_877" <- pure (CErased)
          "idr_Main.{zipInputs_25}8_878" <- store "idr_Main.{zipInputs_25}8_val_877"
          "idr_Main.{zipInputs_25}9_val" <- pure (CErased)
          "idr_Main.{zipInputs_25}9" <- store "idr_Main.{zipInputs_25}9_val"
          "idr_Main.{zipInputs_25}10_val" <- pure (C"idr_{U_Main.{zipInputs_23}_1}")
          "idr_Main.{zipInputs_25}10" <- store "idr_Main.{zipInputs_25}10_val"
          "idr_Main.{zipInputs_25}11_val_879" <- pure (CErased)
          "idr_Main.{zipInputs_25}11" <- store "idr_Main.{zipInputs_25}11_val_879"
          "idr_Main.{zipInputs_25}12_val" <- pure (CErased)
          "idr_Main.{zipInputs_25}12" <- store "idr_Main.{zipInputs_25}12_val"
          "idr_Main.{zipInputs_25}13_val" <- pure (CErased)
          "idr_Main.{zipInputs_25}13" <- store "idr_Main.{zipInputs_25}13_val"
          "idr_Main.{zipInputs_25}14_val" <- pure (CErased)
          "idr_Main.{zipInputs_25}14" <- store "idr_Main.{zipInputs_25}14_val"
          "idr_Main.{zipInputs_25}15_val" <- pure (C"idr_{U_Main.{zipInputs_24}_2}")
          "idr_Main.{zipInputs_25}15" <- store "idr_Main.{zipInputs_25}15_val"
          "idr_Main.{zipInputs_25}11_val" <- idr_Data.Vect.zipWith "idr_Main.{zipInputs_25}11" "idr_Main.{zipInputs_25}12" "idr_Main.{zipInputs_25}13" "idr_Main.{zipInputs_25}14" "idr_Main.{zipInputs_25}15" "idr_Main.{zipInputs_25}1" "idr_Main.{zipInputs_25}6"
          "idr_Main.{zipInputs_25}11_880" <- store "idr_Main.{zipInputs_25}11_val"
          idr_Prelude.Interactive.printLn' "idr_Main.{zipInputs_25}8_878" "idr_Main.{zipInputs_25}9" "idr_Main.{zipInputs_25}10" "idr_Main.{zipInputs_25}11_880" "idr_Main.{zipInputs_25}3"

"idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}0" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}1" =
  pure (Cidr_Prelude.List.:: "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}0" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}1") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}0" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}1")

"idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_27}" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_27}0" =
  fetch "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_27}0"

"idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}0" =
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}1_val_881" <- pure (CGrString #"Another (y/n)? ")
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}1" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}1_val_881"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}1_val" <- idris_write_str "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}0" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}1"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}1_882" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}1_val"
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

"idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}0" =
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

"idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}0" =
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}1_val_883" <- pure (CGrString #"y")
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}1" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}1_val_883"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}1_val" <- idris_str_eq "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}0" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}1"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}1_884" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}1_val"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}1_val_885" <- fetch "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}1_884"
  case "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}1_val_885" of
    (CGrInt "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_cpat_LInt64_0") ->
      case "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_cpat_LInt64_0" of
        0 ->
          pure (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}")
        #default ->
          pure (C"idr_{U_Main.countdowns_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.countdowns_1}")
    #default ->
      pure (C"idr_{U_Main.countdowns_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.countdowns_1}")

"idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}0" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}1" =
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_val_888" <- pure (CErased)
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_val_888"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_val_887" <- "idr_{APPLY_0}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}0" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_889" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_val_887"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_val" <- pure (CErased)
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_val"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_val_886" <- "idr_{APPLY_0}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_889" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_890" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_val_886"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_val_892" <- pure (CErased)
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_893" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_val_892"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_val_891" <- pure (C"idr_{U_Prelude.Interactive.getLine'_1}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_893")
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_894" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_val_891"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_val" <- "idr_{APPLY_0}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_890" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_894"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_895" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_val"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_val_896" <- pure (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}")
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_897" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_val_896"
  "idr_{APPLY_0}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}2_895" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}3_897"

"idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}0" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}1" =
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_val_900" <- pure (CErased)
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_val_900"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_val_899" <- "idr_{APPLY_0}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}0" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_901" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_val_899"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3_val" <- pure (CErased)
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3_val"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_val_898" <- "idr_{APPLY_0}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_901" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_902" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_val_898"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3_val_903" <- pure (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}")
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3_904" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3_val_903"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_val" <- "idr_{APPLY_0}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_902" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3_904"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_905" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_val"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3_val_906" <- pure (C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}0")
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3_907" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3_val_906"
  "idr_{APPLY_0}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}2_905" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_34}3_907"

"idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}0" =
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}1_val_908" <- pure (CGrString #"Invalid input\n")
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}1" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}1_val_908"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}1_val" <- idris_write_str "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}0" "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}1"
  "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}1_909" <- store "idr_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_35}1_val"
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

"idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}0" =
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}1_val_910" <- pure (CGrString #"Enter the second vector (blank line to end): \n")
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}1" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}1_val_910"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}1_val" <- idris_write_str "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}1"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}1_911" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_37}1_val"
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

"idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}0" =
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}1_val_912" <- pure (CGrString #"Vectors are different lengths\n")
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}1" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}1_val_912"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}1_val" <- idris_write_str "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}1"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}1_913" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}1_val"
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

"idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}0" =
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}0_val" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}0"
  -- LINT: case has non-covered alternative CErased
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  -- LINT: case has non-covered alternative Cidr_Builtins.MkDPair
  -- LINT: case has non-covered alternative Cidr_Data.Vect.::
  -- LINT: case has non-covered alternative Cidr_Data.Vect.Nil
  -- LINT: case has non-covered alternative Cidr_MkUnit
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.False
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.True
  -- LINT: case has non-covered alternative Cidr_Prelude.List.::
  -- LINT: case has non-covered alternative Cidr_Prelude.List.Nil
  -- LINT: case has non-covered alternative C"idr_{U_Main.countdowns_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.readVect_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_0}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{readNumber_8}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_24}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_25}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.getLine'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.printLn'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"
  case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}0_val" of
    (Cidr_Builtins.MkPair "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}1" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}2") ->
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}3_val" <- pure (CGrString #"(")
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}3" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}3_val"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4_val_915" <- pure (CGrInt 34)
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4_val_915"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_920" <- pure (CGrString #"")
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_920"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_919" <- idris_str_eq "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}1" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_921" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_919"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_922" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_921"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_918" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_922" of
        (CGrInt "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0") ->
          case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0" of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_923" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_918"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val" <- pure (Cidr_Prelude.Bool.True)
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_917" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_923" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_924" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_917"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_925" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_924"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_916" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_925" of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
        (Cidr_Prelude.Basics.Yes) ->
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val_926" <- idris_str_head "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}1"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_927" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val_926"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_931" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}1"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_931"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val" <- pure (CGrString #"")
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_930" <- idris_str_eq "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_932" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_930"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_933" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_932"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_929" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_933" of
            (CGrInt "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_934") ->
              case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_934" of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_935" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_929"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_936" <- pure (Cidr_Prelude.Bool.True)
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_937" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_936"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_928" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_935" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_937"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_938" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_928"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_939" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_938"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_939" of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
            (Cidr_Prelude.Basics.Yes) ->
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_941" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}1"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_942" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_941"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_940" <- idris_str_head "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_942"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_943" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_940"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_948" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}1"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_948"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_947" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_949" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_947"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val" <- pure (CGrString #"")
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_946" <- idris_str_eq "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_949" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_950" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_946"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_951" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_950"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_945" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_951" of
                (CGrInt "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_952") ->
                  case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_952" of
                    0 ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_953" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_945"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_954" <- pure (Cidr_Prelude.Bool.True)
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_955" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_954"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_944" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_953" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_955"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_956" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_944"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_957" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_956"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_957" of
                (Cidr_Prelude.Basics.No) ->
                  pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
                (Cidr_Prelude.Basics.Yes) ->
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_960" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}1"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_961" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_960"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_959" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_961"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_962" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_959"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_958" <- idris_str_head "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_962"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_963" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_958"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_964" <- pure (CErased)
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_964"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_970" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}1"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_970"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_969" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_971" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_969"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_968" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_971"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_972" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_968"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val" <- pure (CGrString #"")
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_967" <- idris_str_eq "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_972" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_973" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_967"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_974" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_973"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_966" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_974" of
                    (CGrInt "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_975") ->
                      case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_975" of
                        0 ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_976" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_966"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_977" <- pure (Cidr_Prelude.Bool.True)
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_978" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_977"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_965" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_976" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_978"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_979" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_965"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_980" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_979"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_980" of
                    (Cidr_Prelude.Basics.No) ->
                      pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                    (Cidr_Prelude.Basics.Yes) ->
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_984" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}1"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_985" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_984"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_983" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_985"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_986" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_983"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_982" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_986"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_987" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_982"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_981" <- idris_str_head "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_987"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_988" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_981"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_991" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}1"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_991"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_990" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_992" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_990"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_989" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_992"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_993" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_989"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_993"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_994" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val"
                      pure (Cidr_Prelude.Strings.StrCons "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_988" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_994") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_988" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_994")
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_995" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val" <- idr__Prelude.Strings.unpack_with_36 "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_995"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_996" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val"
                  pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_963" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_996") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_963" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_996")
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_997" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val"
              pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_943" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_997") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_943" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_997")
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_998" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val"
          pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_927" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_998") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_927" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_998")
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_999" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_916"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val_1000" <- pure (CGrString #"\"")
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_1001" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val_1000"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val" <- idr_Prelude.Show.showLitString "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_999" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_1001"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_1002" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4_val_914" <- idris_str_cons "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_1002"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4_1003" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4_val_914"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_1005" <- pure (CGrString #", ")
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_1006" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_1005"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val_1009" <- pure (CGrInt 34)
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_1010" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val_1009"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1016" <- pure (CGrString #"")
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1017" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1016"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1015" <- idris_str_eq "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}2" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1017"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1018" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1015"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1019" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1018"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1014" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1019" of
        (CGrInt "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_1020") ->
          case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_1020" of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1021" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1014"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_1022" <- pure (Cidr_Prelude.Bool.True)
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_1023" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_1022"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1013" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1021" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_1023"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1024" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1013"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1025" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1024"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1012" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1025" of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
        (Cidr_Prelude.Basics.Yes) ->
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_1026" <- idris_str_head "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}2"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_1027" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_1026"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1032" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}2"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1033" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1032"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_1034" <- pure (CGrString #"")
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_1035" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_1034"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1031" <- idris_str_eq "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1033" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_1035"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1036" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1031"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1037" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1036"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1030" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1037" of
            (CGrInt "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_1038") ->
              case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_1038" of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1039" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1030"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_1040" <- pure (Cidr_Prelude.Bool.True)
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_1041" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_1040"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1029" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1039" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_1041"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1042" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1029"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1043" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1042"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1028" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1043" of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
            (Cidr_Prelude.Basics.Yes) ->
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_1045" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}2"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_1046" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_1045"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_1044" <- idris_str_head "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_1046"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_1047" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_val_1044"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1053" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}2"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1054" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1053"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1052" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1054"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1055" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1052"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_1056" <- pure (CGrString #"")
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1057" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_1056"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1051" <- idris_str_eq "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1055" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1057"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1058" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1051"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1059" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1058"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1050" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1059" of
                (CGrInt "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_1060") ->
                  case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_1060" of
                    0 ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1061" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1050"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_1062" <- pure (Cidr_Prelude.Bool.True)
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1063" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_1062"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1049" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1061" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1063"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1064" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1049"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1065" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1064"
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1048" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1065" of
                (Cidr_Prelude.Basics.No) ->
                  pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
                (Cidr_Prelude.Basics.Yes) ->
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_1068" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}2"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1069" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_1068"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_1067" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1069"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1070" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_1067"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_1066" <- idris_str_head "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1070"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1071" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_val_1066"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_1073" <- pure (CErased)
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_1074" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_1073"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1081" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}2"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1082" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1081"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1080" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1082"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1083" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1080"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1079" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1083"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1084" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1079"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val" <- pure (CGrString #"")
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1078" <- idris_str_eq "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1084" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1085" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1078"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1086" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1085"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1077" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1086" of
                    (CGrInt "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_1087") ->
                      case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_cpat_LInt64_0_1087" of
                        0 ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                    #default ->
                      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1088" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1077"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val_1089" <- pure (Cidr_Prelude.Bool.True)
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1090" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val_1089"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1076" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1088" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1090"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1091" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1076"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1092" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1091"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1075" <- case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1092" of
                    (Cidr_Prelude.Basics.No) ->
                      pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
                    (Cidr_Prelude.Basics.Yes) ->
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val_1096" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}2"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1097" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val_1096"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val_1095" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1097"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1098" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val_1095"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val_1094" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1098"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1099" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val_1094"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val_1093" <- idris_str_head "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1099"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1100" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_val_1093"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_val_1103" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}2"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_val_1103"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_val_1102" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_1104" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_val_1102"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_val_1101" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_1104"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_1105" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_val_1101"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_val" <- idris_str_tail "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_1105"
                      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_1106" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_val"
                      pure (Cidr_Prelude.Strings.StrCons "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1100" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_1106") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}15_1100" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}16_1106")
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1107" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_val_1075"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_1072" <- idr__Prelude.Strings.unpack_with_36 "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_1074" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}14_1107"
                  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_1108" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_val_1072"
                  pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1071" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_1108") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}12_1071" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}13_1108")
              "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1109" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_val_1048"
              pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_1047" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1109") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}10_1047" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}11_1109")
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1110" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_val_1028"
          pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_1027" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1110") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_1027" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}9_1110")
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1111" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1012"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_1112" <- pure (CGrString #"\"")
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_1113" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_val_1112"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1011" <- idr_Prelude.Show.showLitString "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1111" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}8_1113"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1114" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1011"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val_1008" <- idris_str_cons "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_1010" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1114"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_1115" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val_1008"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1116" <- pure (CGrString #")")
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1117" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_val_1116"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val_1007" <- idris_str_concat "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_1115" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}7_1117"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_1118" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_val_1007"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_1004" <- idris_str_concat "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_1006" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}6_1118"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_1119" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_val_1004"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4_val" <- idris_str_concat "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4_1003" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}5_1119"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4_1120" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4_val"
      idris_str_concat "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}3" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}4_1120"

"idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}0" =
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}1_val" <- pure (CErased)
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}1" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}1_val"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}2_val" <- pure (CErased)
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}2" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}2_val"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}3_val" <- pure (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_39}_1}")
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}3" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}3_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}1" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}2" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}3" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}0"

"idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}1" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}2" =
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}2_val" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}2"
  -- LINT: case has non-covered alternative CErased
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  -- LINT: case has non-covered alternative Cidr_Builtins.MkPair
  -- LINT: case has non-covered alternative Cidr_Data.Vect.::
  -- LINT: case has non-covered alternative Cidr_Data.Vect.Nil
  -- LINT: case has non-covered alternative Cidr_MkUnit
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.False
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.True
  -- LINT: case has non-covered alternative Cidr_Prelude.List.::
  -- LINT: case has non-covered alternative Cidr_Prelude.List.Nil
  -- LINT: case has non-covered alternative C"idr_{U_Main.countdowns_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.readVect_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_0}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{readNumber_8}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_24}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_25}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.getLine'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.printLn'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"
  case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}2_val" of
    (Cidr_Builtins.MkDPair "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}3" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}4") ->
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}5_val" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}3" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}0"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}5" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}5_val"
      "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}5_val_1121" <- fetch "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}5"
      case "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}5_val_1121" of
        (Cidr_Prelude.Basics.No) ->
          pure (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}")
        (Cidr_Prelude.Basics.Yes) ->
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}6_val" <- pure (CErased)
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}6" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}6_val"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}7_val" <- pure (CErased)
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}7" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}7_val"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}8_val" <- pure (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_40}_1}")
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}8" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}8_val"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}9_val_1122" <- pure (CErased)
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}9" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}9_val_1122"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}10_val" <- pure (CErased)
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}10" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}10_val"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}11_val" <- pure (CErased)
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}11" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}11_val"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}12_val" <- pure (CErased)
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}12" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}12_val"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}13_val" <- pure (C"idr_{U_Main.{zipInputs_24}_2}")
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}13" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}13_val"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}9_val" <- idr_Data.Vect.zipWith "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}9" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}10" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}11" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}12" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}13" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}1" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}4"
          "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}9_1123" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}9_val"
          pure (C"idr_{U_Prelude.Interactive.printLn'_1}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}6" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}7" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}8" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}9_1123") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Interactive.printLn'_1}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}6" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}7" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}8" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}9_1123")

"idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}1" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}2" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}3" =
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_val_1126" <- pure (CErased)
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_val_1126"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_val_1125" <- "idr_{APPLY_0}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}0" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_1127" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_val_1125"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5_val" <- pure (CErased)
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5_val"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_val_1124" <- "idr_{APPLY_0}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_1127" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_1128" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_val_1124"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5_val_1129" <- pure (C"idr_{U_Main.readVect_1}")
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5_1130" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5_val_1129"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_val" <- "idr_{APPLY_0}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_1128" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5_1130"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_1131" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_val"
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5_val_1132" <- pure (C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}1" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}2")
  "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5_1133" <- store "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5_val_1132"
  "idr_{APPLY_0}" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}4_1131" "idr_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_43}5_1133"

"idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':00" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':01" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04" =
  "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04"
  -- LINT: case has non-covered alternative CErased
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  -- LINT: case has non-covered alternative Cidr_Builtins.MkDPair
  -- LINT: case has non-covered alternative Cidr_Builtins.MkPair
  -- LINT: case has non-covered alternative Cidr_Data.Vect.::
  -- LINT: case has non-covered alternative Cidr_Data.Vect.Nil
  -- LINT: case has non-covered alternative Cidr_MkUnit
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.False
  -- LINT: case has non-covered alternative Cidr_Prelude.Bool.True
  -- LINT: case has non-covered alternative C"idr_{U_Main.countdowns_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.readVect_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_0}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_30}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_31}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_32}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{countdowns_____test__tdd__chapter05__01__IOIntro__idr_29_20_29_29_case_lam_33}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{readNumber_8}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_24}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_25}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_38}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Main.{zipInputs_____test__tdd__chapter05__01__IOIntro__idr_61_22_61_29_case_lam_42}_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.getLine'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Interactive.printLn'_1}"
  -- LINT: case has non-covered alternative C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_1}"
  case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06") ->
      "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
      case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" of
        (Cidr_Prelude.List.Nil) ->
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val" <- "idr_{APPLY_0}" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val"
          idris_str_concat "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07"
        #default ->
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val_1134" <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_1135" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val_1134"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08_val" <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1137" <- "idr_{APPLY_0}" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1137"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val" <- pure (CGrString #", ")
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1136" <- idris_str_concat "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1138" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_1136"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val" <- idris_str_concat "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1138"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1139" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_1135" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_1139" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
    (Cidr_Prelude.List.Nil) ->
      fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01"
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" of
    (Cidr_Prelude.Bool.False) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1140" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_1140" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:01" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:01_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:01"
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:01_val" of
    (CGrInt "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0_cpat_LInt64_0") ->
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0_cpat_LInt64_0" of
        0 ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00_val" of
            (CGrInt "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0_cpat_LInt64_0_1141") ->
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0_cpat_LInt64_0_1141" of
                0 ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
                #default ->
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1142" <- pure (CGrInt 1)
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1142"
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val" <- idris_int_sub "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02"
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1143" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val"
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            #default ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1145" <- pure (CGrInt 1)
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1146" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1145"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1144" <- idris_int_sub "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1146"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1147" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1144"
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        #default ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1149" <- pure (CGrInt 1)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1150" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1149"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1148" <- idris_int_sub "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:01" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1150"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1151" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1148"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00_val_1152" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00_val_1152" of
            (CGrInt "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0_cpat_LInt64_0_1153") ->
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0_cpat_LInt64_0_1153" of
                0 ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                #default ->
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1154" <- pure (CGrInt 1)
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1154"
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val" <- idris_int_sub "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03"
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1155" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val"
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1155" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1151"
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val"
                  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1156" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04"
                  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1156" of
                    (Cidr_Prelude.Basics.No) ->
                      pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                    (Cidr_Prelude.Basics.Yes) ->
                      pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
            #default ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1158" <- pure (CGrInt 1)
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1159" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1158"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1157" <- idris_int_sub "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1159"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1160" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1157"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1161" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1160" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1151"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_1162" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1161"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1163" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_1162"
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1163" of
                (Cidr_Prelude.Basics.No) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Basics.Yes) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
    #default ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1165" <- pure (CGrInt 1)
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1166" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1165"
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1164" <- idris_int_sub "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:01" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1166"
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1167" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_val_1164"
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00_val_1168" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00_val_1168" of
        (CGrInt "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0_cpat_LInt64_0_1169") ->
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0_cpat_LInt64_0_1169" of
            0 ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            #default ->
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1171" <- pure (CGrInt 1)
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1172" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1171"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1170" <- idris_int_sub "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1172"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1173" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1170"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1174" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1173" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1167"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_1175" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1174"
              "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1176" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_1175"
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1176" of
                (Cidr_Prelude.Basics.No) ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                (Cidr_Prelude.Basics.Yes) ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
        #default ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1178" <- pure (CGrInt 1)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1179" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1178"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1177" <- idris_int_sub "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1179"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1180" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_val_1177"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1181" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:03_1180" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:02_1167"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_1182" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1181"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1183" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_1182"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Nat:!decEq:04_val_1183" of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Basics.Yes) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)

"idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:0" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:00" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:01" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:03" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:04" =
  "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:04_val" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:04"
  case "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:05" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:06") ->
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:07_val" <- pure (CErased)
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:07" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:07_val"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:08_val" <- pure (CErased)
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:08" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:08_val"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_val_1184" <- "idr_{APPLY_0}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:03"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_val_1184"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_val" <- "idr_{APPLY_0}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:05"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_1185" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_val"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:0" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:07" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:08" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:09_1185" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:06"
    (Cidr_Prelude.List.Nil) ->
      fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldl:03"

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val" <- idris_int_eq "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_1186" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_1186" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val" <- idris_int_lt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_1187" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_1187" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_1188") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_1188" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
    #default ->
      pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val" <- idris_int_eq "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_1189" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_1189" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val" <- idris_int_lt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_1190" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_1190" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_1191") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_1191" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
    #default ->
      pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)

"idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:00" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:01" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:02" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:03" =
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04_val" <- pure (CGrString #"[")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_1207" <- pure (CErased)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_1207"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val" <- pure (CErased)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07_val" <- pure (CGrString #"")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val_1208" <- pure (CErased)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val_1208"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:09_val" <- pure (CErased)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:09" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:09_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:010_val" <- pure (CErased)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:010" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:010_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011_val" <- pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_26}_2}")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012_val" <- pure (Cidr_Prelude.List.Nil)
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013_val" <- pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_27}_1}")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val" <- idr_Data.Vect.foldrImpl "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:09" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:010" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:03"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_1209" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_1206" <- "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:02" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_1209"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1210" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_1206"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val_1211" <- pure (CGrString #"]")
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_1212" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val_1211"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val" <- idris_str_concat "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1210" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_1212"
  "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1213" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val"
  idris_str_concat "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_1213"

idr_Prelude.Show.showLitChar:asciiTab:10 idr_Prelude.Show.showLitChar:asciiTab:100 =
  idr_Prelude.Show.showLitChar:asciiTab:101_val <- pure (CGrString #"NUL")
  idr_Prelude.Show.showLitChar:asciiTab:101 <- store idr_Prelude.Show.showLitChar:asciiTab:101_val
  idr_Prelude.Show.showLitChar:asciiTab:102_val_1214 <- pure (CGrString #"SOH")
  idr_Prelude.Show.showLitChar:asciiTab:102 <- store idr_Prelude.Show.showLitChar:asciiTab:102_val_1214
  idr_Prelude.Show.showLitChar:asciiTab:103_val_1215 <- pure (CGrString #"STX")
  idr_Prelude.Show.showLitChar:asciiTab:103 <- store idr_Prelude.Show.showLitChar:asciiTab:103_val_1215
  idr_Prelude.Show.showLitChar:asciiTab:104_val_1216 <- pure (CGrString #"ETX")
  idr_Prelude.Show.showLitChar:asciiTab:104 <- store idr_Prelude.Show.showLitChar:asciiTab:104_val_1216
  idr_Prelude.Show.showLitChar:asciiTab:105_val_1217 <- pure (CGrString #"EOT")
  idr_Prelude.Show.showLitChar:asciiTab:105 <- store idr_Prelude.Show.showLitChar:asciiTab:105_val_1217
  idr_Prelude.Show.showLitChar:asciiTab:106_val_1218 <- pure (CGrString #"ENQ")
  idr_Prelude.Show.showLitChar:asciiTab:106 <- store idr_Prelude.Show.showLitChar:asciiTab:106_val_1218
  idr_Prelude.Show.showLitChar:asciiTab:107_val_1219 <- pure (CGrString #"ACK")
  idr_Prelude.Show.showLitChar:asciiTab:107 <- store idr_Prelude.Show.showLitChar:asciiTab:107_val_1219
  idr_Prelude.Show.showLitChar:asciiTab:108_val_1220 <- pure (CGrString #"BEL")
  idr_Prelude.Show.showLitChar:asciiTab:108 <- store idr_Prelude.Show.showLitChar:asciiTab:108_val_1220
  idr_Prelude.Show.showLitChar:asciiTab:109_val_1221 <- pure (CGrString #"BS")
  idr_Prelude.Show.showLitChar:asciiTab:109 <- store idr_Prelude.Show.showLitChar:asciiTab:109_val_1221
  idr_Prelude.Show.showLitChar:asciiTab:1010_val_1222 <- pure (CGrString #"HT")
  idr_Prelude.Show.showLitChar:asciiTab:1010 <- store idr_Prelude.Show.showLitChar:asciiTab:1010_val_1222
  idr_Prelude.Show.showLitChar:asciiTab:1011_val_1223 <- pure (CGrString #"LF")
  idr_Prelude.Show.showLitChar:asciiTab:1011 <- store idr_Prelude.Show.showLitChar:asciiTab:1011_val_1223
  idr_Prelude.Show.showLitChar:asciiTab:1012_val_1224 <- pure (CGrString #"VT")
  idr_Prelude.Show.showLitChar:asciiTab:1012 <- store idr_Prelude.Show.showLitChar:asciiTab:1012_val_1224
  idr_Prelude.Show.showLitChar:asciiTab:1013_val_1225 <- pure (CGrString #"FF")
  idr_Prelude.Show.showLitChar:asciiTab:1013 <- store idr_Prelude.Show.showLitChar:asciiTab:1013_val_1225
  idr_Prelude.Show.showLitChar:asciiTab:1014_val_1226 <- pure (CGrString #"CR")
  idr_Prelude.Show.showLitChar:asciiTab:1014 <- store idr_Prelude.Show.showLitChar:asciiTab:1014_val_1226
  idr_Prelude.Show.showLitChar:asciiTab:1015_val_1227 <- pure (CGrString #"SO")
  idr_Prelude.Show.showLitChar:asciiTab:1015 <- store idr_Prelude.Show.showLitChar:asciiTab:1015_val_1227
  idr_Prelude.Show.showLitChar:asciiTab:1016_val_1228 <- pure (CGrString #"SI")
  idr_Prelude.Show.showLitChar:asciiTab:1016 <- store idr_Prelude.Show.showLitChar:asciiTab:1016_val_1228
  idr_Prelude.Show.showLitChar:asciiTab:1017_val_1229 <- pure (CGrString #"DLE")
  idr_Prelude.Show.showLitChar:asciiTab:1017 <- store idr_Prelude.Show.showLitChar:asciiTab:1017_val_1229
  idr_Prelude.Show.showLitChar:asciiTab:1018_val_1230 <- pure (CGrString #"DC1")
  idr_Prelude.Show.showLitChar:asciiTab:1018 <- store idr_Prelude.Show.showLitChar:asciiTab:1018_val_1230
  idr_Prelude.Show.showLitChar:asciiTab:1019_val_1231 <- pure (CGrString #"DC2")
  idr_Prelude.Show.showLitChar:asciiTab:1019 <- store idr_Prelude.Show.showLitChar:asciiTab:1019_val_1231
  idr_Prelude.Show.showLitChar:asciiTab:1020_val_1232 <- pure (CGrString #"DC3")
  idr_Prelude.Show.showLitChar:asciiTab:1020 <- store idr_Prelude.Show.showLitChar:asciiTab:1020_val_1232
  idr_Prelude.Show.showLitChar:asciiTab:1021_val_1233 <- pure (CGrString #"DC4")
  idr_Prelude.Show.showLitChar:asciiTab:1021 <- store idr_Prelude.Show.showLitChar:asciiTab:1021_val_1233
  idr_Prelude.Show.showLitChar:asciiTab:1022_val_1234 <- pure (CGrString #"NAK")
  idr_Prelude.Show.showLitChar:asciiTab:1022 <- store idr_Prelude.Show.showLitChar:asciiTab:1022_val_1234
  idr_Prelude.Show.showLitChar:asciiTab:1023_val_1235 <- pure (CGrString #"SYN")
  idr_Prelude.Show.showLitChar:asciiTab:1023 <- store idr_Prelude.Show.showLitChar:asciiTab:1023_val_1235
  idr_Prelude.Show.showLitChar:asciiTab:1024_val_1236 <- pure (CGrString #"ETB")
  idr_Prelude.Show.showLitChar:asciiTab:1024 <- store idr_Prelude.Show.showLitChar:asciiTab:1024_val_1236
  idr_Prelude.Show.showLitChar:asciiTab:1025_val_1237 <- pure (CGrString #"CAN")
  idr_Prelude.Show.showLitChar:asciiTab:1025 <- store idr_Prelude.Show.showLitChar:asciiTab:1025_val_1237
  idr_Prelude.Show.showLitChar:asciiTab:1026_val_1238 <- pure (CGrString #"EM")
  idr_Prelude.Show.showLitChar:asciiTab:1026 <- store idr_Prelude.Show.showLitChar:asciiTab:1026_val_1238
  idr_Prelude.Show.showLitChar:asciiTab:1027_val_1239 <- pure (CGrString #"SUB")
  idr_Prelude.Show.showLitChar:asciiTab:1027 <- store idr_Prelude.Show.showLitChar:asciiTab:1027_val_1239
  idr_Prelude.Show.showLitChar:asciiTab:1028_val_1240 <- pure (CGrString #"ESC")
  idr_Prelude.Show.showLitChar:asciiTab:1028 <- store idr_Prelude.Show.showLitChar:asciiTab:1028_val_1240
  idr_Prelude.Show.showLitChar:asciiTab:1029_val_1241 <- pure (CGrString #"FS")
  idr_Prelude.Show.showLitChar:asciiTab:1029 <- store idr_Prelude.Show.showLitChar:asciiTab:1029_val_1241
  idr_Prelude.Show.showLitChar:asciiTab:1030_val_1242 <- pure (CGrString #"GS")
  idr_Prelude.Show.showLitChar:asciiTab:1030 <- store idr_Prelude.Show.showLitChar:asciiTab:1030_val_1242
  idr_Prelude.Show.showLitChar:asciiTab:1031_val_1243 <- pure (CGrString #"RS")
  idr_Prelude.Show.showLitChar:asciiTab:1031 <- store idr_Prelude.Show.showLitChar:asciiTab:1031_val_1243
  idr_Prelude.Show.showLitChar:asciiTab:1032_val_1244 <- pure (CGrString #"US")
  idr_Prelude.Show.showLitChar:asciiTab:1032 <- store idr_Prelude.Show.showLitChar:asciiTab:1032_val_1244
  idr_Prelude.Show.showLitChar:asciiTab:1033_val <- pure (Cidr_Prelude.List.Nil)
  idr_Prelude.Show.showLitChar:asciiTab:1033 <- store idr_Prelude.Show.showLitChar:asciiTab:1033_val
  idr_Prelude.Show.showLitChar:asciiTab:1032_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1032 idr_Prelude.Show.showLitChar:asciiTab:1033)
  idr_Prelude.Show.showLitChar:asciiTab:1032_1245 <- store idr_Prelude.Show.showLitChar:asciiTab:1032_val
  idr_Prelude.Show.showLitChar:asciiTab:1031_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1031 idr_Prelude.Show.showLitChar:asciiTab:1032_1245)
  idr_Prelude.Show.showLitChar:asciiTab:1031_1246 <- store idr_Prelude.Show.showLitChar:asciiTab:1031_val
  idr_Prelude.Show.showLitChar:asciiTab:1030_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1030 idr_Prelude.Show.showLitChar:asciiTab:1031_1246)
  idr_Prelude.Show.showLitChar:asciiTab:1030_1247 <- store idr_Prelude.Show.showLitChar:asciiTab:1030_val
  idr_Prelude.Show.showLitChar:asciiTab:1029_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1029 idr_Prelude.Show.showLitChar:asciiTab:1030_1247)
  idr_Prelude.Show.showLitChar:asciiTab:1029_1248 <- store idr_Prelude.Show.showLitChar:asciiTab:1029_val
  idr_Prelude.Show.showLitChar:asciiTab:1028_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1028 idr_Prelude.Show.showLitChar:asciiTab:1029_1248)
  idr_Prelude.Show.showLitChar:asciiTab:1028_1249 <- store idr_Prelude.Show.showLitChar:asciiTab:1028_val
  idr_Prelude.Show.showLitChar:asciiTab:1027_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1027 idr_Prelude.Show.showLitChar:asciiTab:1028_1249)
  idr_Prelude.Show.showLitChar:asciiTab:1027_1250 <- store idr_Prelude.Show.showLitChar:asciiTab:1027_val
  idr_Prelude.Show.showLitChar:asciiTab:1026_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1026 idr_Prelude.Show.showLitChar:asciiTab:1027_1250)
  idr_Prelude.Show.showLitChar:asciiTab:1026_1251 <- store idr_Prelude.Show.showLitChar:asciiTab:1026_val
  idr_Prelude.Show.showLitChar:asciiTab:1025_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1025 idr_Prelude.Show.showLitChar:asciiTab:1026_1251)
  idr_Prelude.Show.showLitChar:asciiTab:1025_1252 <- store idr_Prelude.Show.showLitChar:asciiTab:1025_val
  idr_Prelude.Show.showLitChar:asciiTab:1024_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1024 idr_Prelude.Show.showLitChar:asciiTab:1025_1252)
  idr_Prelude.Show.showLitChar:asciiTab:1024_1253 <- store idr_Prelude.Show.showLitChar:asciiTab:1024_val
  idr_Prelude.Show.showLitChar:asciiTab:1023_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1023 idr_Prelude.Show.showLitChar:asciiTab:1024_1253)
  idr_Prelude.Show.showLitChar:asciiTab:1023_1254 <- store idr_Prelude.Show.showLitChar:asciiTab:1023_val
  idr_Prelude.Show.showLitChar:asciiTab:1022_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1022 idr_Prelude.Show.showLitChar:asciiTab:1023_1254)
  idr_Prelude.Show.showLitChar:asciiTab:1022_1255 <- store idr_Prelude.Show.showLitChar:asciiTab:1022_val
  idr_Prelude.Show.showLitChar:asciiTab:1021_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1021 idr_Prelude.Show.showLitChar:asciiTab:1022_1255)
  idr_Prelude.Show.showLitChar:asciiTab:1021_1256 <- store idr_Prelude.Show.showLitChar:asciiTab:1021_val
  idr_Prelude.Show.showLitChar:asciiTab:1020_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1020 idr_Prelude.Show.showLitChar:asciiTab:1021_1256)
  idr_Prelude.Show.showLitChar:asciiTab:1020_1257 <- store idr_Prelude.Show.showLitChar:asciiTab:1020_val
  idr_Prelude.Show.showLitChar:asciiTab:1019_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1019 idr_Prelude.Show.showLitChar:asciiTab:1020_1257)
  idr_Prelude.Show.showLitChar:asciiTab:1019_1258 <- store idr_Prelude.Show.showLitChar:asciiTab:1019_val
  idr_Prelude.Show.showLitChar:asciiTab:1018_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1018 idr_Prelude.Show.showLitChar:asciiTab:1019_1258)
  idr_Prelude.Show.showLitChar:asciiTab:1018_1259 <- store idr_Prelude.Show.showLitChar:asciiTab:1018_val
  idr_Prelude.Show.showLitChar:asciiTab:1017_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1017 idr_Prelude.Show.showLitChar:asciiTab:1018_1259)
  idr_Prelude.Show.showLitChar:asciiTab:1017_1260 <- store idr_Prelude.Show.showLitChar:asciiTab:1017_val
  idr_Prelude.Show.showLitChar:asciiTab:1016_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1016 idr_Prelude.Show.showLitChar:asciiTab:1017_1260)
  idr_Prelude.Show.showLitChar:asciiTab:1016_1261 <- store idr_Prelude.Show.showLitChar:asciiTab:1016_val
  idr_Prelude.Show.showLitChar:asciiTab:1015_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1015 idr_Prelude.Show.showLitChar:asciiTab:1016_1261)
  idr_Prelude.Show.showLitChar:asciiTab:1015_1262 <- store idr_Prelude.Show.showLitChar:asciiTab:1015_val
  idr_Prelude.Show.showLitChar:asciiTab:1014_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1014 idr_Prelude.Show.showLitChar:asciiTab:1015_1262)
  idr_Prelude.Show.showLitChar:asciiTab:1014_1263 <- store idr_Prelude.Show.showLitChar:asciiTab:1014_val
  idr_Prelude.Show.showLitChar:asciiTab:1013_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1013 idr_Prelude.Show.showLitChar:asciiTab:1014_1263)
  idr_Prelude.Show.showLitChar:asciiTab:1013_1264 <- store idr_Prelude.Show.showLitChar:asciiTab:1013_val
  idr_Prelude.Show.showLitChar:asciiTab:1012_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1012 idr_Prelude.Show.showLitChar:asciiTab:1013_1264)
  idr_Prelude.Show.showLitChar:asciiTab:1012_1265 <- store idr_Prelude.Show.showLitChar:asciiTab:1012_val
  idr_Prelude.Show.showLitChar:asciiTab:1011_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1011 idr_Prelude.Show.showLitChar:asciiTab:1012_1265)
  idr_Prelude.Show.showLitChar:asciiTab:1011_1266 <- store idr_Prelude.Show.showLitChar:asciiTab:1011_val
  idr_Prelude.Show.showLitChar:asciiTab:1010_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1010 idr_Prelude.Show.showLitChar:asciiTab:1011_1266)
  idr_Prelude.Show.showLitChar:asciiTab:1010_1267 <- store idr_Prelude.Show.showLitChar:asciiTab:1010_val
  idr_Prelude.Show.showLitChar:asciiTab:109_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:109 idr_Prelude.Show.showLitChar:asciiTab:1010_1267)
  idr_Prelude.Show.showLitChar:asciiTab:109_1268 <- store idr_Prelude.Show.showLitChar:asciiTab:109_val
  idr_Prelude.Show.showLitChar:asciiTab:108_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:108 idr_Prelude.Show.showLitChar:asciiTab:109_1268)
  idr_Prelude.Show.showLitChar:asciiTab:108_1269 <- store idr_Prelude.Show.showLitChar:asciiTab:108_val
  idr_Prelude.Show.showLitChar:asciiTab:107_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:107 idr_Prelude.Show.showLitChar:asciiTab:108_1269)
  idr_Prelude.Show.showLitChar:asciiTab:107_1270 <- store idr_Prelude.Show.showLitChar:asciiTab:107_val
  idr_Prelude.Show.showLitChar:asciiTab:106_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:106 idr_Prelude.Show.showLitChar:asciiTab:107_1270)
  idr_Prelude.Show.showLitChar:asciiTab:106_1271 <- store idr_Prelude.Show.showLitChar:asciiTab:106_val
  idr_Prelude.Show.showLitChar:asciiTab:105_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:105 idr_Prelude.Show.showLitChar:asciiTab:106_1271)
  idr_Prelude.Show.showLitChar:asciiTab:105_1272 <- store idr_Prelude.Show.showLitChar:asciiTab:105_val
  idr_Prelude.Show.showLitChar:asciiTab:104_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:104 idr_Prelude.Show.showLitChar:asciiTab:105_1272)
  idr_Prelude.Show.showLitChar:asciiTab:104_1273 <- store idr_Prelude.Show.showLitChar:asciiTab:104_val
  idr_Prelude.Show.showLitChar:asciiTab:103_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:103 idr_Prelude.Show.showLitChar:asciiTab:104_1273)
  idr_Prelude.Show.showLitChar:asciiTab:103_1274 <- store idr_Prelude.Show.showLitChar:asciiTab:103_val
  idr_Prelude.Show.showLitChar:asciiTab:102_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:102 idr_Prelude.Show.showLitChar:asciiTab:103_1274)
  idr_Prelude.Show.showLitChar:asciiTab:102_1275 <- store idr_Prelude.Show.showLitChar:asciiTab:102_val
  pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:101 idr_Prelude.Show.showLitChar:asciiTab:102_1275) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:101 idr_Prelude.Show.showLitChar:asciiTab:102_1275)

idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:100 idr_Prelude.Show.showLitChar:getAt:101 idr_Prelude.Show.showLitChar:getAt:102 =
  idr_Prelude.Show.showLitChar:getAt:102_val <- fetch idr_Prelude.Show.showLitChar:getAt:102
  case idr_Prelude.Show.showLitChar:getAt:102_val of
    (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:getAt:103 idr_Prelude.Show.showLitChar:getAt:104) ->
      idr_Prelude.Show.showLitChar:getAt:101_val <- fetch idr_Prelude.Show.showLitChar:getAt:101
      case idr_Prelude.Show.showLitChar:getAt:101_val of
        (CGrInt idr_Prelude.Show.showLitChar:getAt:10_cpat_LInt64_0) ->
          case idr_Prelude.Show.showLitChar:getAt:10_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar:getAt:103) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar:getAt:103)
            #default ->
              idr_Prelude.Show.showLitChar:getAt:105_val_1276 <- pure (CGrInt 1)
              idr_Prelude.Show.showLitChar:getAt:105 <- store idr_Prelude.Show.showLitChar:getAt:105_val_1276
              idr_Prelude.Show.showLitChar:getAt:105_val <- idris_int_sub idr_Prelude.Show.showLitChar:getAt:101 idr_Prelude.Show.showLitChar:getAt:105
              idr_Prelude.Show.showLitChar:getAt:105_1277 <- store idr_Prelude.Show.showLitChar:getAt:105_val
              idr_Prelude.Show.showLitChar:getAt:106_val <- pure (CErased)
              idr_Prelude.Show.showLitChar:getAt:106 <- store idr_Prelude.Show.showLitChar:getAt:106_val
              idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:106 idr_Prelude.Show.showLitChar:getAt:105_1277 idr_Prelude.Show.showLitChar:getAt:104
        #default ->
          idr_Prelude.Show.showLitChar:getAt:105_val_1279 <- pure (CGrInt 1)
          idr_Prelude.Show.showLitChar:getAt:105_1280 <- store idr_Prelude.Show.showLitChar:getAt:105_val_1279
          idr_Prelude.Show.showLitChar:getAt:105_val_1278 <- idris_int_sub idr_Prelude.Show.showLitChar:getAt:101 idr_Prelude.Show.showLitChar:getAt:105_1280
          idr_Prelude.Show.showLitChar:getAt:105_1281 <- store idr_Prelude.Show.showLitChar:getAt:105_val_1278
          idr_Prelude.Show.showLitChar:getAt:106_val_1282 <- pure (CErased)
          idr_Prelude.Show.showLitChar:getAt:106_1283 <- store idr_Prelude.Show.showLitChar:getAt:106_val_1282
          idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:106_1283 idr_Prelude.Show.showLitChar:getAt:105_1281 idr_Prelude.Show.showLitChar:getAt:104
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)

idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_360 idr__Prelude.Strings.unpack_with_361 =
  idr__Prelude.Strings.unpack_with_361_val <- fetch idr__Prelude.Strings.unpack_with_361
  case idr__Prelude.Strings.unpack_with_361_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_363) ->
      idr__Prelude.Strings.unpack_with_364_val_1284 <- pure (CErased)
      idr__Prelude.Strings.unpack_with_364 <- store idr__Prelude.Strings.unpack_with_364_val_1284
      idr__Prelude.Strings.unpack_with_365_val_1288 <- pure (CGrString #"")
      idr__Prelude.Strings.unpack_with_365 <- store idr__Prelude.Strings.unpack_with_365_val_1288
      idr__Prelude.Strings.unpack_with_365_val_1287 <- idris_str_eq idr__Prelude.Strings.unpack_with_363 idr__Prelude.Strings.unpack_with_365
      idr__Prelude.Strings.unpack_with_365_1289 <- store idr__Prelude.Strings.unpack_with_365_val_1287
      idr__Prelude.Strings.unpack_with_365_val_1290 <- fetch idr__Prelude.Strings.unpack_with_365_1289
      idr__Prelude.Strings.unpack_with_365_val_1286 <- case idr__Prelude.Strings.unpack_with_365_val_1290 of
        (CGrInt idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0) ->
          case idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr__Prelude.Strings.unpack_with_365_1291 <- store idr__Prelude.Strings.unpack_with_365_val_1286
      idr__Prelude.Strings.unpack_with_366_val <- pure (Cidr_Prelude.Bool.True)
      idr__Prelude.Strings.unpack_with_366 <- store idr__Prelude.Strings.unpack_with_366_val
      idr__Prelude.Strings.unpack_with_365_val_1285 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr__Prelude.Strings.unpack_with_365_1291 idr__Prelude.Strings.unpack_with_366
      idr__Prelude.Strings.unpack_with_365_1292 <- store idr__Prelude.Strings.unpack_with_365_val_1285
      idr__Prelude.Strings.unpack_with_365_val_1293 <- fetch idr__Prelude.Strings.unpack_with_365_1292
      idr__Prelude.Strings.unpack_with_365_val <- case idr__Prelude.Strings.unpack_with_365_val_1293 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr__Prelude.Strings.unpack_with_366_val_1294 <- idris_str_head idr__Prelude.Strings.unpack_with_363
          idr__Prelude.Strings.unpack_with_366_1295 <- store idr__Prelude.Strings.unpack_with_366_val_1294
          idr__Prelude.Strings.unpack_with_367_val <- idris_str_tail idr__Prelude.Strings.unpack_with_363
          idr__Prelude.Strings.unpack_with_367 <- store idr__Prelude.Strings.unpack_with_367_val
          pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_1295 idr__Prelude.Strings.unpack_with_367) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_1295 idr__Prelude.Strings.unpack_with_367)
      idr__Prelude.Strings.unpack_with_365_1296 <- store idr__Prelude.Strings.unpack_with_365_val
      idr__Prelude.Strings.unpack_with_364_val <- idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_364 idr__Prelude.Strings.unpack_with_365_1296
      idr__Prelude.Strings.unpack_with_364_1297 <- store idr__Prelude.Strings.unpack_with_364_val
      pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_1297) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_1297)
    (Cidr_Prelude.Strings.StrNil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
