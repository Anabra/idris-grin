grinMain =
  idr_Main.main0_val.0 <- pure (CErased)
  idr_Main.main0.0 <- store idr_Main.main0_val.0
  idr_Main.main1_val.0 <- pure (Cidr_MkUnit)
  idr_Main.main1.0 <- store idr_Main.main1_val.0
  idr_Main.main2_val.0 <- pure (CGrString #"Enter a string: ")
  idr_Main.main2.0 <- store idr_Main.main2_val.0
  idr_Main.main3_val.0 <- pure (C"idr_{U_Main.{main_2}_2}")
  idr_Main.main3.0 <- store idr_Main.main3_val.0
  "idr_{runMain_0}0_val_211.0" <- pure (C"idr_{U_Prelude.Interactive.replWith_1}" idr_Main.main0.0 idr_Main.main1.0 idr_Main.main2.0 idr_Main.main3.0)
  "idr_{runMain_0}1.0" <- pure idr_Main.main0.0
  "idr_{APPLY_0}0_val.8.0" <- pure "idr_{runMain_0}0_val_211.0"
  (C"idr_{U_Prelude.Interactive.replWith_1}" "idr_{APPLY_0}2_204.8.0" "idr_{APPLY_0}3.8.0" "idr_{APPLY_0}4.8.0" "idr_{APPLY_0}5.8.0") <- pure "idr_{APPLY_0}0_val.8.0"
  "idr_{runMain_0}0_val.0" <- idr_Prelude.Interactive.replWith "idr_{APPLY_0}4.8.0" "idr_{APPLY_0}5.8.0" "idr_{runMain_0}1.0"
  pure ()

idr_Prelude.List.dropWhile idr_Prelude.List.dropWhile1 idr_Prelude.List.dropWhile2 =
  idr_Prelude.List.dropWhile2_val <- fetch idr_Prelude.List.dropWhile2
  case idr_Prelude.List.dropWhile2_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.dropWhile3 idr_Prelude.List.dropWhile4) ->
      (CGrInt "idr_{APPLY_0}1.0.48.0.arity.1") <- fetch idr_Prelude.List.dropWhile3
      idr_Prelude.Chars.isSpace1.32.11.arity.1.0 <- pure 32
      idris_int_eq2.0.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.0.arity.1" idr_Prelude.Chars.isSpace1.32.11.arity.1.0
      ccp.0.0.0 <- case idris_int_eq2.0.0 of
        #False ->
          pure 0
        #True ->
          pure 1
      idr_Prelude.List.dropWhile5_val <- case ccp.0.0.0 of
        0 ->
          idr_Prelude.Chars.isSpace2.32.12.arity.1.0 <- pure 9
          idris_int_eq2.1.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.0.arity.1" idr_Prelude.Chars.isSpace2.32.12.arity.1.0
          ccp.0.1.0 <- case idris_int_eq2.1.0 of
            #False ->
              pure ccp.0.0.0
            #True ->
              pure 1
          case ccp.0.1.0 of
            0 ->
              idr_Prelude.Chars.isSpace3.32.13.arity.1.0 <- pure 13
              idris_int_eq2.2.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.0.arity.1" idr_Prelude.Chars.isSpace3.32.13.arity.1.0
              ccp.0.2.0 <- case idris_int_eq2.2.0 of
                #False ->
                  pure ccp.0.0.0
                #True ->
                  pure 1
              case ccp.0.2.0 of
                0 ->
                  idr_Prelude.Chars.isSpace4.32.14.arity.1.0 <- pure 10
                  idris_int_eq2.3.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.0.arity.1" idr_Prelude.Chars.isSpace4.32.14.arity.1.0
                  ccp.0.3.0 <- case idris_int_eq2.3.0 of
                    #False ->
                      pure ccp.0.0.0
                    #True ->
                      pure 1
                  case ccp.0.3.0 of
                    0 ->
                      idr_Prelude.Chars.isSpace5.32.15.arity.1.0 <- pure 12
                      idris_int_eq2.4.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.0.arity.1" idr_Prelude.Chars.isSpace5.32.15.arity.1.0
                      ccp.0.4.0 <- case idris_int_eq2.4.0 of
                        #False ->
                          pure ccp.0.0.0
                        #True ->
                          pure 1
                      case ccp.0.4.0 of
                        0 ->
                          idr_Prelude.Chars.isSpace6.32.16.arity.1.0 <- pure 11
                          idris_int_eq2.5.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.0.arity.1" idr_Prelude.Chars.isSpace6.32.16.arity.1.0
                          ccp.0.5.0 <- case idris_int_eq2.5.0 of
                            #False ->
                              pure ccp.0.0.0
                            #True ->
                              pure 1
                          case ccp.0.5.0 of
                            0 ->
                              idr_Prelude.Chars.isSpace7.32.17.arity.1.0 <- pure 160
                              idris_int_eq2.6.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.0.arity.1" idr_Prelude.Chars.isSpace7.32.17.arity.1.0
                              ccp.0.6.0 <- case idris_int_eq2.6.0 of
                                #False ->
                                  pure ccp.0.0.0
                                #True ->
                                  pure 1
                              case ccp.0.6.0 of
                                0 ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                #default ->
                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                            #default ->
                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      case idr_Prelude.List.dropWhile5_val of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.List.:: idr_Prelude.List.dropWhile3 idr_Prelude.List.dropWhile4) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.List.dropWhile3 idr_Prelude.List.dropWhile4)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.List.dropWhile idr_Prelude.List.dropWhile1 idr_Prelude.List.dropWhile4 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_{APPLY_0}1.0.48.0.arity.1")
    (Cidr_Prelude.List.Nil) ->
      pure idr_Prelude.List.dropWhile2_val

idr_Prelude.List.length.unboxed idr_Prelude.List.length1 =
  idr_Prelude.List.length1_val <- fetch idr_Prelude.List.length1
  case idr_Prelude.List.length1_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.length2 idr_Prelude.List.length3) ->
      unboxed.CGrInt.14 <- idr_Prelude.List.length.unboxed idr_Prelude.List.length3
      idr_Prelude.List.length4_val <- pure (CGrInt unboxed.CGrInt.14)
      idr_Prelude.List.length5_val <- pure (CGrInt 1)
      (CGrInt idris_int_add0_1.0) <- pure idr_Prelude.List.length4_val
      (CGrInt idris_int_add1_1.0) <- pure idr_Prelude.List.length5_val
      idris_int_add2.0 <- _prim_int_add idris_int_add0_1.0 idris_int_add1_1.0
      pure idris_int_add2.0
    (Cidr_Prelude.List.Nil) ->
      pure 0

idr_Prelude.Interactive.replWith idr_Prelude.Interactive.replWith2 idr_Prelude.Interactive.replWith3 idr_Prelude.Interactive.replWith4 =
  unboxed.CGrInt.19 <- pure 0
  idr_Prelude.Interactive.replWith5_val_121 <- pure (CGrInt unboxed.CGrInt.19)
  (CGrInt idr_Prelude.File.fEOF0.0.40.7.arity.1) <- pure idr_Prelude.Interactive.replWith5_val_121
  idris_ffi_file_eof2.0 <- _prim_ffi_file_eof idr_Prelude.File.fEOF0.0.40.7.arity.1
  idr_Prelude.File.fEOF3_val_16.0 <- pure (CGrInt 0)
  idr_Prelude.File.fEOF3.32.2.arity.1.0 <- pure unboxed.CGrInt.19
  idris_int_eq2.7 <- _prim_int_eq idris_ffi_file_eof2.0 idr_Prelude.File.fEOF3.32.2.arity.1.0
  ccp.0.7 <- case idris_int_eq2.7 of
    #False ->
      pure unboxed.CGrInt.19
    #True ->
      pure 1
  idr_Prelude.Interactive.replWith5_val <- case ccp.0.7 of
    0 ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  case idr_Prelude.Interactive.replWith5_val of
    (Cidr_Prelude.Bool.False) ->
      (CGrString idr_Prelude.Interactive.replWith2.32.25.arity.1) <- fetch idr_Prelude.Interactive.replWith2
      _prim_string_print idr_Prelude.Interactive.replWith2.32.25.arity.1
      idris_read_str1.0 <- _prim_read_string
      idris_str_rev2.0 <- _prim_string_reverse idris_read_str1.0
      idr_Prelude.Interactive.getLine'4_val.0 <- pure (CGrString #"")
      idr_Prelude.Interactive.getLine'4.32.4.arity.1.0 <- pure #""
      idris_str_eq3.0 <- _prim_string_eq idris_str_rev2.0 idr_Prelude.Interactive.getLine'4.32.4.arity.1.0
      ccp.2.0 <- case idris_str_eq3.0 of
        #False ->
          pure unboxed.CGrInt.19
        #True ->
          pure 1
      idr_Prelude.Interactive.getLine'3_val_20.0 <- case ccp.2.0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" <- pure (Cidr_Prelude.Bool.True)
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_226.0" <- pure idr_Prelude.Interactive.getLine'3_val_20.0
      idr_Prelude.Interactive.getLine'3_val_19.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_226.0" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Prelude.Interactive.getLine'3_val.0 <- case idr_Prelude.Interactive.getLine'3_val_19.0 of
        (Cidr_Prelude.Basics.No) ->
          pure idr_Prelude.Interactive.getLine'4_val.0
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_rev2.1 <- pure idris_str_rev2.0
          idris_str_head2.0 <- _prim_string_head idris_str_rev2.1
          ccp.0 <- case idris_str_head2.0 of
            10 ->
              idris_str_rev2.2 <- pure idris_str_rev2.0
              idris_str_tail2.0 <- _prim_string_tail idris_str_rev2.2
              pure idris_str_tail2.0
            #default ->
              idris_str_rev2.3 <- pure idris_str_rev2.0
              idris_str_head2.1 <- _prim_string_head idris_str_rev2.3
              idr_Prelude.Interactive.getLine'5_val_35.0 <- pure (CGrInt idris_str_head2.1)
              idris_str_rev2.4 <- pure idris_str_rev2.0
              idris_str_tail2.1 <- _prim_string_tail idris_str_rev2.4
              idr_Prelude.Interactive.getLine'6_val.0 <- pure (CGrString idris_str_tail2.1)
              (CGrInt idris_str_cons1_0.0) <- pure idr_Prelude.Interactive.getLine'5_val_35.0
              (CGrString idris_str_cons2_0.0) <- pure idr_Prelude.Interactive.getLine'6_val.0
              idris_str_cons3.0 <- _prim_string_cons idris_str_cons1_0.0 idris_str_cons2_0.0
              pure idris_str_cons3.0
          pure (CGrString ccp.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString ccp.0)
      (CGrString idr_Prelude.Interactive.getLine'3_49.32.10.arity.1.0) <- pure idr_Prelude.Interactive.getLine'3_val.0
      idris_str_rev2.5 <- _prim_string_reverse idr_Prelude.Interactive.getLine'3_49.32.10.arity.1.0
      idr_Prelude.Interactive.replWith7_val <- pure (CGrString idris_str_rev2.5)
      idr_Main.average3_val.0.0 <- pure (C"idr_{U_Main.{average_0}_2}")
      idr_Main.average3.0.0 <- store idr_Main.average3_val.0.0
      idr_Main.average4.0.0 <- store idr_Prelude.File.fEOF3_val_16.0
      idr_Main.average7_val.0.0 <- pure (C"idr_{U_Main.{average_1}_1}")
      idr_Main.average7.0.0 <- store idr_Main.average7_val.0.0
      (CGrString idr_Main.average0.0.0.48.1.arity.1) <- pure idr_Prelude.Interactive.replWith7_val
      idr_Main.average8_val.0.0 <- idr_Prelude.Strings.words idr_Main.average0.0.0.48.1.arity.1
      idr_Main.average8.0.0 <- store idr_Main.average8_val.0.0
      idr_Main.average5_val.0.0 <- "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" idr_Main.average7.0.0 idr_Main.average8.0.0
      idr_Main.average5_4.0.0 <- store idr_Main.average5_val.0.0
      idr_Main.average1_val_1.0.0 <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" idr_Main.average3.0.0 idr_Main.average4.0.0 idr_Main.average5_4.0.0
      -- LINT: Invalid pattern match for (CGrInt idris_int_float1_0.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
      ,CGrString[T_String]}
      (CGrInt idris_int_float1_0.0) <- pure idr_Main.average1_val_1.0.0
      idris_int_float2.0 <- _prim_int_float idris_int_float1_0.0
      idr_Main.average3_val_11.0.0 <- pure idr_Main.average8_val.0.0
      idr_Main.average3_12.0.0 <- store idr_Main.average3_val_11.0.0
      unboxed.CGrInt.1.0.0 <- idr_Prelude.List.length.unboxed idr_Main.average3_12.0.0
      idr_Main.average2_val_8.0.0 <- pure (CGrInt unboxed.CGrInt.1.0.0)
      (CGrInt idris_int_float1_0.1) <- pure idr_Main.average2_val_8.0.0
      idris_int_float2.1 <- _prim_int_float idris_int_float1_0.1
      idris_float_div2.0 <- _prim_float_div idris_int_float2.0 idris_int_float2.1
      "idr_Main.{main_2}6_val.0" <- pure (CGrFloat idris_float_div2.0)
      (CGrFloat idris_float_str1_0.0.0) <- pure "idr_Main.{main_2}6_val.0"
      idris_float_str2.0.0 <- _prim_float_string idris_float_str1_0.0.0
      idr_Prelude.Show.primNumShow4_val.0.0 <- pure (CGrString idris_float_str2.0.0)
      idr_Prelude.Show.primNumShow6.0.40.23.arity.1.0 <- pure 5
      idris_int_eq2.8 <- _prim_int_eq unboxed.CGrInt.19 idr_Prelude.Show.primNumShow6.0.40.23.arity.1.0
      ccp.0.8 <- case idris_int_eq2.8 of
        #False ->
          pure unboxed.CGrInt.19
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_82.0.0 <- case ccp.0.8 of
        0 ->
          idris_int_lt2.0 <- _prim_int_lt unboxed.CGrInt.19 idr_Prelude.Show.primNumShow6.0.40.23.arity.1.0
          ccp.1.0 <- case idris_int_lt2.0 of
            #False ->
              pure unboxed.CGrInt.19
            #True ->
              pure 1
          case ccp.1.0 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_81.0.0 <- case idr_Prelude.Show.primNumShow5_val_82.0.0 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
        #default ->
          idr_Prelude.Show.primNumShow7.32.18.arity.1.0.0 <- pure idr_Prelude.Show.primNumShow6.0.40.23.arity.1.0
          idris_int_eq2.9 <- _prim_int_eq unboxed.CGrInt.19 idr_Prelude.Show.primNumShow7.32.18.arity.1.0.0
          ccp.0.9 <- case idris_int_eq2.9 of
            #False ->
              pure unboxed.CGrInt.19
            #True ->
              pure 1
          case ccp.0.9 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
      idr_Prelude.Show.primNumShow5_val.0.0 <- case idr_Prelude.Show.primNumShow5_val_81.0.0 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_98.32.19.arity.1.0.0 <- pure idr_Prelude.Interactive.getLine'4.32.4.arity.1.0
          idris_str_eq3.1 <- _prim_string_eq idris_float_str2.0.0 idr_Prelude.Show.primNumShow6_98.32.19.arity.1.0.0
          ccp.2.1 <- case idris_str_eq3.1 of
            #False ->
              pure unboxed.CGrInt.19
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_95.0.0 <- case ccp.2.1 of
            0 ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_226.1" <- pure idr_Prelude.Show.primNumShow6_val_95.0.0
          idr_Prelude.Show.primNumShow6_val_94.0.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_226.1" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
          case idr_Prelude.Show.primNumShow6_val_94.0.0 of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Basics.Yes) ->
              idris_str_head2.2 <- _prim_string_head idris_float_str2.0.0
              idr_Prelude.Show.primNumShow8.32.21.arity.1.0.0 <- pure 45
              idris_int_eq2.10 <- _prim_int_eq idris_str_head2.2 idr_Prelude.Show.primNumShow8.32.21.arity.1.0.0
              ccp.0.10 <- case idris_int_eq2.10 of
                #False ->
                  pure unboxed.CGrInt.19
                #True ->
                  pure 1
              case ccp.0.10 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
      "idr_Main.{main_2}3_val_215.0" <- case idr_Prelude.Show.primNumShow5_val.0.0 of
        (Cidr_Prelude.Bool.False) ->
          pure idr_Prelude.Show.primNumShow4_val.0.0
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow7_119.32.22.arity.1.0.0 <- pure #")"
          idris_str_concat3.0 <- _prim_string_concat idris_float_str2.0.0 idr_Prelude.Show.primNumShow7_119.32.22.arity.1.0.0
          idr_Prelude.Show.primNumShow6_116.0.40.29.arity.1.0 <- pure #"("
          idris_str_concat3.1 <- _prim_string_concat idr_Prelude.Show.primNumShow6_116.0.40.29.arity.1.0 idris_str_concat3.0
          pure (CGrString idris_str_concat3.1) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_concat3.1)
      "idr_Main.{main_2}4_219.32.31.arity.1.0" <- pure #"\n"
      (CGrString "idr_Main.{main_2}3_217.40.30.arity.1.0") <- pure "idr_Main.{main_2}3_val_215.0"
      idris_str_concat3.2 <- _prim_string_concat "idr_Main.{main_2}3_217.40.30.arity.1.0" "idr_Main.{main_2}4_219.32.31.arity.1.0"
      "idr_Main.{main_2}2.40.31.arity.1.0" <- pure #"The average word length is: "
      idris_str_concat3.3 <- _prim_string_concat "idr_Main.{main_2}2.40.31.arity.1.0" idris_str_concat3.2
      "idr_Main.{main_2}2_val_213.0" <- pure (CGrString idris_str_concat3.3)
      "idr_Main.{main_2}2_221.0" <- store "idr_Main.{main_2}2_val_213.0"
      "idr_Main.{main_2}3_val_222.0" <- pure (Cidr_MkUnit)
      "idr_Main.{main_2}3_223.0" <- store "idr_Main.{main_2}3_val_222.0"
      "idr_Main.{main_2}2_val.0" <- pure (Cidr_Builtins.MkPair "idr_Main.{main_2}2_221.0" "idr_Main.{main_2}3_223.0")
      idr_Prelude.Interactive.replWith9_val <- pure "idr_Main.{main_2}2_val.0"
      (Cidr_Builtins.MkPair idr_Prelude.Interactive.replWith10 idr_Prelude.Interactive.replWith11) <- pure idr_Prelude.Interactive.replWith9_val
      idr_Prelude.Interactive.replWith15_val <- pure (C"idr_{U_Prelude.Interactive.{replWith_3}_1}" idr_Prelude.Interactive.replWith10)
      idr_Prelude.Interactive.replWith16_val <- pure (C"idr_{U_Prelude.Interactive.{replWith_4}_1}" idr_Prelude.Interactive.replWith11 idr_Prelude.Interactive.replWith2 idr_Prelude.Interactive.replWith3)
      "idr_{APPLY_0}0_val.1.0" <- pure idr_Prelude.Interactive.replWith15_val
      (C"idr_{U_Prelude.Interactive.{replWith_3}_1}" "idr_{APPLY_0}2_205.1.0") <- pure "idr_{APPLY_0}0_val.1.0"
      (CGrString "idr_{APPLY_0}2_205.1.0.40.14.arity.1") <- fetch "idr_{APPLY_0}2_205.1.0"
      _prim_string_print "idr_{APPLY_0}2_205.1.0.40.14.arity.1"
      "idr_{APPLY_0}0_val.2.0" <- pure idr_Prelude.Interactive.replWith16_val
      (C"idr_{U_Prelude.Interactive.{replWith_4}_1}" "idr_{APPLY_0}2_206.2.0" "idr_{APPLY_0}3_207.2.0" "idr_{APPLY_0}4_208.2.0") <- pure "idr_{APPLY_0}0_val.2.0"
      "idr_Prelude.Interactive.{replWith_4}4_val.0" <- pure (CErased)
      "idr_Prelude.Interactive.{replWith_4}4.0" <- store "idr_Prelude.Interactive.{replWith_4}4_val.0"
      idr_io_bind6_val.0 <- pure (C"idr_{U_Prelude.Interactive.replWith_1}" "idr_Prelude.Interactive.{replWith_4}4.0" "idr_{APPLY_0}2_206.2.0" "idr_{APPLY_0}3_207.2.0" "idr_{APPLY_0}4_208.2.0")
      "idr_{APPLY_0}0_val.3.0" <- pure idr_io_bind6_val.0
      (C"idr_{U_Prelude.Interactive.replWith_1}" "idr_{APPLY_0}2_204.3.0" "idr_{APPLY_0}3.3.0" "idr_{APPLY_0}4.3.0" "idr_{APPLY_0}5.3.0") <- pure "idr_{APPLY_0}0_val.3.0"
      idr_Prelude.Interactive.replWith "idr_{APPLY_0}4.3.0" "idr_{APPLY_0}5.3.0" idr_Prelude.Interactive.replWith4 -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_{APPLY_0}2_205.1.0.40.14.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Interactive.replWith2.32.25.arity.1)
    (Cidr_Prelude.Bool.True) ->
      pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

idr_Prelude.List.span idr_Prelude.List.span1 idr_Prelude.List.span2 =
  idr_Prelude.List.span2_val <- fetch idr_Prelude.List.span2
  case idr_Prelude.List.span2_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.span3 idr_Prelude.List.span4) ->
      (CGrInt "idr_Prelude.Strings.{words'_6}0.0.48.4.arity.1") <- fetch idr_Prelude.List.span3
      idr_Prelude.Chars.isSpace1.32.11.arity.1.1 <- pure 32
      idris_int_eq2.0.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_6}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace1.32.11.arity.1.1
      ccp.0.0.1 <- case idris_int_eq2.0.1 of
        #False ->
          pure 0
        #True ->
          pure 1
      "idr_Prelude.Strings.{words'_6}1_val.0" <- case ccp.0.0.1 of
        0 ->
          idr_Prelude.Chars.isSpace2.32.12.arity.1.1 <- pure 9
          idris_int_eq2.1.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_6}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace2.32.12.arity.1.1
          ccp.0.1.1 <- case idris_int_eq2.1.1 of
            #False ->
              pure ccp.0.0.1
            #True ->
              pure 1
          case ccp.0.1.1 of
            0 ->
              idr_Prelude.Chars.isSpace3.32.13.arity.1.1 <- pure 13
              idris_int_eq2.2.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_6}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace3.32.13.arity.1.1
              ccp.0.2.1 <- case idris_int_eq2.2.1 of
                #False ->
                  pure ccp.0.0.1
                #True ->
                  pure 1
              case ccp.0.2.1 of
                0 ->
                  idr_Prelude.Chars.isSpace4.32.14.arity.1.1 <- pure 10
                  idris_int_eq2.3.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_6}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace4.32.14.arity.1.1
                  ccp.0.3.1 <- case idris_int_eq2.3.1 of
                    #False ->
                      pure ccp.0.0.1
                    #True ->
                      pure 1
                  case ccp.0.3.1 of
                    0 ->
                      idr_Prelude.Chars.isSpace5.32.15.arity.1.1 <- pure 12
                      idris_int_eq2.4.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_6}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace5.32.15.arity.1.1
                      ccp.0.4.1 <- case idris_int_eq2.4.1 of
                        #False ->
                          pure ccp.0.0.1
                        #True ->
                          pure 1
                      case ccp.0.4.1 of
                        0 ->
                          idr_Prelude.Chars.isSpace6.32.16.arity.1.1 <- pure 11
                          idris_int_eq2.5.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_6}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace6.32.16.arity.1.1
                          ccp.0.5.1 <- case idris_int_eq2.5.1 of
                            #False ->
                              pure ccp.0.0.1
                            #True ->
                              pure 1
                          case ccp.0.5.1 of
                            0 ->
                              idr_Prelude.Chars.isSpace7.32.17.arity.1.1 <- pure 160
                              idris_int_eq2.6.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_6}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace7.32.17.arity.1.1
                              ccp.0.6.1 <- case idris_int_eq2.6.1 of
                                #False ->
                                  pure ccp.0.0.1
                                #True ->
                                  pure 1
                              case ccp.0.6.1 of
                                0 ->
                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                #default ->
                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                            #default ->
                              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                    #default ->
                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.List.span5_val <- case "idr_Prelude.Strings.{words'_6}1_val.0" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      case idr_Prelude.List.span5_val of
        (Cidr_Prelude.Bool.False) ->
          idr_Prelude.List.span6_val <- pure (Cidr_Prelude.List.Nil)
          idr_Prelude.List.span6 <- store idr_Prelude.List.span6_val
          idr_Prelude.List.span7_val <- pure (Cidr_Prelude.List.:: idr_Prelude.List.span3 idr_Prelude.List.span4)
          idr_Prelude.List.span7 <- store idr_Prelude.List.span7_val
          pure (Cidr_Builtins.MkPair idr_Prelude.List.span6 idr_Prelude.List.span7) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.span6 idr_Prelude.List.span7)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.List.span6_val_134 <- idr_Prelude.List.span idr_Prelude.List.span1 idr_Prelude.List.span4
          (Cidr_Builtins.MkPair idr_Prelude.List.span7_139 idr_Prelude.List.span8) <- pure idr_Prelude.List.span6_val_134
          idr_Prelude.List.span9_val <- pure (Cidr_Prelude.List.:: idr_Prelude.List.span3 idr_Prelude.List.span7_139)
          idr_Prelude.List.span9 <- store idr_Prelude.List.span9_val
          pure (Cidr_Builtins.MkPair idr_Prelude.List.span9 idr_Prelude.List.span8) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.span9 idr_Prelude.List.span8) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Strings.{words'_6}0.0.48.4.arity.1")
    (Cidr_Prelude.List.Nil) ->
      idr_Prelude.List.span3_val <- pure (Cidr_Prelude.List.Nil)
      idr_Prelude.List.span3_140 <- store idr_Prelude.List.span3_val
      idr_Prelude.List.span4_141 <- pure idr_Prelude.List.span3_140
      pure (Cidr_Builtins.MkPair idr_Prelude.List.span3_140 idr_Prelude.List.span4_141) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.span3_140 idr_Prelude.List.span4_141)

idr_Prelude.Strings.words idr_Prelude.Strings.words0.48.arity.1 =
  idr_Prelude.Strings.words3_val <- pure (C"idr_{U_Prelude.Strings.{words_5}_1}")
  idr_Prelude.Strings.words3 <- store idr_Prelude.Strings.words3_val
  idr_Prelude.Strings.words4.32.26.arity.1 <- pure #""
  idris_str_eq3.2 <- _prim_string_eq idr_Prelude.Strings.words0.48.arity.1 idr_Prelude.Strings.words4.32.26.arity.1
  ccp.2.2 <- case idris_str_eq3.2 of
    #False ->
      pure 0
    #True ->
      pure 1
  idr_Prelude.Strings.words4_val_156 <- case ccp.2.2 of
    0 ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.2" <- pure (Cidr_Prelude.Bool.True)
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_226.2" <- pure idr_Prelude.Strings.words4_val_156
  idr_Prelude.Strings.words4_val_155 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_226.2" of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
    (Cidr_Prelude.Bool.True) ->
      pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
  idr_Prelude.Strings.words4_val_154 <- case idr_Prelude.Strings.words4_val_155 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      idris_str_head2.3 <- _prim_string_head idr_Prelude.Strings.words0.48.arity.1
      idr_Prelude.Strings.words5_val_164 <- pure (CGrInt idris_str_head2.3)
      idr_Prelude.Strings.words5_165 <- store idr_Prelude.Strings.words5_val_164
      idris_str_tail2.2 <- _prim_string_tail idr_Prelude.Strings.words0.48.arity.1
      idr_Prelude.Strings.words8.32.28.arity.1 <- pure idr_Prelude.Strings.words4.32.26.arity.1
      idris_str_eq3.3 <- _prim_string_eq idris_str_tail2.2 idr_Prelude.Strings.words8.32.28.arity.1
      ccp.2.3 <- case idris_str_eq3.3 of
        #False ->
          pure 0
        #True ->
          pure 1
      idr_Prelude.Strings.words7_val_168 <- case ccp.2.3 of
        0 ->
          pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.2"
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_226.3" <- pure idr_Prelude.Strings.words7_val_168
      idr_Prelude.Strings.words7_val_167 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_226.3" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Prelude.Strings.words7_val <- case idr_Prelude.Strings.words7_val_167 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_tail2.3 <- pure idris_str_tail2.2
          idris_str_head2.4 <- _prim_string_head idris_str_tail2.3
          idr_Prelude.Strings.words8_val_179 <- pure (CGrInt idris_str_head2.4)
          idr_Prelude.Strings.words8_182 <- store idr_Prelude.Strings.words8_val_179
          idris_str_tail2.4 <- pure idris_str_tail2.2
          idris_str_tail2.5 <- _prim_string_tail idris_str_tail2.4
          idr_Prelude.Strings.words9_val <- pure (CGrString idris_str_tail2.5)
          idr_Prelude.Strings.words9_184 <- store idr_Prelude.Strings.words9_val
          pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.words8_182 idr_Prelude.Strings.words9_184) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.words8_182 idr_Prelude.Strings.words9_184)
      idr_Prelude.Strings.words7_185 <- store idr_Prelude.Strings.words7_val
      idr_Prelude.Strings.words6_val <- idr__Prelude.Strings.unpack_with_36 idr_Prelude.Strings.words7_185
      idr_Prelude.Strings.words6_186 <- store idr_Prelude.Strings.words6_val
      pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words5_165 idr_Prelude.Strings.words6_186) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words5_165 idr_Prelude.Strings.words6_186)
  idr_Prelude.Strings.words4_187 <- store idr_Prelude.Strings.words4_val_154
  idr_Prelude.Strings.words4_val <- idr_Prelude.Strings.words' idr_Prelude.Strings.words4_187
  idr_Prelude.Strings.words4_188 <- store idr_Prelude.Strings.words4_val
  "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" idr_Prelude.Strings.words3 idr_Prelude.Strings.words4_188

idr_Prelude.Strings.words' idr_Prelude.Strings.words'0 =
  idr_Prelude.Strings.words'2_val <- pure (C"idr_{U_Prelude.Chars.isSpace_1}")
  idr_Prelude.Strings.words'2 <- store idr_Prelude.Strings.words'2_val
  idr_Prelude.Strings.words'1_val <- idr_Prelude.List.dropWhile idr_Prelude.Strings.words'2 idr_Prelude.Strings.words'0
  case idr_Prelude.Strings.words'1_val of
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    #default ->
      idr_Prelude.Strings.words'3_val <- pure (C"idr_{U_Prelude.Strings.{words'_6}_1}")
      idr_Prelude.Strings.words'3 <- store idr_Prelude.Strings.words'3_val
      idr_Prelude.Strings.words'5 <- pure idr_Prelude.Strings.words'2
      idr_Prelude.Strings.words'4_val <- idr_Prelude.List.dropWhile idr_Prelude.Strings.words'5 idr_Prelude.Strings.words'0
      idr_Prelude.Strings.words'4_196 <- store idr_Prelude.Strings.words'4_val
      idr_Prelude.Strings.words'2_val_192 <- idr_Prelude.List.span idr_Prelude.Strings.words'3 idr_Prelude.Strings.words'4_196
      (Cidr_Builtins.MkPair idr_Prelude.Strings.words'3_199 idr_Prelude.Strings.words'4_200) <- pure idr_Prelude.Strings.words'2_val_192
      idr_Prelude.Strings.words'5_val_201 <- idr_Prelude.Strings.words' idr_Prelude.Strings.words'4_200
      idr_Prelude.Strings.words'5_202 <- store idr_Prelude.Strings.words'5_val_201
      pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words'3_199 idr_Prelude.Strings.words'5_202) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words'3_199 idr_Prelude.Strings.words'5_202)

"idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04" =
  "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04_val" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04"
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  case "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:06") ->
      "idr_{APPLY_0}0_val.9" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07_val" <- case "idr_{APPLY_0}0_val.9" of
        (C"idr_{U_Main.{average_0}_2}") ->
          pure (C"idr_{U_Main.{average_0}_1}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{average_0}_1}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05")
        (C"idr_{U_prim__strCons_2}") ->
          pure (C"idr_{U_prim__strCons_1}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05")
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val" <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:06"
      "idr_{APPLY_0}0_val.10" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07_val"
      case "idr_{APPLY_0}0_val.10" of
        (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}2.10") ->
          -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1.1.0)
          -- LINT: Invalid pattern match for (CGrInt idris_int_add0_1.1.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
          ,CGrString[T_String]}
          (CGrInt idris_int_add0_1.1.0) <- fetch "idr_{APPLY_0}2.10"
          -- LINT: Invalid pattern match for (CGrInt idris_int_add1_1.1.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
          ,CGrString[T_String]}
          (CGrInt idris_int_add1_1.1.0) <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val"
          idris_int_add2.1.0 <- _prim_int_add idris_int_add0_1.1.0 idris_int_add1_1.1.0
          pure (CGrInt idris_int_add2.1.0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_int_add2.1.0)
        (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_210.10") ->
          -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_str_cons1_0.1)
          -- LINT: Invalid pattern match for (CGrInt idris_str_cons1_0.1). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
          ,CGrString[T_String]}
          (CGrInt idris_str_cons1_0.1) <- fetch "idr_{APPLY_0}2_210.10"
          -- LINT: Invalid pattern match for (CGrString idris_str_cons2_0.1). Expected pattern of type: {CGrString[T_String]}, but got: {CGrInt[T_Int64]
          ,CGrString[T_String]}
          (CGrString idris_str_cons2_0.1) <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val"
          idris_str_cons3.1 <- _prim_string_cons idris_str_cons1_0.1 idris_str_cons2_0.1
          pure (CGrString idris_str_cons3.1) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_cons3.1)
    (Cidr_Prelude.List.Nil) ->
      fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03"

"idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03" =
  "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val" <- fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03"
  case "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:05") ->
      "idr_{APPLY_0}0_val.11" <- fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06_val" <- case "idr_{APPLY_0}0_val.11" of
        (C"idr_{U_Main.{average_1}_1}") ->
          -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_len2.0)
          -- LINT: Invalid pattern match for (CGrString idris_str_len2.0). Expected pattern of type: {CGrString[T_String]}, but got: {CGrInt[T_Int64]
          ,CGrString[T_String]
          ,Cidr_Prelude.List.::[{37,39,58}
                               ,{30,32,33}]
          ,Cidr_Prelude.List.Nil[]}
          (CGrString idris_str_len2.0) <- fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
          idris_str_len3.0 <- _prim_string_len idris_str_len2.0
          "idr_Main.{average_1}1_val.0" <- pure (CGrInt idris_str_len3.0)
          (CGrInt idr_prim__zextInt_BigInt0.32.24.arity.1.0.0) <- pure "idr_Main.{average_1}1_val.0"
          idris_lz_ext3.0 <- _prim_int_add idr_prim__zextInt_BigInt0.32.24.arity.1.0.0 0
          pure (CGrInt idris_lz_ext3.0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_lz_ext3.0)
        (C"idr_{U_Prelude.Strings.{words_5}_1}") ->
          "idr_Prelude.Strings.{words_5}3_val.0" <- pure (C"idr_{U_prim__strCons_2}")
          "idr_Prelude.Strings.{words_5}3.0" <- store "idr_Prelude.Strings.{words_5}3_val.0"
          "idr_Prelude.Strings.{words_5}4_val.0" <- pure (CGrString #"")
          "idr_Prelude.Strings.{words_5}4.0" <- store "idr_Prelude.Strings.{words_5}4_val.0"
          "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" "idr_Prelude.Strings.{words_5}3.0" "idr_Prelude.Strings.{words_5}4.0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06_val"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val" <- "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:05"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_230" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val"
      pure (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_230") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_230")
    (Cidr_Prelude.List.Nil) ->
      pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val"

idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_361 =
  idr__Prelude.Strings.unpack_with_361_val <- fetch idr__Prelude.Strings.unpack_with_361
  case idr__Prelude.Strings.unpack_with_361_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_363) ->
      idr__Prelude.Strings.unpack_with_365.32.37.arity.1 <- pure #""
      (CGrString idr__Prelude.Strings.unpack_with_363.40.33.arity.1) <- fetch idr__Prelude.Strings.unpack_with_363
      idris_str_eq3.4 <- _prim_string_eq idr__Prelude.Strings.unpack_with_363.40.33.arity.1 idr__Prelude.Strings.unpack_with_365.32.37.arity.1
      ccp.2.4 <- case idris_str_eq3.4 of
        #False ->
          pure 0
        #True ->
          pure 1
      idr__Prelude.Strings.unpack_with_365_val_236 <- case ccp.2.4 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_226.4" <- pure idr__Prelude.Strings.unpack_with_365_val_236
      idr__Prelude.Strings.unpack_with_365_val_235 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_226.4" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr__Prelude.Strings.unpack_with_365_val <- case idr__Prelude.Strings.unpack_with_365_val_235 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idris_str_head2.5 <- _prim_string_head idr__Prelude.Strings.unpack_with_363.40.33.arity.1
          idr__Prelude.Strings.unpack_with_366_val_244 <- pure (CGrInt idris_str_head2.5)
          idr__Prelude.Strings.unpack_with_366_245 <- store idr__Prelude.Strings.unpack_with_366_val_244
          idris_str_tail2.6 <- _prim_string_tail idr__Prelude.Strings.unpack_with_363.40.33.arity.1
          idr__Prelude.Strings.unpack_with_367_val <- pure (CGrString idris_str_tail2.6)
          idr__Prelude.Strings.unpack_with_367 <- store idr__Prelude.Strings.unpack_with_367_val
          pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_245 idr__Prelude.Strings.unpack_with_367) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_245 idr__Prelude.Strings.unpack_with_367)
      idr__Prelude.Strings.unpack_with_365_246 <- store idr__Prelude.Strings.unpack_with_365_val
      idr__Prelude.Strings.unpack_with_364_val <- idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_365_246
      idr__Prelude.Strings.unpack_with_364_247 <- store idr__Prelude.Strings.unpack_with_364_val
      pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_247) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_247) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.unpack_with_363.40.33.arity.1)
    (Cidr_Prelude.Strings.StrNil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
