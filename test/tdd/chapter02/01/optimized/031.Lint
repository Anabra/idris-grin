grinMain =
  idr_Main.main1_val_49.0 <- pure (CGrString #"The average word length is: ")
  idr_Main.main3_val.0 <- pure (C"idr_{U_prim__floatToStr_1}")
  idr_Main.main3.0 <- store idr_Main.main3_val.0
  idr_Main.main5_val_52.0 <- pure (CGrString #"This is a test sentence!")
  idr_Main.main5.0 <- store idr_Main.main5_val_52.0
  idr_Main.average0.0 <- pure idr_Main.main5.0
  idr_Main.average3_val.0 <- pure (C"idr_{U_Main.{average_0}_2}")
  idr_Main.average3.0 <- store idr_Main.average3_val.0
  idr_Main.average4_val.0 <- pure (CGrInt 0)
  idr_Main.average4.0 <- store idr_Main.average4_val.0
  idr_Main.average7_val.0 <- pure (C"idr_{U_Main.{average_1}_1}")
  idr_Main.average7.0 <- store idr_Main.average7_val.0
  (CGrString idr_Main.average0.48.0.arity.1.0) <- fetch idr_Main.main5.0
  idr_Main.average8_val.0 <- idr_Prelude.Strings.words idr_Main.average0.48.0.arity.1.0
  idr_Main.average8.0 <- store idr_Main.average8_val.0
  idr_Main.average5_val.0 <- "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" idr_Main.average7.0 idr_Main.average8.0
  idr_Main.average5_4.0 <- store idr_Main.average5_val.0
  idr_Main.average1_val_1.0 <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" idr_Main.average3.0 idr_Main.average4.0 idr_Main.average5_4.0
  idr_Main.average1_5.0 <- store idr_Main.average1_val_1.0
  idris_int_float1.0 <- pure idr_Main.average1_5.0
  -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_float1_0.0)
  -- LINT: Invalid pattern match for (CGrInt idris_int_float1_0.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
  ,CGrString[T_String]}
  (CGrInt idris_int_float1_0.0) <- fetch idr_Main.average1_5.0
  idris_int_float2.0 <- _prim_int_float idris_int_float1_0.0
  unboxed.CGrFloat.0.0 <- pure idris_int_float2.0
  idr_Main.average1_val.0 <- pure (CGrFloat idris_int_float2.0)
  idr_Main.average0.48.1.arity.1.0 <- pure idr_Main.average0.48.0.arity.1.0
  idr_Main.average3_val_11.0 <- idr_Prelude.Strings.words idr_Main.average0.48.0.arity.1.0
  idr_Main.average3_12.0 <- store idr_Main.average3_val_11.0
  unboxed.CGrInt.1.0 <- idr_Prelude.List.length.unboxed idr_Main.average3_12.0
  idr_Main.average2_val_8.0 <- pure (CGrInt unboxed.CGrInt.1.0)
  idr_Main.average2_13.0 <- store idr_Main.average2_val_8.0
  idris_int_float1.1 <- pure idr_Main.average2_13.0
  (CGrInt idris_int_float1_0.1) <- fetch idr_Main.average2_13.0
  idris_int_float2.1 <- _prim_int_float idris_int_float1_0.1
  unboxed.CGrFloat.1.0 <- pure idris_int_float2.1
  idr_Main.average2_val_7.0 <- pure (CGrFloat idris_int_float2.1)
  idr_Main.average1_6.32.0.arity.1.0 <- pure idris_int_float2.0
  idr_Main.average2_14.32.0.arity.1.0 <- pure idris_int_float2.1
  idris_float_div0.32.arity.1.0 <- pure idris_int_float2.0
  idris_float_div1.32.arity.1.0 <- pure idris_int_float2.1
  idris_float_div0_1.0 <- pure idris_int_float2.0
  idris_float_div1_1.0 <- pure idris_int_float2.1
  idris_float_div2.0 <- _prim_float_div idris_int_float2.0 idris_int_float2.1
  unboxed.CGrFloat.2.0 <- pure idris_float_div2.0
  idr_Main.main5_val.0 <- pure (CGrFloat idris_float_div2.0)
  idr_Main.main5_53.0 <- store idr_Main.main5_val.0
  idr_Prelude.Show.primNumShow1.0 <- pure idr_Main.main3.0
  idr_Prelude.Show.primNumShow3.0 <- pure idr_Main.main5_53.0
  "idr_{APPLY_0}0.1.0" <- pure idr_Main.main3.0
  "idr_{APPLY_0}1.1.0" <- pure idr_Main.main5_53.0
  "idr_{APPLY_0}0_val.1.0" <- fetch idr_Main.main3.0
  idr_Prelude.Show.primNumShow4_val.0 <- do
    (C"idr_{U_prim__floatToStr_1}") <- pure "idr_{APPLY_0}0_val.1.0"
    idr_prim__floatToStr0.0 <- pure idr_Main.main5_53.0
    idris_float_str1.0.0 <- pure idr_Main.main5_53.0
    (CGrFloat idris_float_str1_0.0.0) <- fetch idr_Main.main5_53.0
    idris_float_str2.0.0 <- _prim_float_string idris_float_str1_0.0.0
    unboxed.CGrString.10.0 <- pure idris_float_str2.0.0
    pure (CGrString idris_float_str2.0.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_float_str2.0.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrFloat idris_float_str1_0.0.0)
  idr_Prelude.Show.primNumShow2_val.0 <- pure (Cidr_Prelude.Show.Open)
  ccp.3.0 <- do
    pure 0
  idr_Prelude.Show.primNumShow5_val_65.0 <- pure (CGrInt ccp.3.0)
  idr_Prelude.Show.primNumShow6_val.0 <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6.40.10.arity.1.0 <- pure 5
  idr_Prelude.Show.primNumShow5.48.3.arity.1.0 <- pure ccp.3.0
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.48.arity.1.0" <- pure ccp.3.0
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.40.arity.1.0" <- pure idr_Prelude.Show.primNumShow6.40.10.arity.1.0
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.32.28.arity.1.0" <- pure idr_Prelude.Show.primNumShow6.40.10.arity.1.0
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.40.21.arity.1.0" <- pure ccp.3.0
  idris_int_eq0.40.arity.1.0 <- pure ccp.3.0
  idris_int_eq1.32.arity.1.0 <- pure idr_Prelude.Show.primNumShow6.40.10.arity.1.0
  idris_int_eq0_1.0 <- pure ccp.3.0
  idris_int_eq1_1.0 <- pure idr_Prelude.Show.primNumShow6.40.10.arity.1.0
  idris_int_eq2.0 <- _prim_int_eq ccp.3.0 idr_Prelude.Show.primNumShow6.40.10.arity.1.0
  ccp.0.0 <- case idris_int_eq2.0 of
    #False ->
      pure 0
    #True ->
      pure 1
  unboxed.CGrInt.19.0 <- pure ccp.0.0
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0" <- pure (CGrInt ccp.0.0)
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_184.0" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0"
  idr_Prelude.Show.primNumShow5_val_64.0 <- do
    "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0" <- pure ccp.0.0
    case ccp.0.0 of
      0 ->
        "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.32.29.arity.1.0" <- pure ccp.3.0
        "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.32.29.arity.1.0" <- pure idr_Prelude.Show.primNumShow6.40.10.arity.1.0
        idris_int_lt0.32.arity.1.0 <- pure ccp.3.0
        idris_int_lt1.32.arity.1.0 <- pure idr_Prelude.Show.primNumShow6.40.10.arity.1.0
        idris_int_lt0_1.0 <- pure ccp.3.0
        idris_int_lt1_1.0 <- pure idr_Prelude.Show.primNumShow6.40.10.arity.1.0
        idris_int_lt2.0 <- _prim_int_lt ccp.3.0 idr_Prelude.Show.primNumShow6.40.10.arity.1.0
        ccp.1.0 <- case idris_int_lt2.0 of
          #False ->
            pure ccp.0.0
          #True ->
            pure 1
        unboxed.CGrInt.20.0 <- pure ccp.1.0
        "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0" <- pure (CGrInt ccp.1.0)
        "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_185.0" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0"
        do
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_186.0" <- pure ccp.1.0
          case ccp.1.0 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
      #default ->
        pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
  idr_Prelude.Show.primNumShow5_val_67.0 <- pure idr_Prelude.Show.primNumShow5_val_64.0
  idr_Prelude.Show.primNumShow5_val_63.0 <- case idr_Prelude.Show.primNumShow5_val_64.0 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Show.primNumShow2_val_70.0 <- pure idr_Prelude.Show.primNumShow2_val.0
      ccp.4.0 <- do
        pure 0
      idr_Prelude.Show.primNumShow6_val_69.0 <- pure (CGrInt ccp.4.0)
      idr_Prelude.Show.primNumShow7_val.0 <- pure idr_Prelude.Show.primNumShow6_val.0
      idr_Prelude.Show.primNumShow7.32.13.arity.1.0 <- pure 5
      idr_Prelude.Show.primNumShow6_71.40.11.arity.1.0 <- pure ccp.4.0
      idris_int_eq0.40.arity.1.1 <- pure ccp.4.0
      idris_int_eq1.32.arity.1.1 <- pure idr_Prelude.Show.primNumShow7.32.13.arity.1.0
      idris_int_eq0_1.1 <- pure ccp.4.0
      idris_int_eq1_1.1 <- pure idr_Prelude.Show.primNumShow7.32.13.arity.1.0
      idris_int_eq2.1 <- _prim_int_eq ccp.4.0 idr_Prelude.Show.primNumShow7.32.13.arity.1.0
      ccp.0.1 <- case idris_int_eq2.1 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.10.0 <- pure ccp.0.1
      idr_Prelude.Show.primNumShow6_val_68.0 <- pure (CGrInt ccp.0.1)
      idr_Prelude.Show.primNumShow6_val_73.0 <- pure idr_Prelude.Show.primNumShow6_val_68.0
      do
        idr_Prelude.Show.primNumShow_cpat_LInt64_0.0 <- pure ccp.0.1
        case ccp.0.1 of
          0 ->
            pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          #default ->
            pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_val_75.0 <- pure idr_Prelude.Show.primNumShow5_val_63.0
  idr_Prelude.Show.primNumShow5_val.0 <- case idr_Prelude.Show.primNumShow5_val_63.0 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_79.0 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_80.32.14.arity.1.0 <- pure #""
      (CGrString idr_Prelude.Show.primNumShow4.40.12.arity.1.0) <- pure idr_Prelude.Show.primNumShow4_val.0
      idris_str_eq1.40.arity.1.0 <- pure idr_Prelude.Show.primNumShow4.40.12.arity.1.0
      idris_str_eq2.32.arity.1.0 <- pure idr_Prelude.Show.primNumShow6_80.32.14.arity.1.0
      idris_str_eq1_0.0 <- pure idr_Prelude.Show.primNumShow4.40.12.arity.1.0
      idris_str_eq2_0.0 <- pure idr_Prelude.Show.primNumShow6_80.32.14.arity.1.0
      idris_str_eq3.0 <- _prim_string_eq idr_Prelude.Show.primNumShow4.40.12.arity.1.0 idr_Prelude.Show.primNumShow6_80.32.14.arity.1.0
      ccp.2.0 <- case idris_str_eq3.0 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.11.0 <- pure ccp.2.0
      idr_Prelude.Show.primNumShow6_val_78.0 <- pure (CGrInt ccp.2.0)
      idr_Prelude.Show.primNumShow6_val_82.0 <- pure idr_Prelude.Show.primNumShow6_val_78.0
      idr_Prelude.Show.primNumShow6_val_77.0 <- do
        idr_Prelude.Show.primNumShow_cpat_LInt64_0_83.0 <- pure ccp.2.0
        case ccp.2.0 of
          0 ->
            pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
          #default ->
            pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Show.primNumShow6_84.0 <- store idr_Prelude.Show.primNumShow6_val_77.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.0" <- pure idr_Prelude.Show.primNumShow6_84.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow6_val_76.0 <- do
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_179.0" <- fetch idr_Prelude.Show.primNumShow6_84.0
        case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_179.0" of
          (Cidr_Prelude.Bool.False) ->
            pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
          (Cidr_Prelude.Bool.True) ->
            pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Prelude.Show.primNumShow6_val_88.0 <- pure idr_Prelude.Show.primNumShow6_val_76.0
      case idr_Prelude.Show.primNumShow6_val_76.0 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          (CGrString idr_Prelude.Show.primNumShow4.40.13.arity.1.0) <- pure idr_Prelude.Show.primNumShow4_val.0
          idris_str_head1.40.arity.1.0 <- pure idr_Prelude.Show.primNumShow4.40.13.arity.1.0
          idris_str_head1_0.0 <- pure idr_Prelude.Show.primNumShow4.40.13.arity.1.0
          idris_str_head2.0 <- _prim_string_head idr_Prelude.Show.primNumShow4.40.13.arity.1.0
          unboxed.CGrInt.12.0 <- pure idris_str_head2.0
          idr_Prelude.Show.primNumShow7_val_90.0 <- pure (CGrInt idris_str_head2.0)
          idr_Prelude.Show.primNumShow8_val.0 <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8.32.16.arity.1.0 <- pure 45
          idr_Prelude.Show.primNumShow7_91.40.14.arity.1.0 <- pure idris_str_head2.0
          idris_int_eq0.40.arity.1.2 <- pure idris_str_head2.0
          idris_int_eq1.32.arity.1.2 <- pure idr_Prelude.Show.primNumShow8.32.16.arity.1.0
          idris_int_eq0_1.2 <- pure idris_str_head2.0
          idris_int_eq1_1.2 <- pure idr_Prelude.Show.primNumShow8.32.16.arity.1.0
          idris_int_eq2.2 <- _prim_int_eq idris_str_head2.0 idr_Prelude.Show.primNumShow8.32.16.arity.1.0
          ccp.0.2 <- case idris_int_eq2.2 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.13.0 <- pure ccp.0.2
          idr_Prelude.Show.primNumShow7_val_89.0 <- pure (CGrInt ccp.0.2)
          idr_Prelude.Show.primNumShow7_val_93.0 <- pure idr_Prelude.Show.primNumShow7_val_89.0
          do
            idr_Prelude.Show.primNumShow_cpat_LInt64_0_94.0 <- pure ccp.0.2
            case ccp.0.2 of
              0 ->
                pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
              #default ->
                pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
  idr_Prelude.Show.primNumShow5_val_96.0 <- pure idr_Prelude.Show.primNumShow5_val.0
  unboxed.CGrString.6.0 <- case idr_Prelude.Show.primNumShow5_val.0 of
    (Cidr_Prelude.Bool.False) ->
      (CGrString unboxed.CGrString.5.0) <- pure idr_Prelude.Show.primNumShow4_val.0
      pure unboxed.CGrString.5.0
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_97.0 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow7_val_100.0 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_101.32.17.arity.1.0 <- pure #")"
      (CGrString idr_Prelude.Show.primNumShow4.40.15.arity.1.0) <- pure idr_Prelude.Show.primNumShow4_val.0
      idris_str_concat1.40.arity.1.0 <- pure idr_Prelude.Show.primNumShow4.40.15.arity.1.0
      idris_str_concat2.32.arity.1.0 <- pure idr_Prelude.Show.primNumShow7_101.32.17.arity.1.0
      idris_str_concat1_0.0 <- pure idr_Prelude.Show.primNumShow4.40.15.arity.1.0
      idris_str_concat2_0.0 <- pure idr_Prelude.Show.primNumShow7_101.32.17.arity.1.0
      idris_str_concat3.0 <- _prim_string_concat idr_Prelude.Show.primNumShow4.40.15.arity.1.0 idr_Prelude.Show.primNumShow7_101.32.17.arity.1.0
      unboxed.CGrString.11.0 <- pure idris_str_concat3.0
      idr_Prelude.Show.primNumShow7_val_99.0 <- pure (CGrString idris_str_concat3.0)
      idr_Prelude.Show.primNumShow7_102.32.18.arity.1.0 <- pure idris_str_concat3.0
      idr_Prelude.Show.primNumShow6_98.40.16.arity.1.0 <- pure #"("
      idris_str_concat1.40.arity.1.1 <- pure idr_Prelude.Show.primNumShow6_98.40.16.arity.1.0
      idris_str_concat2.32.arity.1.1 <- pure idris_str_concat3.0
      idris_str_concat1_0.1 <- pure idr_Prelude.Show.primNumShow6_98.40.16.arity.1.0
      idris_str_concat2_0.1 <- pure idris_str_concat3.0
      idris_str_concat3.1 <- _prim_string_concat idr_Prelude.Show.primNumShow6_98.40.16.arity.1.0 idris_str_concat3.0
      pure idris_str_concat3.1
  idr_Main.main2_val_50.0 <- pure (CGrString unboxed.CGrString.6.0)
  idr_Main.main3_val_55.0 <- pure (CGrString #"\n")
  idr_Main.main3_56.32.9.arity.1.0 <- pure #"\n"
  idr_Main.main2_54.40.7.arity.1.0 <- pure unboxed.CGrString.6.0
  idris_str_concat1.40.arity.1.2 <- pure unboxed.CGrString.6.0
  idris_str_concat2.32.arity.1.2 <- pure idr_Main.main3_56.32.9.arity.1.0
  idris_str_concat1_0.2 <- pure unboxed.CGrString.6.0
  idris_str_concat2_0.2 <- pure idr_Main.main3_56.32.9.arity.1.0
  idris_str_concat3.2 <- _prim_string_concat unboxed.CGrString.6.0 idr_Main.main3_56.32.9.arity.1.0
  unboxed.CGrString.7.0 <- pure idris_str_concat3.2
  idr_Main.main2_val.0 <- pure (CGrString idris_str_concat3.2)
  idr_Main.main2_57.32.10.arity.1.0 <- pure idris_str_concat3.2
  idr_Main.main1.40.8.arity.1.0 <- pure #"The average word length is: "
  idris_str_concat1.40.arity.1.3 <- pure idr_Main.main1.40.8.arity.1.0
  idris_str_concat2.32.arity.1.3 <- pure idris_str_concat3.2
  idris_str_concat1_0.3 <- pure idr_Main.main1.40.8.arity.1.0
  idris_str_concat2_0.3 <- pure idris_str_concat3.2
  idris_str_concat3.3 <- _prim_string_concat idr_Main.main1.40.8.arity.1.0 idris_str_concat3.2
  unboxed.CGrString.8.0 <- pure idris_str_concat3.3
  idr_Main.main1_val_48.0 <- pure (CGrString idris_str_concat3.3)
  idr_Main.main2_val_59.0 <- pure idr_Main.main3_val_55.0
  idr_Main.main2_60.32.11.arity.1.0 <- pure #"\n"
  idr_Main.main1_58.40.9.arity.1.0 <- pure idris_str_concat3.3
  idris_str_concat1.40.arity.1.4 <- pure idris_str_concat3.3
  idris_str_concat2.32.arity.1.4 <- pure idr_Main.main2_60.32.11.arity.1.0
  idris_str_concat1_0.4 <- pure idris_str_concat3.3
  idris_str_concat2_0.4 <- pure idr_Main.main2_60.32.11.arity.1.0
  idris_str_concat3.4 <- _prim_string_concat idris_str_concat3.3 idr_Main.main2_60.32.11.arity.1.0
  unboxed.CGrString.9.0 <- pure idris_str_concat3.4
  idr_Main.main1_val_47.0 <- pure (CGrString idris_str_concat3.4)
  idr_Main.main1_61.32.12.arity.1.0 <- pure idris_str_concat3.4
  idris_write_str2.32.arity.1.0 <- pure idris_str_concat3.4
  idris_write_str2_0.0 <- pure idris_str_concat3.4
  _prim_string_print idris_str_concat3.4 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_float1_0.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.average0.48.0.arity.1.0)

idr_Prelude.List.dropWhile idr_Prelude.List.dropWhile1 idr_Prelude.List.dropWhile2 =
  idr_Prelude.List.dropWhile2_val <- fetch idr_Prelude.List.dropWhile2
  case idr_Prelude.List.dropWhile2_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.dropWhile3 idr_Prelude.List.dropWhile4) ->
      "idr_{APPLY_0}0.0" <- pure idr_Prelude.List.dropWhile1
      "idr_{APPLY_0}1.0" <- pure idr_Prelude.List.dropWhile3
      "idr_{APPLY_0}0_val.0" <- fetch idr_Prelude.List.dropWhile1
      idr_Prelude.List.dropWhile5_val <- do
        (C"idr_{U_Prelude.Chars.isSpace_1}") <- pure "idr_{APPLY_0}0_val.0"
        (CGrInt "idr_{APPLY_0}1.0.48.2.arity.1") <- fetch idr_Prelude.List.dropWhile3
        idr_Prelude.Chars.isSpace0.48.arity.1.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
        idr_Prelude.Chars.isSpace1_val_18.0 <- pure (CGrInt 32)
        idr_Prelude.Chars.isSpace1.32.1.arity.1.0 <- pure 32
        idr_Prelude.Chars.isSpace0.40.0.arity.1.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
        idris_int_eq0.40.arity.1.3.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
        idris_int_eq1.32.arity.1.3.0 <- pure idr_Prelude.Chars.isSpace1.32.1.arity.1.0
        idris_int_eq0_1.3.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
        idris_int_eq1_1.3.0 <- pure idr_Prelude.Chars.isSpace1.32.1.arity.1.0
        idris_int_eq2.3.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.2.arity.1" idr_Prelude.Chars.isSpace1.32.1.arity.1.0
        ccp.0.3.0 <- case idris_int_eq2.3.0 of
          #False ->
            pure 0
          #True ->
            pure 1
        unboxed.CGrInt.2.0 <- pure ccp.0.3.0
        idr_Prelude.Chars.isSpace1_val.0 <- pure (CGrInt ccp.0.3.0)
        idr_Prelude.Chars.isSpace1_val_20.0 <- pure idr_Prelude.Chars.isSpace1_val.0
        do
          idr_Prelude.Chars.isSpace_cpat_LInt64_0.0 <- pure ccp.0.3.0
          case ccp.0.3.0 of
            0 ->
              idr_Prelude.Chars.isSpace2_val_21.0 <- pure (CGrInt 9)
              idr_Prelude.Chars.isSpace2.32.2.arity.1.0 <- pure 9
              idr_Prelude.Chars.isSpace0.40.1.arity.1.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
              idris_int_eq0.40.arity.1.4.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
              idris_int_eq1.32.arity.1.4.0 <- pure idr_Prelude.Chars.isSpace2.32.2.arity.1.0
              idris_int_eq0_1.4.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
              idris_int_eq1_1.4.0 <- pure idr_Prelude.Chars.isSpace2.32.2.arity.1.0
              idris_int_eq2.4.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.2.arity.1" idr_Prelude.Chars.isSpace2.32.2.arity.1.0
              ccp.0.4.0 <- case idris_int_eq2.4.0 of
                #False ->
                  pure ccp.0.3.0
                #True ->
                  pure 1
              unboxed.CGrInt.3.0 <- pure ccp.0.4.0
              idr_Prelude.Chars.isSpace2_val.0 <- pure (CGrInt ccp.0.4.0)
              idr_Prelude.Chars.isSpace2_val_23.0 <- pure idr_Prelude.Chars.isSpace2_val.0
              do
                idr_Prelude.Chars.isSpace_cpat_LInt64_0_24.0 <- pure ccp.0.4.0
                case ccp.0.4.0 of
                  0 ->
                    idr_Prelude.Chars.isSpace3_val_25.0 <- pure (CGrInt 13)
                    idr_Prelude.Chars.isSpace3.32.3.arity.1.0 <- pure 13
                    idr_Prelude.Chars.isSpace0.40.2.arity.1.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                    idris_int_eq0.40.arity.1.5.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                    idris_int_eq1.32.arity.1.5.0 <- pure idr_Prelude.Chars.isSpace3.32.3.arity.1.0
                    idris_int_eq0_1.5.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                    idris_int_eq1_1.5.0 <- pure idr_Prelude.Chars.isSpace3.32.3.arity.1.0
                    idris_int_eq2.5.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.2.arity.1" idr_Prelude.Chars.isSpace3.32.3.arity.1.0
                    ccp.0.5.0 <- case idris_int_eq2.5.0 of
                      #False ->
                        pure ccp.0.3.0
                      #True ->
                        pure 1
                    unboxed.CGrInt.4.0 <- pure ccp.0.5.0
                    idr_Prelude.Chars.isSpace3_val.0 <- pure (CGrInt ccp.0.5.0)
                    idr_Prelude.Chars.isSpace3_val_27.0 <- pure idr_Prelude.Chars.isSpace3_val.0
                    do
                      idr_Prelude.Chars.isSpace_cpat_LInt64_0_28.0 <- pure ccp.0.5.0
                      case ccp.0.5.0 of
                        0 ->
                          idr_Prelude.Chars.isSpace4_val_29.0 <- pure (CGrInt 10)
                          idr_Prelude.Chars.isSpace4.32.4.arity.1.0 <- pure 10
                          idr_Prelude.Chars.isSpace0.40.3.arity.1.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                          idris_int_eq0.40.arity.1.6.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                          idris_int_eq1.32.arity.1.6.0 <- pure idr_Prelude.Chars.isSpace4.32.4.arity.1.0
                          idris_int_eq0_1.6.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                          idris_int_eq1_1.6.0 <- pure idr_Prelude.Chars.isSpace4.32.4.arity.1.0
                          idris_int_eq2.6.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.2.arity.1" idr_Prelude.Chars.isSpace4.32.4.arity.1.0
                          ccp.0.6.0 <- case idris_int_eq2.6.0 of
                            #False ->
                              pure ccp.0.3.0
                            #True ->
                              pure 1
                          unboxed.CGrInt.5.0 <- pure ccp.0.6.0
                          idr_Prelude.Chars.isSpace4_val.0 <- pure (CGrInt ccp.0.6.0)
                          idr_Prelude.Chars.isSpace4_val_31.0 <- pure idr_Prelude.Chars.isSpace4_val.0
                          do
                            idr_Prelude.Chars.isSpace_cpat_LInt64_0_32.0 <- pure ccp.0.6.0
                            case ccp.0.6.0 of
                              0 ->
                                idr_Prelude.Chars.isSpace5_val_33.0 <- pure (CGrInt 12)
                                idr_Prelude.Chars.isSpace5.32.5.arity.1.0 <- pure 12
                                idr_Prelude.Chars.isSpace0.40.4.arity.1.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                                idris_int_eq0.40.arity.1.7.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                                idris_int_eq1.32.arity.1.7.0 <- pure idr_Prelude.Chars.isSpace5.32.5.arity.1.0
                                idris_int_eq0_1.7.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                                idris_int_eq1_1.7.0 <- pure idr_Prelude.Chars.isSpace5.32.5.arity.1.0
                                idris_int_eq2.7.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.2.arity.1" idr_Prelude.Chars.isSpace5.32.5.arity.1.0
                                ccp.0.7.0 <- case idris_int_eq2.7.0 of
                                  #False ->
                                    pure ccp.0.3.0
                                  #True ->
                                    pure 1
                                unboxed.CGrInt.6.0 <- pure ccp.0.7.0
                                idr_Prelude.Chars.isSpace5_val.0 <- pure (CGrInt ccp.0.7.0)
                                idr_Prelude.Chars.isSpace5_val_35.0 <- pure idr_Prelude.Chars.isSpace5_val.0
                                do
                                  idr_Prelude.Chars.isSpace_cpat_LInt64_0_36.0 <- pure ccp.0.7.0
                                  case ccp.0.7.0 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace6_val_37.0 <- pure (CGrInt 11)
                                      idr_Prelude.Chars.isSpace6.32.6.arity.1.0 <- pure 11
                                      idr_Prelude.Chars.isSpace0.40.5.arity.1.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                                      idris_int_eq0.40.arity.1.8.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                                      idris_int_eq1.32.arity.1.8.0 <- pure idr_Prelude.Chars.isSpace6.32.6.arity.1.0
                                      idris_int_eq0_1.8.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                                      idris_int_eq1_1.8.0 <- pure idr_Prelude.Chars.isSpace6.32.6.arity.1.0
                                      idris_int_eq2.8.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.2.arity.1" idr_Prelude.Chars.isSpace6.32.6.arity.1.0
                                      ccp.0.8.0 <- case idris_int_eq2.8.0 of
                                        #False ->
                                          pure ccp.0.3.0
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.7.0 <- pure ccp.0.8.0
                                      idr_Prelude.Chars.isSpace6_val.0 <- pure (CGrInt ccp.0.8.0)
                                      idr_Prelude.Chars.isSpace6_val_39.0 <- pure idr_Prelude.Chars.isSpace6_val.0
                                      do
                                        idr_Prelude.Chars.isSpace_cpat_LInt64_0_40.0 <- pure ccp.0.8.0
                                        case ccp.0.8.0 of
                                          0 ->
                                            idr_Prelude.Chars.isSpace7_val_41.0 <- pure (CGrInt 160)
                                            idr_Prelude.Chars.isSpace7.32.7.arity.1.0 <- pure 160
                                            idr_Prelude.Chars.isSpace0.40.6.arity.1.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                                            idris_int_eq0.40.arity.1.9.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                                            idris_int_eq1.32.arity.1.9.0 <- pure idr_Prelude.Chars.isSpace7.32.7.arity.1.0
                                            idris_int_eq0_1.9.0 <- pure "idr_{APPLY_0}1.0.48.2.arity.1"
                                            idris_int_eq1_1.9.0 <- pure idr_Prelude.Chars.isSpace7.32.7.arity.1.0
                                            idris_int_eq2.9.0 <- _prim_int_eq "idr_{APPLY_0}1.0.48.2.arity.1" idr_Prelude.Chars.isSpace7.32.7.arity.1.0
                                            ccp.0.9.0 <- case idris_int_eq2.9.0 of
                                              #False ->
                                                pure ccp.0.3.0
                                              #True ->
                                                pure 1
                                            unboxed.CGrInt.8.0 <- pure ccp.0.9.0
                                            idr_Prelude.Chars.isSpace7_val.0 <- pure (CGrInt ccp.0.9.0)
                                            idr_Prelude.Chars.isSpace7_val_43.0 <- pure idr_Prelude.Chars.isSpace7_val.0
                                            do
                                              idr_Prelude.Chars.isSpace_cpat_LInt64_0_44.0 <- pure ccp.0.9.0
                                              case ccp.0.9.0 of
                                                0 ->
                                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                #default ->
                                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                          #default ->
                                            pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                    #default ->
                                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                              #default ->
                                pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                  #default ->
                    pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_{APPLY_0}1.0.48.2.arity.1")
      idr_Prelude.List.dropWhile5_val_15 <- pure idr_Prelude.List.dropWhile5_val
      case idr_Prelude.List.dropWhile5_val of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.List.:: idr_Prelude.List.dropWhile3 idr_Prelude.List.dropWhile4) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.List.dropWhile3 idr_Prelude.List.dropWhile4)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.List.dropWhile idr_Prelude.List.dropWhile1 idr_Prelude.List.dropWhile4
    (Cidr_Prelude.List.Nil) ->
      pure idr_Prelude.List.dropWhile2_val

idr_Prelude.List.length.unboxed idr_Prelude.List.length1 =
  idr_Prelude.List.length1_val <- fetch idr_Prelude.List.length1
  case idr_Prelude.List.length1_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.length2 idr_Prelude.List.length3) ->
      unboxed.CGrInt.9 <- idr_Prelude.List.length.unboxed idr_Prelude.List.length3
      idr_Prelude.List.length4_val <- pure (CGrInt unboxed.CGrInt.9)
      idr_Prelude.List.length4_46 <- store idr_Prelude.List.length4_val
      idr_Prelude.List.length5_val <- pure (CGrInt 1)
      idr_Prelude.List.length5 <- store idr_Prelude.List.length5_val
      idris_int_add0.0 <- pure idr_Prelude.List.length4_46
      idris_int_add1.0 <- pure idr_Prelude.List.length5
      (CGrInt idris_int_add0_1.0) <- fetch idr_Prelude.List.length4_46
      (CGrInt idris_int_add1_1.0) <- fetch idr_Prelude.List.length5
      idris_int_add2.0 <- _prim_int_add idris_int_add0_1.0 idris_int_add1_1.0
      unboxed.CGrInt.0 <- pure idris_int_add2.0
      pure idris_int_add2.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1.0)
    (Cidr_Prelude.List.Nil) ->
      pure 0

idr_Prelude.List.span idr_Prelude.List.span1 idr_Prelude.List.span2 =
  idr_Prelude.List.span2_val <- fetch idr_Prelude.List.span2
  case idr_Prelude.List.span2_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.span3 idr_Prelude.List.span4) ->
      "idr_{APPLY_0}0.2" <- pure idr_Prelude.List.span1
      "idr_{APPLY_0}1.2" <- pure idr_Prelude.List.span3
      "idr_{APPLY_0}0_val.2" <- fetch idr_Prelude.List.span1
      idr_Prelude.List.span5_val <- do
        (C"idr_{U_Prelude.Strings.{words'_3}_1}") <- pure "idr_{APPLY_0}0_val.2"
        "idr_Prelude.Strings.{words'_3}0.0" <- pure idr_Prelude.List.span3
        (CGrInt "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1") <- fetch idr_Prelude.List.span3
        idr_Prelude.Chars.isSpace0.48.arity.1.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
        idr_Prelude.Chars.isSpace1_val_18.1 <- pure (CGrInt 32)
        idr_Prelude.Chars.isSpace1.32.1.arity.1.1 <- pure 32
        idr_Prelude.Chars.isSpace0.40.0.arity.1.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
        idris_int_eq0.40.arity.1.3.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
        idris_int_eq1.32.arity.1.3.1 <- pure idr_Prelude.Chars.isSpace1.32.1.arity.1.1
        idris_int_eq0_1.3.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
        idris_int_eq1_1.3.1 <- pure idr_Prelude.Chars.isSpace1.32.1.arity.1.1
        idris_int_eq2.3.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace1.32.1.arity.1.1
        ccp.0.3.1 <- case idris_int_eq2.3.1 of
          #False ->
            pure 0
          #True ->
            pure 1
        unboxed.CGrInt.2.1 <- pure ccp.0.3.1
        idr_Prelude.Chars.isSpace1_val.1 <- pure (CGrInt ccp.0.3.1)
        idr_Prelude.Chars.isSpace1_val_20.1 <- pure idr_Prelude.Chars.isSpace1_val.1
        "idr_Prelude.Strings.{words'_3}1_val.0" <- do
          idr_Prelude.Chars.isSpace_cpat_LInt64_0.1 <- pure ccp.0.3.1
          case ccp.0.3.1 of
            0 ->
              idr_Prelude.Chars.isSpace2_val_21.1 <- pure (CGrInt 9)
              idr_Prelude.Chars.isSpace2.32.2.arity.1.1 <- pure 9
              idr_Prelude.Chars.isSpace0.40.1.arity.1.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
              idris_int_eq0.40.arity.1.4.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
              idris_int_eq1.32.arity.1.4.1 <- pure idr_Prelude.Chars.isSpace2.32.2.arity.1.1
              idris_int_eq0_1.4.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
              idris_int_eq1_1.4.1 <- pure idr_Prelude.Chars.isSpace2.32.2.arity.1.1
              idris_int_eq2.4.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace2.32.2.arity.1.1
              ccp.0.4.1 <- case idris_int_eq2.4.1 of
                #False ->
                  pure ccp.0.3.1
                #True ->
                  pure 1
              unboxed.CGrInt.3.1 <- pure ccp.0.4.1
              idr_Prelude.Chars.isSpace2_val.1 <- pure (CGrInt ccp.0.4.1)
              idr_Prelude.Chars.isSpace2_val_23.1 <- pure idr_Prelude.Chars.isSpace2_val.1
              do
                idr_Prelude.Chars.isSpace_cpat_LInt64_0_24.1 <- pure ccp.0.4.1
                case ccp.0.4.1 of
                  0 ->
                    idr_Prelude.Chars.isSpace3_val_25.1 <- pure (CGrInt 13)
                    idr_Prelude.Chars.isSpace3.32.3.arity.1.1 <- pure 13
                    idr_Prelude.Chars.isSpace0.40.2.arity.1.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                    idris_int_eq0.40.arity.1.5.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                    idris_int_eq1.32.arity.1.5.1 <- pure idr_Prelude.Chars.isSpace3.32.3.arity.1.1
                    idris_int_eq0_1.5.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                    idris_int_eq1_1.5.1 <- pure idr_Prelude.Chars.isSpace3.32.3.arity.1.1
                    idris_int_eq2.5.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace3.32.3.arity.1.1
                    ccp.0.5.1 <- case idris_int_eq2.5.1 of
                      #False ->
                        pure ccp.0.3.1
                      #True ->
                        pure 1
                    unboxed.CGrInt.4.1 <- pure ccp.0.5.1
                    idr_Prelude.Chars.isSpace3_val.1 <- pure (CGrInt ccp.0.5.1)
                    idr_Prelude.Chars.isSpace3_val_27.1 <- pure idr_Prelude.Chars.isSpace3_val.1
                    do
                      idr_Prelude.Chars.isSpace_cpat_LInt64_0_28.1 <- pure ccp.0.5.1
                      case ccp.0.5.1 of
                        0 ->
                          idr_Prelude.Chars.isSpace4_val_29.1 <- pure (CGrInt 10)
                          idr_Prelude.Chars.isSpace4.32.4.arity.1.1 <- pure 10
                          idr_Prelude.Chars.isSpace0.40.3.arity.1.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                          idris_int_eq0.40.arity.1.6.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                          idris_int_eq1.32.arity.1.6.1 <- pure idr_Prelude.Chars.isSpace4.32.4.arity.1.1
                          idris_int_eq0_1.6.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                          idris_int_eq1_1.6.1 <- pure idr_Prelude.Chars.isSpace4.32.4.arity.1.1
                          idris_int_eq2.6.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace4.32.4.arity.1.1
                          ccp.0.6.1 <- case idris_int_eq2.6.1 of
                            #False ->
                              pure ccp.0.3.1
                            #True ->
                              pure 1
                          unboxed.CGrInt.5.1 <- pure ccp.0.6.1
                          idr_Prelude.Chars.isSpace4_val.1 <- pure (CGrInt ccp.0.6.1)
                          idr_Prelude.Chars.isSpace4_val_31.1 <- pure idr_Prelude.Chars.isSpace4_val.1
                          do
                            idr_Prelude.Chars.isSpace_cpat_LInt64_0_32.1 <- pure ccp.0.6.1
                            case ccp.0.6.1 of
                              0 ->
                                idr_Prelude.Chars.isSpace5_val_33.1 <- pure (CGrInt 12)
                                idr_Prelude.Chars.isSpace5.32.5.arity.1.1 <- pure 12
                                idr_Prelude.Chars.isSpace0.40.4.arity.1.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                                idris_int_eq0.40.arity.1.7.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                                idris_int_eq1.32.arity.1.7.1 <- pure idr_Prelude.Chars.isSpace5.32.5.arity.1.1
                                idris_int_eq0_1.7.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                                idris_int_eq1_1.7.1 <- pure idr_Prelude.Chars.isSpace5.32.5.arity.1.1
                                idris_int_eq2.7.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace5.32.5.arity.1.1
                                ccp.0.7.1 <- case idris_int_eq2.7.1 of
                                  #False ->
                                    pure ccp.0.3.1
                                  #True ->
                                    pure 1
                                unboxed.CGrInt.6.1 <- pure ccp.0.7.1
                                idr_Prelude.Chars.isSpace5_val.1 <- pure (CGrInt ccp.0.7.1)
                                idr_Prelude.Chars.isSpace5_val_35.1 <- pure idr_Prelude.Chars.isSpace5_val.1
                                do
                                  idr_Prelude.Chars.isSpace_cpat_LInt64_0_36.1 <- pure ccp.0.7.1
                                  case ccp.0.7.1 of
                                    0 ->
                                      idr_Prelude.Chars.isSpace6_val_37.1 <- pure (CGrInt 11)
                                      idr_Prelude.Chars.isSpace6.32.6.arity.1.1 <- pure 11
                                      idr_Prelude.Chars.isSpace0.40.5.arity.1.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                                      idris_int_eq0.40.arity.1.8.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                                      idris_int_eq1.32.arity.1.8.1 <- pure idr_Prelude.Chars.isSpace6.32.6.arity.1.1
                                      idris_int_eq0_1.8.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                                      idris_int_eq1_1.8.1 <- pure idr_Prelude.Chars.isSpace6.32.6.arity.1.1
                                      idris_int_eq2.8.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace6.32.6.arity.1.1
                                      ccp.0.8.1 <- case idris_int_eq2.8.1 of
                                        #False ->
                                          pure ccp.0.3.1
                                        #True ->
                                          pure 1
                                      unboxed.CGrInt.7.1 <- pure ccp.0.8.1
                                      idr_Prelude.Chars.isSpace6_val.1 <- pure (CGrInt ccp.0.8.1)
                                      idr_Prelude.Chars.isSpace6_val_39.1 <- pure idr_Prelude.Chars.isSpace6_val.1
                                      do
                                        idr_Prelude.Chars.isSpace_cpat_LInt64_0_40.1 <- pure ccp.0.8.1
                                        case ccp.0.8.1 of
                                          0 ->
                                            idr_Prelude.Chars.isSpace7_val_41.1 <- pure (CGrInt 160)
                                            idr_Prelude.Chars.isSpace7.32.7.arity.1.1 <- pure 160
                                            idr_Prelude.Chars.isSpace0.40.6.arity.1.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                                            idris_int_eq0.40.arity.1.9.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                                            idris_int_eq1.32.arity.1.9.1 <- pure idr_Prelude.Chars.isSpace7.32.7.arity.1.1
                                            idris_int_eq0_1.9.1 <- pure "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1"
                                            idris_int_eq1_1.9.1 <- pure idr_Prelude.Chars.isSpace7.32.7.arity.1.1
                                            idris_int_eq2.9.1 <- _prim_int_eq "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1" idr_Prelude.Chars.isSpace7.32.7.arity.1.1
                                            ccp.0.9.1 <- case idris_int_eq2.9.1 of
                                              #False ->
                                                pure ccp.0.3.1
                                              #True ->
                                                pure 1
                                            unboxed.CGrInt.8.1 <- pure ccp.0.9.1
                                            idr_Prelude.Chars.isSpace7_val.1 <- pure (CGrInt ccp.0.9.1)
                                            idr_Prelude.Chars.isSpace7_val_43.1 <- pure idr_Prelude.Chars.isSpace7_val.1
                                            do
                                              idr_Prelude.Chars.isSpace_cpat_LInt64_0_44.1 <- pure ccp.0.9.1
                                              case ccp.0.9.1 of
                                                0 ->
                                                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                #default ->
                                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                          #default ->
                                            pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                    #default ->
                                      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                              #default ->
                                pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                  #default ->
                    pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        "idr_Prelude.Strings.{words'_3}1_val_178.0" <- pure "idr_Prelude.Strings.{words'_3}1_val.0"
        case "idr_Prelude.Strings.{words'_3}1_val.0" of
          (Cidr_Prelude.Bool.False) ->
            pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
          (Cidr_Prelude.Bool.True) ->
            pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Strings.{words'_3}0.0.48.4.arity.1")
      idr_Prelude.List.span5_val_105 <- pure idr_Prelude.List.span5_val
      case idr_Prelude.List.span5_val of
        (Cidr_Prelude.Bool.False) ->
          idr_Prelude.List.span6_val <- pure (Cidr_Prelude.List.Nil)
          idr_Prelude.List.span6 <- store idr_Prelude.List.span6_val
          idr_Prelude.List.span7_val <- pure (Cidr_Prelude.List.:: idr_Prelude.List.span3 idr_Prelude.List.span4)
          idr_Prelude.List.span7 <- store idr_Prelude.List.span7_val
          pure (Cidr_Builtins.MkPair idr_Prelude.List.span6 idr_Prelude.List.span7) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.span6 idr_Prelude.List.span7)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.List.span6_val_106 <- idr_Prelude.List.span idr_Prelude.List.span1 idr_Prelude.List.span4
          idr_Prelude.List.span6_val_110 <- pure idr_Prelude.List.span6_val_106
          (Cidr_Builtins.MkPair idr_Prelude.List.span7_111 idr_Prelude.List.span8) <- pure idr_Prelude.List.span6_val_106
          idr_Prelude.List.span9_val <- pure (Cidr_Prelude.List.:: idr_Prelude.List.span3 idr_Prelude.List.span7_111)
          idr_Prelude.List.span9 <- store idr_Prelude.List.span9_val
          pure (Cidr_Builtins.MkPair idr_Prelude.List.span9 idr_Prelude.List.span8) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.span9 idr_Prelude.List.span8)
    (Cidr_Prelude.List.Nil) ->
      idr_Prelude.List.span3_val <- pure (Cidr_Prelude.List.Nil)
      idr_Prelude.List.span3_112 <- store idr_Prelude.List.span3_val
      idr_Prelude.List.span4_val <- pure idr_Prelude.List.span3_val
      idr_Prelude.List.span4_113 <- store idr_Prelude.List.span3_val
      pure (Cidr_Builtins.MkPair idr_Prelude.List.span3_112 idr_Prelude.List.span4_113) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.span3_112 idr_Prelude.List.span4_113)

idr_Prelude.Strings.words idr_Prelude.Strings.words0.48.arity.1 =
  idr_Prelude.Strings.words3_val <- pure (C"idr_{U_Prelude.Strings.{words_2}_1}")
  idr_Prelude.Strings.words3 <- store idr_Prelude.Strings.words3_val
  idr_Prelude.Strings.words4_val_130 <- pure (CGrString #"")
  idr_Prelude.Strings.words4.32.20.arity.1 <- pure #""
  idr_Prelude.Strings.words0.40.17.arity.1 <- pure idr_Prelude.Strings.words0.48.arity.1
  idris_str_eq1.40.arity.1.1 <- pure idr_Prelude.Strings.words0.48.arity.1
  idris_str_eq2.32.arity.1.1 <- pure idr_Prelude.Strings.words4.32.20.arity.1
  idris_str_eq1_0.1 <- pure idr_Prelude.Strings.words0.48.arity.1
  idris_str_eq2_0.1 <- pure idr_Prelude.Strings.words4.32.20.arity.1
  idris_str_eq3.1 <- _prim_string_eq idr_Prelude.Strings.words0.48.arity.1 idr_Prelude.Strings.words4.32.20.arity.1
  ccp.2.1 <- case idris_str_eq3.1 of
    #False ->
      pure 0
    #True ->
      pure 1
  unboxed.CGrInt.14 <- pure ccp.2.1
  idr_Prelude.Strings.words4_val_129 <- pure (CGrInt ccp.2.1)
  idr_Prelude.Strings.words4_val_132 <- pure idr_Prelude.Strings.words4_val_129
  idr_Prelude.Strings.words4_val_128 <- do
    idr_Prelude.Strings.words_cpat_LInt64_0 <- pure ccp.2.1
    case ccp.2.1 of
      0 ->
        pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      #default ->
        pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Strings.words4_133 <- store idr_Prelude.Strings.words4_val_128
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.1" <- pure idr_Prelude.Strings.words4_133
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1" <- pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Strings.words4_val_127 <- do
    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_179.1" <- fetch idr_Prelude.Strings.words4_133
    case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_179.1" of
      (Cidr_Prelude.Bool.False) ->
        pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
      (Cidr_Prelude.Bool.True) ->
        pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
  idr_Prelude.Strings.words4_val_135 <- pure idr_Prelude.Strings.words4_val_127
  idr_Prelude.Strings.words4_val_126 <- case idr_Prelude.Strings.words4_val_127 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      idr_Prelude.Strings.words0.40.18.arity.1 <- pure idr_Prelude.Strings.words0.48.arity.1
      idris_str_head1.40.arity.1.1 <- pure idr_Prelude.Strings.words0.48.arity.1
      idris_str_head1_0.1 <- pure idr_Prelude.Strings.words0.48.arity.1
      idris_str_head2.1 <- _prim_string_head idr_Prelude.Strings.words0.48.arity.1
      unboxed.CGrInt.15 <- pure idris_str_head2.1
      idr_Prelude.Strings.words5_val_136 <- pure (CGrInt idris_str_head2.1)
      idr_Prelude.Strings.words5_137 <- store idr_Prelude.Strings.words5_val_136
      idr_Prelude.Strings.words0.32.22.arity.1 <- pure idr_Prelude.Strings.words0.48.arity.1
      idris_str_tail1.32.arity.1.0 <- pure idr_Prelude.Strings.words0.48.arity.1
      idris_str_tail1_0.0 <- pure idr_Prelude.Strings.words0.48.arity.1
      idris_str_tail2.0 <- _prim_string_tail idr_Prelude.Strings.words0.48.arity.1
      unboxed.CGrString.0 <- pure idris_str_tail2.0
      idr_Prelude.Strings.words7_val_142 <- pure (CGrString idris_str_tail2.0)
      idr_Prelude.Strings.words8_val <- pure idr_Prelude.Strings.words4_val_130
      idr_Prelude.Strings.words8.32.23.arity.1 <- pure #""
      idr_Prelude.Strings.words7.40.19.arity.1 <- pure idris_str_tail2.0
      idris_str_eq1.40.arity.1.2 <- pure idris_str_tail2.0
      idris_str_eq2.32.arity.1.2 <- pure idr_Prelude.Strings.words8.32.23.arity.1
      idris_str_eq1_0.2 <- pure idris_str_tail2.0
      idris_str_eq2_0.2 <- pure idr_Prelude.Strings.words8.32.23.arity.1
      idris_str_eq3.2 <- _prim_string_eq idris_str_tail2.0 idr_Prelude.Strings.words8.32.23.arity.1
      ccp.2.2 <- case idris_str_eq3.2 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.16 <- pure ccp.2.2
      idr_Prelude.Strings.words7_val_141 <- pure (CGrInt ccp.2.2)
      idr_Prelude.Strings.words7_val_144 <- pure idr_Prelude.Strings.words7_val_141
      idr_Prelude.Strings.words7_val_140 <- do
        idr_Prelude.Strings.words_cpat_LInt64_0_145 <- pure ccp.2.2
        case ccp.2.2 of
          0 ->
            pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1"
          #default ->
            pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Strings.words7_146 <- store idr_Prelude.Strings.words7_val_140
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.2" <- pure idr_Prelude.Strings.words7_146
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.2" <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.1"
      idr_Prelude.Strings.words7_val_139 <- do
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_179.2" <- fetch idr_Prelude.Strings.words7_146
        case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_179.2" of
          (Cidr_Prelude.Bool.False) ->
            pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
          (Cidr_Prelude.Bool.True) ->
            pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Prelude.Strings.words7_val_150 <- pure idr_Prelude.Strings.words7_val_139
      idr_Prelude.Strings.words7_val <- case idr_Prelude.Strings.words7_val_139 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Prelude.Strings.words0.32.25.arity.1 <- pure idr_Prelude.Strings.words0.48.arity.1
          idris_str_tail1.32.arity.1.1 <- pure idr_Prelude.Strings.words0.48.arity.1
          idris_str_tail1_0.1 <- pure idr_Prelude.Strings.words0.48.arity.1
          idris_str_tail2.1 <- _prim_string_tail idr_Prelude.Strings.words0.48.arity.1
          unboxed.CGrString.1 <- pure idris_str_tail2.1
          idr_Prelude.Strings.words8_val_152 <- pure (CGrString idris_str_tail2.1)
          idr_Prelude.Strings.words8_153.40.20.arity.1 <- pure idris_str_tail2.1
          idris_str_head1.40.arity.1.2 <- pure idris_str_tail2.1
          idris_str_head1_0.2 <- pure idris_str_tail2.1
          idris_str_head2.2 <- _prim_string_head idris_str_tail2.1
          unboxed.CGrInt.17 <- pure idris_str_head2.2
          idr_Prelude.Strings.words8_val_151 <- pure (CGrInt idris_str_head2.2)
          idr_Prelude.Strings.words8_154 <- store idr_Prelude.Strings.words8_val_151
          idr_Prelude.Strings.words0.32.26.arity.1 <- pure idr_Prelude.Strings.words0.48.arity.1
          idris_str_tail1.32.arity.1.2 <- pure idr_Prelude.Strings.words0.48.arity.1
          idris_str_tail1_0.2 <- pure idr_Prelude.Strings.words0.48.arity.1
          idris_str_tail2.2 <- _prim_string_tail idr_Prelude.Strings.words0.48.arity.1
          unboxed.CGrString.2 <- pure idris_str_tail2.2
          idr_Prelude.Strings.words9_val_155 <- pure (CGrString idris_str_tail2.2)
          idr_Prelude.Strings.words9.32.27.arity.1 <- pure idris_str_tail2.2
          idris_str_tail1.32.arity.1.3 <- pure idris_str_tail2.2
          idris_str_tail1_0.3 <- pure idris_str_tail2.2
          idris_str_tail2.3 <- _prim_string_tail idris_str_tail2.2
          unboxed.CGrString.3 <- pure idris_str_tail2.3
          idr_Prelude.Strings.words9_val <- pure (CGrString idris_str_tail2.3)
          idr_Prelude.Strings.words9_156 <- store idr_Prelude.Strings.words9_val
          pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.words8_154 idr_Prelude.Strings.words9_156) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.words8_154 idr_Prelude.Strings.words9_156)
      idr_Prelude.Strings.words7_157 <- store idr_Prelude.Strings.words7_val
      idr_Prelude.Strings.words6_val <- idr__Prelude.Strings.unpack_with_36 idr_Prelude.Strings.words7_157
      idr_Prelude.Strings.words6_158 <- store idr_Prelude.Strings.words6_val
      pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words5_137 idr_Prelude.Strings.words6_158) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words5_137 idr_Prelude.Strings.words6_158)
  idr_Prelude.Strings.words4_159 <- store idr_Prelude.Strings.words4_val_126
  idr_Prelude.Strings.words4_val <- idr_Prelude.Strings.words' idr_Prelude.Strings.words4_159
  idr_Prelude.Strings.words4_160 <- store idr_Prelude.Strings.words4_val
  "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" idr_Prelude.Strings.words3 idr_Prelude.Strings.words4_160

idr_Prelude.Strings.words' idr_Prelude.Strings.words'0 =
  idr_Prelude.Strings.words'2_val <- pure (C"idr_{U_Prelude.Chars.isSpace_1}")
  idr_Prelude.Strings.words'2 <- store idr_Prelude.Strings.words'2_val
  idr_Prelude.Strings.words'1_val <- idr_Prelude.List.dropWhile idr_Prelude.Strings.words'2 idr_Prelude.Strings.words'0
  idr_Prelude.Strings.words'1_val_163 <- pure idr_Prelude.Strings.words'1_val
  case idr_Prelude.Strings.words'1_val of
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    #default ->
      idr_Prelude.Strings.words'3_val <- pure (C"idr_{U_Prelude.Strings.{words'_3}_1}")
      idr_Prelude.Strings.words'3 <- store idr_Prelude.Strings.words'3_val
      idr_Prelude.Strings.words'5_val <- pure idr_Prelude.Strings.words'2_val
      idr_Prelude.Strings.words'5 <- store idr_Prelude.Strings.words'2_val
      idr_Prelude.Strings.words'4_val <- idr_Prelude.List.dropWhile idr_Prelude.Strings.words'5 idr_Prelude.Strings.words'0
      idr_Prelude.Strings.words'4_168 <- store idr_Prelude.Strings.words'4_val
      idr_Prelude.Strings.words'2_val_164 <- idr_Prelude.List.span idr_Prelude.Strings.words'3 idr_Prelude.Strings.words'4_168
      idr_Prelude.Strings.words'2_val_170 <- pure idr_Prelude.Strings.words'2_val_164
      (Cidr_Builtins.MkPair idr_Prelude.Strings.words'3_171 idr_Prelude.Strings.words'4_172) <- pure idr_Prelude.Strings.words'2_val_164
      idr_Prelude.Strings.words'5_val_173 <- idr_Prelude.Strings.words' idr_Prelude.Strings.words'4_172
      idr_Prelude.Strings.words'5_174 <- store idr_Prelude.Strings.words'5_val_173
      pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words'3_171 idr_Prelude.Strings.words'5_174) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words'3_171 idr_Prelude.Strings.words'5_174)

"idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04" =
  "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04_val" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04"
  -- LINT: case has non-covered alternative CGrInt
  -- LINT: case has non-covered alternative CGrString
  case "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:06") ->
      "idr_{APPLY_0}0.3" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02"
      "idr_{APPLY_0}1.3" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05"
      "idr_{APPLY_0}0_val.3" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07_val" <- case "idr_{APPLY_0}0_val.3" of
        (C"idr_{U_Main.{average_0}_2}") ->
          pure (C"idr_{U_Main.{average_0}_1}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{average_0}_1}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05")
        (C"idr_{U_prim__strCons_2}") ->
          pure (C"idr_{U_prim__strCons_1}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05")
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07_val"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val" <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:06"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_181" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val"
      "idr_{APPLY_0}0.4" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07"
      "idr_{APPLY_0}1.4" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_181"
      "idr_{APPLY_0}0_val.4" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07"
      case "idr_{APPLY_0}0_val.4" of
        (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}2.4") ->
          "idr_Main.{average_0}0.0" <- pure "idr_{APPLY_0}2.4"
          "idr_Main.{average_0}1.0" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_181"
          idris_int_add0.1.0 <- pure "idr_{APPLY_0}2.4"
          idris_int_add1.1.0 <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_181"
          -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1.1.0)
          -- LINT: Invalid pattern match for (CGrInt idris_int_add0_1.1.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
          ,CGrString[T_String]
          ,Cidr_Prelude.List.::[{85
                                ,92
                                ,117}
                               ,{74,77,78}]
          ,Cidr_Prelude.List.Nil[]}
          (CGrInt idris_int_add0_1.1.0) <- fetch "idr_{APPLY_0}2.4"
          -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1.1.0)
          -- LINT: Invalid pattern match for (CGrInt idris_int_add1_1.1.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
          ,CGrString[T_String]}
          (CGrInt idris_int_add1_1.1.0) <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_181"
          idris_int_add2.1.0 <- _prim_int_add idris_int_add0_1.1.0 idris_int_add1_1.1.0
          pure (CGrInt idris_int_add2.1.0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_int_add2.1.0)
        (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_175.4") ->
          idr_prim__strCons0.0 <- pure "idr_{APPLY_0}2_175.4"
          idr_prim__strCons1.0 <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_181"
          idris_str_cons1.0.0 <- pure "idr_{APPLY_0}2_175.4"
          idris_str_cons2.0.0 <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_181"
          -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_str_cons1_0.0.0)
          -- LINT: Invalid pattern match for (CGrInt idris_str_cons1_0.0.0). Expected pattern of type: {CGrInt[T_Int64]}, but got: {CGrInt[T_Int64]
          ,CGrString[T_String]
          ,Cidr_Prelude.List.::[{85
                                ,92
                                ,117}
                               ,{74,77,78}]
          ,Cidr_Prelude.List.Nil[]}
          (CGrInt idris_str_cons1_0.0.0) <- fetch "idr_{APPLY_0}2_175.4"
          -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_cons2_0.0.0)
          -- LINT: Invalid pattern match for (CGrString idris_str_cons2_0.0.0). Expected pattern of type: {CGrString[T_String]}, but got: {CGrInt[T_Int64]
          ,CGrString[T_String]}
          (CGrString idris_str_cons2_0.0.0) <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_181"
          idris_str_cons3.0.0 <- _prim_string_cons idris_str_cons1_0.0.0 idris_str_cons2_0.0.0
          pure (CGrString idris_str_cons3.0.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_cons3.0.0)
    (Cidr_Prelude.List.Nil) ->
      fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03"

"idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03" =
  "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val" <- fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03"
  case "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:05") ->
      "idr_{APPLY_0}0.5" <- pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02"
      "idr_{APPLY_0}1.5" <- pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
      "idr_{APPLY_0}0_val.5" <- fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06_val" <- case "idr_{APPLY_0}0_val.5" of
        (C"idr_{U_Main.{average_1}_1}") ->
          "idr_Main.{average_1}0.0" <- pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
          idr_prim_lenString0.0.0 <- pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
          idris_str_len1.0 <- pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
          -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_len2.0)
          -- LINT: Invalid pattern match for (CGrString idris_str_len2.0). Expected pattern of type: {CGrString[T_String]}, but got: {CGrInt[T_Int64]
          ,CGrString[T_String]
          ,Cidr_Prelude.List.::[{85
                                ,92
                                ,117}
                               ,{74,77,78}]
          ,Cidr_Prelude.List.Nil[]}
          (CGrString idris_str_len2.0) <- fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
          idris_str_len3.0 <- _prim_string_len idris_str_len2.0
          unboxed.CGrInt.18.0 <- pure idris_str_len3.0
          "idr_Main.{average_1}1_val.0" <- pure (CGrInt idris_str_len3.0)
          "idr_Main.{average_1}1.0" <- store "idr_Main.{average_1}1_val.0"
          idr_prim__zextInt_BigInt0.0.0 <- pure "idr_Main.{average_1}1.0"
          (CGrInt idr_prim__zextInt_BigInt0.32.19.arity.1.0.0) <- fetch "idr_Main.{average_1}1.0"
          idris_lz_ext1.32.arity.1.0 <- pure idr_prim__zextInt_BigInt0.32.19.arity.1.0.0
          idris_lz_ext2.0 <- pure idr_prim__zextInt_BigInt0.32.19.arity.1.0.0
          idris_lz_ext3.0 <- _prim_int_add idr_prim__zextInt_BigInt0.32.19.arity.1.0.0 0
          unboxed.CGrInt.23 <- pure idris_lz_ext3.0
          pure (CGrInt idris_lz_ext3.0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_lz_ext3.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_prim__zextInt_BigInt0.32.19.arity.1.0.0)
        (C"idr_{U_Prelude.Strings.{words_2}_1}") ->
          "idr_Prelude.Strings.{words_2}0.0" <- pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
          "idr_Prelude.Strings.{words_2}3_val.0" <- pure (C"idr_{U_prim__strCons_2}")
          "idr_Prelude.Strings.{words_2}3.0" <- store "idr_Prelude.Strings.{words_2}3_val.0"
          "idr_Prelude.Strings.{words_2}4_val.0" <- pure (CGrString #"")
          "idr_Prelude.Strings.{words_2}4.0" <- store "idr_Prelude.Strings.{words_2}4_val.0"
          "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" "idr_Prelude.Strings.{words_2}3.0" "idr_Prelude.Strings.{words_2}4.0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06_val"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val" <- "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:05"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_183" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val"
      pure (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_183") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_183")
    (Cidr_Prelude.List.Nil) ->
      pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val"

idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_361 =
  idr__Prelude.Strings.unpack_with_361_val <- fetch idr__Prelude.Strings.unpack_with_361
  case idr__Prelude.Strings.unpack_with_361_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_363) ->
      idr__Prelude.Strings.unpack_with_365_val_191 <- pure (CGrString #"")
      idr__Prelude.Strings.unpack_with_365.32.30.arity.1 <- pure #""
      (CGrString idr__Prelude.Strings.unpack_with_363.40.22.arity.1) <- fetch idr__Prelude.Strings.unpack_with_363
      idris_str_eq1.40.arity.1.3 <- pure idr__Prelude.Strings.unpack_with_363.40.22.arity.1
      idris_str_eq2.32.arity.1.3 <- pure idr__Prelude.Strings.unpack_with_365.32.30.arity.1
      idris_str_eq1_0.3 <- pure idr__Prelude.Strings.unpack_with_363.40.22.arity.1
      idris_str_eq2_0.3 <- pure idr__Prelude.Strings.unpack_with_365.32.30.arity.1
      idris_str_eq3.3 <- _prim_string_eq idr__Prelude.Strings.unpack_with_363.40.22.arity.1 idr__Prelude.Strings.unpack_with_365.32.30.arity.1
      ccp.2.3 <- case idris_str_eq3.3 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.21 <- pure ccp.2.3
      idr__Prelude.Strings.unpack_with_365_val_190 <- pure (CGrInt ccp.2.3)
      idr__Prelude.Strings.unpack_with_365_val_193 <- pure idr__Prelude.Strings.unpack_with_365_val_190
      idr__Prelude.Strings.unpack_with_365_val_189 <- do
        idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0 <- pure ccp.2.3
        case ccp.2.3 of
          0 ->
            pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
          #default ->
            pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr__Prelude.Strings.unpack_with_365_194 <- store idr__Prelude.Strings.unpack_with_365_val_189
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.3" <- pure idr__Prelude.Strings.unpack_with_365_194
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.3" <- pure (Cidr_Prelude.Bool.True)
      idr__Prelude.Strings.unpack_with_365_val_188 <- do
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_179.3" <- fetch idr__Prelude.Strings.unpack_with_365_194
        case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_179.3" of
          (Cidr_Prelude.Bool.False) ->
            pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
          (Cidr_Prelude.Bool.True) ->
            pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr__Prelude.Strings.unpack_with_365_val_196 <- pure idr__Prelude.Strings.unpack_with_365_val_188
      idr__Prelude.Strings.unpack_with_365_val <- case idr__Prelude.Strings.unpack_with_365_val_188 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr__Prelude.Strings.unpack_with_363.40.23.arity.1 <- pure idr__Prelude.Strings.unpack_with_363.40.22.arity.1
          idris_str_head1.40.arity.1.3 <- pure idr__Prelude.Strings.unpack_with_363.40.22.arity.1
          idris_str_head1_0.3 <- pure idr__Prelude.Strings.unpack_with_363.40.22.arity.1
          idris_str_head2.3 <- _prim_string_head idr__Prelude.Strings.unpack_with_363.40.22.arity.1
          unboxed.CGrInt.22 <- pure idris_str_head2.3
          idr__Prelude.Strings.unpack_with_366_val_197 <- pure (CGrInt idris_str_head2.3)
          idr__Prelude.Strings.unpack_with_366_198 <- store idr__Prelude.Strings.unpack_with_366_val_197
          idr__Prelude.Strings.unpack_with_363.32.32.arity.1 <- pure idr__Prelude.Strings.unpack_with_363.40.22.arity.1
          idris_str_tail1.32.arity.1.4 <- pure idr__Prelude.Strings.unpack_with_363.40.22.arity.1
          idris_str_tail1_0.4 <- pure idr__Prelude.Strings.unpack_with_363.40.22.arity.1
          idris_str_tail2.4 <- _prim_string_tail idr__Prelude.Strings.unpack_with_363.40.22.arity.1
          unboxed.CGrString.4 <- pure idris_str_tail2.4
          idr__Prelude.Strings.unpack_with_367_val <- pure (CGrString idris_str_tail2.4)
          idr__Prelude.Strings.unpack_with_367 <- store idr__Prelude.Strings.unpack_with_367_val
          pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_198 idr__Prelude.Strings.unpack_with_367) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_198 idr__Prelude.Strings.unpack_with_367)
      idr__Prelude.Strings.unpack_with_365_199 <- store idr__Prelude.Strings.unpack_with_365_val
      idr__Prelude.Strings.unpack_with_364_val <- idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_365_199
      idr__Prelude.Strings.unpack_with_364_200 <- store idr__Prelude.Strings.unpack_with_364_val
      pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_200) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_200) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.unpack_with_363.40.22.arity.1)
    (Cidr_Prelude.Strings.StrNil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
