idris_int_eq.unboxed idris_int_eq0 idris_int_eq1.32.arity.1 =
  (CGrInt idris_int_eq0_1) <- fetch idris_int_eq0
  (CGrInt idris_int_eq1_1) <- pure (CGrInt idris_int_eq1.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_eq2 <- _prim_int_eq idris_int_eq0_1 idris_int_eq1_1
  ccp.0 <- case idris_int_eq2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1)

idris_int_lt.unboxed idris_int_lt0.32.arity.1 idris_int_lt1.32.arity.1 =
  (CGrInt idris_int_lt0_1) <- pure (CGrInt idris_int_lt0.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrInt idris_int_lt1_1) <- pure (CGrInt idris_int_lt1.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_lt2 <- _prim_int_lt idris_int_lt0_1 idris_int_lt1_1
  ccp.1 <- case idris_int_lt2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.1

idris_int_add idris_int_add0 idris_int_add1 =
  (CGrInt idris_int_add0_1) <- fetch idris_int_add0
  (CGrInt idris_int_add1_1) <- fetch idris_int_add1
  idris_int_add2 <- _prim_int_add idris_int_add0_1 idris_int_add1_1
  pure (CGrInt idris_int_add2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_int_add2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1)

idris_float_div.unboxed idris_float_div0.32.arity.1 idris_float_div1.32.arity.1 =
  (CGrFloat idris_float_div0_1) <- pure (CGrFloat idris_float_div0.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrFloat idris_float_div1_1) <- pure (CGrFloat idris_float_div1.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_float_div2 <- _prim_float_div idris_float_div0_1 idris_float_div1_1
  pure idris_float_div2

idris_write_str idris_write_str2.32.arity.1 =
  (CGrString idris_write_str2_0) <- pure (CGrString idris_write_str2.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0
  pure (CUnit) -- LINT: Last return expressions can only return non-node values: pure (CUnit)

idris_str_concat idris_str_concat1 idris_str_concat2.32.arity.1 =
  (CGrString idris_str_concat1_0) <- fetch idris_str_concat1
  (CGrString idris_str_concat2_0) <- pure (CGrString idris_str_concat2.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_concat3 <- _prim_string_concat idris_str_concat1_0 idris_str_concat2_0
  pure (CGrString idris_str_concat3) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_concat3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0)

idris_str_eq.unboxed idris_str_eq1 idris_str_eq2.32.arity.1 =
  (CGrString idris_str_eq1_0) <- fetch idris_str_eq1
  (CGrString idris_str_eq2_0) <- pure (CGrString idris_str_eq2.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_eq3 <- _prim_string_eq idris_str_eq1_0 idris_str_eq2_0
  ccp.2 <- case idris_str_eq3 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0)

idris_str_len.unboxed idris_str_len1 =
  (CGrString idris_str_len2) <- fetch idris_str_len1
  idris_str_len3 <- _prim_string_len idris_str_len2
  pure idris_str_len3 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_len2)

idris_str_head.unboxed idris_str_head1 =
  (CGrString idris_str_head1_0) <- fetch idris_str_head1
  idris_str_head2 <- _prim_string_head idris_str_head1_0
  pure idris_str_head2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0)

idris_str_tail.unboxed idris_str_tail1.32.arity.1 =
  (CGrString idris_str_tail1_0) <- pure (CGrString idris_str_tail1.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_tail2 <- _prim_string_tail idris_str_tail1_0
  pure idris_str_tail2

idris_str_cons idris_str_cons1 idris_str_cons2 =
  (CGrInt idris_str_cons1_0) <- fetch idris_str_cons1
  (CGrString idris_str_cons2_0) <- fetch idris_str_cons2
  idris_str_cons3 <- _prim_string_cons idris_str_cons1_0 idris_str_cons2_0
  pure (CGrString idris_str_cons3) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_cons3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_cons2_0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_str_cons1_0)

idris_int_float.unboxed idris_int_float1 =
  (CGrInt idris_int_float1_0) <- fetch idris_int_float1
  idris_int_float2 <- _prim_int_float idris_int_float1_0
  pure idris_int_float2 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_float1_0)

idris_float_str idris_float_str1 =
  (CGrFloat idris_float_str1_0) <- fetch idris_float_str1
  idris_float_str2 <- _prim_float_string idris_float_str1_0
  pure (CGrString idris_float_str2) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_float_str2) -- LINT: The result of Fetch can only be bound to a variable: (CGrFloat idris_float_str1_0)

idris_lz_ext idris_lz_ext1.32.arity.1 =
  (CGrInt idris_lz_ext2) <- pure (CGrInt idris_lz_ext1.32.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_lz_ext3 <- _prim_int_add idris_lz_ext2 0
  pure (CGrInt idris_lz_ext3) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_lz_ext3)

grinMain =
  r <- "idr_{runMain_0}"
  pure ()

idr_Main.average.unboxed idr_Main.average0 =
  idr_Main.average1_val_2 <- pure (CErased)
  idr_Main.average1 <- store idr_Main.average1_val_2
  idr_Main.average2_val <- pure (CErased)
  idr_Main.average2 <- store idr_Main.average2_val
  idr_Main.average3_val <- pure (C"idr_{U_Main.{average_0}_2}")
  idr_Main.average3 <- store idr_Main.average3_val
  idr_Main.average4_val <- pure (CGrInt 0)
  idr_Main.average4 <- store idr_Main.average4_val
  idr_Main.average5_val_3 <- pure (CErased)
  idr_Main.average5 <- store idr_Main.average5_val_3
  idr_Main.average6_val <- pure (CErased)
  idr_Main.average6 <- store idr_Main.average6_val
  idr_Main.average7_val <- pure (C"idr_{U_Main.{average_1}_1}")
  idr_Main.average7 <- store idr_Main.average7_val
  idr_Main.average8_val <- idr_Prelude.Strings.words idr_Main.average0
  idr_Main.average8 <- store idr_Main.average8_val
  idr_Main.average5_val <- "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" idr_Main.average7 idr_Main.average8
  idr_Main.average5_4 <- store idr_Main.average5_val
  idr_Main.average1_val_1 <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" idr_Main.average3 idr_Main.average4 idr_Main.average5_4
  idr_Main.average1_5 <- store idr_Main.average1_val_1
  idr_Main.average1_val <- do
    unboxed.CGrFloat.0 <- idris_int_float.unboxed idr_Main.average1_5
    pure (CGrFloat unboxed.CGrFloat.0) -- LINT: Last return expressions can only return non-node values: pure (CGrFloat unboxed.CGrFloat.0)
  idr_Main.average1_6 <- store idr_Main.average1_val
  idr_Main.average2_val_9 <- pure (CErased)
  idr_Main.average2_10 <- store idr_Main.average2_val_9
  idr_Main.average3_val_11 <- idr_Prelude.Strings.words idr_Main.average0
  idr_Main.average3_12 <- store idr_Main.average3_val_11
  idr_Main.average2_val_8 <- do
    unboxed.CGrInt.1 <- idr_Prelude.List.length.unboxed idr_Main.average3_12
    pure (CGrInt unboxed.CGrInt.1) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.1)
  idr_Main.average2_13 <- store idr_Main.average2_val_8
  idr_Main.average2_val_7 <- do
    unboxed.CGrFloat.1 <- idris_int_float.unboxed idr_Main.average2_13
    pure (CGrFloat unboxed.CGrFloat.1) -- LINT: Last return expressions can only return non-node values: pure (CGrFloat unboxed.CGrFloat.1)
  idr_Main.average2_14 <- store idr_Main.average2_val_7
  do
    (CGrFloat idr_Main.average1_6.32.0.arity.1) <- fetch idr_Main.average1_6
    (CGrFloat idr_Main.average2_14.32.0.arity.1) <- fetch idr_Main.average2_14
    idris_float_div.unboxed idr_Main.average1_6.32.0.arity.1 idr_Main.average2_14.32.0.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrFloat idr_Main.average2_14.32.0.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrFloat idr_Main.average1_6.32.0.arity.1)

idr_Prelude.List.dropWhile idr_Prelude.List.dropWhile1 idr_Prelude.List.dropWhile2 =
  idr_Prelude.List.dropWhile2_val <- fetch idr_Prelude.List.dropWhile2
  case idr_Prelude.List.dropWhile2_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.dropWhile3 idr_Prelude.List.dropWhile4) ->
      idr_Prelude.List.dropWhile5_val <- do
        "idr_{APPLY_0}0.0" <- pure idr_Prelude.List.dropWhile1
        "idr_{APPLY_0}1.0" <- pure idr_Prelude.List.dropWhile3
        "idr_{APPLY_0}0_val.0" <- fetch "idr_{APPLY_0}0.0"
        case "idr_{APPLY_0}0_val.0" of
          (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}2.0") ->
            "idr_Main.{average_0}" "idr_{APPLY_0}2.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{average_1}_1}") ->
            "idr_Main.{average_1}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Chars.isSpace_1}") ->
            idr_Prelude.Chars.isSpace "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Strings.{words'_3}_1}") ->
            "idr_Prelude.Strings.{words'_3}" "idr_{APPLY_0}1.0"
          (C"idr_{U_Prelude.Strings.{words_2}_1}") ->
            "idr_Prelude.Strings.{words_2}" "idr_{APPLY_0}1.0"
          (C"idr_{U_prim__floatToStr_1}") ->
            idr_prim__floatToStr "idr_{APPLY_0}1.0"
          (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_175.0") ->
            idr_prim__strCons "idr_{APPLY_0}2_175.0" "idr_{APPLY_0}1.0"
          (C"idr_{U_Main.{average_0}_2}") ->
            pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.0") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.0")
          (C"idr_{U_prim__strCons_2}") ->
            pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.0") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.0")
          #default ->
            pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
      idr_Prelude.List.dropWhile5 <- store idr_Prelude.List.dropWhile5_val
      idr_Prelude.List.dropWhile5_val_15 <- fetch idr_Prelude.List.dropWhile5
      case idr_Prelude.List.dropWhile5_val_15 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.List.:: idr_Prelude.List.dropWhile3 idr_Prelude.List.dropWhile4) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.List.dropWhile3 idr_Prelude.List.dropWhile4)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.List.dropWhile6_val <- pure (CErased)
          idr_Prelude.List.dropWhile6 <- store idr_Prelude.List.dropWhile6_val
          idr_Prelude.List.dropWhile idr_Prelude.List.dropWhile1 idr_Prelude.List.dropWhile4
    (Cidr_Prelude.List.Nil) ->
      fetch idr_Prelude.List.dropWhile2

idr_Prelude.Chars.isSpace idr_Prelude.Chars.isSpace0 =
  idr_Prelude.Chars.isSpace1_val_18 <- pure (CGrInt 32)
  idr_Prelude.Chars.isSpace1 <- store idr_Prelude.Chars.isSpace1_val_18
  idr_Prelude.Chars.isSpace1_val <- do
    unboxed.CGrInt.2 <- do
      (CGrInt idr_Prelude.Chars.isSpace1.32.1.arity.1) <- fetch idr_Prelude.Chars.isSpace1
      idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace1.32.1.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace1.32.1.arity.1)
    pure (CGrInt unboxed.CGrInt.2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.2)
  idr_Prelude.Chars.isSpace1_19 <- store idr_Prelude.Chars.isSpace1_val
  idr_Prelude.Chars.isSpace1_val_20 <- fetch idr_Prelude.Chars.isSpace1_19
  case idr_Prelude.Chars.isSpace1_val_20 of
    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0) ->
      case idr_Prelude.Chars.isSpace_cpat_LInt64_0 of
        0 ->
          idr_Prelude.Chars.isSpace2_val_21 <- pure (CGrInt 9)
          idr_Prelude.Chars.isSpace2 <- store idr_Prelude.Chars.isSpace2_val_21
          idr_Prelude.Chars.isSpace2_val <- do
            unboxed.CGrInt.3 <- do
              (CGrInt idr_Prelude.Chars.isSpace2.32.2.arity.1) <- fetch idr_Prelude.Chars.isSpace2
              idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace2.32.2.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace2.32.2.arity.1)
            pure (CGrInt unboxed.CGrInt.3) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.3)
          idr_Prelude.Chars.isSpace2_22 <- store idr_Prelude.Chars.isSpace2_val
          idr_Prelude.Chars.isSpace2_val_23 <- fetch idr_Prelude.Chars.isSpace2_22
          case idr_Prelude.Chars.isSpace2_val_23 of
            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_24) ->
              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_24 of
                0 ->
                  idr_Prelude.Chars.isSpace3_val_25 <- pure (CGrInt 13)
                  idr_Prelude.Chars.isSpace3 <- store idr_Prelude.Chars.isSpace3_val_25
                  idr_Prelude.Chars.isSpace3_val <- do
                    unboxed.CGrInt.4 <- do
                      (CGrInt idr_Prelude.Chars.isSpace3.32.3.arity.1) <- fetch idr_Prelude.Chars.isSpace3
                      idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace3.32.3.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace3.32.3.arity.1)
                    pure (CGrInt unboxed.CGrInt.4) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.4)
                  idr_Prelude.Chars.isSpace3_26 <- store idr_Prelude.Chars.isSpace3_val
                  idr_Prelude.Chars.isSpace3_val_27 <- fetch idr_Prelude.Chars.isSpace3_26
                  case idr_Prelude.Chars.isSpace3_val_27 of
                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_28) ->
                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_28 of
                        0 ->
                          idr_Prelude.Chars.isSpace4_val_29 <- pure (CGrInt 10)
                          idr_Prelude.Chars.isSpace4 <- store idr_Prelude.Chars.isSpace4_val_29
                          idr_Prelude.Chars.isSpace4_val <- do
                            unboxed.CGrInt.5 <- do
                              (CGrInt idr_Prelude.Chars.isSpace4.32.4.arity.1) <- fetch idr_Prelude.Chars.isSpace4
                              idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace4.32.4.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace4.32.4.arity.1)
                            pure (CGrInt unboxed.CGrInt.5) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.5)
                          idr_Prelude.Chars.isSpace4_30 <- store idr_Prelude.Chars.isSpace4_val
                          idr_Prelude.Chars.isSpace4_val_31 <- fetch idr_Prelude.Chars.isSpace4_30
                          case idr_Prelude.Chars.isSpace4_val_31 of
                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_32) ->
                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_32 of
                                0 ->
                                  idr_Prelude.Chars.isSpace5_val_33 <- pure (CGrInt 12)
                                  idr_Prelude.Chars.isSpace5 <- store idr_Prelude.Chars.isSpace5_val_33
                                  idr_Prelude.Chars.isSpace5_val <- do
                                    unboxed.CGrInt.6 <- do
                                      (CGrInt idr_Prelude.Chars.isSpace5.32.5.arity.1) <- fetch idr_Prelude.Chars.isSpace5
                                      idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace5.32.5.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace5.32.5.arity.1)
                                    pure (CGrInt unboxed.CGrInt.6) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.6)
                                  idr_Prelude.Chars.isSpace5_34 <- store idr_Prelude.Chars.isSpace5_val
                                  idr_Prelude.Chars.isSpace5_val_35 <- fetch idr_Prelude.Chars.isSpace5_34
                                  case idr_Prelude.Chars.isSpace5_val_35 of
                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_36) ->
                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_36 of
                                        0 ->
                                          idr_Prelude.Chars.isSpace6_val_37 <- pure (CGrInt 11)
                                          idr_Prelude.Chars.isSpace6 <- store idr_Prelude.Chars.isSpace6_val_37
                                          idr_Prelude.Chars.isSpace6_val <- do
                                            unboxed.CGrInt.7 <- do
                                              (CGrInt idr_Prelude.Chars.isSpace6.32.6.arity.1) <- fetch idr_Prelude.Chars.isSpace6
                                              idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace6.32.6.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace6.32.6.arity.1)
                                            pure (CGrInt unboxed.CGrInt.7) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.7)
                                          idr_Prelude.Chars.isSpace6_38 <- store idr_Prelude.Chars.isSpace6_val
                                          idr_Prelude.Chars.isSpace6_val_39 <- fetch idr_Prelude.Chars.isSpace6_38
                                          case idr_Prelude.Chars.isSpace6_val_39 of
                                            (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_40) ->
                                              case idr_Prelude.Chars.isSpace_cpat_LInt64_0_40 of
                                                0 ->
                                                  idr_Prelude.Chars.isSpace7_val_41 <- pure (CGrInt 160)
                                                  idr_Prelude.Chars.isSpace7 <- store idr_Prelude.Chars.isSpace7_val_41
                                                  idr_Prelude.Chars.isSpace7_val <- do
                                                    unboxed.CGrInt.8 <- do
                                                      (CGrInt idr_Prelude.Chars.isSpace7.32.7.arity.1) <- fetch idr_Prelude.Chars.isSpace7
                                                      idris_int_eq.unboxed idr_Prelude.Chars.isSpace0 idr_Prelude.Chars.isSpace7.32.7.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Chars.isSpace7.32.7.arity.1)
                                                    pure (CGrInt unboxed.CGrInt.8) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.8)
                                                  idr_Prelude.Chars.isSpace7_42 <- store idr_Prelude.Chars.isSpace7_val
                                                  idr_Prelude.Chars.isSpace7_val_43 <- fetch idr_Prelude.Chars.isSpace7_42
                                                  case idr_Prelude.Chars.isSpace7_val_43 of
                                                    (CGrInt idr_Prelude.Chars.isSpace_cpat_LInt64_0_44) ->
                                                      case idr_Prelude.Chars.isSpace_cpat_LInt64_0_44 of
                                                        0 ->
                                                          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                                                        #default ->
                                                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                                #default ->
                                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                        #default ->
                                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                                #default ->
                                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                        #default ->
                          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)

idr_Prelude.List.length.unboxed idr_Prelude.List.length1 =
  idr_Prelude.List.length1_val <- fetch idr_Prelude.List.length1
  case idr_Prelude.List.length1_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.length2 idr_Prelude.List.length3) ->
      idr_Prelude.List.length4_val_45 <- pure (CErased)
      idr_Prelude.List.length4 <- store idr_Prelude.List.length4_val_45
      idr_Prelude.List.length4_val <- do
        unboxed.CGrInt.9 <- idr_Prelude.List.length.unboxed idr_Prelude.List.length3
        pure (CGrInt unboxed.CGrInt.9) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.9)
      idr_Prelude.List.length4_46 <- store idr_Prelude.List.length4_val
      idr_Prelude.List.length5_val <- pure (CGrInt 1)
      idr_Prelude.List.length5 <- store idr_Prelude.List.length5_val
      do
        (CGrInt unboxed.CGrInt.0) <- idris_int_add idr_Prelude.List.length4_46 idr_Prelude.List.length5
        pure unboxed.CGrInt.0
    (Cidr_Prelude.List.Nil) ->
      pure 0

idr_Main.main =
  idr_Main.main1_val_49 <- pure (CGrString #"The average word length is: ")
  idr_Main.main1 <- store idr_Main.main1_val_49
  idr_Main.main2_val_51 <- pure (CErased)
  idr_Main.main2 <- store idr_Main.main2_val_51
  idr_Main.main3_val <- pure (C"idr_{U_prim__floatToStr_1}")
  idr_Main.main3 <- store idr_Main.main3_val
  idr_Main.main4_val <- pure (Cidr_Prelude.Show.Open)
  idr_Main.main4 <- store idr_Main.main4_val
  idr_Main.main5_val_52 <- pure (CGrString #"This is a test sentence!")
  idr_Main.main5 <- store idr_Main.main5_val_52
  idr_Main.main5_val <- do
    unboxed.CGrFloat.2 <- idr_Main.average.unboxed idr_Main.main5
    pure (CGrFloat unboxed.CGrFloat.2) -- LINT: Last return expressions can only return non-node values: pure (CGrFloat unboxed.CGrFloat.2)
  idr_Main.main5_53 <- store idr_Main.main5_val
  idr_Main.main2_val_50 <- do
    (Cidr_Prelude.Show.Open) <- fetch idr_Main.main4
    idr_Prelude.Show.primNumShow idr_Main.main3 idr_Main.main5_53 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)
  idr_Main.main2_54 <- store idr_Main.main2_val_50
  idr_Main.main3_val_55 <- pure (CGrString #"\n")
  idr_Main.main3_56 <- store idr_Main.main3_val_55
  idr_Main.main2_val <- do
    (CGrString idr_Main.main3_56.32.9.arity.1) <- fetch idr_Main.main3_56
    idris_str_concat idr_Main.main2_54 idr_Main.main3_56.32.9.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main3_56.32.9.arity.1)
  idr_Main.main2_57 <- store idr_Main.main2_val
  idr_Main.main1_val_48 <- do
    (CGrString idr_Main.main2_57.32.10.arity.1) <- fetch idr_Main.main2_57
    idris_str_concat idr_Main.main1 idr_Main.main2_57.32.10.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main2_57.32.10.arity.1)
  idr_Main.main1_58 <- store idr_Main.main1_val_48
  idr_Main.main2_val_59 <- pure (CGrString #"\n")
  idr_Main.main2_60 <- store idr_Main.main2_val_59
  idr_Main.main1_val_47 <- do
    (CGrString idr_Main.main2_60.32.11.arity.1) <- fetch idr_Main.main2_60
    idris_str_concat idr_Main.main1_58 idr_Main.main2_60.32.11.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main2_60.32.11.arity.1)
  idr_Main.main1_61 <- store idr_Main.main1_val_47
  idr_Main.main1_val <- do
    (CGrString idr_Main.main1_61.32.12.arity.1) <- fetch idr_Main.main1_61
    idris_write_str idr_Main.main1_61.32.12.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Main.main1_61.32.12.arity.1)
  idr_Main.main1_62 <- store idr_Main.main1_val
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

idr_Prelude.Show.primNumShow idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3 =
  idr_Prelude.Show.primNumShow4_val <- do
    "idr_{APPLY_0}0.1" <- pure idr_Prelude.Show.primNumShow1
    "idr_{APPLY_0}1.1" <- pure idr_Prelude.Show.primNumShow3
    "idr_{APPLY_0}0_val.1" <- fetch "idr_{APPLY_0}0.1"
    case "idr_{APPLY_0}0_val.1" of
      (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}2.1") ->
        "idr_Main.{average_0}" "idr_{APPLY_0}2.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{average_1}_1}") ->
        "idr_Main.{average_1}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Chars.isSpace_1}") ->
        idr_Prelude.Chars.isSpace "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Strings.{words'_3}_1}") ->
        "idr_Prelude.Strings.{words'_3}" "idr_{APPLY_0}1.1"
      (C"idr_{U_Prelude.Strings.{words_2}_1}") ->
        "idr_Prelude.Strings.{words_2}" "idr_{APPLY_0}1.1"
      (C"idr_{U_prim__floatToStr_1}") ->
        idr_prim__floatToStr "idr_{APPLY_0}1.1"
      (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_175.1") ->
        idr_prim__strCons "idr_{APPLY_0}2_175.1" "idr_{APPLY_0}1.1"
      (C"idr_{U_Main.{average_0}_2}") ->
        pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.1")
      (C"idr_{U_prim__strCons_2}") ->
        pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.1")
      #default ->
        pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- pure (Cidr_Prelude.Show.Open)
  ccp.3 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.Open) ->
      pure 0
  idr_Prelude.Show.primNumShow5_val_65 <- pure (CGrInt ccp.3)
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_65
  idr_Prelude.Show.primNumShow6_val <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6 <- store idr_Prelude.Show.primNumShow6_val
  idr_Prelude.Show.primNumShow5_val_64 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" idr_Prelude.Show.primNumShow5 idr_Prelude.Show.primNumShow6
  idr_Prelude.Show.primNumShow5_66 <- store idr_Prelude.Show.primNumShow5_val_64
  idr_Prelude.Show.primNumShow5_val_67 <- fetch idr_Prelude.Show.primNumShow5_66
  idr_Prelude.Show.primNumShow5_val_63 <- case idr_Prelude.Show.primNumShow5_val_67 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Show.primNumShow2_val_70 <- pure (Cidr_Prelude.Show.Open)
      ccp.4 <- case idr_Prelude.Show.primNumShow2_val_70 of
        (Cidr_Prelude.Show.Open) ->
          pure 0
      idr_Prelude.Show.primNumShow6_val_69 <- pure (CGrInt ccp.4)
      idr_Prelude.Show.primNumShow6_71 <- store idr_Prelude.Show.primNumShow6_val_69
      idr_Prelude.Show.primNumShow7_val <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7 <- store idr_Prelude.Show.primNumShow7_val
      idr_Prelude.Show.primNumShow6_val_68 <- do
        unboxed.CGrInt.10 <- do
          (CGrInt idr_Prelude.Show.primNumShow7.32.13.arity.1) <- fetch idr_Prelude.Show.primNumShow7
          idris_int_eq.unboxed idr_Prelude.Show.primNumShow6_71 idr_Prelude.Show.primNumShow7.32.13.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow7.32.13.arity.1)
        pure (CGrInt unboxed.CGrInt.10) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.10)
      idr_Prelude.Show.primNumShow6_72 <- store idr_Prelude.Show.primNumShow6_val_68
      idr_Prelude.Show.primNumShow6_val_73 <- fetch idr_Prelude.Show.primNumShow6_72
      case idr_Prelude.Show.primNumShow6_val_73 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_74 <- store idr_Prelude.Show.primNumShow5_val_63
  idr_Prelude.Show.primNumShow5_val_75 <- fetch idr_Prelude.Show.primNumShow5_74
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_75 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_79 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_80 <- store idr_Prelude.Show.primNumShow6_val_79
      idr_Prelude.Show.primNumShow6_val_78 <- do
        unboxed.CGrInt.11 <- do
          (CGrString idr_Prelude.Show.primNumShow6_80.32.14.arity.1) <- fetch idr_Prelude.Show.primNumShow6_80
          idris_str_eq.unboxed idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow6_80.32.14.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow6_80.32.14.arity.1)
        pure (CGrInt unboxed.CGrInt.11) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.11)
      idr_Prelude.Show.primNumShow6_81 <- store idr_Prelude.Show.primNumShow6_val_78
      idr_Prelude.Show.primNumShow6_val_82 <- fetch idr_Prelude.Show.primNumShow6_81
      idr_Prelude.Show.primNumShow6_val_77 <- case idr_Prelude.Show.primNumShow6_val_82 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_83) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_83 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Show.primNumShow6_84 <- store idr_Prelude.Show.primNumShow6_val_77
      idr_Prelude.Show.primNumShow7_val_85 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_86 <- store idr_Prelude.Show.primNumShow7_val_85
      idr_Prelude.Show.primNumShow6_val_76 <- do
        (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Show.primNumShow7_86
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Show.primNumShow6_84 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow6_87 <- store idr_Prelude.Show.primNumShow6_val_76
      idr_Prelude.Show.primNumShow6_val_88 <- fetch idr_Prelude.Show.primNumShow6_87
      case idr_Prelude.Show.primNumShow6_val_88 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Prelude.Show.primNumShow7_val_90 <- do
            unboxed.CGrInt.12 <- idris_str_head.unboxed idr_Prelude.Show.primNumShow4
            pure (CGrInt unboxed.CGrInt.12) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.12)
          idr_Prelude.Show.primNumShow7_91 <- store idr_Prelude.Show.primNumShow7_val_90
          idr_Prelude.Show.primNumShow8_val <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8 <- store idr_Prelude.Show.primNumShow8_val
          idr_Prelude.Show.primNumShow7_val_89 <- do
            unboxed.CGrInt.13 <- do
              (CGrInt idr_Prelude.Show.primNumShow8.32.16.arity.1) <- fetch idr_Prelude.Show.primNumShow8
              idris_int_eq.unboxed idr_Prelude.Show.primNumShow7_91 idr_Prelude.Show.primNumShow8.32.16.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow8.32.16.arity.1)
            pure (CGrInt unboxed.CGrInt.13) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.13)
          idr_Prelude.Show.primNumShow7_92 <- store idr_Prelude.Show.primNumShow7_val_89
          idr_Prelude.Show.primNumShow7_val_93 <- fetch idr_Prelude.Show.primNumShow7_92
          case idr_Prelude.Show.primNumShow7_val_93 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_94) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_94 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_95 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_96 <- fetch idr_Prelude.Show.primNumShow5_95
  case idr_Prelude.Show.primNumShow5_val_96 of
    (Cidr_Prelude.Bool.False) ->
      fetch idr_Prelude.Show.primNumShow4
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_97 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_98 <- store idr_Prelude.Show.primNumShow6_val_97
      idr_Prelude.Show.primNumShow7_val_100 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_101 <- store idr_Prelude.Show.primNumShow7_val_100
      idr_Prelude.Show.primNumShow7_val_99 <- do
        (CGrString idr_Prelude.Show.primNumShow7_101.32.17.arity.1) <- fetch idr_Prelude.Show.primNumShow7_101
        idris_str_concat idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow7_101.32.17.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow7_101.32.17.arity.1)
      idr_Prelude.Show.primNumShow7_102 <- store idr_Prelude.Show.primNumShow7_val_99
      do
        (CGrString idr_Prelude.Show.primNumShow7_102.32.18.arity.1) <- fetch idr_Prelude.Show.primNumShow7_102
        idris_str_concat idr_Prelude.Show.primNumShow6_98 idr_Prelude.Show.primNumShow7_102.32.18.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow7_102.32.18.arity.1)

idr_prim__floatToStr idr_prim__floatToStr0 =
  idris_float_str idr_prim__floatToStr0

idr_prim__strCons idr_prim__strCons0 idr_prim__strCons1 =
  idris_str_cons idr_prim__strCons0 idr_prim__strCons1

idr_prim__zextInt_BigInt idr_prim__zextInt_BigInt0 =
  do
    (CGrInt idr_prim__zextInt_BigInt0.32.19.arity.1) <- fetch idr_prim__zextInt_BigInt0
    idris_lz_ext idr_prim__zextInt_BigInt0.32.19.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_prim__zextInt_BigInt0.32.19.arity.1)

idr_prim_lenString.unboxed idr_prim_lenString0 =
  idris_str_len.unboxed idr_prim_lenString0

idr_Prelude.List.span idr_Prelude.List.span1 idr_Prelude.List.span2 =
  idr_Prelude.List.span2_val <- fetch idr_Prelude.List.span2
  case idr_Prelude.List.span2_val of
    (Cidr_Prelude.List.:: idr_Prelude.List.span3 idr_Prelude.List.span4) ->
      idr_Prelude.List.span5_val <- do
        "idr_{APPLY_0}0.2" <- pure idr_Prelude.List.span1
        "idr_{APPLY_0}1.2" <- pure idr_Prelude.List.span3
        "idr_{APPLY_0}0_val.2" <- fetch "idr_{APPLY_0}0.2"
        case "idr_{APPLY_0}0_val.2" of
          (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}2.2") ->
            "idr_Main.{average_0}" "idr_{APPLY_0}2.2" "idr_{APPLY_0}1.2"
          (C"idr_{U_Main.{average_1}_1}") ->
            "idr_Main.{average_1}" "idr_{APPLY_0}1.2"
          (C"idr_{U_Prelude.Chars.isSpace_1}") ->
            idr_Prelude.Chars.isSpace "idr_{APPLY_0}1.2"
          (C"idr_{U_Prelude.Strings.{words'_3}_1}") ->
            "idr_Prelude.Strings.{words'_3}" "idr_{APPLY_0}1.2"
          (C"idr_{U_Prelude.Strings.{words_2}_1}") ->
            "idr_Prelude.Strings.{words_2}" "idr_{APPLY_0}1.2"
          (C"idr_{U_prim__floatToStr_1}") ->
            idr_prim__floatToStr "idr_{APPLY_0}1.2"
          (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_175.2") ->
            idr_prim__strCons "idr_{APPLY_0}2_175.2" "idr_{APPLY_0}1.2"
          (C"idr_{U_Main.{average_0}_2}") ->
            pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.2") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.2")
          (C"idr_{U_prim__strCons_2}") ->
            pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.2") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.2")
          #default ->
            pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
      idr_Prelude.List.span5 <- store idr_Prelude.List.span5_val
      idr_Prelude.List.span5_val_105 <- fetch idr_Prelude.List.span5
      case idr_Prelude.List.span5_val_105 of
        (Cidr_Prelude.Bool.False) ->
          idr_Prelude.List.span6_val <- pure (Cidr_Prelude.List.Nil)
          idr_Prelude.List.span6 <- store idr_Prelude.List.span6_val
          idr_Prelude.List.span7_val <- pure (Cidr_Prelude.List.:: idr_Prelude.List.span3 idr_Prelude.List.span4)
          idr_Prelude.List.span7 <- store idr_Prelude.List.span7_val
          pure (Cidr_Builtins.MkPair idr_Prelude.List.span6 idr_Prelude.List.span7) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.span6 idr_Prelude.List.span7)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.List.span6_val_107 <- pure (CErased)
          idr_Prelude.List.span6_108 <- store idr_Prelude.List.span6_val_107
          idr_Prelude.List.span6_val_106 <- idr_Prelude.List.span idr_Prelude.List.span1 idr_Prelude.List.span4
          idr_Prelude.List.span6_109 <- store idr_Prelude.List.span6_val_106
          idr_Prelude.List.span6_val_110 <- fetch idr_Prelude.List.span6_109
          (Cidr_Builtins.MkPair idr_Prelude.List.span7_111 idr_Prelude.List.span8) <- pure idr_Prelude.List.span6_val_110
          idr_Prelude.List.span9_val <- pure (Cidr_Prelude.List.:: idr_Prelude.List.span3 idr_Prelude.List.span7_111)
          idr_Prelude.List.span9 <- store idr_Prelude.List.span9_val
          pure (Cidr_Builtins.MkPair idr_Prelude.List.span9 idr_Prelude.List.span8) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.span9 idr_Prelude.List.span8)
    (Cidr_Prelude.List.Nil) ->
      idr_Prelude.List.span3_val <- pure (Cidr_Prelude.List.Nil)
      idr_Prelude.List.span3_112 <- store idr_Prelude.List.span3_val
      idr_Prelude.List.span4_val <- pure (Cidr_Prelude.List.Nil)
      idr_Prelude.List.span4_113 <- store idr_Prelude.List.span4_val
      pure (Cidr_Builtins.MkPair idr_Prelude.List.span3_112 idr_Prelude.List.span4_113) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Builtins.MkPair idr_Prelude.List.span3_112 idr_Prelude.List.span4_113)

idr_Prelude.Strings.words idr_Prelude.Strings.words0 =
  idr_Prelude.Strings.words1_val <- pure (CErased)
  idr_Prelude.Strings.words1 <- store idr_Prelude.Strings.words1_val
  idr_Prelude.Strings.words2_val <- pure (CErased)
  idr_Prelude.Strings.words2 <- store idr_Prelude.Strings.words2_val
  idr_Prelude.Strings.words3_val <- pure (C"idr_{U_Prelude.Strings.{words_2}_1}")
  idr_Prelude.Strings.words3 <- store idr_Prelude.Strings.words3_val
  idr_Prelude.Strings.words4_val_130 <- pure (CGrString #"")
  idr_Prelude.Strings.words4 <- store idr_Prelude.Strings.words4_val_130
  idr_Prelude.Strings.words4_val_129 <- do
    unboxed.CGrInt.14 <- do
      (CGrString idr_Prelude.Strings.words4.32.20.arity.1) <- fetch idr_Prelude.Strings.words4
      idris_str_eq.unboxed idr_Prelude.Strings.words0 idr_Prelude.Strings.words4.32.20.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.words4.32.20.arity.1)
    pure (CGrInt unboxed.CGrInt.14) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.14)
  idr_Prelude.Strings.words4_131 <- store idr_Prelude.Strings.words4_val_129
  idr_Prelude.Strings.words4_val_132 <- fetch idr_Prelude.Strings.words4_131
  idr_Prelude.Strings.words4_val_128 <- case idr_Prelude.Strings.words4_val_132 of
    (CGrInt idr_Prelude.Strings.words_cpat_LInt64_0) ->
      case idr_Prelude.Strings.words_cpat_LInt64_0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Strings.words4_133 <- store idr_Prelude.Strings.words4_val_128
  idr_Prelude.Strings.words5_val <- pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Strings.words5 <- store idr_Prelude.Strings.words5_val
  idr_Prelude.Strings.words4_val_127 <- do
    (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.words5
    "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.words4_133 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
  idr_Prelude.Strings.words4_134 <- store idr_Prelude.Strings.words4_val_127
  idr_Prelude.Strings.words4_val_135 <- fetch idr_Prelude.Strings.words4_134
  idr_Prelude.Strings.words4_val_126 <- case idr_Prelude.Strings.words4_val_135 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      idr_Prelude.Strings.words5_val_136 <- do
        unboxed.CGrInt.15 <- idris_str_head.unboxed idr_Prelude.Strings.words0
        pure (CGrInt unboxed.CGrInt.15) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.15)
      idr_Prelude.Strings.words5_137 <- store idr_Prelude.Strings.words5_val_136
      idr_Prelude.Strings.words6_val_138 <- pure (CErased)
      idr_Prelude.Strings.words6 <- store idr_Prelude.Strings.words6_val_138
      idr_Prelude.Strings.words7_val_142 <- do
        unboxed.CGrString.0 <- do
          (CGrString idr_Prelude.Strings.words0.32.22.arity.1) <- fetch idr_Prelude.Strings.words0
          idris_str_tail.unboxed idr_Prelude.Strings.words0.32.22.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.words0.32.22.arity.1)
        pure (CGrString unboxed.CGrString.0) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.0)
      idr_Prelude.Strings.words7 <- store idr_Prelude.Strings.words7_val_142
      idr_Prelude.Strings.words8_val <- pure (CGrString #"")
      idr_Prelude.Strings.words8 <- store idr_Prelude.Strings.words8_val
      idr_Prelude.Strings.words7_val_141 <- do
        unboxed.CGrInt.16 <- do
          (CGrString idr_Prelude.Strings.words8.32.23.arity.1) <- fetch idr_Prelude.Strings.words8
          idris_str_eq.unboxed idr_Prelude.Strings.words7 idr_Prelude.Strings.words8.32.23.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.words8.32.23.arity.1)
        pure (CGrInt unboxed.CGrInt.16) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.16)
      idr_Prelude.Strings.words7_143 <- store idr_Prelude.Strings.words7_val_141
      idr_Prelude.Strings.words7_val_144 <- fetch idr_Prelude.Strings.words7_143
      idr_Prelude.Strings.words7_val_140 <- case idr_Prelude.Strings.words7_val_144 of
        (CGrInt idr_Prelude.Strings.words_cpat_LInt64_0_145) ->
          case idr_Prelude.Strings.words_cpat_LInt64_0_145 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Strings.words7_146 <- store idr_Prelude.Strings.words7_val_140
      idr_Prelude.Strings.words8_val_147 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Strings.words8_148 <- store idr_Prelude.Strings.words8_val_147
      idr_Prelude.Strings.words7_val_139 <- do
        (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Strings.words8_148
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Strings.words7_146 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
      idr_Prelude.Strings.words7_149 <- store idr_Prelude.Strings.words7_val_139
      idr_Prelude.Strings.words7_val_150 <- fetch idr_Prelude.Strings.words7_149
      idr_Prelude.Strings.words7_val <- case idr_Prelude.Strings.words7_val_150 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Prelude.Strings.words8_val_152 <- do
            unboxed.CGrString.1 <- do
              (CGrString idr_Prelude.Strings.words0.32.25.arity.1) <- fetch idr_Prelude.Strings.words0
              idris_str_tail.unboxed idr_Prelude.Strings.words0.32.25.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.words0.32.25.arity.1)
            pure (CGrString unboxed.CGrString.1) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.1)
          idr_Prelude.Strings.words8_153 <- store idr_Prelude.Strings.words8_val_152
          idr_Prelude.Strings.words8_val_151 <- do
            unboxed.CGrInt.17 <- idris_str_head.unboxed idr_Prelude.Strings.words8_153
            pure (CGrInt unboxed.CGrInt.17) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.17)
          idr_Prelude.Strings.words8_154 <- store idr_Prelude.Strings.words8_val_151
          idr_Prelude.Strings.words9_val_155 <- do
            unboxed.CGrString.2 <- do
              (CGrString idr_Prelude.Strings.words0.32.26.arity.1) <- fetch idr_Prelude.Strings.words0
              idris_str_tail.unboxed idr_Prelude.Strings.words0.32.26.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.words0.32.26.arity.1)
            pure (CGrString unboxed.CGrString.2) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.2)
          idr_Prelude.Strings.words9 <- store idr_Prelude.Strings.words9_val_155
          idr_Prelude.Strings.words9_val <- do
            unboxed.CGrString.3 <- do
              (CGrString idr_Prelude.Strings.words9.32.27.arity.1) <- fetch idr_Prelude.Strings.words9
              idris_str_tail.unboxed idr_Prelude.Strings.words9.32.27.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Strings.words9.32.27.arity.1)
            pure (CGrString unboxed.CGrString.3) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.3)
          idr_Prelude.Strings.words9_156 <- store idr_Prelude.Strings.words9_val
          pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.words8_154 idr_Prelude.Strings.words9_156) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr_Prelude.Strings.words8_154 idr_Prelude.Strings.words9_156)
      idr_Prelude.Strings.words7_157 <- store idr_Prelude.Strings.words7_val
      idr_Prelude.Strings.words6_val <- idr__Prelude.Strings.unpack_with_36 idr_Prelude.Strings.words7_157
      idr_Prelude.Strings.words6_158 <- store idr_Prelude.Strings.words6_val
      pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words5_137 idr_Prelude.Strings.words6_158) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words5_137 idr_Prelude.Strings.words6_158)
  idr_Prelude.Strings.words4_159 <- store idr_Prelude.Strings.words4_val_126
  idr_Prelude.Strings.words4_val <- idr_Prelude.Strings.words' idr_Prelude.Strings.words4_159
  idr_Prelude.Strings.words4_160 <- store idr_Prelude.Strings.words4_val
  "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" idr_Prelude.Strings.words3 idr_Prelude.Strings.words4_160

idr_Prelude.Strings.words' idr_Prelude.Strings.words'0 =
  idr_Prelude.Strings.words'1_val_161 <- pure (CErased)
  idr_Prelude.Strings.words'1 <- store idr_Prelude.Strings.words'1_val_161
  idr_Prelude.Strings.words'2_val <- pure (C"idr_{U_Prelude.Chars.isSpace_1}")
  idr_Prelude.Strings.words'2 <- store idr_Prelude.Strings.words'2_val
  idr_Prelude.Strings.words'1_val <- idr_Prelude.List.dropWhile idr_Prelude.Strings.words'2 idr_Prelude.Strings.words'0
  idr_Prelude.Strings.words'1_162 <- store idr_Prelude.Strings.words'1_val
  idr_Prelude.Strings.words'1_val_163 <- fetch idr_Prelude.Strings.words'1_162
  case idr_Prelude.Strings.words'1_val_163 of
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    #default ->
      idr_Prelude.Strings.words'2_val_165 <- pure (CErased)
      idr_Prelude.Strings.words'2_166 <- store idr_Prelude.Strings.words'2_val_165
      idr_Prelude.Strings.words'3_val <- pure (C"idr_{U_Prelude.Strings.{words'_3}_1}")
      idr_Prelude.Strings.words'3 <- store idr_Prelude.Strings.words'3_val
      idr_Prelude.Strings.words'4_val_167 <- pure (CErased)
      idr_Prelude.Strings.words'4 <- store idr_Prelude.Strings.words'4_val_167
      idr_Prelude.Strings.words'5_val <- pure (C"idr_{U_Prelude.Chars.isSpace_1}")
      idr_Prelude.Strings.words'5 <- store idr_Prelude.Strings.words'5_val
      idr_Prelude.Strings.words'4_val <- idr_Prelude.List.dropWhile idr_Prelude.Strings.words'5 idr_Prelude.Strings.words'0
      idr_Prelude.Strings.words'4_168 <- store idr_Prelude.Strings.words'4_val
      idr_Prelude.Strings.words'2_val_164 <- idr_Prelude.List.span idr_Prelude.Strings.words'3 idr_Prelude.Strings.words'4_168
      idr_Prelude.Strings.words'2_169 <- store idr_Prelude.Strings.words'2_val_164
      idr_Prelude.Strings.words'2_val_170 <- fetch idr_Prelude.Strings.words'2_169
      (Cidr_Builtins.MkPair idr_Prelude.Strings.words'3_171 idr_Prelude.Strings.words'4_172) <- pure idr_Prelude.Strings.words'2_val_170
      idr_Prelude.Strings.words'5_val_173 <- idr_Prelude.Strings.words' idr_Prelude.Strings.words'4_172
      idr_Prelude.Strings.words'5_174 <- store idr_Prelude.Strings.words'5_val_173
      pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words'3_171 idr_Prelude.Strings.words'5_174) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Strings.words'3_171 idr_Prelude.Strings.words'5_174)

"idr_Main.{average_0}" "idr_Main.{average_0}0" "idr_Main.{average_0}1" =
  idris_int_add "idr_Main.{average_0}0" "idr_Main.{average_0}1"

"idr_{runMain_0}" =
  "idr_{runMain_0}0_val_176" <- pure (CErased)
  "idr_{runMain_0}0" <- store "idr_{runMain_0}0_val_176"
  "idr_{runMain_0}0_val" <- idr_Main.main
  "idr_{runMain_0}0_177" <- store "idr_{runMain_0}0_val"
  do
    "idr_{EVAL_0}0.0" <- pure "idr_{runMain_0}0_177"
    "idr_{EVAL_0}0_val.0" <- fetch "idr_{EVAL_0}0.0"
    fetch "idr_{EVAL_0}0.0"

"idr_Main.{average_1}" "idr_Main.{average_1}0" =
  "idr_Main.{average_1}1_val" <- do
    unboxed.CGrInt.18 <- idr_prim_lenString.unboxed "idr_Main.{average_1}0"
    pure (CGrInt unboxed.CGrInt.18) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.18)
  "idr_Main.{average_1}1" <- store "idr_Main.{average_1}1_val"
  idr_prim__zextInt_BigInt "idr_Main.{average_1}1"

"idr_Prelude.Strings.{words_2}" "idr_Prelude.Strings.{words_2}0" =
  "idr_Prelude.Strings.{words_2}1_val" <- pure (CErased)
  "idr_Prelude.Strings.{words_2}1" <- store "idr_Prelude.Strings.{words_2}1_val"
  "idr_Prelude.Strings.{words_2}2_val" <- pure (CErased)
  "idr_Prelude.Strings.{words_2}2" <- store "idr_Prelude.Strings.{words_2}2_val"
  "idr_Prelude.Strings.{words_2}3_val" <- pure (C"idr_{U_prim__strCons_2}")
  "idr_Prelude.Strings.{words_2}3" <- store "idr_Prelude.Strings.{words_2}3_val"
  "idr_Prelude.Strings.{words_2}4_val" <- pure (CGrString #"")
  "idr_Prelude.Strings.{words_2}4" <- store "idr_Prelude.Strings.{words_2}4_val"
  "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" "idr_Prelude.Strings.{words_2}3" "idr_Prelude.Strings.{words_2}4" "idr_Prelude.Strings.{words_2}0"

"idr_Prelude.Strings.{words'_3}" "idr_Prelude.Strings.{words'_3}0" =
  "idr_Prelude.Strings.{words'_3}1_val" <- idr_Prelude.Chars.isSpace "idr_Prelude.Strings.{words'_3}0"
  "idr_Prelude.Strings.{words'_3}1" <- store "idr_Prelude.Strings.{words'_3}1_val"
  "idr_Prelude.Strings.{words'_3}1_val_178" <- fetch "idr_Prelude.Strings.{words'_3}1"
  case "idr_Prelude.Strings.{words'_3}1_val_178" of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    (Cidr_Prelude.Bool.True) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" <- pure (Cidr_Prelude.Bool.True)
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" of
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_179" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_179" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)

"idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04" =
  "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04_val" <- fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04"
  case "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:06") ->
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07_val" <- do
        "idr_{APPLY_0}0.3" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02"
        "idr_{APPLY_0}1.3" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:05"
        "idr_{APPLY_0}0_val.3" <- fetch "idr_{APPLY_0}0.3"
        case "idr_{APPLY_0}0_val.3" of
          (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}2.3") ->
            "idr_Main.{average_0}" "idr_{APPLY_0}2.3" "idr_{APPLY_0}1.3"
          (C"idr_{U_Main.{average_1}_1}") ->
            "idr_Main.{average_1}" "idr_{APPLY_0}1.3"
          (C"idr_{U_Prelude.Chars.isSpace_1}") ->
            idr_Prelude.Chars.isSpace "idr_{APPLY_0}1.3"
          (C"idr_{U_Prelude.Strings.{words'_3}_1}") ->
            "idr_Prelude.Strings.{words'_3}" "idr_{APPLY_0}1.3"
          (C"idr_{U_Prelude.Strings.{words_2}_1}") ->
            "idr_Prelude.Strings.{words_2}" "idr_{APPLY_0}1.3"
          (C"idr_{U_prim__floatToStr_1}") ->
            idr_prim__floatToStr "idr_{APPLY_0}1.3"
          (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_175.3") ->
            idr_prim__strCons "idr_{APPLY_0}2_175.3" "idr_{APPLY_0}1.3"
          (C"idr_{U_Main.{average_0}_2}") ->
            pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.3") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.3")
          (C"idr_{U_prim__strCons_2}") ->
            pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.3") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.3")
          #default ->
            pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07_val"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val_180" <- pure (CErased)
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val_180"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:09_val" <- pure (CErased)
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:09" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:09_val"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val" <- "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:0" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:02" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03" "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:06"
      "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_181" <- store "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_val"
      do
        "idr_{APPLY_0}0.4" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:07"
        "idr_{APPLY_0}1.4" <- pure "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:08_181"
        "idr_{APPLY_0}0_val.4" <- fetch "idr_{APPLY_0}0.4"
        case "idr_{APPLY_0}0_val.4" of
          (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}2.4") ->
            "idr_Main.{average_0}" "idr_{APPLY_0}2.4" "idr_{APPLY_0}1.4"
          (C"idr_{U_Main.{average_1}_1}") ->
            "idr_Main.{average_1}" "idr_{APPLY_0}1.4"
          (C"idr_{U_Prelude.Chars.isSpace_1}") ->
            idr_Prelude.Chars.isSpace "idr_{APPLY_0}1.4"
          (C"idr_{U_Prelude.Strings.{words'_3}_1}") ->
            "idr_Prelude.Strings.{words'_3}" "idr_{APPLY_0}1.4"
          (C"idr_{U_Prelude.Strings.{words_2}_1}") ->
            "idr_Prelude.Strings.{words_2}" "idr_{APPLY_0}1.4"
          (C"idr_{U_prim__floatToStr_1}") ->
            idr_prim__floatToStr "idr_{APPLY_0}1.4"
          (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_175.4") ->
            idr_prim__strCons "idr_{APPLY_0}2_175.4" "idr_{APPLY_0}1.4"
          (C"idr_{U_Main.{average_0}_2}") ->
            pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.4") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.4")
          (C"idr_{U_prim__strCons_2}") ->
            pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.4") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.4")
          #default ->
            pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
    (Cidr_Prelude.List.Nil) ->
      fetch "idr_Prelude.Foldable.Prelude.List.@Prelude.Foldable.Foldable$List:!foldr:03"

"idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03" =
  "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val" <- fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03"
  case "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:05") ->
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06_val" <- do
        "idr_{APPLY_0}0.5" <- pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02"
        "idr_{APPLY_0}1.5" <- pure "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:04"
        "idr_{APPLY_0}0_val.5" <- fetch "idr_{APPLY_0}0.5"
        case "idr_{APPLY_0}0_val.5" of
          (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}2.5") ->
            "idr_Main.{average_0}" "idr_{APPLY_0}2.5" "idr_{APPLY_0}1.5"
          (C"idr_{U_Main.{average_1}_1}") ->
            "idr_Main.{average_1}" "idr_{APPLY_0}1.5"
          (C"idr_{U_Prelude.Chars.isSpace_1}") ->
            idr_Prelude.Chars.isSpace "idr_{APPLY_0}1.5"
          (C"idr_{U_Prelude.Strings.{words'_3}_1}") ->
            "idr_Prelude.Strings.{words'_3}" "idr_{APPLY_0}1.5"
          (C"idr_{U_Prelude.Strings.{words_2}_1}") ->
            "idr_Prelude.Strings.{words_2}" "idr_{APPLY_0}1.5"
          (C"idr_{U_prim__floatToStr_1}") ->
            idr_prim__floatToStr "idr_{APPLY_0}1.5"
          (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_175.5") ->
            idr_prim__strCons "idr_{APPLY_0}2_175.5" "idr_{APPLY_0}1.5"
          (C"idr_{U_Main.{average_0}_2}") ->
            pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.5") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{average_0}_1}" "idr_{APPLY_0}1.5")
          (C"idr_{U_prim__strCons_2}") ->
            pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.5") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}1.5")
          #default ->
            pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06_val"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val_182" <- pure (CErased)
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val_182"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:08_val" <- pure (CErased)
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:08" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:08_val"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val" <- "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:0" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:02" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:05"
      "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_183" <- store "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_val"
      pure (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_183") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:06" "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:07_183")
    (Cidr_Prelude.List.Nil) ->
      fetch "idr_Prelude.Functor.Prelude.List.@Prelude.Functor.Functor$List:!map:03"

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val" <- do
    unboxed.CGrInt.19 <- do
      (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.32.28.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
      idris_int_eq.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.32.28.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.32.28.arity.1")
    pure (CGrInt unboxed.CGrInt.19) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.19)
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_184" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_184" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val" <- do
            unboxed.CGrInt.20 <- do
              (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.32.29.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00"
              (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.32.29.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
              idris_int_lt.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.32.29.arity.1" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.32.29.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.32.29.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.32.29.arity.1")
            pure (CGrInt unboxed.CGrInt.20) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.20)
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_185" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_185" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_186") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_186" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)

idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_361 =
  idr__Prelude.Strings.unpack_with_361_val <- fetch idr__Prelude.Strings.unpack_with_361
  case idr__Prelude.Strings.unpack_with_361_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_363) ->
      idr__Prelude.Strings.unpack_with_364_val_187 <- pure (CErased)
      idr__Prelude.Strings.unpack_with_364 <- store idr__Prelude.Strings.unpack_with_364_val_187
      idr__Prelude.Strings.unpack_with_365_val_191 <- pure (CGrString #"")
      idr__Prelude.Strings.unpack_with_365 <- store idr__Prelude.Strings.unpack_with_365_val_191
      idr__Prelude.Strings.unpack_with_365_val_190 <- do
        unboxed.CGrInt.21 <- do
          (CGrString idr__Prelude.Strings.unpack_with_365.32.30.arity.1) <- fetch idr__Prelude.Strings.unpack_with_365
          idris_str_eq.unboxed idr__Prelude.Strings.unpack_with_363 idr__Prelude.Strings.unpack_with_365.32.30.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.unpack_with_365.32.30.arity.1)
        pure (CGrInt unboxed.CGrInt.21) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.21)
      idr__Prelude.Strings.unpack_with_365_192 <- store idr__Prelude.Strings.unpack_with_365_val_190
      idr__Prelude.Strings.unpack_with_365_val_193 <- fetch idr__Prelude.Strings.unpack_with_365_192
      idr__Prelude.Strings.unpack_with_365_val_189 <- case idr__Prelude.Strings.unpack_with_365_val_193 of
        (CGrInt idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0) ->
          case idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr__Prelude.Strings.unpack_with_365_194 <- store idr__Prelude.Strings.unpack_with_365_val_189
      idr__Prelude.Strings.unpack_with_366_val <- pure (Cidr_Prelude.Bool.True)
      idr__Prelude.Strings.unpack_with_366 <- store idr__Prelude.Strings.unpack_with_366_val
      idr__Prelude.Strings.unpack_with_365_val_188 <- do
        (Cidr_Prelude.Bool.True) <- fetch idr__Prelude.Strings.unpack_with_366
        "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr__Prelude.Strings.unpack_with_365_194 -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True)
      idr__Prelude.Strings.unpack_with_365_195 <- store idr__Prelude.Strings.unpack_with_365_val_188
      idr__Prelude.Strings.unpack_with_365_val_196 <- fetch idr__Prelude.Strings.unpack_with_365_195
      idr__Prelude.Strings.unpack_with_365_val <- case idr__Prelude.Strings.unpack_with_365_val_196 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr__Prelude.Strings.unpack_with_366_val_197 <- do
            unboxed.CGrInt.22 <- idris_str_head.unboxed idr__Prelude.Strings.unpack_with_363
            pure (CGrInt unboxed.CGrInt.22) -- LINT: Last return expressions can only return non-node values: pure (CGrInt unboxed.CGrInt.22)
          idr__Prelude.Strings.unpack_with_366_198 <- store idr__Prelude.Strings.unpack_with_366_val_197
          idr__Prelude.Strings.unpack_with_367_val <- do
            unboxed.CGrString.4 <- do
              (CGrString idr__Prelude.Strings.unpack_with_363.32.32.arity.1) <- fetch idr__Prelude.Strings.unpack_with_363
              idris_str_tail.unboxed idr__Prelude.Strings.unpack_with_363.32.32.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr__Prelude.Strings.unpack_with_363.32.32.arity.1)
            pure (CGrString unboxed.CGrString.4) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.4)
          idr__Prelude.Strings.unpack_with_367 <- store idr__Prelude.Strings.unpack_with_367_val
          pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_198 idr__Prelude.Strings.unpack_with_367) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_198 idr__Prelude.Strings.unpack_with_367)
      idr__Prelude.Strings.unpack_with_365_199 <- store idr__Prelude.Strings.unpack_with_365_val
      idr__Prelude.Strings.unpack_with_364_val <- idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_365_199
      idr__Prelude.Strings.unpack_with_364_200 <- store idr__Prelude.Strings.unpack_with_364_val
      pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_200) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_200)
    (Cidr_Prelude.Strings.StrNil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
