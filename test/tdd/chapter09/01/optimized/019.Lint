idris_int_eq.unboxed idris_int_eq0.49.arity.1 idris_int_eq1.49.arity.1 =
  (CGrInt idris_int_eq0_1) <- pure (CGrInt idris_int_eq0.49.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrInt idris_int_eq1_1) <- pure (CGrInt idris_int_eq1.49.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_eq2 <- _prim_int_eq idris_int_eq0_1 idris_int_eq1_1
  ccp.0 <- case idris_int_eq2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.0

idris_int_lt.unboxed idris_int_lt0.41.arity.1 idris_int_lt1.41.arity.1 =
  (CGrInt idris_int_lt0_1) <- pure (CGrInt idris_int_lt0.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrInt idris_int_lt1_1) <- pure (CGrInt idris_int_lt1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_lt2 <- _prim_int_lt idris_int_lt0_1 idris_int_lt1_1
  ccp.1 <- case idris_int_lt2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.1

idris_str_concat.unboxed idris_str_concat1.49.arity.1 idris_str_concat2.49.arity.1 =
  (CGrString idris_str_concat1_0) <- pure (CGrString idris_str_concat1.49.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrString idris_str_concat2_0) <- pure (CGrString idris_str_concat2.49.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_concat3 <- _prim_string_concat idris_str_concat1_0 idris_str_concat2_0
  pure idris_str_concat3

grinMain =
  "idr_{runMain_0}0_val_177.0" <- pure (CErased)
  "idr_{runMain_0}0.0" <- store "idr_{runMain_0}0_val_177.0"
  idr_Main.main1_val_9.0 <- pure (CErased)
  idr_Main.main1.0 <- store idr_Main.main1_val_9.0
  idr_Main.main2_val.0 <- pure (CErased)
  idr_Main.main2.0 <- store idr_Main.main2_val.0
  idr_Main.main3_val.0 <- pure (C"idr_{U_Main.{main_2}_1}")
  idr_Main.main3.0 <- store idr_Main.main3_val.0
  idr_Main.main4_val_10.0 <- pure (CErased)
  idr_Main.main4.0 <- store idr_Main.main4_val_10.0
  idr_Main.main5_val.0 <- pure (CGrInt 2)
  idr_Main.main5.0 <- store idr_Main.main5_val.0
  idr_Main.main6_val.0 <- pure (CErased)
  idr_Main.main6.0 <- store idr_Main.main6_val.0
  idr_Main.main7_val_11.0 <- pure (CGrInt 1)
  idr_Main.main7.0 <- store idr_Main.main7_val_11.0
  idr_Main.main8_val_12.0 <- pure (CGrInt 2)
  idr_Main.main8.0 <- store idr_Main.main8_val_12.0
  idr_Main.main9_val_13.0 <- pure (CGrInt 3)
  idr_Main.main9.0 <- store idr_Main.main9_val_13.0
  idr_Main.main10_val.0 <- pure (Cidr_Data.Vect.Nil)
  idr_Main.main10.0 <- store idr_Main.main10_val.0
  idr_Main.main9_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.main9.0 idr_Main.main10.0)
  idr_Main.main9_14.0 <- store idr_Main.main9_val.0
  idr_Main.main8_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.main8.0 idr_Main.main9_14.0)
  idr_Main.main8_15.0 <- store idr_Main.main8_val.0
  idr_Main.main7_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.main7.0 idr_Main.main8_15.0)
  idr_Main.main7_16.0 <- store idr_Main.main7_val.0
  idr_Main.main8_val_19.0 <- pure (Cidr_Data.Vect.Here)
  idr_Main.main8_20.0 <- store idr_Main.main8_val_19.0
  idr_Main.main8_val_18.0 <- pure (Cidr_Data.Vect.There idr_Main.main8_20.0)
  idr_Main.main8_21.0 <- store idr_Main.main8_val_18.0
  idr_Main.main8_val_17.0 <- pure (Cidr_Data.Vect.There idr_Main.main8_21.0)
  idr_Main.main8_22.0 <- store idr_Main.main8_val_17.0
  (CGrInt idr_Main.main5.49.0.arity.1.0) <- fetch idr_Main.main5.0
  idr_Main.main4_val.0 <- idr_Main.removeElemPrf idr_Main.main5.49.0.arity.1.0 idr_Main.main7_16.0 idr_Main.main8_22.0
  idr_Main.main4_23.0 <- store idr_Main.main4_val.0
  idr_Main.main1_val.0 <- idr_Prelude.Interactive.printLn' idr_Main.main3.0 idr_Main.main4_23.0
  idr_Main.main1_24.0 <- store idr_Main.main1_val.0
  idr_Main.main2_val_26.0 <- pure (CErased)
  idr_Main.main2_27.0 <- store idr_Main.main2_val_26.0
  idr_Main.main3_val_28.0 <- pure (CErased)
  idr_Main.main3_29.0 <- store idr_Main.main3_val_28.0
  idr_Main.main4_val_30.0 <- pure (C"idr_{U_Main.{main_3}_1}")
  idr_Main.main4_31.0 <- store idr_Main.main4_val_30.0
  idr_Main.main5_val_34.0 <- pure (CErased)
  idr_Main.main5_35.0 <- store idr_Main.main5_val_34.0
  idr_Main.main6_val_36.0 <- pure (CErased)
  idr_Main.main6_37.0 <- store idr_Main.main6_val_36.0
  idr_Main.main7_val_38.0 <- pure (C"idr_{U_Main.{main_4}_2}")
  idr_Main.main7_39.0 <- store idr_Main.main7_val_38.0
  idr_Main.main8_val_40.0 <- pure (CGrInt 3)
  idr_Main.main8_41.0 <- store idr_Main.main8_val_40.0
  idr_Main.main9_val_43.0 <- pure (CGrInt 1)
  idr_Main.main9_44.0 <- store idr_Main.main9_val_43.0
  idr_Main.main10_val_46.0 <- pure (CGrInt 2)
  idr_Main.main10_47.0 <- store idr_Main.main10_val_46.0
  idr_Main.main11_val_48.0 <- pure (CGrInt 3)
  idr_Main.main11.0 <- store idr_Main.main11_val_48.0
  idr_Main.main12_val.0 <- pure (Cidr_Data.Vect.Nil)
  idr_Main.main12.0 <- store idr_Main.main12_val.0
  idr_Main.main11_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.main11.0 idr_Main.main12.0)
  idr_Main.main11_49.0 <- store idr_Main.main11_val.0
  idr_Main.main10_val_45.0 <- pure (Cidr_Data.Vect.:: idr_Main.main10_47.0 idr_Main.main11_49.0)
  idr_Main.main10_50.0 <- store idr_Main.main10_val_45.0
  idr_Main.main9_val_42.0 <- pure (Cidr_Data.Vect.:: idr_Main.main9_44.0 idr_Main.main10_50.0)
  idr_Main.main9_51.0 <- store idr_Main.main9_val_42.0
  idr_Main.main5_val_33.0 <- idr_Main.isElem' idr_Main.main7_39.0 idr_Main.main8_41.0 idr_Main.main9_51.0
  idr_Main.main5_52.0 <- store idr_Main.main5_val_33.0
  idr_Main.main5_val_53.0 <- fetch idr_Main.main5_52.0
  idr_Main.main5_val_32.0 <- case idr_Main.main5_val_53.0 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Basics.Yes) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Main.main5_54.0 <- store idr_Main.main5_val_32.0
  idr_Main.main2_val_25.0 <- idr_Prelude.Interactive.printLn' idr_Main.main4_31.0 idr_Main.main5_54.0
  idr_Main.main2_55.0 <- store idr_Main.main2_val_25.0
  idr_Main.main3_val_56.0 <- pure (CErased)
  idr_Main.main3_57.0 <- store idr_Main.main3_val_56.0
  idr_Main.main4_val_58.0 <- pure (CErased)
  idr_Main.main4_59.0 <- store idr_Main.main4_val_58.0
  idr_Main.main5_val_60.0 <- pure (C"idr_{U_Main.{main_3}_1}")
  idr_Main.main5_61.0 <- store idr_Main.main5_val_60.0
  idr_Main.main6_val_64.0 <- pure (CErased)
  idr_Main.main6_65.0 <- store idr_Main.main6_val_64.0
  idr_Main.main7_val_66.0 <- pure (CErased)
  idr_Main.main7_67.0 <- store idr_Main.main7_val_66.0
  idr_Main.main8_val_68.0 <- pure (C"idr_{U_Main.{main_4}_2}")
  idr_Main.main8_69.0 <- store idr_Main.main8_val_68.0
  idr_Main.main9_val_70.0 <- pure (CGrInt 10)
  idr_Main.main9_71.0 <- store idr_Main.main9_val_70.0
  idr_Main.main10_val_73.0 <- pure (CGrInt 1)
  idr_Main.main10_74.0 <- store idr_Main.main10_val_73.0
  idr_Main.main11_val_76.0 <- pure (CGrInt 2)
  idr_Main.main11_77.0 <- store idr_Main.main11_val_76.0
  idr_Main.main12_val_79.0 <- pure (CGrInt 3)
  idr_Main.main12_80.0 <- store idr_Main.main12_val_79.0
  idr_Main.main13_val_81.0 <- pure (CGrInt 4)
  idr_Main.main13.0 <- store idr_Main.main13_val_81.0
  idr_Main.main14_val_82.0 <- pure (CGrInt 5)
  idr_Main.main14.0 <- store idr_Main.main14_val_82.0
  idr_Main.main15_val_83.0 <- pure (CGrInt 6)
  idr_Main.main15.0 <- store idr_Main.main15_val_83.0
  idr_Main.main16_val_84.0 <- pure (CGrInt 7)
  idr_Main.main16.0 <- store idr_Main.main16_val_84.0
  idr_Main.main17_val_85.0 <- pure (CGrInt 8)
  idr_Main.main17.0 <- store idr_Main.main17_val_85.0
  idr_Main.main18_val_86.0 <- pure (CGrInt 9)
  idr_Main.main18.0 <- store idr_Main.main18_val_86.0
  idr_Main.main19_val.0 <- pure (Cidr_Data.Vect.Nil)
  idr_Main.main19.0 <- store idr_Main.main19_val.0
  idr_Main.main18_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.main18.0 idr_Main.main19.0)
  idr_Main.main18_87.0 <- store idr_Main.main18_val.0
  idr_Main.main17_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.main17.0 idr_Main.main18_87.0)
  idr_Main.main17_88.0 <- store idr_Main.main17_val.0
  idr_Main.main16_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.main16.0 idr_Main.main17_88.0)
  idr_Main.main16_89.0 <- store idr_Main.main16_val.0
  idr_Main.main15_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.main15.0 idr_Main.main16_89.0)
  idr_Main.main15_90.0 <- store idr_Main.main15_val.0
  idr_Main.main14_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.main14.0 idr_Main.main15_90.0)
  idr_Main.main14_91.0 <- store idr_Main.main14_val.0
  idr_Main.main13_val.0 <- pure (Cidr_Data.Vect.:: idr_Main.main13.0 idr_Main.main14_91.0)
  idr_Main.main13_92.0 <- store idr_Main.main13_val.0
  idr_Main.main12_val_78.0 <- pure (Cidr_Data.Vect.:: idr_Main.main12_80.0 idr_Main.main13_92.0)
  idr_Main.main12_93.0 <- store idr_Main.main12_val_78.0
  idr_Main.main11_val_75.0 <- pure (Cidr_Data.Vect.:: idr_Main.main11_77.0 idr_Main.main12_93.0)
  idr_Main.main11_94.0 <- store idr_Main.main11_val_75.0
  idr_Main.main10_val_72.0 <- pure (Cidr_Data.Vect.:: idr_Main.main10_74.0 idr_Main.main11_94.0)
  idr_Main.main10_95.0 <- store idr_Main.main10_val_72.0
  idr_Main.main6_val_63.0 <- idr_Main.isElem' idr_Main.main8_69.0 idr_Main.main9_71.0 idr_Main.main10_95.0
  idr_Main.main6_96.0 <- store idr_Main.main6_val_63.0
  idr_Main.main6_val_97.0 <- fetch idr_Main.main6_96.0
  idr_Main.main6_val_62.0 <- case idr_Main.main6_val_97.0 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Basics.Yes) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Main.main6_98.0 <- store idr_Main.main6_val_62.0
  "idr_{runMain_0}0_val.0" <- idr_Prelude.Interactive.printLn' idr_Main.main5_61.0 idr_Main.main6_98.0
  "idr_{runMain_0}0_178.0" <- store "idr_{runMain_0}0_val.0"
  "idr_{EVAL_0}0.0.0" <- pure "idr_{runMain_0}0_178.0"
  "idr_{EVAL_0}0_val.0.0" <- fetch "idr_{EVAL_0}0.0.0"
  r <- case "idr_{EVAL_0}0_val.0.0" of
    #default ->
      fetch "idr_{EVAL_0}0.0.0"
  pure () -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.main5.49.0.arity.1.0)

idr_Data.Vect.foldrImpl idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl4 idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl6 =
  idr_Data.Vect.foldrImpl6_val <- fetch idr_Data.Vect.foldrImpl6
  case idr_Data.Vect.foldrImpl6_val of
    (Cidr_Data.Vect.:: idr_Data.Vect.foldrImpl7 idr_Data.Vect.foldrImpl8) ->
      idr_Data.Vect.foldrImpl9_val <- pure (CErased)
      idr_Data.Vect.foldrImpl9 <- store idr_Data.Vect.foldrImpl9_val
      idr_Data.Vect.foldrImpl10_val <- pure (CErased)
      idr_Data.Vect.foldrImpl10 <- store idr_Data.Vect.foldrImpl10_val
      idr_Data.Vect.foldrImpl11_val <- pure (CErased)
      idr_Data.Vect.foldrImpl11 <- store idr_Data.Vect.foldrImpl11_val
      idr_Data.Vect.foldrImpl12_val <- pure (C"idr_{U_Data.Vect.{foldrImpl_0}_1}" idr_Data.Vect.foldrImpl5 idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl7)
      idr_Data.Vect.foldrImpl12 <- store idr_Data.Vect.foldrImpl12_val
      idr_Data.Vect.foldrImpl idr_Data.Vect.foldrImpl3 idr_Data.Vect.foldrImpl4 idr_Data.Vect.foldrImpl12 idr_Data.Vect.foldrImpl8
    (Cidr_Data.Vect.Nil) ->
      "idr_{APPLY_0}0.0" <- pure idr_Data.Vect.foldrImpl5
      "idr_{APPLY_0}1.0" <- pure idr_Data.Vect.foldrImpl4
      "idr_{APPLY_0}0_val.0" <- fetch "idr_{APPLY_0}0.0"
      case "idr_{APPLY_0}0_val.0" of
        (C"idr_{U_Data.Vect.{foldrImpl_0}_1}" "idr_{APPLY_0}2.0" "idr_{APPLY_0}3.0" "idr_{APPLY_0}4.0") ->
          "idr_Data.Vect.{foldrImpl_0}" "idr_{APPLY_0}2.0" "idr_{APPLY_0}3.0" "idr_{APPLY_0}4.0" "idr_{APPLY_0}1.0"
        (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_9}_1}") ->
          "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_9}0.0" <- pure "idr_{APPLY_0}1.0"
          fetch "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_9}0.0"

idr_Main.isElem' idr_Main.isElem'2 idr_Main.isElem'3 idr_Main.isElem'4 =
  idr_Main.isElem'4_val <- fetch idr_Main.isElem'4
  case idr_Main.isElem'4_val of
    (Cidr_Data.Vect.:: idr_Main.isElem'5 idr_Main.isElem'6) ->
      "idr_{APPLY_0}0.1" <- pure idr_Main.isElem'2
      "idr_{APPLY_0}1.1" <- pure idr_Main.isElem'3
      "idr_{APPLY_0}0_val.1" <- fetch "idr_{APPLY_0}0.1"
      idr_Main.isElem'7_val_3 <- case "idr_{APPLY_0}0_val.1" of
        (C"idr_{U_Main.{main_4}_2}") ->
          pure (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}1.1") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}1.1")
      idr_Main.isElem'7 <- store idr_Main.isElem'7_val_3
      "idr_{APPLY_0}0.2" <- pure idr_Main.isElem'7
      "idr_{APPLY_0}1.2" <- pure idr_Main.isElem'5
      "idr_{APPLY_0}0_val.2" <- fetch "idr_{APPLY_0}0.2"
      idr_Main.isElem'7_val <- case "idr_{APPLY_0}0_val.2" of
        (C"idr_{U_Main.{main_4}_1}" "idr_{APPLY_0}2_172.2") ->
          "idr_Main.{main_4}0.0" <- pure "idr_{APPLY_0}2_172.2"
          "idr_Main.{main_4}1.0" <- pure "idr_{APPLY_0}1.2"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:00.0.0" <- pure "idr_Main.{main_4}0.0"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:01.0.0" <- pure "idr_Main.{main_4}1.0"
          (CGrInt "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:00.0.49.12.arity.1.0") <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:00.0.0"
          (CGrInt "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:01.0.49.12.arity.1.0") <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:01.0.0"
          unboxed.CGrInt.6.0.0 <- idris_int_eq.unboxed "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:00.0.49.12.arity.1.0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:01.0.49.12.arity.1.0"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:02_val.0.0" <- pure (CGrInt unboxed.CGrInt.6.0.0)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:02.0.0" <- store "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:02_val.0.0"
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:02_val_186.0.0" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:02.0.0"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:02_val_186.0.0" of
            (CGrInt "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:0_cpat_LInt64_0.0.0") ->
              case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:0_cpat_LInt64_0.0.0" of
                0 ->
                  pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
                #default ->
                  pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:01.0.49.12.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Integer:!decEq:00.0.49.12.arity.1.0")
      idr_Main.isElem'7_4 <- store idr_Main.isElem'7_val
      idr_Main.isElem'7_val_5 <- fetch idr_Main.isElem'7_4
      case idr_Main.isElem'7_val_5 of
        (Cidr_Prelude.Basics.No) ->
          idr_Main.isElem'8_val_6 <- pure (CErased)
          idr_Main.isElem'8 <- store idr_Main.isElem'8_val_6
          idr_Main.isElem'9_val <- pure (CErased)
          idr_Main.isElem'9 <- store idr_Main.isElem'9_val
          idr_Main.isElem'8_val <- idr_Main.isElem' idr_Main.isElem'2 idr_Main.isElem'3 idr_Main.isElem'6
          idr_Main.isElem'8_7 <- store idr_Main.isElem'8_val
          idr_Main.isElem'8_val_8 <- fetch idr_Main.isElem'8_7
          case idr_Main.isElem'8_val_8 of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Basics.Yes) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
        (Cidr_Prelude.Basics.Yes) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
    (Cidr_Data.Vect.Nil) ->
      pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  "idr_{APPLY_0}0.4" <- pure idr_Prelude.Interactive.printLn'2
  "idr_{APPLY_0}1.4" <- pure idr_Prelude.Interactive.printLn'3
  "idr_{APPLY_0}0_val.4" <- fetch "idr_{APPLY_0}0.4"
  idr_Prelude.Interactive.printLn'5_val_140 <- case "idr_{APPLY_0}0_val.4" of
    (C"idr_{U_Main.{main_2}_1}") ->
      "idr_Main.{main_2}0.0" <- pure "idr_{APPLY_0}1.4"
      "idr_Main.{main_2}1_val.0" <- pure (CErased)
      "idr_Main.{main_2}1.0" <- store "idr_Main.{main_2}1_val.0"
      "idr_Main.{main_2}2_val.0" <- pure (CErased)
      "idr_Main.{main_2}2.0" <- store "idr_Main.{main_2}2_val.0"
      "idr_Main.{main_2}3_val.0" <- pure (C"idr_{U_Main.{main_1}_1}")
      "idr_Main.{main_2}3.0" <- store "idr_Main.{main_2}3_val.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:02.0.0" <- pure "idr_Main.{main_2}3.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:03.0.0" <- pure "idr_Main.{main_2}0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04_val.0.0" <- pure (CGrString #"[")
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04_val.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_191.0.0" <- pure (CErased)
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_191.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val.0.0" <- pure (CErased)
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07_val.0.0" <- pure (CGrString #"")
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07_val.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val_192.0.0" <- pure (CErased)
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val_192.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:09_val.0.0" <- pure (CErased)
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:09.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:09_val.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:010_val.0.0" <- pure (CErased)
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:010.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:010_val.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011_val.0.0" <- pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}_2}")
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011_val.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012_val.0.0" <- pure (Cidr_Prelude.List.Nil)
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012_val.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013_val.0.0" <- pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_9}_1}")
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013_val.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val.0.0" <- idr_Data.Vect.foldrImpl "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:011.0.0" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:012.0.0" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:013.0.0" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:03.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_193.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_val.0.0"
      unboxed.CGrString.2.0.0 <- do
        (CGrString "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07.0.0.57.0.arity.1") <- fetch "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07.0.0"
        "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:02.0.0" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07.0.0.57.0.arity.1" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:08_193.0.0" -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:07.0.0.57.0.arity.1")
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_190.0.0" <- pure (CGrString unboxed.CGrString.2.0.0)
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_194.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val_190.0.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val_195.0.0" <- pure (CGrString #"]")
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_196.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_val_195.0.0"
      (CGrString "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_194.0.49.10.arity.1.0") <- fetch "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_194.0.0"
      (CGrString "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_196.0.49.10.arity.1.0") <- fetch "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_196.0.0"
      unboxed.CGrString.8.0 <- idris_str_concat.unboxed "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_194.0.49.10.arity.1.0" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_196.0.49.10.arity.1.0"
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val.0.0" <- pure (CGrString unboxed.CGrString.8.0)
      "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_197.0.0" <- store "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_val.0.0"
      (CGrString "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04.0.49.11.arity.1.0") <- fetch "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04.0.0"
      (CGrString "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_197.0.49.11.arity.1.0") <- fetch "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_197.0.0"
      unboxed.CGrString.3 <- idris_str_concat.unboxed "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04.0.49.11.arity.1.0" "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_197.0.49.11.arity.1.0"
      pure (CGrString unboxed.CGrString.3) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_197.0.49.11.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:04.0.49.11.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:06_196.0.49.10.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Data.Vect.@Prelude.Show.Show$Vect len elem:!show:05_194.0.49.10.arity.1.0")
    (C"idr_{U_Main.{main_3}_1}") ->
      "idr_Main.{main_3}0.0" <- pure "idr_{APPLY_0}1.4"
      "idr_Main.{main_3}0_val.0" <- fetch "idr_Main.{main_3}0.0"
      ccp.5.0 <- case "idr_Main.{main_3}0_val.0" of
        (Cidr_Prelude.Bool.False) ->
          pure #"False"
        (Cidr_Prelude.Bool.True) ->
          pure #"True"
      unboxed.CGrString.4 <- pure ccp.5.0
      pure (CGrString unboxed.CGrString.4) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.4)
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_140
  idr_Prelude.Interactive.printLn'6_val <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6 <- store idr_Prelude.Interactive.printLn'6_val
  (CGrString idr_Prelude.Interactive.printLn'5.49.1.arity.1) <- fetch idr_Prelude.Interactive.printLn'5
  (CGrString idr_Prelude.Interactive.printLn'6.49.1.arity.1) <- fetch idr_Prelude.Interactive.printLn'6
  unboxed.CGrString.5 <- idris_str_concat.unboxed idr_Prelude.Interactive.printLn'5.49.1.arity.1 idr_Prelude.Interactive.printLn'6.49.1.arity.1
  idr_Prelude.Interactive.printLn'5_val_139 <- pure (CGrString unboxed.CGrString.5)
  idr_Prelude.Interactive.printLn'5_141 <- store idr_Prelude.Interactive.printLn'5_val_139
  (CGrString idr_Prelude.Interactive.printLn'5_141.41.2.arity.1) <- fetch idr_Prelude.Interactive.printLn'5_141
  idris_write_str2.41.arity.1.0 <- pure idr_Prelude.Interactive.printLn'5_141.41.2.arity.1
  (CGrString idris_write_str2_0.0) <- pure (CGrString idris_write_str2.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0.0
  idr_Prelude.Interactive.printLn'5_val <- pure (CUnit)
  idr_Prelude.Interactive.printLn'5_142 <- store idr_Prelude.Interactive.printLn'5_val
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Interactive.printLn'5_141.41.2.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Interactive.printLn'6.49.1.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Interactive.printLn'5.49.1.arity.1)

idr_Main.removeElemPrf idr_Main.removeElemPrf1.49.arity.1 idr_Main.removeElemPrf3 idr_Main.removeElemPrf4 =
  idr_Main.removeElemPrf4_val <- fetch idr_Main.removeElemPrf4
  case idr_Main.removeElemPrf4_val of
    (Cidr_Data.Vect.Here) ->
      idr_Main.removeElemPrf3_val <- fetch idr_Main.removeElemPrf3
      (Cidr_Data.Vect.:: idr_Main.removeElemPrf5 idr_Main.removeElemPrf6) <- pure idr_Main.removeElemPrf3_val
      fetch idr_Main.removeElemPrf6
    (Cidr_Data.Vect.There idr_Main.removeElemPrf5_143) ->
      idr_Main.removeElemPrf3_val_144 <- fetch idr_Main.removeElemPrf3
      (Cidr_Data.Vect.:: idr_Main.removeElemPrf6_145 idr_Main.removeElemPrf7) <- pure idr_Main.removeElemPrf3_val_144
      idr_Main.removeElemPrf7_val <- fetch idr_Main.removeElemPrf7
      case idr_Main.removeElemPrf7_val of
        (Cidr_Data.Vect.Nil) ->
          idr_Main.removeElemPrf1_val <- pure (CGrInt idr_Main.removeElemPrf1.49.arity.1)
          case idr_Main.removeElemPrf1_val of
            (CGrInt idr_Main.removeElemPrf_cpat_LInt64_0) ->
              case idr_Main.removeElemPrf_cpat_LInt64_0 of
                0 ->
                  pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)
                #default ->
                  idr_Main.removeElemPrf8_val_146 <- pure (CErased)
                  idr_Main.removeElemPrf8 <- store idr_Main.removeElemPrf8_val_146
                  idr_Main.removeElemPrf9_val_147 <- pure (CGrInt 1)
                  idr_Main.removeElemPrf9 <- store idr_Main.removeElemPrf9_val_147
                  (CGrInt idr_Main.removeElemPrf1.41.3.arity.1) <- pure (CGrInt idr_Main.removeElemPrf1.49.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idr_Main.removeElemPrf9.41.3.arity.1) <- fetch idr_Main.removeElemPrf9
                  idris_int_sub0.41.arity.1.0 <- pure idr_Main.removeElemPrf1.41.3.arity.1
                  idris_int_sub1.41.arity.1.0 <- pure idr_Main.removeElemPrf9.41.3.arity.1
                  (CGrInt idris_int_sub0_1.0) <- pure (CGrInt idris_int_sub0.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  (CGrInt idris_int_sub1_1.0) <- pure (CGrInt idris_int_sub1.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
                  idris_int_sub2.0 <- _prim_int_sub idris_int_sub0_1.0 idris_int_sub1_1.0
                  unboxed.CGrInt.4 <- pure idris_int_sub2.0
                  idr_Main.removeElemPrf9_val <- pure (CGrInt unboxed.CGrInt.4)
                  idr_Main.removeElemPrf9_148 <- store idr_Main.removeElemPrf9_val
                  idr_Main.removeElemPrf10_val <- pure (CErased)
                  idr_Main.removeElemPrf10 <- store idr_Main.removeElemPrf10_val
                  (CGrInt idr_Main.removeElemPrf9_148.49.2.arity.1) <- fetch idr_Main.removeElemPrf9_148
                  idr_Main.removeElemPrf8_val <- idr_Main.removeElemPrf idr_Main.removeElemPrf9_148.49.2.arity.1 idr_Main.removeElemPrf7 idr_Main.removeElemPrf5_143
                  idr_Main.removeElemPrf8_149 <- store idr_Main.removeElemPrf8_val
                  pure (Cidr_Data.Vect.:: idr_Main.removeElemPrf6_145 idr_Main.removeElemPrf8_149) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Main.removeElemPrf6_145 idr_Main.removeElemPrf8_149) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.removeElemPrf9_148.49.2.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.removeElemPrf9.41.3.arity.1)
        #default ->
          idr_Main.removeElemPrf8_val_161 <- pure (CErased)
          idr_Main.removeElemPrf8_162 <- store idr_Main.removeElemPrf8_val_161
          idr_Main.removeElemPrf9_val_164 <- pure (CGrInt 1)
          idr_Main.removeElemPrf9_165 <- store idr_Main.removeElemPrf9_val_164
          (CGrInt idr_Main.removeElemPrf1.41.4.arity.1) <- pure (CGrInt idr_Main.removeElemPrf1.49.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idr_Main.removeElemPrf9_165.41.4.arity.1) <- fetch idr_Main.removeElemPrf9_165
          idris_int_sub0.41.arity.1.1 <- pure idr_Main.removeElemPrf1.41.4.arity.1
          idris_int_sub1.41.arity.1.1 <- pure idr_Main.removeElemPrf9_165.41.4.arity.1
          (CGrInt idris_int_sub0_1.1) <- pure (CGrInt idris_int_sub0.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrInt idris_int_sub1_1.1) <- pure (CGrInt idris_int_sub1.41.arity.1.1) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_int_sub2.1 <- _prim_int_sub idris_int_sub0_1.1 idris_int_sub1_1.1
          unboxed.CGrInt.5 <- pure idris_int_sub2.1
          idr_Main.removeElemPrf9_val_163 <- pure (CGrInt unboxed.CGrInt.5)
          idr_Main.removeElemPrf9_166 <- store idr_Main.removeElemPrf9_val_163
          idr_Main.removeElemPrf10_val_167 <- pure (CErased)
          idr_Main.removeElemPrf10_168 <- store idr_Main.removeElemPrf10_val_167
          (CGrInt idr_Main.removeElemPrf9_166.49.3.arity.1) <- fetch idr_Main.removeElemPrf9_166
          idr_Main.removeElemPrf8_val_160 <- idr_Main.removeElemPrf idr_Main.removeElemPrf9_166.49.3.arity.1 idr_Main.removeElemPrf7 idr_Main.removeElemPrf5_143
          idr_Main.removeElemPrf8_169 <- store idr_Main.removeElemPrf8_val_160
          pure (Cidr_Data.Vect.:: idr_Main.removeElemPrf6_145 idr_Main.removeElemPrf8_169) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Data.Vect.:: idr_Main.removeElemPrf6_145 idr_Main.removeElemPrf8_169) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.removeElemPrf9_166.49.3.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Main.removeElemPrf9_165.41.4.arity.1)

"idr_Data.Vect.{foldrImpl_0}" "idr_Data.Vect.{foldrImpl_0}0" "idr_Data.Vect.{foldrImpl_0}1" "idr_Data.Vect.{foldrImpl_0}2" "idr_Data.Vect.{foldrImpl_0}3" =
  "idr_{APPLY_0}0.5" <- pure "idr_Data.Vect.{foldrImpl_0}1"
  "idr_{APPLY_0}1.5" <- pure "idr_Data.Vect.{foldrImpl_0}2"
  "idr_{APPLY_0}0_val.5" <- fetch "idr_{APPLY_0}0.5"
  "idr_Data.Vect.{foldrImpl_0}4_val_175" <- case "idr_{APPLY_0}0_val.5" of
    (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}_2}") ->
      pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}_1}" "idr_{APPLY_0}1.5") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}_1}" "idr_{APPLY_0}1.5")
  "idr_Data.Vect.{foldrImpl_0}4" <- store "idr_Data.Vect.{foldrImpl_0}4_val_175"
  "idr_{APPLY_0}0.6" <- pure "idr_Data.Vect.{foldrImpl_0}4"
  "idr_{APPLY_0}1.6" <- pure "idr_Data.Vect.{foldrImpl_0}3"
  "idr_{APPLY_0}0_val.6" <- fetch "idr_{APPLY_0}0.6"
  "idr_Data.Vect.{foldrImpl_0}4_val" <- case "idr_{APPLY_0}0_val.6" of
    (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}_1}" "idr_{APPLY_0}2_173.6") ->
      "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}0.0" <- pure "idr_{APPLY_0}2_173.6"
      "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}1.0" <- pure "idr_{APPLY_0}1.6"
      pure (Cidr_Prelude.List.:: "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}0.0" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}1.0") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}0.0" "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_8}1.0")
  "idr_Data.Vect.{foldrImpl_0}4_176" <- store "idr_Data.Vect.{foldrImpl_0}4_val"
  "idr_{APPLY_0}0.7" <- pure "idr_Data.Vect.{foldrImpl_0}0"
  "idr_{APPLY_0}1.7" <- pure "idr_Data.Vect.{foldrImpl_0}4_176"
  "idr_{APPLY_0}0_val.7" <- fetch "idr_{APPLY_0}0.7"
  case "idr_{APPLY_0}0_val.7" of
    (C"idr_{U_Data.Vect.{foldrImpl_0}_1}" "idr_{APPLY_0}2.7" "idr_{APPLY_0}3.7" "idr_{APPLY_0}4.7") ->
      "idr_Data.Vect.{foldrImpl_0}" "idr_{APPLY_0}2.7" "idr_{APPLY_0}3.7" "idr_{APPLY_0}4.7" "idr_{APPLY_0}1.7"
    (C"idr_{U_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_9}_1}") ->
      "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_9}0.1" <- pure "idr_{APPLY_0}1.7"
      fetch "idr_Prelude.Show.{Data.Vect.@Prelude.Show.Show$Vect len elem:!show:0_lam_9}0.1"

"idr_Main.{main_1}.unboxed" "idr_Main.{main_1}0" =
  "idr_Main.{main_1}1_val" <- pure (CErased)
  "idr_Main.{main_1}1" <- store "idr_Main.{main_1}1_val"
  "idr_Main.{main_1}2_val" <- pure (C"idr_{U_prim__toStrBigInt_1}")
  "idr_Main.{main_1}2" <- store "idr_Main.{main_1}2_val"
  "idr_Main.{main_1}3_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_1}3" <- store "idr_Main.{main_1}3_val"
  (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_1}3"
  idr_Prelude.Show.primNumShow1.0 <- pure "idr_Main.{main_1}2"
  idr_Prelude.Show.primNumShow3.0 <- pure "idr_Main.{main_1}0"
  "idr_{APPLY_0}0.3.0" <- pure idr_Prelude.Show.primNumShow1.0
  "idr_{APPLY_0}1.3.0" <- pure idr_Prelude.Show.primNumShow3.0
  "idr_{APPLY_0}0_val.3.0" <- fetch "idr_{APPLY_0}0.3.0"
  idr_Prelude.Show.primNumShow4_val.0 <- case "idr_{APPLY_0}0_val.3.0" of
    (C"idr_{U_prim__toStrBigInt_1}") ->
      idr_prim__toStrBigInt0.0 <- pure "idr_{APPLY_0}1.3.0"
      idris_int_str1.0.0 <- pure idr_prim__toStrBigInt0.0
      (CGrInt idris_int_str1_0.0.0) <- fetch idris_int_str1.0.0
      idris_int_str2.0.0 <- _prim_int_str idris_int_str1_0.0.0
      unboxed.CGrString.6 <- pure idris_int_str2.0.0
      pure (CGrString unboxed.CGrString.6) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.6) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.0.0)
  idr_Prelude.Show.primNumShow4.0 <- store idr_Prelude.Show.primNumShow4_val.0
  idr_Prelude.Show.primNumShow2_val.0 <- pure (Cidr_Prelude.Show.Open)
  ccp.3.0 <- case idr_Prelude.Show.primNumShow2_val.0 of
    (Cidr_Prelude.Show.Open) ->
      pure 0
  idr_Prelude.Show.primNumShow5_val_101.0 <- pure (CGrInt ccp.3.0)
  idr_Prelude.Show.primNumShow5.0 <- store idr_Prelude.Show.primNumShow5_val_101.0
  idr_Prelude.Show.primNumShow6_val.0 <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6.0 <- store idr_Prelude.Show.primNumShow6_val.0
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0" <- pure idr_Prelude.Show.primNumShow5.0
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0" <- pure idr_Prelude.Show.primNumShow6.0
  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.49.16.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0"
  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.49.16.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0"
  unboxed.CGrInt.7.0 <- idris_int_eq.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.49.16.arity.1.0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.49.16.arity.1.0"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0" <- pure (CGrInt unboxed.CGrInt.7.0)
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02.0" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_187.0" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02.0"
  idr_Prelude.Show.primNumShow5_val_100.0 <- case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_187.0" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0" of
        0 ->
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.6.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.0"
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.6.arity.1.0") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.0"
          unboxed.CGrInt.8.0 <- idris_int_lt.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.6.arity.1.0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.6.arity.1.0"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0" <- pure (CGrInt unboxed.CGrInt.8.0)
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03.0" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_188.0" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03.0"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_188.0" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_189.0") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_189.0" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.6.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.6.arity.1.0")
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
  idr_Prelude.Show.primNumShow5_102.0 <- store idr_Prelude.Show.primNumShow5_val_100.0
  idr_Prelude.Show.primNumShow5_val_103.0 <- fetch idr_Prelude.Show.primNumShow5_102.0
  idr_Prelude.Show.primNumShow5_val_99.0 <- case idr_Prelude.Show.primNumShow5_val_103.0 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Show.primNumShow2_val_106.0 <- pure (Cidr_Prelude.Show.Open)
      ccp.4.0 <- case idr_Prelude.Show.primNumShow2_val_106.0 of
        (Cidr_Prelude.Show.Open) ->
          pure 0
      idr_Prelude.Show.primNumShow6_val_105.0 <- pure (CGrInt ccp.4.0)
      idr_Prelude.Show.primNumShow6_107.0 <- store idr_Prelude.Show.primNumShow6_val_105.0
      idr_Prelude.Show.primNumShow7_val.0 <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7.0 <- store idr_Prelude.Show.primNumShow7_val.0
      (CGrInt idr_Prelude.Show.primNumShow6_107.0.49.4.arity.1) <- fetch idr_Prelude.Show.primNumShow6_107.0
      (CGrInt idr_Prelude.Show.primNumShow7.0.49.4.arity.1) <- fetch idr_Prelude.Show.primNumShow7.0
      unboxed.CGrInt.0.0 <- idris_int_eq.unboxed idr_Prelude.Show.primNumShow6_107.0.49.4.arity.1 idr_Prelude.Show.primNumShow7.0.49.4.arity.1
      idr_Prelude.Show.primNumShow6_val_104.0 <- pure (CGrInt unboxed.CGrInt.0.0)
      idr_Prelude.Show.primNumShow6_108.0 <- store idr_Prelude.Show.primNumShow6_val_104.0
      idr_Prelude.Show.primNumShow6_val_109.0 <- fetch idr_Prelude.Show.primNumShow6_108.0
      case idr_Prelude.Show.primNumShow6_val_109.0 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0.0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0.0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow7.0.49.4.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow6_107.0.49.4.arity.1)
  idr_Prelude.Show.primNumShow5_110.0 <- store idr_Prelude.Show.primNumShow5_val_99.0
  idr_Prelude.Show.primNumShow5_val_111.0 <- fetch idr_Prelude.Show.primNumShow5_110.0
  idr_Prelude.Show.primNumShow5_val.0 <- case idr_Prelude.Show.primNumShow5_val_111.0 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_115.0 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_116.0 <- store idr_Prelude.Show.primNumShow6_val_115.0
      (CGrString idr_Prelude.Show.primNumShow6_116.41.0.arity.1.0) <- fetch idr_Prelude.Show.primNumShow6_116.0
      (CGrString idr_Prelude.Show.primNumShow4.0.49.5.arity.1) <- fetch idr_Prelude.Show.primNumShow4.0
      idris_str_eq1.49.arity.1.0 <- pure idr_Prelude.Show.primNumShow4.0.49.5.arity.1
      idris_str_eq2.41.arity.1.0 <- pure idr_Prelude.Show.primNumShow6_116.41.0.arity.1.0
      (CGrString idris_str_eq1_0.0) <- pure (CGrString idris_str_eq1.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
      (CGrString idris_str_eq2_0.0) <- pure (CGrString idris_str_eq2.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
      idris_str_eq3.0 <- _prim_string_eq idris_str_eq1_0.0 idris_str_eq2_0.0
      ccp.2.0 <- case idris_str_eq3.0 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.1.0 <- pure ccp.2.0
      idr_Prelude.Show.primNumShow6_val_114.0 <- pure (CGrInt unboxed.CGrInt.1.0)
      idr_Prelude.Show.primNumShow6_117.0 <- store idr_Prelude.Show.primNumShow6_val_114.0
      idr_Prelude.Show.primNumShow6_val_118.0 <- fetch idr_Prelude.Show.primNumShow6_117.0
      idr_Prelude.Show.primNumShow6_val_113.0 <- case idr_Prelude.Show.primNumShow6_val_118.0 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_119.0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_119.0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Show.primNumShow6_120.0 <- store idr_Prelude.Show.primNumShow6_val_113.0
      idr_Prelude.Show.primNumShow7_val_121.0 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_122.0 <- store idr_Prelude.Show.primNumShow7_val_121.0
      (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Show.primNumShow7_122.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.0" <- pure idr_Prelude.Show.primNumShow6_120.0
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow6_val_112.0 <- case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" of
        (Cidr_Prelude.Bool.True) ->
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_185.0" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.0"
          case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_185.0" of
            (Cidr_Prelude.Bool.False) ->
              pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
            (Cidr_Prelude.Bool.True) ->
              pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
      idr_Prelude.Show.primNumShow6_123.0 <- store idr_Prelude.Show.primNumShow6_val_112.0
      idr_Prelude.Show.primNumShow6_val_124.0 <- fetch idr_Prelude.Show.primNumShow6_123.0
      case idr_Prelude.Show.primNumShow6_val_124.0 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          (CGrString idr_Prelude.Show.primNumShow4.0.49.6.arity.1) <- fetch idr_Prelude.Show.primNumShow4.0
          idris_str_head1.49.arity.1.0 <- pure idr_Prelude.Show.primNumShow4.0.49.6.arity.1
          (CGrString idris_str_head1_0.0) <- pure (CGrString idris_str_head1.49.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
          idris_str_head2.0 <- _prim_string_head idris_str_head1_0.0
          unboxed.CGrInt.2.0 <- pure idris_str_head2.0
          idr_Prelude.Show.primNumShow7_val_126.0 <- pure (CGrInt unboxed.CGrInt.2.0)
          idr_Prelude.Show.primNumShow7_127.0 <- store idr_Prelude.Show.primNumShow7_val_126.0
          idr_Prelude.Show.primNumShow8_val.0 <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8.0 <- store idr_Prelude.Show.primNumShow8_val.0
          (CGrInt idr_Prelude.Show.primNumShow7_127.0.49.7.arity.1) <- fetch idr_Prelude.Show.primNumShow7_127.0
          (CGrInt idr_Prelude.Show.primNumShow8.0.49.7.arity.1) <- fetch idr_Prelude.Show.primNumShow8.0
          unboxed.CGrInt.3.0 <- idris_int_eq.unboxed idr_Prelude.Show.primNumShow7_127.0.49.7.arity.1 idr_Prelude.Show.primNumShow8.0.49.7.arity.1
          idr_Prelude.Show.primNumShow7_val_125.0 <- pure (CGrInt unboxed.CGrInt.3.0)
          idr_Prelude.Show.primNumShow7_128.0 <- store idr_Prelude.Show.primNumShow7_val_125.0
          idr_Prelude.Show.primNumShow7_val_129.0 <- fetch idr_Prelude.Show.primNumShow7_128.0
          case idr_Prelude.Show.primNumShow7_val_129.0 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_130.0) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_130.0 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow8.0.49.7.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow7_127.0.49.7.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow4.0.49.6.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow4.0.49.5.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow6_116.41.0.arity.1.0)
  idr_Prelude.Show.primNumShow5_131.0 <- store idr_Prelude.Show.primNumShow5_val.0
  idr_Prelude.Show.primNumShow5_val_132.0 <- fetch idr_Prelude.Show.primNumShow5_131.0
  case idr_Prelude.Show.primNumShow5_val_132.0 of
    (Cidr_Prelude.Bool.False) ->
      (CGrString unboxed.CGrString.2) <- fetch idr_Prelude.Show.primNumShow4.0
      pure unboxed.CGrString.2 -- LINT: The result of Fetch can only be bound to a variable: (CGrString unboxed.CGrString.2)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_133.0 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_134.0 <- store idr_Prelude.Show.primNumShow6_val_133.0
      idr_Prelude.Show.primNumShow7_val_136.0 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_137.0 <- store idr_Prelude.Show.primNumShow7_val_136.0
      (CGrString idr_Prelude.Show.primNumShow4.0.49.8.arity.1) <- fetch idr_Prelude.Show.primNumShow4.0
      (CGrString idr_Prelude.Show.primNumShow7_137.0.49.8.arity.1) <- fetch idr_Prelude.Show.primNumShow7_137.0
      unboxed.CGrString.7 <- idris_str_concat.unboxed idr_Prelude.Show.primNumShow4.0.49.8.arity.1 idr_Prelude.Show.primNumShow7_137.0.49.8.arity.1
      idr_Prelude.Show.primNumShow7_val_135.0 <- pure (CGrString unboxed.CGrString.7)
      idr_Prelude.Show.primNumShow7_138.0 <- store idr_Prelude.Show.primNumShow7_val_135.0
      (CGrString idr_Prelude.Show.primNumShow6_134.0.49.9.arity.1) <- fetch idr_Prelude.Show.primNumShow6_134.0
      (CGrString idr_Prelude.Show.primNumShow7_138.0.49.9.arity.1) <- fetch idr_Prelude.Show.primNumShow7_138.0
      idris_str_concat.unboxed idr_Prelude.Show.primNumShow6_134.0.49.9.arity.1 idr_Prelude.Show.primNumShow7_138.0.49.9.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow7_138.0.49.9.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow6_134.0.49.9.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow7_137.0.49.8.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow4.0.49.8.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.49.16.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.49.16.arity.1.0") -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)

"idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03.57.arity.1" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04" =
  "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04"
  case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06") ->
      "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
      case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" of
        (Cidr_Prelude.List.Nil) ->
          "idr_{APPLY_0}0.8" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02"
          "idr_{APPLY_0}1.8" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_{APPLY_0}0_val.8" <- fetch "idr_{APPLY_0}0.8"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val" <- case "idr_{APPLY_0}0_val.8" of
            (C"idr_{U_Main.{main_1}_1}") ->
              unboxed.CGrString.9 <- "idr_Main.{main_1}.unboxed" "idr_{APPLY_0}1.8"
              pure (CGrString unboxed.CGrString.9) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.9)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val"
          (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03.49.13.arity.1") <- pure (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03.57.arity.1") -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07.49.13.arity.1") <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07"
          unboxed.CGrString.10 <- idris_str_concat.unboxed "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03.49.13.arity.1" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07.49.13.arity.1"
          (CGrString unboxed.CGrString.0) <- pure (CGrString unboxed.CGrString.10) -- LINT: Syntax error - expected SimpleExp without nodes
          pure unboxed.CGrString.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07.49.13.arity.1")
        #default ->
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val_179" <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_180" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val_179"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08_val" <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08_val"
          "idr_{APPLY_0}0.9" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02"
          "idr_{APPLY_0}1.9" <- pure "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_{APPLY_0}0_val.9" <- fetch "idr_{APPLY_0}0.9"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_182" <- case "idr_{APPLY_0}0_val.9" of
            (C"idr_{U_Main.{main_1}_1}") ->
              unboxed.CGrString.11 <- "idr_Main.{main_1}.unboxed" "idr_{APPLY_0}1.9"
              pure (CGrString unboxed.CGrString.11) -- LINT: Last return expressions can only return non-node values: pure (CGrString unboxed.CGrString.11)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_182"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val" <- pure (CGrString #", ")
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val"
          (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09.49.14.arity.1") <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09"
          (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010.49.14.arity.1") <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010"
          unboxed.CGrString.12 <- idris_str_concat.unboxed "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09.49.14.arity.1" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010.49.14.arity.1"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_181" <- pure (CGrString unboxed.CGrString.12)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_183" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_181"
          (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03.49.15.arity.1") <- pure (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03.57.arity.1") -- LINT: Syntax error - expected SimpleExp without nodes
          (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_183.49.15.arity.1") <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_183"
          unboxed.CGrString.13 <- idris_str_concat.unboxed "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03.49.15.arity.1" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_183.49.15.arity.1"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val" <- pure (CGrString unboxed.CGrString.13)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_184" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val"
          do
            (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_184.57.1.arity.1") <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_184"
            "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0.unboxed" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_184.57.1.arity.1" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06" -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_184.57.1.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_183.49.15.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010.49.14.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09.49.14.arity.1")
    (Cidr_Prelude.List.Nil) ->
      (CGrString unboxed.CGrString.1) <- pure (CGrString "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03.57.arity.1") -- LINT: Syntax error - expected SimpleExp without nodes
      pure unboxed.CGrString.1
