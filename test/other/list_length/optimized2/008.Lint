idris_int_eq idris_int_eq0 idris_int_eq1 =
  (CGrInt idris_int_eq0_1) <- fetch idris_int_eq0
  (CGrInt idris_int_eq1_1) <- fetch idris_int_eq1
  idris_int_eq2 <- _prim_int_eq idris_int_eq0_1 idris_int_eq1_1
  ccp.0 <- case idris_int_eq2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure (CGrInt ccp.0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt ccp.0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq1_1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_eq0_1)

idris_int_lt idris_int_lt0 idris_int_lt1 =
  (CGrInt idris_int_lt0_1) <- fetch idris_int_lt0
  (CGrInt idris_int_lt1_1) <- fetch idris_int_lt1
  idris_int_lt2 <- _prim_int_lt idris_int_lt0_1 idris_int_lt1_1
  ccp.1 <- case idris_int_lt2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure (CGrInt ccp.1) -- LINT: Last return expressions can only return non-node values: pure (CGrInt ccp.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_lt1_1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_lt0_1)

idris_int_add idris_int_add0 idris_int_add1 =
  (CGrInt idris_int_add0_1) <- fetch idris_int_add0
  (CGrInt idris_int_add1_1) <- fetch idris_int_add1
  idris_int_add2 <- _prim_int_add idris_int_add0_1 idris_int_add1_1
  pure (CGrInt idris_int_add2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_int_add2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add1_1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_add0_1)

idris_int_sub idris_int_sub0 idris_int_sub1 =
  (CGrInt idris_int_sub0_1) <- fetch idris_int_sub0
  (CGrInt idris_int_sub1_1) <- fetch idris_int_sub1
  idris_int_sub2 <- _prim_int_sub idris_int_sub0_1 idris_int_sub1_1
  pure (CGrInt idris_int_sub2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_int_sub2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_sub1_1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_sub0_1)

idris_write_str idris_write_str2 =
  (CGrString idris_write_str2_0) <- fetch idris_write_str2
  _prim_string_print idris_write_str2_0
  pure (CUnit) -- LINT: Last return expressions can only return non-node values: pure (CUnit) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_write_str2_0)

idris_str_concat idris_str_concat1 idris_str_concat2 =
  (CGrString idris_str_concat1_0) <- fetch idris_str_concat1
  (CGrString idris_str_concat2_0) <- fetch idris_str_concat2
  idris_str_concat3 <- _prim_string_concat idris_str_concat1_0 idris_str_concat2_0
  pure (CGrString idris_str_concat3) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_concat3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat2_0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_concat1_0)

idris_str_eq idris_str_eq1 idris_str_eq2 =
  (CGrString idris_str_eq1_0) <- fetch idris_str_eq1
  (CGrString idris_str_eq2_0) <- fetch idris_str_eq2
  idris_str_eq3 <- _prim_string_eq idris_str_eq1_0 idris_str_eq2_0
  ccp.2 <- case idris_str_eq3 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure (CGrInt ccp.2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt ccp.2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq2_0) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_eq1_0)

idris_str_head idris_str_head1 =
  (CGrString idris_str_head1_0) <- fetch idris_str_head1
  idris_str_head2 <- _prim_string_head idris_str_head1_0
  pure (CGrInt idris_str_head2) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_str_head2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_head1_0)

idris_str_tail idris_str_tail1 =
  (CGrString idris_str_tail1_0) <- fetch idris_str_tail1
  idris_str_tail2 <- _prim_string_tail idris_str_tail1_0
  pure (CGrString idris_str_tail2) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_tail2) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_tail1_0)

idris_str_cons idris_str_cons1 idris_str_cons2 =
  (CGrInt idris_str_cons1_0) <- fetch idris_str_cons1
  (CGrString idris_str_cons2_0) <- fetch idris_str_cons2
  idris_str_cons3 <- _prim_string_cons idris_str_cons1_0 idris_str_cons2_0
  pure (CGrString idris_str_cons3) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_str_cons3) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idris_str_cons2_0) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_str_cons1_0)

idris_int_str idris_int_str1 =
  (CGrInt idris_int_str1_0) <- fetch idris_int_str1
  idris_int_str2 <- _prim_int_str idris_int_str1_0
  pure (CGrString idris_int_str2) -- LINT: Last return expressions can only return non-node values: pure (CGrString idris_int_str2) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0)

idris_ls_ext idris_ls_ext1 =
  (CGrInt idris_ls_ext2) <- fetch idris_ls_ext1
  idris_ls_ext3 <- _prim_int_add idris_ls_ext2 0
  pure (CGrInt idris_ls_ext3) -- LINT: Last return expressions can only return non-node values: pure (CGrInt idris_ls_ext3) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_ls_ext2)

idris_ch_int idris_ch_int1 =
  fetch idris_ch_int1

grinMain =
  r <- "idr_{runMain_0}"
  pure ()

idr_Prelude.Chars.isDigit idr_Prelude.Chars.isDigit0 =
  idr_Prelude.Chars.isDigit1_val_4 <- pure (CGrInt 48)
  idr_Prelude.Chars.isDigit1 <- store idr_Prelude.Chars.isDigit1_val_4
  idr_Prelude.Chars.isDigit1_val_3 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit1
  idr_Prelude.Chars.isDigit1_5 <- store idr_Prelude.Chars.isDigit1_val_3
  idr_Prelude.Chars.isDigit1_val_6 <- fetch idr_Prelude.Chars.isDigit1_5
  idr_Prelude.Chars.isDigit1_val <- case idr_Prelude.Chars.isDigit1_val_6 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Chars.isDigit2_val_7 <- pure (CGrInt 48)
      idr_Prelude.Chars.isDigit2 <- store idr_Prelude.Chars.isDigit2_val_7
      idr_Prelude.Chars.isDigit2_val <- idris_int_eq idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit2
      idr_Prelude.Chars.isDigit2_8 <- store idr_Prelude.Chars.isDigit2_val
      idr_Prelude.Chars.isDigit2_val_9 <- fetch idr_Prelude.Chars.isDigit2_8
      case idr_Prelude.Chars.isDigit2_val_9 of
        (CGrInt idr_Prelude.Chars.isDigit_cpat_LInt64_0) ->
          case idr_Prelude.Chars.isDigit_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Chars.isDigit1_10 <- store idr_Prelude.Chars.isDigit1_val
  idr_Prelude.Chars.isDigit1_val_11 <- fetch idr_Prelude.Chars.isDigit1_10
  case idr_Prelude.Chars.isDigit1_val_11 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Chars.isDigit2_val_13 <- pure (CGrInt 57)
      idr_Prelude.Chars.isDigit2_14 <- store idr_Prelude.Chars.isDigit2_val_13
      idr_Prelude.Chars.isDigit2_val_12 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit2_14
      idr_Prelude.Chars.isDigit2_15 <- store idr_Prelude.Chars.isDigit2_val_12
      idr_Prelude.Chars.isDigit2_val_16 <- fetch idr_Prelude.Chars.isDigit2_15
      case idr_Prelude.Chars.isDigit2_val_16 of
        (Cidr_Prelude.Interfaces.LT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          idr_Prelude.Chars.isDigit3_val_17 <- pure (CGrInt 57)
          idr_Prelude.Chars.isDigit3 <- store idr_Prelude.Chars.isDigit3_val_17
          idr_Prelude.Chars.isDigit3_val <- idris_int_eq idr_Prelude.Chars.isDigit0 idr_Prelude.Chars.isDigit3
          idr_Prelude.Chars.isDigit3_18 <- store idr_Prelude.Chars.isDigit3_val
          idr_Prelude.Chars.isDigit3_val_19 <- fetch idr_Prelude.Chars.isDigit3_18
          case idr_Prelude.Chars.isDigit3_val_19 of
            (CGrInt idr_Prelude.Chars.isDigit_cpat_LInt64_0_20) ->
              case idr_Prelude.Chars.isDigit_cpat_LInt64_0_20 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)

idr_Main.length idr_Main.length2 =
  idr_Main.length2_val <- fetch idr_Main.length2
  case idr_Main.length2_val of
    (Cidr_Main.Cons idr_Main.length3 idr_Main.length4) ->
      idr_Main.length5_val_21 <- pure (CErased)
      idr_Main.length5 <- store idr_Main.length5_val_21
      idr_Main.length6_val <- pure (CErased)
      idr_Main.length6 <- store idr_Main.length6_val
      idr_Main.length5_val <- idr_Main.length idr_Main.length4
      idr_Main.length5_22 <- store idr_Main.length5_val
      idr_Main.length6_val_23 <- pure (CGrInt 1)
      idr_Main.length6_24 <- store idr_Main.length6_val_23
      idris_int_add idr_Main.length5_22 idr_Main.length6_24
    (Cidr_Main.Nil) ->
      pure (CGrInt 0) -- LINT: Last return expressions can only return non-node values: pure (CGrInt 0)

idr_Main.main =
  idr_Main.main1_val_25 <- pure (CErased)
  idr_Main.main1 <- store idr_Main.main1_val_25
  idr_Main.main2_val <- pure (CErased)
  idr_Main.main2 <- store idr_Main.main2_val
  idr_Main.main3_val <- pure (C"idr_{U_Main.{main_0}_1}")
  idr_Main.main3 <- store idr_Main.main3_val
  idr_Main.main4_val_26 <- pure (CErased)
  idr_Main.main4 <- store idr_Main.main4_val_26
  idr_Main.main5_val <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main5 <- store idr_Main.main5_val
  idr_Main.main6_val <- pure (Cidr_Main.Nil)
  idr_Main.main6 <- store idr_Main.main6_val
  idr_Main.main4_val <- "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:0" idr_Main.main5 idr_Main.main6
  idr_Main.main4_27 <- store idr_Main.main4_val
  idr_Main.main1_val <- idr_Prelude.Interactive.printLn' idr_Main.main3 idr_Main.main4_27
  idr_Main.main1_28 <- store idr_Main.main1_val
  idr_Main.main2_val_29 <- pure (CErased)
  idr_Main.main2_30 <- store idr_Main.main2_val_29
  idr_Main.main3_val_31 <- pure (CErased)
  idr_Main.main3_32 <- store idr_Main.main3_val_31
  idr_Main.main4_val_33 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main4_34 <- store idr_Main.main4_val_33
  idr_Main.main5_val_36 <- pure (CErased)
  idr_Main.main5_37 <- store idr_Main.main5_val_36
  idr_Main.main6_val_38 <- pure (CErased)
  idr_Main.main6_39 <- store idr_Main.main6_val_38
  idr_Main.main7_val_40 <- pure (CGrInt 0)
  idr_Main.main7 <- store idr_Main.main7_val_40
  idr_Main.main8_val <- pure (CGrInt 100)
  idr_Main.main8 <- store idr_Main.main8_val
  idr_Main.main7_val <- idr_Main.upto idr_Main.main7 idr_Main.main8
  idr_Main.main7_41 <- store idr_Main.main7_val
  idr_Main.main5_val_35 <- idr_Main.length idr_Main.main7_41
  idr_Main.main5_42 <- store idr_Main.main5_val_35
  idr_Prelude.Interactive.printLn' idr_Main.main4_34 idr_Main.main5_42

idr_Prelude.Show.primNumShow idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow2 idr_Prelude.Show.primNumShow3 =
  idr_Prelude.Show.primNumShow4_val <- "idr_{APPLY_0}" idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- fetch idr_Prelude.Show.primNumShow2
  ccp.3 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.App) ->
      pure 6
    (Cidr_Prelude.Show.Backtick) ->
      pure 3
    (Cidr_Prelude.Show.Dollar) ->
      pure 2
    (Cidr_Prelude.Show.Eq) ->
      pure 1
    (Cidr_Prelude.Show.Open) ->
      pure 0
    (Cidr_Prelude.Show.PrefixMinus) ->
      pure 5
    (Cidr_Prelude.Show.User) ->
      pure 4
  idr_Prelude.Show.primNumShow5_val_45 <- pure (CGrInt ccp.3)
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_45
  idr_Prelude.Show.primNumShow6_val <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6 <- store idr_Prelude.Show.primNumShow6_val
  idr_Prelude.Show.primNumShow5_val_44 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" idr_Prelude.Show.primNumShow5 idr_Prelude.Show.primNumShow6
  idr_Prelude.Show.primNumShow5_46 <- store idr_Prelude.Show.primNumShow5_val_44
  idr_Prelude.Show.primNumShow5_val_47 <- fetch idr_Prelude.Show.primNumShow5_46
  idr_Prelude.Show.primNumShow5_val_43 <- case idr_Prelude.Show.primNumShow5_val_47 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Show.primNumShow2_val_50 <- fetch idr_Prelude.Show.primNumShow2
      ccp.4 <- case idr_Prelude.Show.primNumShow2_val_50 of
        (Cidr_Prelude.Show.App) ->
          pure 6
        (Cidr_Prelude.Show.Backtick) ->
          pure 3
        (Cidr_Prelude.Show.Dollar) ->
          pure 2
        (Cidr_Prelude.Show.Eq) ->
          pure 1
        (Cidr_Prelude.Show.Open) ->
          pure 0
        (Cidr_Prelude.Show.PrefixMinus) ->
          pure 5
        (Cidr_Prelude.Show.User) ->
          pure 4
      idr_Prelude.Show.primNumShow6_val_49 <- pure (CGrInt ccp.4)
      idr_Prelude.Show.primNumShow6_51 <- store idr_Prelude.Show.primNumShow6_val_49
      idr_Prelude.Show.primNumShow7_val <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7 <- store idr_Prelude.Show.primNumShow7_val
      idr_Prelude.Show.primNumShow6_val_48 <- idris_int_eq idr_Prelude.Show.primNumShow6_51 idr_Prelude.Show.primNumShow7
      idr_Prelude.Show.primNumShow6_52 <- store idr_Prelude.Show.primNumShow6_val_48
      idr_Prelude.Show.primNumShow6_val_53 <- fetch idr_Prelude.Show.primNumShow6_52
      case idr_Prelude.Show.primNumShow6_val_53 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_54 <- store idr_Prelude.Show.primNumShow5_val_43
  idr_Prelude.Show.primNumShow5_val_55 <- fetch idr_Prelude.Show.primNumShow5_54
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_55 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_59 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_60 <- store idr_Prelude.Show.primNumShow6_val_59
      idr_Prelude.Show.primNumShow6_val_58 <- idris_str_eq idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow6_60
      idr_Prelude.Show.primNumShow6_61 <- store idr_Prelude.Show.primNumShow6_val_58
      idr_Prelude.Show.primNumShow6_val_62 <- fetch idr_Prelude.Show.primNumShow6_61
      idr_Prelude.Show.primNumShow6_val_57 <- case idr_Prelude.Show.primNumShow6_val_62 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_63) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_63 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Show.primNumShow6_64 <- store idr_Prelude.Show.primNumShow6_val_57
      idr_Prelude.Show.primNumShow7_val_65 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_66 <- store idr_Prelude.Show.primNumShow7_val_65
      idr_Prelude.Show.primNumShow6_val_56 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Show.primNumShow6_64 idr_Prelude.Show.primNumShow7_66
      idr_Prelude.Show.primNumShow6_67 <- store idr_Prelude.Show.primNumShow6_val_56
      idr_Prelude.Show.primNumShow6_val_68 <- fetch idr_Prelude.Show.primNumShow6_67
      case idr_Prelude.Show.primNumShow6_val_68 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Prelude.Show.primNumShow7_val_70 <- idris_str_head idr_Prelude.Show.primNumShow4
          idr_Prelude.Show.primNumShow7_71 <- store idr_Prelude.Show.primNumShow7_val_70
          idr_Prelude.Show.primNumShow8_val <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8 <- store idr_Prelude.Show.primNumShow8_val
          idr_Prelude.Show.primNumShow7_val_69 <- idris_int_eq idr_Prelude.Show.primNumShow7_71 idr_Prelude.Show.primNumShow8
          idr_Prelude.Show.primNumShow7_72 <- store idr_Prelude.Show.primNumShow7_val_69
          idr_Prelude.Show.primNumShow7_val_73 <- fetch idr_Prelude.Show.primNumShow7_72
          case idr_Prelude.Show.primNumShow7_val_73 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_74) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_74 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_75 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_76 <- fetch idr_Prelude.Show.primNumShow5_75
  case idr_Prelude.Show.primNumShow5_val_76 of
    (Cidr_Prelude.Bool.False) ->
      fetch idr_Prelude.Show.primNumShow4
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_77 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_78 <- store idr_Prelude.Show.primNumShow6_val_77
      idr_Prelude.Show.primNumShow7_val_80 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_81 <- store idr_Prelude.Show.primNumShow7_val_80
      idr_Prelude.Show.primNumShow7_val_79 <- idris_str_concat idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow7_81
      idr_Prelude.Show.primNumShow7_82 <- store idr_Prelude.Show.primNumShow7_val_79
      idris_str_concat idr_Prelude.Show.primNumShow6_78 idr_Prelude.Show.primNumShow7_82

idr_prim__strCons idr_prim__strCons0 idr_prim__strCons1 =
  idris_str_cons idr_prim__strCons0 idr_prim__strCons1

idr_prim__toStrBigInt idr_prim__toStrBigInt0 =
  idris_int_str idr_prim__toStrBigInt0

idr_prim__toStrInt idr_prim__toStrInt0 =
  idris_int_str idr_prim__toStrInt0

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  idr_Prelude.Interactive.printLn'5_val_84 <- "idr_{APPLY_0}" idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_84
  idr_Prelude.Interactive.printLn'6_val <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6 <- store idr_Prelude.Interactive.printLn'6_val
  idr_Prelude.Interactive.printLn'5_val_83 <- idris_str_concat idr_Prelude.Interactive.printLn'5 idr_Prelude.Interactive.printLn'6
  idr_Prelude.Interactive.printLn'5_85 <- store idr_Prelude.Interactive.printLn'5_val_83
  idr_Prelude.Interactive.printLn'5_val <- idris_write_str idr_Prelude.Interactive.printLn'5_85
  idr_Prelude.Interactive.printLn'5_86 <- store idr_Prelude.Interactive.printLn'5_val
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

idr_Prelude.Show.protectEsc idr_Prelude.Show.protectEsc0 idr_Prelude.Show.protectEsc1 idr_Prelude.Show.protectEsc2 =
  idr_Prelude.Show.protectEsc3_val_92 <- pure (CGrString #"")
  idr_Prelude.Show.protectEsc3 <- store idr_Prelude.Show.protectEsc3_val_92
  idr_Prelude.Show.protectEsc3_val_91 <- idris_str_eq idr_Prelude.Show.protectEsc2 idr_Prelude.Show.protectEsc3
  idr_Prelude.Show.protectEsc3_93 <- store idr_Prelude.Show.protectEsc3_val_91
  idr_Prelude.Show.protectEsc3_val_94 <- fetch idr_Prelude.Show.protectEsc3_93
  idr_Prelude.Show.protectEsc3_val_90 <- case idr_Prelude.Show.protectEsc3_val_94 of
    (CGrInt idr_Prelude.Show.protectEsc_cpat_LInt64_0) ->
      case idr_Prelude.Show.protectEsc_cpat_LInt64_0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  idr_Prelude.Show.protectEsc3_95 <- store idr_Prelude.Show.protectEsc3_val_90
  idr_Prelude.Show.protectEsc4_val <- pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.protectEsc4 <- store idr_Prelude.Show.protectEsc4_val
  idr_Prelude.Show.protectEsc3_val_89 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Show.protectEsc3_95 idr_Prelude.Show.protectEsc4
  idr_Prelude.Show.protectEsc3_96 <- store idr_Prelude.Show.protectEsc3_val_89
  idr_Prelude.Show.protectEsc3_val_97 <- fetch idr_Prelude.Show.protectEsc3_96
  idr_Prelude.Show.protectEsc3_val_88 <- case idr_Prelude.Show.protectEsc3_val_97 of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Basics.Yes) ->
      idr_Prelude.Show.protectEsc4_val_98 <- idris_str_head idr_Prelude.Show.protectEsc2
      idr_Prelude.Show.protectEsc4_99 <- store idr_Prelude.Show.protectEsc4_val_98
      "idr_{APPLY_0}" idr_Prelude.Show.protectEsc0 idr_Prelude.Show.protectEsc4_99
  idr_Prelude.Show.protectEsc3_100 <- store idr_Prelude.Show.protectEsc3_val_88
  idr_Prelude.Show.protectEsc3_val_101 <- fetch idr_Prelude.Show.protectEsc3_100
  ccp.5 <- case idr_Prelude.Show.protectEsc3_val_101 of
    (Cidr_Prelude.Bool.False) ->
      pure #""
    (Cidr_Prelude.Bool.True) ->
      pure #"\\&"
  idr_Prelude.Show.protectEsc3_val_87 <- pure (CGrString ccp.5)
  idr_Prelude.Show.protectEsc3_102 <- store idr_Prelude.Show.protectEsc3_val_87
  idr_Prelude.Show.protectEsc3_val <- idris_str_concat idr_Prelude.Show.protectEsc3_102 idr_Prelude.Show.protectEsc2
  idr_Prelude.Show.protectEsc3_103 <- store idr_Prelude.Show.protectEsc3_val
  idris_str_concat idr_Prelude.Show.protectEsc1 idr_Prelude.Show.protectEsc3_103

idr_Prelude.Show.showLitChar idr_Prelude.Show.showLitChar0 =
  idr_Prelude.Show.showLitChar0_val <- fetch idr_Prelude.Show.showLitChar0
  case idr_Prelude.Show.showLitChar0_val of
    (CGrInt idr_Prelude.Show.showLitChar_cpat_LInt64_7) ->
      case idr_Prelude.Show.showLitChar_cpat_LInt64_7 of
        7 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_3}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_3}_1}")
        8 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_4}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_4}_1}")
        9 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_5}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_5}_1}")
        10 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_6}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_6}_1}")
        11 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_7}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_7}_1}")
        12 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_8}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_8}_1}")
        13 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_9}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_9}_1}")
        14 ->
          idr_Prelude.Show.showLitChar1_val <- pure (C"idr_{U_Prelude.Show.{showLitChar_10}_1}")
          idr_Prelude.Show.showLitChar1 <- store idr_Prelude.Show.showLitChar1_val
          idr_Prelude.Show.showLitChar2_val <- pure (CGrString #"\\SO")
          idr_Prelude.Show.showLitChar2 <- store idr_Prelude.Show.showLitChar2_val
          pure (C"idr_{U_Prelude.Show.protectEsc_1}" idr_Prelude.Show.showLitChar1 idr_Prelude.Show.showLitChar2) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.protectEsc_1}" idr_Prelude.Show.showLitChar1 idr_Prelude.Show.showLitChar2)
        92 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_11}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_11}_1}")
        127 ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_12}_1}") -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_12}_1}")
        #default ->
          idr_Prelude.Show.showLitChar1_val_105 <- pure (CErased)
          idr_Prelude.Show.showLitChar1_106 <- store idr_Prelude.Show.showLitChar1_val_105
          idr_Prelude.Show.showLitChar2_val_108 <- idris_ch_int idr_Prelude.Show.showLitChar0
          idr_Prelude.Show.showLitChar2_109 <- store idr_Prelude.Show.showLitChar2_val_108
          idr_Prelude.Show.showLitChar2_val_107 <- idris_ls_ext idr_Prelude.Show.showLitChar2_109
          idr_Prelude.Show.showLitChar2_110 <- store idr_Prelude.Show.showLitChar2_val_107
          idr_Prelude.Show.showLitChar3_val_111 <- pure (CErased)
          idr_Prelude.Show.showLitChar3 <- store idr_Prelude.Show.showLitChar3_val_111
          idr_Prelude.Show.showLitChar3_val <- idr_Prelude.Show.showLitChar:asciiTab:10
          idr_Prelude.Show.showLitChar3_112 <- store idr_Prelude.Show.showLitChar3_val
          idr_Prelude.Show.showLitChar1_val_104 <- idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar2_110 idr_Prelude.Show.showLitChar3_112
          idr_Prelude.Show.showLitChar1_113 <- store idr_Prelude.Show.showLitChar1_val_104
          idr_Prelude.Show.showLitChar1_val_114 <- fetch idr_Prelude.Show.showLitChar1_113
          case idr_Prelude.Show.showLitChar1_val_114 of
            (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar2_115) ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_13}_1}" idr_Prelude.Show.showLitChar2_115) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_13}_1}" idr_Prelude.Show.showLitChar2_115)
            (Cidr_Prelude.Maybe.Nothing) ->
              idr_Prelude.Show.showLitChar2_val_117 <- pure (CGrInt 127)
              idr_Prelude.Show.showLitChar2_118 <- store idr_Prelude.Show.showLitChar2_val_117
              idr_Prelude.Show.showLitChar2_val_116 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Show.showLitChar0 idr_Prelude.Show.showLitChar2_118
              idr_Prelude.Show.showLitChar2_119 <- store idr_Prelude.Show.showLitChar2_val_116
              idr_Prelude.Show.showLitChar2_val_120 <- fetch idr_Prelude.Show.showLitChar2_119
              case idr_Prelude.Show.showLitChar2_val_120 of
                (Cidr_Prelude.Interfaces.GT) ->
                  pure (C"idr_{U_Prelude.Show.{showLitChar_14}_1}" idr_Prelude.Show.showLitChar0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_14}_1}" idr_Prelude.Show.showLitChar0)
                #default ->
                  pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0)
    #default ->
      idr_Prelude.Show.showLitChar1_val_122 <- pure (CErased)
      idr_Prelude.Show.showLitChar1_123 <- store idr_Prelude.Show.showLitChar1_val_122
      idr_Prelude.Show.showLitChar2_val_125 <- idris_ch_int idr_Prelude.Show.showLitChar0
      idr_Prelude.Show.showLitChar2_126 <- store idr_Prelude.Show.showLitChar2_val_125
      idr_Prelude.Show.showLitChar2_val_124 <- idris_ls_ext idr_Prelude.Show.showLitChar2_126
      idr_Prelude.Show.showLitChar2_127 <- store idr_Prelude.Show.showLitChar2_val_124
      idr_Prelude.Show.showLitChar3_val_129 <- pure (CErased)
      idr_Prelude.Show.showLitChar3_130 <- store idr_Prelude.Show.showLitChar3_val_129
      idr_Prelude.Show.showLitChar3_val_128 <- idr_Prelude.Show.showLitChar:asciiTab:10
      idr_Prelude.Show.showLitChar3_131 <- store idr_Prelude.Show.showLitChar3_val_128
      idr_Prelude.Show.showLitChar1_val_121 <- idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar2_127 idr_Prelude.Show.showLitChar3_131
      idr_Prelude.Show.showLitChar1_132 <- store idr_Prelude.Show.showLitChar1_val_121
      idr_Prelude.Show.showLitChar1_val_133 <- fetch idr_Prelude.Show.showLitChar1_132
      case idr_Prelude.Show.showLitChar1_val_133 of
        (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar2_134) ->
          pure (C"idr_{U_Prelude.Show.{showLitChar_13}_1}" idr_Prelude.Show.showLitChar2_134) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_13}_1}" idr_Prelude.Show.showLitChar2_134)
        (Cidr_Prelude.Maybe.Nothing) ->
          idr_Prelude.Show.showLitChar2_val_136 <- pure (CGrInt 127)
          idr_Prelude.Show.showLitChar2_137 <- store idr_Prelude.Show.showLitChar2_val_136
          idr_Prelude.Show.showLitChar2_val_135 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" idr_Prelude.Show.showLitChar0 idr_Prelude.Show.showLitChar2_137
          idr_Prelude.Show.showLitChar2_138 <- store idr_Prelude.Show.showLitChar2_val_135
          idr_Prelude.Show.showLitChar2_val_139 <- fetch idr_Prelude.Show.showLitChar2_138
          case idr_Prelude.Show.showLitChar2_val_139 of
            (Cidr_Prelude.Interfaces.GT) ->
              pure (C"idr_{U_Prelude.Show.{showLitChar_14}_1}" idr_Prelude.Show.showLitChar0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_Prelude.Show.{showLitChar_14}_1}" idr_Prelude.Show.showLitChar0)
            #default ->
              pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0) -- LINT: Last return expressions can only return non-node values: pure (C"idr_{U_prim__strCons_1}" idr_Prelude.Show.showLitChar0)

idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString0 idr_Prelude.Show.showLitString1 =
  idr_Prelude.Show.showLitString0_val <- fetch idr_Prelude.Show.showLitString0
  case idr_Prelude.Show.showLitString0_val of
    (Cidr_Prelude.List.:: idr_Prelude.Show.showLitString2 idr_Prelude.Show.showLitString3) ->
      idr_Prelude.Show.showLitString2_val <- fetch idr_Prelude.Show.showLitString2
      case idr_Prelude.Show.showLitString2_val of
        (CGrInt idr_Prelude.Show.showLitString_cpat_LInt64_34) ->
          case idr_Prelude.Show.showLitString_cpat_LInt64_34 of
            34 ->
              idr_Prelude.Show.showLitString4_val <- pure (CGrString #"\\\"")
              idr_Prelude.Show.showLitString4 <- store idr_Prelude.Show.showLitString4_val
              idr_Prelude.Show.showLitString5_val <- idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1
              idr_Prelude.Show.showLitString5 <- store idr_Prelude.Show.showLitString5_val
              idris_str_concat idr_Prelude.Show.showLitString4 idr_Prelude.Show.showLitString5
            #default ->
              idr_Prelude.Show.showLitString4_val_140 <- idr_Prelude.Show.showLitChar idr_Prelude.Show.showLitString2
              idr_Prelude.Show.showLitString4_141 <- store idr_Prelude.Show.showLitString4_val_140
              idr_Prelude.Show.showLitString5_val_142 <- idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1
              idr_Prelude.Show.showLitString5_143 <- store idr_Prelude.Show.showLitString5_val_142
              "idr_{APPLY_0}" idr_Prelude.Show.showLitString4_141 idr_Prelude.Show.showLitString5_143
        #default ->
          idr_Prelude.Show.showLitString4_val_144 <- idr_Prelude.Show.showLitChar idr_Prelude.Show.showLitString2
          idr_Prelude.Show.showLitString4_145 <- store idr_Prelude.Show.showLitString4_val_144
          idr_Prelude.Show.showLitString5_val_146 <- idr_Prelude.Show.showLitString idr_Prelude.Show.showLitString3 idr_Prelude.Show.showLitString1
          idr_Prelude.Show.showLitString5_147 <- store idr_Prelude.Show.showLitString5_val_146
          "idr_{APPLY_0}" idr_Prelude.Show.showLitString4_145 idr_Prelude.Show.showLitString5_147
    (Cidr_Prelude.List.Nil) ->
      fetch idr_Prelude.Show.showLitString1

idr_Main.upto idr_Main.upto0 idr_Main.upto1 =
  idr_Main.upto2_val_162 <- "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0" idr_Main.upto0 idr_Main.upto1
  idr_Main.upto2 <- store idr_Main.upto2_val_162
  idr_Main.upto2_val_163 <- fetch idr_Main.upto2
  idr_Main.upto2_val <- case idr_Main.upto2_val_163 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0" idr_Main.upto0 idr_Main.upto1
  idr_Main.upto2_164 <- store idr_Main.upto2_val
  idr_Main.upto2_val_165 <- fetch idr_Main.upto2_164
  case idr_Main.upto2_val_165 of
    (Cidr_Prelude.Bool.False) ->
      idr_Main.upto3_val_167 <- pure (CGrInt 1)
      idr_Main.upto3 <- store idr_Main.upto3_val_167
      idr_Main.upto3_val_166 <- idris_int_add idr_Main.upto0 idr_Main.upto3
      idr_Main.upto3_168 <- store idr_Main.upto3_val_166
      idr_Main.upto3_val <- idr_Main.upto idr_Main.upto3_168 idr_Main.upto1
      idr_Main.upto3_169 <- store idr_Main.upto3_val
      pure (Cidr_Main.Cons idr_Main.upto0 idr_Main.upto3_169) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Cons idr_Main.upto0 idr_Main.upto3_169)
    (Cidr_Prelude.Bool.True) ->
      pure (Cidr_Main.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Nil)

"idr_{APPLY_0}" "idr_{APPLY_0}0" "idr_{APPLY_0}1" =
  "idr_{APPLY_0}0_val" <- fetch "idr_{APPLY_0}0"
  case "idr_{APPLY_0}0_val" of
    (C"idr_{U_Main.{main_0}_1}") ->
      "idr_Main.{main_0}" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Chars.isDigit_1}") ->
      idr_Prelude.Chars.isDigit "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.protectEsc_1}" "idr_{APPLY_0}2" "idr_{APPLY_0}3") ->
      idr_Prelude.Show.protectEsc "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_10}_1}") ->
      "idr_Prelude.Show.{showLitChar_10}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_11}_1}") ->
      "idr_Prelude.Show.{showLitChar_11}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_12}_1}") ->
      "idr_Prelude.Show.{showLitChar_12}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_13}_1}" "idr_{APPLY_0}2_170") ->
      "idr_Prelude.Show.{showLitChar_13}" "idr_{APPLY_0}2_170" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_14}_1}" "idr_{APPLY_0}2_171") ->
      "idr_Prelude.Show.{showLitChar_14}" "idr_{APPLY_0}2_171" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_3}_1}") ->
      "idr_Prelude.Show.{showLitChar_3}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_4}_1}") ->
      "idr_Prelude.Show.{showLitChar_4}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_5}_1}") ->
      "idr_Prelude.Show.{showLitChar_5}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_6}_1}") ->
      "idr_Prelude.Show.{showLitChar_6}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_7}_1}") ->
      "idr_Prelude.Show.{showLitChar_7}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_8}_1}") ->
      "idr_Prelude.Show.{showLitChar_8}" "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Show.{showLitChar_9}_1}") ->
      "idr_Prelude.Show.{showLitChar_9}" "idr_{APPLY_0}1"
    (C"idr_{U_prim__strCons_1}" "idr_{APPLY_0}2_172") ->
      idr_prim__strCons "idr_{APPLY_0}2_172" "idr_{APPLY_0}1"
    (C"idr_{U_prim__toStrBigInt_1}") ->
      idr_prim__toStrBigInt "idr_{APPLY_0}1"
    (C"idr_{U_prim__toStrInt_1}") ->
      idr_prim__toStrInt "idr_{APPLY_0}1"
    #default ->
      pure (CErased) -- LINT: Last return expressions can only return non-node values: pure (CErased)

"idr_Main.{main_0}" "idr_Main.{main_0}0" =
  "idr_Main.{main_0}1_val" <- pure (CGrInt 34)
  "idr_Main.{main_0}1" <- store "idr_Main.{main_0}1_val"
  "idr_Main.{main_0}2_val_177" <- pure (CGrString #"")
  "idr_Main.{main_0}2" <- store "idr_Main.{main_0}2_val_177"
  "idr_Main.{main_0}2_val_176" <- idris_str_eq "idr_Main.{main_0}0" "idr_Main.{main_0}2"
  "idr_Main.{main_0}2_178" <- store "idr_Main.{main_0}2_val_176"
  "idr_Main.{main_0}2_val_179" <- fetch "idr_Main.{main_0}2_178"
  "idr_Main.{main_0}2_val_175" <- case "idr_Main.{main_0}2_val_179" of
    (CGrInt "idr_Main.{main_0}_cpat_LInt64_0") ->
      case "idr_Main.{main_0}_cpat_LInt64_0" of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    #default ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
  "idr_Main.{main_0}2_180" <- store "idr_Main.{main_0}2_val_175"
  "idr_Main.{main_0}3_val" <- pure (Cidr_Prelude.Bool.True)
  "idr_Main.{main_0}3" <- store "idr_Main.{main_0}3_val"
  "idr_Main.{main_0}2_val_174" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{main_0}2_180" "idr_Main.{main_0}3"
  "idr_Main.{main_0}2_181" <- store "idr_Main.{main_0}2_val_174"
  "idr_Main.{main_0}2_val_182" <- fetch "idr_Main.{main_0}2_181"
  "idr_Main.{main_0}2_val_173" <- case "idr_Main.{main_0}2_val_182" of
    (Cidr_Prelude.Basics.No) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
    (Cidr_Prelude.Basics.Yes) ->
      "idr_Main.{main_0}3_val_183" <- idris_str_head "idr_Main.{main_0}0"
      "idr_Main.{main_0}3_184" <- store "idr_Main.{main_0}3_val_183"
      "idr_Main.{main_0}4_val_185" <- pure (CErased)
      "idr_Main.{main_0}4" <- store "idr_Main.{main_0}4_val_185"
      "idr_Main.{main_0}5_val_189" <- idris_str_tail "idr_Main.{main_0}0"
      "idr_Main.{main_0}5" <- store "idr_Main.{main_0}5_val_189"
      "idr_Main.{main_0}6_val" <- pure (CGrString #"")
      "idr_Main.{main_0}6" <- store "idr_Main.{main_0}6_val"
      "idr_Main.{main_0}5_val_188" <- idris_str_eq "idr_Main.{main_0}5" "idr_Main.{main_0}6"
      "idr_Main.{main_0}5_190" <- store "idr_Main.{main_0}5_val_188"
      "idr_Main.{main_0}5_val_191" <- fetch "idr_Main.{main_0}5_190"
      "idr_Main.{main_0}5_val_187" <- case "idr_Main.{main_0}5_val_191" of
        (CGrInt "idr_Main.{main_0}_cpat_LInt64_0_192") ->
          case "idr_Main.{main_0}_cpat_LInt64_0_192" of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Main.{main_0}5_193" <- store "idr_Main.{main_0}5_val_187"
      "idr_Main.{main_0}6_val_194" <- pure (Cidr_Prelude.Bool.True)
      "idr_Main.{main_0}6_195" <- store "idr_Main.{main_0}6_val_194"
      "idr_Main.{main_0}5_val_186" <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Main.{main_0}5_193" "idr_Main.{main_0}6_195"
      "idr_Main.{main_0}5_196" <- store "idr_Main.{main_0}5_val_186"
      "idr_Main.{main_0}5_val_197" <- fetch "idr_Main.{main_0}5_196"
      "idr_Main.{main_0}5_val" <- case "idr_Main.{main_0}5_val_197" of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          "idr_Main.{main_0}6_val_199" <- idris_str_tail "idr_Main.{main_0}0"
          "idr_Main.{main_0}6_200" <- store "idr_Main.{main_0}6_val_199"
          "idr_Main.{main_0}6_val_198" <- idris_str_head "idr_Main.{main_0}6_200"
          "idr_Main.{main_0}6_201" <- store "idr_Main.{main_0}6_val_198"
          "idr_Main.{main_0}7_val_202" <- idris_str_tail "idr_Main.{main_0}0"
          "idr_Main.{main_0}7" <- store "idr_Main.{main_0}7_val_202"
          "idr_Main.{main_0}7_val" <- idris_str_tail "idr_Main.{main_0}7"
          "idr_Main.{main_0}7_203" <- store "idr_Main.{main_0}7_val"
          pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_0}6_201" "idr_Main.{main_0}7_203") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons "idr_Main.{main_0}6_201" "idr_Main.{main_0}7_203")
      "idr_Main.{main_0}5_204" <- store "idr_Main.{main_0}5_val"
      "idr_Main.{main_0}4_val" <- idr__Prelude.Strings.unpack_with_36 "idr_Main.{main_0}5_204"
      "idr_Main.{main_0}4_205" <- store "idr_Main.{main_0}4_val"
      pure (Cidr_Prelude.List.:: "idr_Main.{main_0}3_184" "idr_Main.{main_0}4_205") -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: "idr_Main.{main_0}3_184" "idr_Main.{main_0}4_205")
  "idr_Main.{main_0}2_206" <- store "idr_Main.{main_0}2_val_173"
  "idr_Main.{main_0}3_val_207" <- pure (CGrString #"\"")
  "idr_Main.{main_0}3_208" <- store "idr_Main.{main_0}3_val_207"
  "idr_Main.{main_0}2_val" <- idr_Prelude.Show.showLitString "idr_Main.{main_0}2_206" "idr_Main.{main_0}3_208"
  "idr_Main.{main_0}2_209" <- store "idr_Main.{main_0}2_val"
  idris_str_cons "idr_Main.{main_0}1" "idr_Main.{main_0}2_209"

"idr_{runMain_0}" =
  "idr_{runMain_0}0_val_210" <- pure (CErased)
  "idr_{runMain_0}0" <- store "idr_{runMain_0}0_val_210"
  "idr_{runMain_0}0_val" <- idr_Main.main
  "idr_{runMain_0}0_211" <- store "idr_{runMain_0}0_val"
  do
    "idr_{EVAL_0}0.0" <- pure "idr_{runMain_0}0_211"
    "idr_{EVAL_0}0_val.0" <- fetch "idr_{EVAL_0}0.0"
    fetch "idr_{EVAL_0}0.0"

"idr_Main.{main_1}" "idr_Main.{main_1}0" =
  "idr_Main.{main_1}1_val" <- pure (CErased)
  "idr_Main.{main_1}1" <- store "idr_Main.{main_1}1_val"
  "idr_Main.{main_1}2_val" <- pure (C"idr_{U_prim__toStrBigInt_1}")
  "idr_Main.{main_1}2" <- store "idr_Main.{main_1}2_val"
  "idr_Main.{main_1}3_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_1}3" <- store "idr_Main.{main_1}3_val"
  idr_Prelude.Show.primNumShow "idr_Main.{main_1}2" "idr_Main.{main_1}3" "idr_Main.{main_1}0"

"idr_Prelude.Show.{showLitChar_3}" "idr_Prelude.Show.{showLitChar_3}0" =
  "idr_Prelude.Show.{showLitChar_3}1_val" <- pure (CGrString #"\\a")
  "idr_Prelude.Show.{showLitChar_3}1" <- store "idr_Prelude.Show.{showLitChar_3}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_3}1" "idr_Prelude.Show.{showLitChar_3}0"

"idr_Prelude.Show.{showLitChar_4}" "idr_Prelude.Show.{showLitChar_4}0" =
  "idr_Prelude.Show.{showLitChar_4}1_val" <- pure (CGrString #"\\b")
  "idr_Prelude.Show.{showLitChar_4}1" <- store "idr_Prelude.Show.{showLitChar_4}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_4}1" "idr_Prelude.Show.{showLitChar_4}0"

"idr_Prelude.Show.{showLitChar_5}" "idr_Prelude.Show.{showLitChar_5}0" =
  "idr_Prelude.Show.{showLitChar_5}1_val" <- pure (CGrString #"\\t")
  "idr_Prelude.Show.{showLitChar_5}1" <- store "idr_Prelude.Show.{showLitChar_5}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_5}1" "idr_Prelude.Show.{showLitChar_5}0"

"idr_Prelude.Show.{showLitChar_6}" "idr_Prelude.Show.{showLitChar_6}0" =
  "idr_Prelude.Show.{showLitChar_6}1_val" <- pure (CGrString #"\\n")
  "idr_Prelude.Show.{showLitChar_6}1" <- store "idr_Prelude.Show.{showLitChar_6}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_6}1" "idr_Prelude.Show.{showLitChar_6}0"

"idr_Prelude.Show.{showLitChar_7}" "idr_Prelude.Show.{showLitChar_7}0" =
  "idr_Prelude.Show.{showLitChar_7}1_val" <- pure (CGrString #"\\v")
  "idr_Prelude.Show.{showLitChar_7}1" <- store "idr_Prelude.Show.{showLitChar_7}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_7}1" "idr_Prelude.Show.{showLitChar_7}0"

"idr_Prelude.Show.{showLitChar_8}" "idr_Prelude.Show.{showLitChar_8}0" =
  "idr_Prelude.Show.{showLitChar_8}1_val" <- pure (CGrString #"\\f")
  "idr_Prelude.Show.{showLitChar_8}1" <- store "idr_Prelude.Show.{showLitChar_8}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_8}1" "idr_Prelude.Show.{showLitChar_8}0"

"idr_Prelude.Show.{showLitChar_9}" "idr_Prelude.Show.{showLitChar_9}0" =
  "idr_Prelude.Show.{showLitChar_9}1_val" <- pure (CGrString #"\\r")
  "idr_Prelude.Show.{showLitChar_9}1" <- store "idr_Prelude.Show.{showLitChar_9}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_9}1" "idr_Prelude.Show.{showLitChar_9}0"

"idr_Prelude.Show.{showLitChar_10}" "idr_Prelude.Show.{showLitChar_10}0" =
  "idr_Prelude.Show.{showLitChar_10}1_val_212" <- pure (CGrInt 72)
  "idr_Prelude.Show.{showLitChar_10}1" <- store "idr_Prelude.Show.{showLitChar_10}1_val_212"
  "idr_Prelude.Show.{showLitChar_10}1_val" <- idris_int_eq "idr_Prelude.Show.{showLitChar_10}0" "idr_Prelude.Show.{showLitChar_10}1"
  "idr_Prelude.Show.{showLitChar_10}1_213" <- store "idr_Prelude.Show.{showLitChar_10}1_val"
  "idr_Prelude.Show.{showLitChar_10}1_val_214" <- fetch "idr_Prelude.Show.{showLitChar_10}1_213"
  case "idr_Prelude.Show.{showLitChar_10}1_val_214" of
    (CGrInt "idr_Prelude.Show.{showLitChar_10}_cpat_LInt64_0") ->
      case "idr_Prelude.Show.{showLitChar_10}_cpat_LInt64_0" of
        0 ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)

"idr_Prelude.Show.{showLitChar_11}" "idr_Prelude.Show.{showLitChar_11}0" =
  "idr_Prelude.Show.{showLitChar_11}1_val" <- pure (CGrString #"\\\\")
  "idr_Prelude.Show.{showLitChar_11}1" <- store "idr_Prelude.Show.{showLitChar_11}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_11}1" "idr_Prelude.Show.{showLitChar_11}0"

"idr_Prelude.Show.{showLitChar_12}" "idr_Prelude.Show.{showLitChar_12}0" =
  "idr_Prelude.Show.{showLitChar_12}1_val" <- pure (CGrString #"\\DEL")
  "idr_Prelude.Show.{showLitChar_12}1" <- store "idr_Prelude.Show.{showLitChar_12}1_val"
  idris_str_concat "idr_Prelude.Show.{showLitChar_12}1" "idr_Prelude.Show.{showLitChar_12}0"

"idr_Prelude.Show.{showLitChar_13}" "idr_Prelude.Show.{showLitChar_13}0" "idr_Prelude.Show.{showLitChar_13}1" =
  "idr_Prelude.Show.{showLitChar_13}2_val" <- pure (CGrInt 92)
  "idr_Prelude.Show.{showLitChar_13}2" <- store "idr_Prelude.Show.{showLitChar_13}2_val"
  "idr_Prelude.Show.{showLitChar_13}3_val" <- idris_str_concat "idr_Prelude.Show.{showLitChar_13}0" "idr_Prelude.Show.{showLitChar_13}1"
  "idr_Prelude.Show.{showLitChar_13}3" <- store "idr_Prelude.Show.{showLitChar_13}3_val"
  idr_prim__strCons "idr_Prelude.Show.{showLitChar_13}2" "idr_Prelude.Show.{showLitChar_13}3"

"idr_Prelude.Show.{showLitChar_14}" "idr_Prelude.Show.{showLitChar_14}0" "idr_Prelude.Show.{showLitChar_14}1" =
  "idr_Prelude.Show.{showLitChar_14}2_val" <- pure (CGrInt 92)
  "idr_Prelude.Show.{showLitChar_14}2" <- store "idr_Prelude.Show.{showLitChar_14}2_val"
  "idr_Prelude.Show.{showLitChar_14}3_val_215" <- pure (C"idr_{U_Prelude.Chars.isDigit_1}")
  "idr_Prelude.Show.{showLitChar_14}3" <- store "idr_Prelude.Show.{showLitChar_14}3_val_215"
  "idr_Prelude.Show.{showLitChar_14}4_val_216" <- pure (CErased)
  "idr_Prelude.Show.{showLitChar_14}4" <- store "idr_Prelude.Show.{showLitChar_14}4_val_216"
  "idr_Prelude.Show.{showLitChar_14}5_val" <- pure (C"idr_{U_prim__toStrInt_1}")
  "idr_Prelude.Show.{showLitChar_14}5" <- store "idr_Prelude.Show.{showLitChar_14}5_val"
  "idr_Prelude.Show.{showLitChar_14}6_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Prelude.Show.{showLitChar_14}6" <- store "idr_Prelude.Show.{showLitChar_14}6_val"
  "idr_Prelude.Show.{showLitChar_14}7_val" <- idris_ch_int "idr_Prelude.Show.{showLitChar_14}0"
  "idr_Prelude.Show.{showLitChar_14}7" <- store "idr_Prelude.Show.{showLitChar_14}7_val"
  "idr_Prelude.Show.{showLitChar_14}4_val" <- idr_Prelude.Show.primNumShow "idr_Prelude.Show.{showLitChar_14}5" "idr_Prelude.Show.{showLitChar_14}6" "idr_Prelude.Show.{showLitChar_14}7"
  "idr_Prelude.Show.{showLitChar_14}4_217" <- store "idr_Prelude.Show.{showLitChar_14}4_val"
  "idr_Prelude.Show.{showLitChar_14}3_val" <- idr_Prelude.Show.protectEsc "idr_Prelude.Show.{showLitChar_14}3" "idr_Prelude.Show.{showLitChar_14}4_217" "idr_Prelude.Show.{showLitChar_14}1"
  "idr_Prelude.Show.{showLitChar_14}3_218" <- store "idr_Prelude.Show.{showLitChar_14}3_val"
  idr_prim__strCons "idr_Prelude.Show.{showLitChar_14}2" "idr_Prelude.Show.{showLitChar_14}3_218"

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01"
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" of
    (Cidr_Prelude.Bool.False) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_219" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_219" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)

"idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:01" =
  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:01_val" <- fetch "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:01"
  case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:01_val" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00_val" <- fetch "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00"
          case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00_val" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0_cpat_LInt64_0_220") ->
              case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0_cpat_LInt64_0_220" of
                0 ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
                #default ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_val_221" <- pure (CGrInt 1)
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_val_221"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_val" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:01" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_222" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_val"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00_val_223" <- fetch "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00"
          case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00_val_223" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0_cpat_LInt64_0_224") ->
              case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0_cpat_LInt64_0_224" of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_225" <- pure (CGrInt 1)
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_225"
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03"
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_226" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val"
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_226" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_222"
            #default ->
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_228" <- pure (CGrInt 1)
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_229" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_228"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_227" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_229"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_230" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_227"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_230" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_222"
    #default ->
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_val_232" <- pure (CGrInt 1)
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_233" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_val_232"
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_val_231" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:01" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_233"
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_234" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_val_231"
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00_val_235" <- fetch "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00"
      case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00_val_235" of
        (CGrInt "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0_cpat_LInt64_0_236") ->
          case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0_cpat_LInt64_0_236" of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_238" <- pure (CGrInt 1)
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_239" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_238"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_237" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_239"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_240" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_237"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_240" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_234"
        #default ->
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_242" <- pure (CGrInt 1)
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_243" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_242"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_241" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_243"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_244" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_val_241"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:03_244" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02_234"

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val" <- idris_int_eq "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_245" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:02_val_245" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val" <- idris_int_lt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:01"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_246" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:03_val_246" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_247") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Char:!compare:0_cpat_LInt64_0_247" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
    #default ->
      pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val" <- idris_int_eq "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_248" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_248" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val" <- idris_int_lt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_249" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_249" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_250") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_250" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
    #default ->
      pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)

"idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:01_val" <- fetch "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:01"
  case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:01_val" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00_val" <- fetch "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00"
          case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00_val" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0_cpat_LInt64_0_251") ->
              case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0_cpat_LInt64_0_251" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
                #default ->
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_252" <- pure (CGrInt 1)
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_252"
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02"
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_253" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val"
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_255" <- pure (CGrInt 1)
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_256" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_255"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_254" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_256"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_257" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_254"
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
        #default ->
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_259" <- pure (CGrInt 1)
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_260" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_259"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_258" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:01" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_260"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_261" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_258"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00_val_262" <- fetch "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00"
          case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00_val_262" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0_cpat_LInt64_0_263") ->
              case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0_cpat_LInt64_0_263" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
                #default ->
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_264" <- pure (CGrInt 1)
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_264"
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03"
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_265" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val"
                  "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_265" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_261"
            #default ->
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_267" <- pure (CGrInt 1)
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_268" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_267"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_266" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_268"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_269" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_266"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_269" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_261"
    #default ->
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_271" <- pure (CGrInt 1)
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_272" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_271"
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_270" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:01" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_272"
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_273" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_val_270"
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00_val_274" <- fetch "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00"
      case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00_val_274" of
        (CGrInt "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0_cpat_LInt64_0_275") ->
          case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0_cpat_LInt64_0_275" of
            0 ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
            #default ->
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_277" <- pure (CGrInt 1)
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_278" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_277"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_276" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_278"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_279" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_276"
              "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_279" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_273"
        #default ->
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_281" <- pure (CGrInt 1)
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_282" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_281"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_280" <- idris_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_282"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_283" <- store "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_val_280"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:03_283" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_273"

"idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:0" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:01" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:02" =
  "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:02_val" <- fetch "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:02"
  case "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:02_val" of
    (Cidr_Main.Cons "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:03" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:04") ->
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:05_val" <- pure (CGrString #"Cons ")
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:05" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:05_val"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:06_val_284" <- "idr_{APPLY_0}" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:01" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:03"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:06" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:06_val_284"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:07_val_285" <- pure (CGrString #" (")
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:07" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:07_val_285"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08_val_287" <- pure (CErased)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08_val_287"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08_val_286" <- "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:0" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:01" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:04"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08_288" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08_val_286"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:09_val" <- pure (CGrString #")")
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:09" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:09_val"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08_val" <- idris_str_concat "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08_288" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:09"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08_289" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08_val"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:07_val" <- idris_str_concat "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:07" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:08_289"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:07_290" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:07_val"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:06_val" <- idris_str_concat "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:06" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:07_290"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:06_291" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:06_val"
      idris_str_concat "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:05" "idr_Prelude.Show.Main.@Prelude.Show.Show$List a:!show:06_291"
    (Cidr_Main.Nil) ->
      pure (CGrString #"Nil") -- LINT: Last return expressions can only return non-node values: pure (CGrString #"Nil")

idr_Prelude.Show.showLitChar:asciiTab:10 =
  idr_Prelude.Show.showLitChar:asciiTab:101_val <- pure (CGrString #"NUL")
  idr_Prelude.Show.showLitChar:asciiTab:101 <- store idr_Prelude.Show.showLitChar:asciiTab:101_val
  idr_Prelude.Show.showLitChar:asciiTab:102_val_292 <- pure (CGrString #"SOH")
  idr_Prelude.Show.showLitChar:asciiTab:102 <- store idr_Prelude.Show.showLitChar:asciiTab:102_val_292
  idr_Prelude.Show.showLitChar:asciiTab:103_val_293 <- pure (CGrString #"STX")
  idr_Prelude.Show.showLitChar:asciiTab:103 <- store idr_Prelude.Show.showLitChar:asciiTab:103_val_293
  idr_Prelude.Show.showLitChar:asciiTab:104_val_294 <- pure (CGrString #"ETX")
  idr_Prelude.Show.showLitChar:asciiTab:104 <- store idr_Prelude.Show.showLitChar:asciiTab:104_val_294
  idr_Prelude.Show.showLitChar:asciiTab:105_val_295 <- pure (CGrString #"EOT")
  idr_Prelude.Show.showLitChar:asciiTab:105 <- store idr_Prelude.Show.showLitChar:asciiTab:105_val_295
  idr_Prelude.Show.showLitChar:asciiTab:106_val_296 <- pure (CGrString #"ENQ")
  idr_Prelude.Show.showLitChar:asciiTab:106 <- store idr_Prelude.Show.showLitChar:asciiTab:106_val_296
  idr_Prelude.Show.showLitChar:asciiTab:107_val_297 <- pure (CGrString #"ACK")
  idr_Prelude.Show.showLitChar:asciiTab:107 <- store idr_Prelude.Show.showLitChar:asciiTab:107_val_297
  idr_Prelude.Show.showLitChar:asciiTab:108_val_298 <- pure (CGrString #"BEL")
  idr_Prelude.Show.showLitChar:asciiTab:108 <- store idr_Prelude.Show.showLitChar:asciiTab:108_val_298
  idr_Prelude.Show.showLitChar:asciiTab:109_val_299 <- pure (CGrString #"BS")
  idr_Prelude.Show.showLitChar:asciiTab:109 <- store idr_Prelude.Show.showLitChar:asciiTab:109_val_299
  idr_Prelude.Show.showLitChar:asciiTab:1010_val_300 <- pure (CGrString #"HT")
  idr_Prelude.Show.showLitChar:asciiTab:1010 <- store idr_Prelude.Show.showLitChar:asciiTab:1010_val_300
  idr_Prelude.Show.showLitChar:asciiTab:1011_val_301 <- pure (CGrString #"LF")
  idr_Prelude.Show.showLitChar:asciiTab:1011 <- store idr_Prelude.Show.showLitChar:asciiTab:1011_val_301
  idr_Prelude.Show.showLitChar:asciiTab:1012_val_302 <- pure (CGrString #"VT")
  idr_Prelude.Show.showLitChar:asciiTab:1012 <- store idr_Prelude.Show.showLitChar:asciiTab:1012_val_302
  idr_Prelude.Show.showLitChar:asciiTab:1013_val_303 <- pure (CGrString #"FF")
  idr_Prelude.Show.showLitChar:asciiTab:1013 <- store idr_Prelude.Show.showLitChar:asciiTab:1013_val_303
  idr_Prelude.Show.showLitChar:asciiTab:1014_val_304 <- pure (CGrString #"CR")
  idr_Prelude.Show.showLitChar:asciiTab:1014 <- store idr_Prelude.Show.showLitChar:asciiTab:1014_val_304
  idr_Prelude.Show.showLitChar:asciiTab:1015_val_305 <- pure (CGrString #"SO")
  idr_Prelude.Show.showLitChar:asciiTab:1015 <- store idr_Prelude.Show.showLitChar:asciiTab:1015_val_305
  idr_Prelude.Show.showLitChar:asciiTab:1016_val_306 <- pure (CGrString #"SI")
  idr_Prelude.Show.showLitChar:asciiTab:1016 <- store idr_Prelude.Show.showLitChar:asciiTab:1016_val_306
  idr_Prelude.Show.showLitChar:asciiTab:1017_val_307 <- pure (CGrString #"DLE")
  idr_Prelude.Show.showLitChar:asciiTab:1017 <- store idr_Prelude.Show.showLitChar:asciiTab:1017_val_307
  idr_Prelude.Show.showLitChar:asciiTab:1018_val_308 <- pure (CGrString #"DC1")
  idr_Prelude.Show.showLitChar:asciiTab:1018 <- store idr_Prelude.Show.showLitChar:asciiTab:1018_val_308
  idr_Prelude.Show.showLitChar:asciiTab:1019_val_309 <- pure (CGrString #"DC2")
  idr_Prelude.Show.showLitChar:asciiTab:1019 <- store idr_Prelude.Show.showLitChar:asciiTab:1019_val_309
  idr_Prelude.Show.showLitChar:asciiTab:1020_val_310 <- pure (CGrString #"DC3")
  idr_Prelude.Show.showLitChar:asciiTab:1020 <- store idr_Prelude.Show.showLitChar:asciiTab:1020_val_310
  idr_Prelude.Show.showLitChar:asciiTab:1021_val_311 <- pure (CGrString #"DC4")
  idr_Prelude.Show.showLitChar:asciiTab:1021 <- store idr_Prelude.Show.showLitChar:asciiTab:1021_val_311
  idr_Prelude.Show.showLitChar:asciiTab:1022_val_312 <- pure (CGrString #"NAK")
  idr_Prelude.Show.showLitChar:asciiTab:1022 <- store idr_Prelude.Show.showLitChar:asciiTab:1022_val_312
  idr_Prelude.Show.showLitChar:asciiTab:1023_val_313 <- pure (CGrString #"SYN")
  idr_Prelude.Show.showLitChar:asciiTab:1023 <- store idr_Prelude.Show.showLitChar:asciiTab:1023_val_313
  idr_Prelude.Show.showLitChar:asciiTab:1024_val_314 <- pure (CGrString #"ETB")
  idr_Prelude.Show.showLitChar:asciiTab:1024 <- store idr_Prelude.Show.showLitChar:asciiTab:1024_val_314
  idr_Prelude.Show.showLitChar:asciiTab:1025_val_315 <- pure (CGrString #"CAN")
  idr_Prelude.Show.showLitChar:asciiTab:1025 <- store idr_Prelude.Show.showLitChar:asciiTab:1025_val_315
  idr_Prelude.Show.showLitChar:asciiTab:1026_val_316 <- pure (CGrString #"EM")
  idr_Prelude.Show.showLitChar:asciiTab:1026 <- store idr_Prelude.Show.showLitChar:asciiTab:1026_val_316
  idr_Prelude.Show.showLitChar:asciiTab:1027_val_317 <- pure (CGrString #"SUB")
  idr_Prelude.Show.showLitChar:asciiTab:1027 <- store idr_Prelude.Show.showLitChar:asciiTab:1027_val_317
  idr_Prelude.Show.showLitChar:asciiTab:1028_val_318 <- pure (CGrString #"ESC")
  idr_Prelude.Show.showLitChar:asciiTab:1028 <- store idr_Prelude.Show.showLitChar:asciiTab:1028_val_318
  idr_Prelude.Show.showLitChar:asciiTab:1029_val_319 <- pure (CGrString #"FS")
  idr_Prelude.Show.showLitChar:asciiTab:1029 <- store idr_Prelude.Show.showLitChar:asciiTab:1029_val_319
  idr_Prelude.Show.showLitChar:asciiTab:1030_val_320 <- pure (CGrString #"GS")
  idr_Prelude.Show.showLitChar:asciiTab:1030 <- store idr_Prelude.Show.showLitChar:asciiTab:1030_val_320
  idr_Prelude.Show.showLitChar:asciiTab:1031_val_321 <- pure (CGrString #"RS")
  idr_Prelude.Show.showLitChar:asciiTab:1031 <- store idr_Prelude.Show.showLitChar:asciiTab:1031_val_321
  idr_Prelude.Show.showLitChar:asciiTab:1032_val_322 <- pure (CGrString #"US")
  idr_Prelude.Show.showLitChar:asciiTab:1032 <- store idr_Prelude.Show.showLitChar:asciiTab:1032_val_322
  idr_Prelude.Show.showLitChar:asciiTab:1033_val <- pure (Cidr_Prelude.List.Nil)
  idr_Prelude.Show.showLitChar:asciiTab:1033 <- store idr_Prelude.Show.showLitChar:asciiTab:1033_val
  idr_Prelude.Show.showLitChar:asciiTab:1032_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1032 idr_Prelude.Show.showLitChar:asciiTab:1033)
  idr_Prelude.Show.showLitChar:asciiTab:1032_323 <- store idr_Prelude.Show.showLitChar:asciiTab:1032_val
  idr_Prelude.Show.showLitChar:asciiTab:1031_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1031 idr_Prelude.Show.showLitChar:asciiTab:1032_323)
  idr_Prelude.Show.showLitChar:asciiTab:1031_324 <- store idr_Prelude.Show.showLitChar:asciiTab:1031_val
  idr_Prelude.Show.showLitChar:asciiTab:1030_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1030 idr_Prelude.Show.showLitChar:asciiTab:1031_324)
  idr_Prelude.Show.showLitChar:asciiTab:1030_325 <- store idr_Prelude.Show.showLitChar:asciiTab:1030_val
  idr_Prelude.Show.showLitChar:asciiTab:1029_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1029 idr_Prelude.Show.showLitChar:asciiTab:1030_325)
  idr_Prelude.Show.showLitChar:asciiTab:1029_326 <- store idr_Prelude.Show.showLitChar:asciiTab:1029_val
  idr_Prelude.Show.showLitChar:asciiTab:1028_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1028 idr_Prelude.Show.showLitChar:asciiTab:1029_326)
  idr_Prelude.Show.showLitChar:asciiTab:1028_327 <- store idr_Prelude.Show.showLitChar:asciiTab:1028_val
  idr_Prelude.Show.showLitChar:asciiTab:1027_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1027 idr_Prelude.Show.showLitChar:asciiTab:1028_327)
  idr_Prelude.Show.showLitChar:asciiTab:1027_328 <- store idr_Prelude.Show.showLitChar:asciiTab:1027_val
  idr_Prelude.Show.showLitChar:asciiTab:1026_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1026 idr_Prelude.Show.showLitChar:asciiTab:1027_328)
  idr_Prelude.Show.showLitChar:asciiTab:1026_329 <- store idr_Prelude.Show.showLitChar:asciiTab:1026_val
  idr_Prelude.Show.showLitChar:asciiTab:1025_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1025 idr_Prelude.Show.showLitChar:asciiTab:1026_329)
  idr_Prelude.Show.showLitChar:asciiTab:1025_330 <- store idr_Prelude.Show.showLitChar:asciiTab:1025_val
  idr_Prelude.Show.showLitChar:asciiTab:1024_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1024 idr_Prelude.Show.showLitChar:asciiTab:1025_330)
  idr_Prelude.Show.showLitChar:asciiTab:1024_331 <- store idr_Prelude.Show.showLitChar:asciiTab:1024_val
  idr_Prelude.Show.showLitChar:asciiTab:1023_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1023 idr_Prelude.Show.showLitChar:asciiTab:1024_331)
  idr_Prelude.Show.showLitChar:asciiTab:1023_332 <- store idr_Prelude.Show.showLitChar:asciiTab:1023_val
  idr_Prelude.Show.showLitChar:asciiTab:1022_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1022 idr_Prelude.Show.showLitChar:asciiTab:1023_332)
  idr_Prelude.Show.showLitChar:asciiTab:1022_333 <- store idr_Prelude.Show.showLitChar:asciiTab:1022_val
  idr_Prelude.Show.showLitChar:asciiTab:1021_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1021 idr_Prelude.Show.showLitChar:asciiTab:1022_333)
  idr_Prelude.Show.showLitChar:asciiTab:1021_334 <- store idr_Prelude.Show.showLitChar:asciiTab:1021_val
  idr_Prelude.Show.showLitChar:asciiTab:1020_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1020 idr_Prelude.Show.showLitChar:asciiTab:1021_334)
  idr_Prelude.Show.showLitChar:asciiTab:1020_335 <- store idr_Prelude.Show.showLitChar:asciiTab:1020_val
  idr_Prelude.Show.showLitChar:asciiTab:1019_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1019 idr_Prelude.Show.showLitChar:asciiTab:1020_335)
  idr_Prelude.Show.showLitChar:asciiTab:1019_336 <- store idr_Prelude.Show.showLitChar:asciiTab:1019_val
  idr_Prelude.Show.showLitChar:asciiTab:1018_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1018 idr_Prelude.Show.showLitChar:asciiTab:1019_336)
  idr_Prelude.Show.showLitChar:asciiTab:1018_337 <- store idr_Prelude.Show.showLitChar:asciiTab:1018_val
  idr_Prelude.Show.showLitChar:asciiTab:1017_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1017 idr_Prelude.Show.showLitChar:asciiTab:1018_337)
  idr_Prelude.Show.showLitChar:asciiTab:1017_338 <- store idr_Prelude.Show.showLitChar:asciiTab:1017_val
  idr_Prelude.Show.showLitChar:asciiTab:1016_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1016 idr_Prelude.Show.showLitChar:asciiTab:1017_338)
  idr_Prelude.Show.showLitChar:asciiTab:1016_339 <- store idr_Prelude.Show.showLitChar:asciiTab:1016_val
  idr_Prelude.Show.showLitChar:asciiTab:1015_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1015 idr_Prelude.Show.showLitChar:asciiTab:1016_339)
  idr_Prelude.Show.showLitChar:asciiTab:1015_340 <- store idr_Prelude.Show.showLitChar:asciiTab:1015_val
  idr_Prelude.Show.showLitChar:asciiTab:1014_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1014 idr_Prelude.Show.showLitChar:asciiTab:1015_340)
  idr_Prelude.Show.showLitChar:asciiTab:1014_341 <- store idr_Prelude.Show.showLitChar:asciiTab:1014_val
  idr_Prelude.Show.showLitChar:asciiTab:1013_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1013 idr_Prelude.Show.showLitChar:asciiTab:1014_341)
  idr_Prelude.Show.showLitChar:asciiTab:1013_342 <- store idr_Prelude.Show.showLitChar:asciiTab:1013_val
  idr_Prelude.Show.showLitChar:asciiTab:1012_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1012 idr_Prelude.Show.showLitChar:asciiTab:1013_342)
  idr_Prelude.Show.showLitChar:asciiTab:1012_343 <- store idr_Prelude.Show.showLitChar:asciiTab:1012_val
  idr_Prelude.Show.showLitChar:asciiTab:1011_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1011 idr_Prelude.Show.showLitChar:asciiTab:1012_343)
  idr_Prelude.Show.showLitChar:asciiTab:1011_344 <- store idr_Prelude.Show.showLitChar:asciiTab:1011_val
  idr_Prelude.Show.showLitChar:asciiTab:1010_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:1010 idr_Prelude.Show.showLitChar:asciiTab:1011_344)
  idr_Prelude.Show.showLitChar:asciiTab:1010_345 <- store idr_Prelude.Show.showLitChar:asciiTab:1010_val
  idr_Prelude.Show.showLitChar:asciiTab:109_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:109 idr_Prelude.Show.showLitChar:asciiTab:1010_345)
  idr_Prelude.Show.showLitChar:asciiTab:109_346 <- store idr_Prelude.Show.showLitChar:asciiTab:109_val
  idr_Prelude.Show.showLitChar:asciiTab:108_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:108 idr_Prelude.Show.showLitChar:asciiTab:109_346)
  idr_Prelude.Show.showLitChar:asciiTab:108_347 <- store idr_Prelude.Show.showLitChar:asciiTab:108_val
  idr_Prelude.Show.showLitChar:asciiTab:107_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:107 idr_Prelude.Show.showLitChar:asciiTab:108_347)
  idr_Prelude.Show.showLitChar:asciiTab:107_348 <- store idr_Prelude.Show.showLitChar:asciiTab:107_val
  idr_Prelude.Show.showLitChar:asciiTab:106_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:106 idr_Prelude.Show.showLitChar:asciiTab:107_348)
  idr_Prelude.Show.showLitChar:asciiTab:106_349 <- store idr_Prelude.Show.showLitChar:asciiTab:106_val
  idr_Prelude.Show.showLitChar:asciiTab:105_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:105 idr_Prelude.Show.showLitChar:asciiTab:106_349)
  idr_Prelude.Show.showLitChar:asciiTab:105_350 <- store idr_Prelude.Show.showLitChar:asciiTab:105_val
  idr_Prelude.Show.showLitChar:asciiTab:104_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:104 idr_Prelude.Show.showLitChar:asciiTab:105_350)
  idr_Prelude.Show.showLitChar:asciiTab:104_351 <- store idr_Prelude.Show.showLitChar:asciiTab:104_val
  idr_Prelude.Show.showLitChar:asciiTab:103_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:103 idr_Prelude.Show.showLitChar:asciiTab:104_351)
  idr_Prelude.Show.showLitChar:asciiTab:103_352 <- store idr_Prelude.Show.showLitChar:asciiTab:103_val
  idr_Prelude.Show.showLitChar:asciiTab:102_val <- pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:102 idr_Prelude.Show.showLitChar:asciiTab:103_352)
  idr_Prelude.Show.showLitChar:asciiTab:102_353 <- store idr_Prelude.Show.showLitChar:asciiTab:102_val
  pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:101 idr_Prelude.Show.showLitChar:asciiTab:102_353) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:asciiTab:101 idr_Prelude.Show.showLitChar:asciiTab:102_353)

idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:101 idr_Prelude.Show.showLitChar:getAt:102 =
  idr_Prelude.Show.showLitChar:getAt:102_val <- fetch idr_Prelude.Show.showLitChar:getAt:102
  case idr_Prelude.Show.showLitChar:getAt:102_val of
    (Cidr_Prelude.List.:: idr_Prelude.Show.showLitChar:getAt:103 idr_Prelude.Show.showLitChar:getAt:104) ->
      idr_Prelude.Show.showLitChar:getAt:101_val <- fetch idr_Prelude.Show.showLitChar:getAt:101
      case idr_Prelude.Show.showLitChar:getAt:101_val of
        (CGrInt idr_Prelude.Show.showLitChar:getAt:10_cpat_LInt64_0) ->
          case idr_Prelude.Show.showLitChar:getAt:10_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar:getAt:103) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Just idr_Prelude.Show.showLitChar:getAt:103)
            #default ->
              idr_Prelude.Show.showLitChar:getAt:105_val_354 <- pure (CGrInt 1)
              idr_Prelude.Show.showLitChar:getAt:105 <- store idr_Prelude.Show.showLitChar:getAt:105_val_354
              idr_Prelude.Show.showLitChar:getAt:105_val <- idris_int_sub idr_Prelude.Show.showLitChar:getAt:101 idr_Prelude.Show.showLitChar:getAt:105
              idr_Prelude.Show.showLitChar:getAt:105_355 <- store idr_Prelude.Show.showLitChar:getAt:105_val
              idr_Prelude.Show.showLitChar:getAt:106_val <- pure (CErased)
              idr_Prelude.Show.showLitChar:getAt:106 <- store idr_Prelude.Show.showLitChar:getAt:106_val
              idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:105_355 idr_Prelude.Show.showLitChar:getAt:104
        #default ->
          idr_Prelude.Show.showLitChar:getAt:105_val_357 <- pure (CGrInt 1)
          idr_Prelude.Show.showLitChar:getAt:105_358 <- store idr_Prelude.Show.showLitChar:getAt:105_val_357
          idr_Prelude.Show.showLitChar:getAt:105_val_356 <- idris_int_sub idr_Prelude.Show.showLitChar:getAt:101 idr_Prelude.Show.showLitChar:getAt:105_358
          idr_Prelude.Show.showLitChar:getAt:105_359 <- store idr_Prelude.Show.showLitChar:getAt:105_val_356
          idr_Prelude.Show.showLitChar:getAt:106_val_360 <- pure (CErased)
          idr_Prelude.Show.showLitChar:getAt:106_361 <- store idr_Prelude.Show.showLitChar:getAt:106_val_360
          idr_Prelude.Show.showLitChar:getAt:10 idr_Prelude.Show.showLitChar:getAt:105_359 idr_Prelude.Show.showLitChar:getAt:104
    (Cidr_Prelude.List.Nil) ->
      pure (Cidr_Prelude.Maybe.Nothing) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Maybe.Nothing)

idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_361 =
  idr__Prelude.Strings.unpack_with_361_val <- fetch idr__Prelude.Strings.unpack_with_361
  case idr__Prelude.Strings.unpack_with_361_val of
    (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_363) ->
      idr__Prelude.Strings.unpack_with_364_val_362 <- pure (CErased)
      idr__Prelude.Strings.unpack_with_364 <- store idr__Prelude.Strings.unpack_with_364_val_362
      idr__Prelude.Strings.unpack_with_365_val_366 <- pure (CGrString #"")
      idr__Prelude.Strings.unpack_with_365 <- store idr__Prelude.Strings.unpack_with_365_val_366
      idr__Prelude.Strings.unpack_with_365_val_365 <- idris_str_eq idr__Prelude.Strings.unpack_with_363 idr__Prelude.Strings.unpack_with_365
      idr__Prelude.Strings.unpack_with_365_367 <- store idr__Prelude.Strings.unpack_with_365_val_365
      idr__Prelude.Strings.unpack_with_365_val_368 <- fetch idr__Prelude.Strings.unpack_with_365_367
      idr__Prelude.Strings.unpack_with_365_val_364 <- case idr__Prelude.Strings.unpack_with_365_val_368 of
        (CGrInt idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0) ->
          case idr__Prelude.Strings.unpack_with_36_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr__Prelude.Strings.unpack_with_365_369 <- store idr__Prelude.Strings.unpack_with_365_val_364
      idr__Prelude.Strings.unpack_with_366_val <- pure (Cidr_Prelude.Bool.True)
      idr__Prelude.Strings.unpack_with_366 <- store idr__Prelude.Strings.unpack_with_366_val
      idr__Prelude.Strings.unpack_with_365_val_363 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr__Prelude.Strings.unpack_with_365_369 idr__Prelude.Strings.unpack_with_366
      idr__Prelude.Strings.unpack_with_365_370 <- store idr__Prelude.Strings.unpack_with_365_val_363
      idr__Prelude.Strings.unpack_with_365_val_371 <- fetch idr__Prelude.Strings.unpack_with_365_370
      idr__Prelude.Strings.unpack_with_365_val <- case idr__Prelude.Strings.unpack_with_365_val_371 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Strings.StrNil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrNil)
        (Cidr_Prelude.Basics.Yes) ->
          idr__Prelude.Strings.unpack_with_366_val_372 <- idris_str_head idr__Prelude.Strings.unpack_with_363
          idr__Prelude.Strings.unpack_with_366_373 <- store idr__Prelude.Strings.unpack_with_366_val_372
          idr__Prelude.Strings.unpack_with_367_val <- idris_str_tail idr__Prelude.Strings.unpack_with_363
          idr__Prelude.Strings.unpack_with_367 <- store idr__Prelude.Strings.unpack_with_367_val
          pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_373 idr__Prelude.Strings.unpack_with_367) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Strings.StrCons idr__Prelude.Strings.unpack_with_366_373 idr__Prelude.Strings.unpack_with_367)
      idr__Prelude.Strings.unpack_with_365_374 <- store idr__Prelude.Strings.unpack_with_365_val
      idr__Prelude.Strings.unpack_with_364_val <- idr__Prelude.Strings.unpack_with_36 idr__Prelude.Strings.unpack_with_365_374
      idr__Prelude.Strings.unpack_with_364_375 <- store idr__Prelude.Strings.unpack_with_364_val
      pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_375) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.:: idr__Prelude.Strings.unpack_with_362 idr__Prelude.Strings.unpack_with_364_375)
    (Cidr_Prelude.Strings.StrNil) ->
      pure (Cidr_Prelude.List.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.List.Nil)
