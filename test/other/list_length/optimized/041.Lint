grinMain =
  idr_Main.main5.0.48.0.arity.1 <- pure 0
  idr_Main.main6.0.48.0.arity.1 <- pure 100
  idr_Main.main5_val.0 <- idr_Main.upto idr_Main.main5.0.48.0.arity.1 idr_Main.main6.0.48.0.arity.1
  idr_Main.main5_9.0 <- store idr_Main.main5_val.0
  unboxed.CGrInt.1.0 <- idr_Main.length.unboxed idr_Main.main5_9.0
  idr_Main.main3_val.0 <- pure (CGrInt unboxed.CGrInt.1.0)
  idris_int_str1_0.0.0 <- pure unboxed.CGrInt.1.0
  idris_int_str2.0.0 <- _prim_int_str unboxed.CGrInt.1.0
  idr_Prelude.Show.primNumShow6.0.40.3.arity.1.0 <- pure 5
  idris_int_eq2.0 <- _prim_int_eq idr_Main.main5.0.48.0.arity.1 idr_Prelude.Show.primNumShow6.0.40.3.arity.1.0
  ccp.0.0 <- case idris_int_eq2.0 of
    #False ->
      pure idr_Main.main5.0.48.0.arity.1
    #True ->
      pure 1
  idr_Prelude.Show.primNumShow5_val_12.0.0 <- case ccp.0.0 of
    0 ->
      idris_int_lt2.0 <- _prim_int_lt idr_Main.main5.0.48.0.arity.1 idr_Prelude.Show.primNumShow6.0.40.3.arity.1.0
      ccp.1.0 <- case idris_int_lt2.0 of
        #False ->
          pure ccp.0.0
        #True ->
          pure 1
      case ccp.1.0 of
        0 ->
          pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
        #default ->
          pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
    #default ->
      pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
  idr_Prelude.Show.primNumShow5_val_11.0.0 <- case idr_Prelude.Show.primNumShow5_val_12.0.0 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idris_int_eq2.1 <- pure idris_int_eq2.0
      ccp.0.1 <- case idris_int_eq2.0 of
        #False ->
          pure idr_Main.main5.0.48.0.arity.1
        #True ->
          pure 1
      case ccp.0.1 of
        0 ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_val.0.0 <- case idr_Prelude.Show.primNumShow5_val_11.0.0 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_28.32.2.arity.1.0.0 <- pure #""
      idris_str_eq3.0 <- _prim_string_eq idris_int_str2.0.0 idr_Prelude.Show.primNumShow6_28.32.2.arity.1.0.0
      ccp.2.0 <- case idris_str_eq3.0 of
        #False ->
          pure idr_Main.main5.0.48.0.arity.1
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow6_val_25.0.0 <- case ccp.2.0 of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" <- pure (Cidr_Prelude.Bool.True)
      case idr_Prelude.Show.primNumShow6_val_25.0.0 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idris_str_head2.0.0 <- _prim_string_head idris_int_str2.0.0
          idr_Prelude.Show.primNumShow8.32.4.arity.1.0.0.0 <- pure 45
          idris_int_eq2.2.0 <- _prim_int_eq idris_str_head2.0.0 idr_Prelude.Show.primNumShow8.32.4.arity.1.0.0.0
          ccp.0.2.0 <- case idris_int_eq2.2.0 of
            #False ->
              pure idr_Main.main5.0.48.0.arity.1
            #True ->
              pure 1
          case ccp.0.2.0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
  unboxed.CGrString.1.0 <- case idr_Prelude.Show.primNumShow5_val.0.0 of
    (Cidr_Prelude.Bool.False) ->
      pure idris_int_str2.0.0
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow7_49.32.5.arity.1.0.0 <- pure #")"
      idris_str_concat3.0 <- _prim_string_concat idris_int_str2.0.0 idr_Prelude.Show.primNumShow7_49.32.5.arity.1.0.0
      idr_Prelude.Show.primNumShow6_46.0.40.7.arity.1.0 <- pure #"("
      idris_str_concat3.1 <- _prim_string_concat idr_Prelude.Show.primNumShow6_46.0.40.7.arity.1.0 idris_str_concat3.0
      pure idris_str_concat3.1
  idr_Prelude.Interactive.printLn'6.32.7.arity.1.0 <- pure #"\n"
  idris_str_concat3.2 <- _prim_string_concat unboxed.CGrString.1.0 idr_Prelude.Interactive.printLn'6.32.7.arity.1.0
  _prim_string_print idris_str_concat3.2

idr_Main.length.unboxed idr_Main.length2 =
  idr_Main.length2_val <- fetch idr_Main.length2
  case idr_Main.length2_val of
    (Cidr_Main.Cons idr_Main.length3) ->
      unboxed.CGrInt.0 <- idr_Main.length.unboxed idr_Main.length3
      idr_Main.length5_6.32.0.arity.1 <- pure 1
      idris_int_add2.0 <- _prim_int_add unboxed.CGrInt.0 idr_Main.length5_6.32.0.arity.1
      pure idris_int_add2.0
    (Cidr_Main.Nil) ->
      pure 0

idr_Main.upto idr_Main.upto0.48.arity.1 idr_Main.upto1.48.arity.1 =
  idr_Main.upto2_val_57 <- "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0" idr_Main.upto0.48.arity.1 idr_Main.upto1.48.arity.1
  idr_Main.upto2_val <- case idr_Main.upto2_val_57 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0" idr_Main.upto0.48.arity.1 idr_Main.upto1.48.arity.1
  case idr_Main.upto2_val of
    (Cidr_Prelude.Bool.False) ->
      idr_Main.upto3.32.9.arity.1 <- pure 1
      idris_int_add2.1 <- _prim_int_add idr_Main.upto0.48.arity.1 idr_Main.upto3.32.9.arity.1
      idr_Main.upto3_val <- idr_Main.upto idris_int_add2.1 idr_Main.upto1.48.arity.1
      idr_Main.upto3_64 <- store idr_Main.upto3_val
      pure (Cidr_Main.Cons idr_Main.upto3_64) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Cons idr_Main.upto3_64)
    (Cidr_Prelude.Bool.True) ->
      pure (Cidr_Main.Nil) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Main.Nil)

"idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00.40.arity.1" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:01.40.arity.1" =
  case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:01.40.arity.1" of
    0 ->
      case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00.40.arity.1" of
        0 ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    #default ->
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02.32.11.arity.1" <- pure 1
      idris_int_sub2.0 <- _prim_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:01.40.arity.1" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02.32.11.arity.1"
      case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00.40.arity.1" of
        0 ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        #default ->
          idris_int_sub2.1 <- _prim_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:00.40.arity.1" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:02.32.11.arity.1"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Eq$Nat:!==:0" idris_int_sub2.1 idris_int_sub2.0

"idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00.40.arity.1" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:01.40.arity.1" =
  case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:01.40.arity.1" of
    0 ->
      case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00.40.arity.1" of
        0 ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
        #default ->
          pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
    #default ->
      "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_105.32.16.arity.1" <- pure 1
      idris_int_sub2.3 <- _prim_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:01.40.arity.1" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_105.32.16.arity.1"
      case "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00.40.arity.1" of
        0 ->
          pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          idris_int_sub2.4 <- _prim_int_sub "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:00.40.arity.1" "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:02_105.32.16.arity.1"
          "idr_Prelude.Interfaces.Prelude.Nat.@Prelude.Interfaces.Ord$Nat:!compare:0" idris_int_sub2.4 idris_int_sub2.3
