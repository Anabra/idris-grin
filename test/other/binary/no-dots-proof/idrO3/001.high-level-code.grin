primop effectful
  _prim_int_print :: T_Int64 -> T_Unit
  _prim_string_print :: T_String -> T_Unit
  _prim_read_string :: T_String
  _prim_usleep :: T_Int64 -> T_Unit
  _prim_error :: T_String -> T_Unit
  _prim_ffi_file_eof :: T_Int64 -> T_Int64
  
primop pure
  _prim_string_concat :: T_String -> T_String -> T_String
  _prim_string_reverse :: T_String -> T_String
  _prim_string_lt :: T_String -> T_String -> T_Bool
  _prim_string_eq :: T_String -> T_String -> T_Bool
  _prim_string_head :: T_String -> T_Int64
  _prim_string_tail :: T_String -> T_String
  _prim_string_cons :: T_Int64 -> T_String -> T_String
  _prim_string_len :: T_String -> T_Int64
  _prim_int_str :: T_Int64 -> T_String
  _prim_str_int :: T_String -> T_Int64
  _prim_int_float :: T_Int64 -> T_Float
  _prim_float_string :: T_Float -> T_String
  _prim_char_int :: T_Char -> T_Int64
  _prim_int_add :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_sub :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_mul :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_div :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_eq :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ne :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_gt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ge :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_lt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_le :: T_Int64 -> T_Int64 -> T_Bool
  _prim_word_add :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_sub :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_mul :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_div :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_eq :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ne :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_gt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ge :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_lt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_le :: T_Word64 -> T_Word64 -> T_Bool
  _prim_float_add :: T_Float -> T_Float -> T_Float
  _prim_float_sub :: T_Float -> T_Float -> T_Float
  _prim_float_mul :: T_Float -> T_Float -> T_Float
  _prim_float_div :: T_Float -> T_Float -> T_Float
  _prim_float_eq :: T_Float -> T_Float -> T_Bool
  _prim_float_ne :: T_Float -> T_Float -> T_Bool
  _prim_float_gt :: T_Float -> T_Float -> T_Bool
  _prim_float_ge :: T_Float -> T_Float -> T_Bool
  _prim_float_lt :: T_Float -> T_Float -> T_Bool
  _prim_float_le :: T_Float -> T_Float -> T_Bool
  _prim_bool_eq :: T_Bool -> T_Bool -> T_Bool
  _prim_bool_ne :: T_Bool -> T_Bool -> T_Bool
  
idris_int_eq idris_int_eq0 idris_int_eq1 =
  (CGrInt idris_int_eq0_1) <- fetch idris_int_eq0
  (CGrInt idris_int_eq1_1) <- fetch idris_int_eq1
  idris_int_eq2 <- _prim_int_eq $ idris_int_eq0_1 idris_int_eq1_1
  case idris_int_eq2 of
    #False ->
      pure (CGrInt 0)
    #True ->
      pure (CGrInt 1)

idris_int_lt idris_int_lt0 idris_int_lt1 =
  (CGrInt idris_int_lt0_1) <- fetch idris_int_lt0
  (CGrInt idris_int_lt1_1) <- fetch idris_int_lt1
  idris_int_lt2 <- _prim_int_lt $ idris_int_lt0_1 idris_int_lt1_1
  case idris_int_lt2 of
    #False ->
      pure (CGrInt 0)
    #True ->
      pure (CGrInt 1)

idris_int_add idris_int_add0 idris_int_add1 =
  (CGrInt idris_int_add0_1) <- fetch idris_int_add0
  (CGrInt idris_int_add1_1) <- fetch idris_int_add1
  idris_int_add2 <- _prim_int_add $ idris_int_add0_1 idris_int_add1_1
  pure (CGrInt idris_int_add2)

idris_int_sub idris_int_sub0 idris_int_sub1 =
  (CGrInt idris_int_sub0_1) <- fetch idris_int_sub0
  (CGrInt idris_int_sub1_1) <- fetch idris_int_sub1
  idris_int_sub2 <- _prim_int_sub $ idris_int_sub0_1 idris_int_sub1_1
  pure (CGrInt idris_int_sub2)

idris_int_mul idris_int_mul0 idris_int_mul1 =
  (CGrInt idris_int_mul0_1) <- fetch idris_int_mul0
  (CGrInt idris_int_mul1_1) <- fetch idris_int_mul1
  idris_int_mul2 <- _prim_int_mul $ idris_int_mul0_1 idris_int_mul1_1
  pure (CGrInt idris_int_mul2)

idris_write_str idris_write_str1 idris_write_str2 =
  (CGrString idris_write_str2_0) <- fetch idris_write_str2
  _prim_string_print $ idris_write_str2_0
  pure (CUnit)

idris_str_concat idris_str_concat1 idris_str_concat2 =
  (CGrString idris_str_concat1_0) <- fetch idris_str_concat1
  (CGrString idris_str_concat2_0) <- fetch idris_str_concat2
  idris_str_concat3 <- _prim_string_concat $ idris_str_concat1_0 idris_str_concat2_0
  pure (CGrString idris_str_concat3)

idris_str_eq idris_str_eq1 idris_str_eq2 =
  (CGrString idris_str_eq1_0) <- fetch idris_str_eq1
  (CGrString idris_str_eq2_0) <- fetch idris_str_eq2
  idris_str_eq3 <- _prim_string_eq $ idris_str_eq1_0 idris_str_eq2_0
  case idris_str_eq3 of
    #False ->
      pure (CGrInt 0)
    #True ->
      pure (CGrInt 1)

idris_str_head idris_str_head1 =
  (CGrString idris_str_head1_0) <- fetch idris_str_head1
  idris_str_head2 <- _prim_string_head $ idris_str_head1_0
  pure (CGrInt idris_str_head2)

idris_int_str idris_int_str1 =
  (CGrInt idris_int_str1_0) <- fetch idris_int_str1
  idris_int_str2 <- _prim_int_str $ idris_int_str1_0
  pure (CGrString idris_int_str2)

grinMain =
  r <- "idr_{runMain_0}" $
  pure ()

idr_Main.main =
  idr_Main.main0_val <- pure (CErased)
  idr_Main.main0 <- store idr_Main.main0_val
  idr_Main.main1_val <- pure (CErased)
  idr_Main.main1 <- store idr_Main.main1_val
  idr_Main.main2_val <- pure (C"idr_{U_Main.{main_0}_1}")
  idr_Main.main2 <- store idr_Main.main2_val
  idr_Main.main3_val_9 <- pure (CGrInt 14)
  idr_Main.main3 <- store idr_Main.main3_val_9
  idr_Main.main3_val_8 <- idr_Main.parity $ idr_Main.main3
  idr_Main.main3_10 <- store idr_Main.main3_val_8
  idr_Main.main3_val_11 <- fetch idr_Main.main3_10
  idr_Main.main3_val <- case idr_Main.main3_val_11 of
    (Cidr_Main.Even idr_Main.main4) ->
      idr_Main.main5_val_12 <- pure (CGrInt 2)
      idr_Main.main5 <- store idr_Main.main5_val_12
      idr_Main.main5_val <- idris_int_mul $ idr_Main.main5 idr_Main.main4
      idr_Main.main5_13 <- store idr_Main.main5_val
      idr_Main.main6_val <- pure (CGrInt 1)
      idr_Main.main6 <- store idr_Main.main6_val
      idris_int_add $ idr_Main.main5_13 idr_Main.main6
    (Cidr_Main.Odd idr_Main.main4_14) ->
      idr_Main.main5_val_15 <- pure (CGrInt 2)
      idr_Main.main5_16 <- store idr_Main.main5_val_15
      idr_Main.main6_val_18 <- pure (CGrInt 1)
      idr_Main.main6_19 <- store idr_Main.main6_val_18
      idr_Main.main6_val_17 <- idris_int_add $ idr_Main.main4_14 idr_Main.main6_19
      idr_Main.main6_20 <- store idr_Main.main6_val_17
      idris_int_mul $ idr_Main.main5_16 idr_Main.main6_20
  idr_Main.main3_21 <- store idr_Main.main3_val
  pure (C"idr_{U_Prelude.Interactive.printLn'_1}" idr_Main.main0 idr_Main.main1 idr_Main.main2 idr_Main.main3_21)

idr_Main.parity idr_Main.parity0 =
  idr_Main.parity0_val <- fetch idr_Main.parity0
  case idr_Main.parity0_val of
    (CGrInt idr_Main.parity_cpat_LInt64_0) ->
      case idr_Main.parity_cpat_LInt64_0 of
        0 ->
          idr_Main.parity1_val <- pure (CGrInt 0)
          idr_Main.parity1 <- store idr_Main.parity1_val
          pure (Cidr_Main.Even idr_Main.parity1)
        #default ->
          idr_Main.parity1_val_23 <- pure (CGrInt 1)
          idr_Main.parity1_24 <- store idr_Main.parity1_val_23
          idr_Main.parity1_val_22 <- idris_int_sub $ idr_Main.parity0 idr_Main.parity1_24
          idr_Main.parity1_25 <- store idr_Main.parity1_val_22
          idr_Main.parity1_val_26 <- fetch idr_Main.parity1_25
          case idr_Main.parity1_val_26 of
            (CGrInt idr_Main.parity_cpat_LInt64_0_27) ->
              case idr_Main.parity_cpat_LInt64_0_27 of
                0 ->
                  idr_Main.parity2_val <- pure (CGrInt 0)
                  idr_Main.parity2 <- store idr_Main.parity2_val
                  pure (Cidr_Main.Odd idr_Main.parity2)
                #default ->
                  idr_Main.parity2_val_29 <- pure (CGrInt 1)
                  idr_Main.parity2_30 <- store idr_Main.parity2_val_29
                  idr_Main.parity2_val_28 <- idris_int_sub $ idr_Main.parity1_25 idr_Main.parity2_30
                  idr_Main.parity2_31 <- store idr_Main.parity2_val_28
                  idr_Main.parity3_val <- idr_Main.parity $ idr_Main.parity2_31
                  idr_Main.parity3 <- store idr_Main.parity3_val
                  idr_Main.parity3_val_32 <- fetch idr_Main.parity3
                  case idr_Main.parity3_val_32 of
                    (Cidr_Main.Even idr_Main.parity4) ->
                      idr_Main.parity5_val_33 <- pure (CGrInt 1)
                      idr_Main.parity5 <- store idr_Main.parity5_val_33
                      idr_Main.parity5_val <- idris_int_add $ idr_Main.parity4 idr_Main.parity5
                      idr_Main.parity5_34 <- store idr_Main.parity5_val
                      pure (Cidr_Main.Even idr_Main.parity5_34)
                    (Cidr_Main.Odd idr_Main.parity4_35) ->
                      idr_Main.parity5_val_37 <- pure (CGrInt 1)
                      idr_Main.parity5_38 <- store idr_Main.parity5_val_37
                      idr_Main.parity5_val_36 <- idris_int_add $ idr_Main.parity4_35 idr_Main.parity5_38
                      idr_Main.parity5_39 <- store idr_Main.parity5_val_36
                      pure (Cidr_Main.Odd idr_Main.parity5_39)
            #default ->
              idr_Main.parity2_val_41 <- pure (CGrInt 1)
              idr_Main.parity2_42 <- store idr_Main.parity2_val_41
              idr_Main.parity2_val_40 <- idris_int_sub $ idr_Main.parity1_25 idr_Main.parity2_42
              idr_Main.parity2_43 <- store idr_Main.parity2_val_40
              idr_Main.parity3_val_44 <- idr_Main.parity $ idr_Main.parity2_43
              idr_Main.parity3_45 <- store idr_Main.parity3_val_44
              idr_Main.parity3_val_46 <- fetch idr_Main.parity3_45
              case idr_Main.parity3_val_46 of
                (Cidr_Main.Even idr_Main.parity4_47) ->
                  idr_Main.parity5_val_49 <- pure (CGrInt 1)
                  idr_Main.parity5_50 <- store idr_Main.parity5_val_49
                  idr_Main.parity5_val_48 <- idris_int_add $ idr_Main.parity4_47 idr_Main.parity5_50
                  idr_Main.parity5_51 <- store idr_Main.parity5_val_48
                  pure (Cidr_Main.Even idr_Main.parity5_51)
                (Cidr_Main.Odd idr_Main.parity4_52) ->
                  idr_Main.parity5_val_54 <- pure (CGrInt 1)
                  idr_Main.parity5_55 <- store idr_Main.parity5_val_54
                  idr_Main.parity5_val_53 <- idris_int_add $ idr_Main.parity4_52 idr_Main.parity5_55
                  idr_Main.parity5_56 <- store idr_Main.parity5_val_53
                  pure (Cidr_Main.Odd idr_Main.parity5_56)
    #default ->
      idr_Main.parity1_val_58 <- pure (CGrInt 1)
      idr_Main.parity1_59 <- store idr_Main.parity1_val_58
      idr_Main.parity1_val_57 <- idris_int_sub $ idr_Main.parity0 idr_Main.parity1_59
      idr_Main.parity1_60 <- store idr_Main.parity1_val_57
      idr_Main.parity1_val_61 <- fetch idr_Main.parity1_60
      case idr_Main.parity1_val_61 of
        (CGrInt idr_Main.parity_cpat_LInt64_0_62) ->
          case idr_Main.parity_cpat_LInt64_0_62 of
            0 ->
              idr_Main.parity2_val_63 <- pure (CGrInt 0)
              idr_Main.parity2_64 <- store idr_Main.parity2_val_63
              pure (Cidr_Main.Odd idr_Main.parity2_64)
            #default ->
              idr_Main.parity2_val_66 <- pure (CGrInt 1)
              idr_Main.parity2_67 <- store idr_Main.parity2_val_66
              idr_Main.parity2_val_65 <- idris_int_sub $ idr_Main.parity1_60 idr_Main.parity2_67
              idr_Main.parity2_68 <- store idr_Main.parity2_val_65
              idr_Main.parity3_val_69 <- idr_Main.parity $ idr_Main.parity2_68
              idr_Main.parity3_70 <- store idr_Main.parity3_val_69
              idr_Main.parity3_val_71 <- fetch idr_Main.parity3_70
              case idr_Main.parity3_val_71 of
                (Cidr_Main.Even idr_Main.parity4_72) ->
                  idr_Main.parity5_val_74 <- pure (CGrInt 1)
                  idr_Main.parity5_75 <- store idr_Main.parity5_val_74
                  idr_Main.parity5_val_73 <- idris_int_add $ idr_Main.parity4_72 idr_Main.parity5_75
                  idr_Main.parity5_76 <- store idr_Main.parity5_val_73
                  pure (Cidr_Main.Even idr_Main.parity5_76)
                (Cidr_Main.Odd idr_Main.parity4_77) ->
                  idr_Main.parity5_val_79 <- pure (CGrInt 1)
                  idr_Main.parity5_80 <- store idr_Main.parity5_val_79
                  idr_Main.parity5_val_78 <- idris_int_add $ idr_Main.parity4_77 idr_Main.parity5_80
                  idr_Main.parity5_81 <- store idr_Main.parity5_val_78
                  pure (Cidr_Main.Odd idr_Main.parity5_81)
        #default ->
          idr_Main.parity2_val_83 <- pure (CGrInt 1)
          idr_Main.parity2_84 <- store idr_Main.parity2_val_83
          idr_Main.parity2_val_82 <- idris_int_sub $ idr_Main.parity1_60 idr_Main.parity2_84
          idr_Main.parity2_85 <- store idr_Main.parity2_val_82
          idr_Main.parity3_val_86 <- idr_Main.parity $ idr_Main.parity2_85
          idr_Main.parity3_87 <- store idr_Main.parity3_val_86
          idr_Main.parity3_val_88 <- fetch idr_Main.parity3_87
          case idr_Main.parity3_val_88 of
            (Cidr_Main.Even idr_Main.parity4_89) ->
              idr_Main.parity5_val_91 <- pure (CGrInt 1)
              idr_Main.parity5_92 <- store idr_Main.parity5_val_91
              idr_Main.parity5_val_90 <- idris_int_add $ idr_Main.parity4_89 idr_Main.parity5_92
              idr_Main.parity5_93 <- store idr_Main.parity5_val_90
              pure (Cidr_Main.Even idr_Main.parity5_93)
            (Cidr_Main.Odd idr_Main.parity4_94) ->
              idr_Main.parity5_val_96 <- pure (CGrInt 1)
              idr_Main.parity5_97 <- store idr_Main.parity5_val_96
              idr_Main.parity5_val_95 <- idris_int_add $ idr_Main.parity4_94 idr_Main.parity5_97
              idr_Main.parity5_98 <- store idr_Main.parity5_val_95
              pure (Cidr_Main.Odd idr_Main.parity5_98)

idr_Prelude.Show.primNumShow idr_Prelude.Show.primNumShow0 idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow2 idr_Prelude.Show.primNumShow3 =
  idr_Prelude.Show.primNumShow4_val <- "idr_{APPLY_0}" $ idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- fetch idr_Prelude.Show.primNumShow2
  idr_Prelude.Show.primNumShow5_val_101 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.App) ->
      pure (CGrInt 6)
    (Cidr_Prelude.Show.Backtick) ->
      pure (CGrInt 3)
    (Cidr_Prelude.Show.Dollar) ->
      pure (CGrInt 2)
    (Cidr_Prelude.Show.Eq) ->
      pure (CGrInt 1)
    (Cidr_Prelude.Show.Open) ->
      pure (CGrInt 0)
    (Cidr_Prelude.Show.PrefixMinus) ->
      pure (CGrInt 5)
    (Cidr_Prelude.Show.User) ->
      pure (CGrInt 4)
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_101
  idr_Prelude.Show.primNumShow6_val <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6 <- store idr_Prelude.Show.primNumShow6_val
  idr_Prelude.Show.primNumShow5_val_100 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" $ idr_Prelude.Show.primNumShow5 idr_Prelude.Show.primNumShow6
  idr_Prelude.Show.primNumShow5_102 <- store idr_Prelude.Show.primNumShow5_val_100
  idr_Prelude.Show.primNumShow5_val_103 <- fetch idr_Prelude.Show.primNumShow5_102
  idr_Prelude.Show.primNumShow5_val_99 <- case idr_Prelude.Show.primNumShow5_val_103 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Show.primNumShow2_val_106 <- fetch idr_Prelude.Show.primNumShow2
      idr_Prelude.Show.primNumShow6_val_105 <- case idr_Prelude.Show.primNumShow2_val_106 of
        (Cidr_Prelude.Show.App) ->
          pure (CGrInt 6)
        (Cidr_Prelude.Show.Backtick) ->
          pure (CGrInt 3)
        (Cidr_Prelude.Show.Dollar) ->
          pure (CGrInt 2)
        (Cidr_Prelude.Show.Eq) ->
          pure (CGrInt 1)
        (Cidr_Prelude.Show.Open) ->
          pure (CGrInt 0)
        (Cidr_Prelude.Show.PrefixMinus) ->
          pure (CGrInt 5)
        (Cidr_Prelude.Show.User) ->
          pure (CGrInt 4)
      idr_Prelude.Show.primNumShow6_107 <- store idr_Prelude.Show.primNumShow6_val_105
      idr_Prelude.Show.primNumShow7_val <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7 <- store idr_Prelude.Show.primNumShow7_val
      idr_Prelude.Show.primNumShow6_val_104 <- idris_int_eq $ idr_Prelude.Show.primNumShow6_107 idr_Prelude.Show.primNumShow7
      idr_Prelude.Show.primNumShow6_108 <- store idr_Prelude.Show.primNumShow6_val_104
      idr_Prelude.Show.primNumShow6_val_109 <- fetch idr_Prelude.Show.primNumShow6_108
      case idr_Prelude.Show.primNumShow6_val_109 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True)
        #default ->
          pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_110 <- store idr_Prelude.Show.primNumShow5_val_99
  idr_Prelude.Show.primNumShow5_val_111 <- fetch idr_Prelude.Show.primNumShow5_110
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_111 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_115 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_116 <- store idr_Prelude.Show.primNumShow6_val_115
      idr_Prelude.Show.primNumShow6_val_114 <- idris_str_eq $ idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow6_116
      idr_Prelude.Show.primNumShow6_117 <- store idr_Prelude.Show.primNumShow6_val_114
      idr_Prelude.Show.primNumShow6_val_118 <- fetch idr_Prelude.Show.primNumShow6_117
      idr_Prelude.Show.primNumShow6_val_113 <- case idr_Prelude.Show.primNumShow6_val_118 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_119) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_119 of
            0 ->
              pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False)
        #default ->
          pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Show.primNumShow6_120 <- store idr_Prelude.Show.primNumShow6_val_113
      idr_Prelude.Show.primNumShow7_val_121 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_122 <- store idr_Prelude.Show.primNumShow7_val_121
      idr_Prelude.Show.primNumShow6_val_112 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" $ idr_Prelude.Show.primNumShow6_120 idr_Prelude.Show.primNumShow7_122
      idr_Prelude.Show.primNumShow6_123 <- store idr_Prelude.Show.primNumShow6_val_112
      idr_Prelude.Show.primNumShow6_val_124 <- fetch idr_Prelude.Show.primNumShow6_123
      case idr_Prelude.Show.primNumShow6_val_124 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          idr_Prelude.Show.primNumShow7_val_126 <- idris_str_head $ idr_Prelude.Show.primNumShow4
          idr_Prelude.Show.primNumShow7_127 <- store idr_Prelude.Show.primNumShow7_val_126
          idr_Prelude.Show.primNumShow8_val <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8 <- store idr_Prelude.Show.primNumShow8_val
          idr_Prelude.Show.primNumShow7_val_125 <- idris_int_eq $ idr_Prelude.Show.primNumShow7_127 idr_Prelude.Show.primNumShow8
          idr_Prelude.Show.primNumShow7_128 <- store idr_Prelude.Show.primNumShow7_val_125
          idr_Prelude.Show.primNumShow7_val_129 <- fetch idr_Prelude.Show.primNumShow7_128
          case idr_Prelude.Show.primNumShow7_val_129 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_130) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_130 of
                0 ->
                  pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.True)
  idr_Prelude.Show.primNumShow5_131 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_132 <- fetch idr_Prelude.Show.primNumShow5_131
  case idr_Prelude.Show.primNumShow5_val_132 of
    (Cidr_Prelude.Bool.False) ->
      fetch idr_Prelude.Show.primNumShow4
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_133 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_134 <- store idr_Prelude.Show.primNumShow6_val_133
      idr_Prelude.Show.primNumShow7_val_136 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_137 <- store idr_Prelude.Show.primNumShow7_val_136
      idr_Prelude.Show.primNumShow7_val_135 <- idris_str_concat $ idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow7_137
      idr_Prelude.Show.primNumShow7_138 <- store idr_Prelude.Show.primNumShow7_val_135
      idris_str_concat $ idr_Prelude.Show.primNumShow6_134 idr_Prelude.Show.primNumShow7_138

idr_prim__toStrBigInt idr_prim__toStrBigInt0 =
  idris_int_str $ idr_prim__toStrBigInt0

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'0 idr_Prelude.Interactive.printLn'1 idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 idr_Prelude.Interactive.printLn'4 =
  idr_Prelude.Interactive.printLn'5_val_140 <- "idr_{APPLY_0}" $ idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_140
  idr_Prelude.Interactive.printLn'6_val <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6 <- store idr_Prelude.Interactive.printLn'6_val
  idr_Prelude.Interactive.printLn'5_val_139 <- idris_str_concat $ idr_Prelude.Interactive.printLn'5 idr_Prelude.Interactive.printLn'6
  idr_Prelude.Interactive.printLn'5_141 <- store idr_Prelude.Interactive.printLn'5_val_139
  idr_Prelude.Interactive.printLn'5_val <- idris_write_str $ idr_Prelude.Interactive.printLn'4 idr_Prelude.Interactive.printLn'5_141
  idr_Prelude.Interactive.printLn'5_142 <- store idr_Prelude.Interactive.printLn'5_val
  pure (Cidr_MkUnit)

"idr_{APPLY_0}" "idr_{APPLY_0}0" "idr_{APPLY_0}1" =
  "idr_{APPLY_0}0_val" <- fetch "idr_{APPLY_0}0"
  case "idr_{APPLY_0}0_val" of
    (C"idr_{U_Main.{main_0}_1}") ->
      "idr_Main.{main_0}" $ "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Interactive.printLn'_1}" "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}4" "idr_{APPLY_0}5") ->
      idr_Prelude.Interactive.printLn' $ "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}4" "idr_{APPLY_0}5" "idr_{APPLY_0}1"
    (C"idr_{U_prim__toStrBigInt_1}") ->
      idr_prim__toStrBigInt $ "idr_{APPLY_0}1"
    #default ->
      pure (CErased)

"idr_{EVAL_0}" "idr_{EVAL_0}0" =
  "idr_{EVAL_0}0_val" <- fetch "idr_{EVAL_0}0"
  case "idr_{EVAL_0}0_val" of
    #default ->
      fetch "idr_{EVAL_0}0"

"idr_Main.{main_0}" "idr_Main.{main_0}0" =
  "idr_Main.{main_0}1_val" <- pure (CErased)
  "idr_Main.{main_0}1" <- store "idr_Main.{main_0}1_val"
  "idr_Main.{main_0}2_val" <- pure (C"idr_{U_prim__toStrBigInt_1}")
  "idr_Main.{main_0}2" <- store "idr_Main.{main_0}2_val"
  "idr_Main.{main_0}3_val" <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_0}3" <- store "idr_Main.{main_0}3_val"
  idr_Prelude.Show.primNumShow $ "idr_Main.{main_0}1" "idr_Main.{main_0}2" "idr_Main.{main_0}3" "idr_Main.{main_0}0"

"idr_{runMain_0}" =
  "idr_{runMain_0}0_val_145" <- idr_Main.main $
  "idr_{runMain_0}0" <- store "idr_{runMain_0}0_val_145"
  "idr_{runMain_0}1_val" <- pure (CErased)
  "idr_{runMain_0}1" <- store "idr_{runMain_0}1_val"
  "idr_{runMain_0}0_val" <- "idr_{APPLY_0}" $ "idr_{runMain_0}0" "idr_{runMain_0}1"
  "idr_{runMain_0}0_146" <- store "idr_{runMain_0}0_val"
  "idr_{EVAL_0}" $ "idr_{runMain_0}0_146"

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01"
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" of
    (Cidr_Prelude.Bool.False) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.Yes)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.No)
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_147" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_147" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes)

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val" <- idris_int_eq $ "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_148" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_148" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val" <- idris_int_lt $ "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_149" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_149" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_150") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_150" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ)
    #default ->
      pure (Cidr_Prelude.Interfaces.EQ)
