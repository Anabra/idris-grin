primop effectful
  _prim_int_print :: T_Int64 -> T_Unit
  _prim_string_print :: T_String -> T_Unit
  _prim_read_string :: T_String
  _prim_usleep :: T_Int64 -> T_Unit
  _prim_error :: T_String -> T_Unit
  _prim_ffi_file_eof :: T_Int64 -> T_Int64
  
primop pure
  _prim_string_concat :: T_String -> T_String -> T_String
  _prim_string_reverse :: T_String -> T_String
  _prim_string_lt :: T_String -> T_String -> T_Bool
  _prim_string_eq :: T_String -> T_String -> T_Bool
  _prim_string_head :: T_String -> T_Int64
  _prim_string_tail :: T_String -> T_String
  _prim_string_cons :: T_Int64 -> T_String -> T_String
  _prim_string_len :: T_String -> T_Int64
  _prim_int_str :: T_Int64 -> T_String
  _prim_str_int :: T_String -> T_Int64
  _prim_int_float :: T_Int64 -> T_Float
  _prim_float_string :: T_Float -> T_String
  _prim_char_int :: T_Char -> T_Int64
  _prim_int_add :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_sub :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_mul :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_div :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_eq :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ne :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_gt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ge :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_lt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_le :: T_Int64 -> T_Int64 -> T_Bool
  _prim_word_add :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_sub :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_mul :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_div :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_eq :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ne :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_gt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ge :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_lt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_le :: T_Word64 -> T_Word64 -> T_Bool
  _prim_float_add :: T_Float -> T_Float -> T_Float
  _prim_float_sub :: T_Float -> T_Float -> T_Float
  _prim_float_mul :: T_Float -> T_Float -> T_Float
  _prim_float_div :: T_Float -> T_Float -> T_Float
  _prim_float_eq :: T_Float -> T_Float -> T_Bool
  _prim_float_ne :: T_Float -> T_Float -> T_Bool
  _prim_float_gt :: T_Float -> T_Float -> T_Bool
  _prim_float_ge :: T_Float -> T_Float -> T_Bool
  _prim_float_lt :: T_Float -> T_Float -> T_Bool
  _prim_float_le :: T_Float -> T_Float -> T_Bool
  _prim_bool_eq :: T_Bool -> T_Bool -> T_Bool
  _prim_bool_ne :: T_Bool -> T_Bool -> T_Bool
  
primop effectful
  _prim_int_print :: T_Int64 -> T_Unit
  _prim_string_print :: T_String -> T_Unit
  _prim_read_string :: T_String
  _prim_usleep :: T_Int64 -> T_Unit
  _prim_error :: T_String -> T_Unit
  _prim_ffi_file_eof :: T_Int64 -> T_Int64
  
primop pure
  _prim_string_concat :: T_String -> T_String -> T_String
  _prim_string_reverse :: T_String -> T_String
  _prim_string_lt :: T_String -> T_String -> T_Bool
  _prim_string_eq :: T_String -> T_String -> T_Bool
  _prim_string_head :: T_String -> T_Int64
  _prim_string_tail :: T_String -> T_String
  _prim_string_cons :: T_Int64 -> T_String -> T_String
  _prim_string_len :: T_String -> T_Int64
  _prim_int_str :: T_Int64 -> T_String
  _prim_str_int :: T_String -> T_Int64
  _prim_int_float :: T_Int64 -> T_Float
  _prim_float_string :: T_Float -> T_String
  _prim_char_int :: T_Char -> T_Int64
  _prim_int_add :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_sub :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_mul :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_div :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_eq :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ne :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_gt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ge :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_lt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_le :: T_Int64 -> T_Int64 -> T_Bool
  _prim_word_add :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_sub :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_mul :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_div :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_eq :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ne :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_gt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ge :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_lt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_le :: T_Word64 -> T_Word64 -> T_Bool
  _prim_float_add :: T_Float -> T_Float -> T_Float
  _prim_float_sub :: T_Float -> T_Float -> T_Float
  _prim_float_mul :: T_Float -> T_Float -> T_Float
  _prim_float_div :: T_Float -> T_Float -> T_Float
  _prim_float_eq :: T_Float -> T_Float -> T_Bool
  _prim_float_ne :: T_Float -> T_Float -> T_Bool
  _prim_float_gt :: T_Float -> T_Float -> T_Bool
  _prim_float_ge :: T_Float -> T_Float -> T_Bool
  _prim_float_lt :: T_Float -> T_Float -> T_Bool
  _prim_float_le :: T_Float -> T_Float -> T_Bool
  _prim_bool_eq :: T_Bool -> T_Bool -> T_Bool
  _prim_bool_ne :: T_Bool -> T_Bool -> T_Bool
  
primop effectful
  _prim_int_print :: T_Int64 -> T_Unit
  _prim_string_print :: T_String -> T_Unit
  _prim_read_string :: T_String
  _prim_usleep :: T_Int64 -> T_Unit
  _prim_error :: T_String -> T_Unit
  _prim_ffi_file_eof :: T_Int64 -> T_Int64
  
primop pure
  _prim_string_concat :: T_String -> T_String -> T_String
  _prim_string_reverse :: T_String -> T_String
  _prim_string_lt :: T_String -> T_String -> T_Bool
  _prim_string_eq :: T_String -> T_String -> T_Bool
  _prim_string_head :: T_String -> T_Int64
  _prim_string_tail :: T_String -> T_String
  _prim_string_cons :: T_Int64 -> T_String -> T_String
  _prim_string_len :: T_String -> T_Int64
  _prim_int_str :: T_Int64 -> T_String
  _prim_str_int :: T_String -> T_Int64
  _prim_int_float :: T_Int64 -> T_Float
  _prim_float_string :: T_Float -> T_String
  _prim_char_int :: T_Char -> T_Int64
  _prim_int_add :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_sub :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_mul :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_div :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_eq :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ne :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_gt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ge :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_lt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_le :: T_Int64 -> T_Int64 -> T_Bool
  _prim_word_add :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_sub :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_mul :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_div :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_eq :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ne :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_gt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ge :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_lt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_le :: T_Word64 -> T_Word64 -> T_Bool
  _prim_float_add :: T_Float -> T_Float -> T_Float
  _prim_float_sub :: T_Float -> T_Float -> T_Float
  _prim_float_mul :: T_Float -> T_Float -> T_Float
  _prim_float_div :: T_Float -> T_Float -> T_Float
  _prim_float_eq :: T_Float -> T_Float -> T_Bool
  _prim_float_ne :: T_Float -> T_Float -> T_Bool
  _prim_float_gt :: T_Float -> T_Float -> T_Bool
  _prim_float_ge :: T_Float -> T_Float -> T_Bool
  _prim_float_lt :: T_Float -> T_Float -> T_Bool
  _prim_float_le :: T_Float -> T_Float -> T_Bool
  _prim_bool_eq :: T_Bool -> T_Bool -> T_Bool
  _prim_bool_ne :: T_Bool -> T_Bool -> T_Bool
  
grinMain =
  v.0 <- pure (C"idr_{U_Main.{main_0}_1}")
  idr_Main.main3.0 <- store v.0
  v.1 <- pure (Cidr_Main.N)
  idr_Main.main4.0 <- store v.1
  v.2 <- pure (Cidr_Main.I idr_Main.main4.0)
  idr_Main.main4_8.0 <- store v.2
  v.3 <- pure (Cidr_Main.I idr_Main.main4_8.0)
  idr_Main.main4_9.0 <- store v.3
  v.4 <- pure (Cidr_Main.I idr_Main.main4_9.0)
  idr_Main.main4_10.0 <- store v.4
  v.5 <- pure (Cidr_Main.I idr_Main.main4_10.0)
  idr_Main.main4_11.0 <- store v.5
  idr_Main.main1_val.0 <- idr_Prelude.Interactive.printLn' $ idr_Main.main3.0 idr_Main.main4_11.0
  v.6 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main4_18.0 <- store v.6
  v.7 <- pure (CGrInt 15)
  idr_Main.main5.0 <- store v.7
  "idr_{runMain_0}0_val.0" <- idr_Prelude.Interactive.printLn' $ idr_Main.main4_18.0 idr_Main.main5.0
  pure ()

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  unboxed.CGrString.3 <- "idr_{APPLY_0}.unboxed" $ idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3
  idr_Prelude.Interactive.printLn'6.41.7.arity.1 <- pure #"\n"
  idris_str_concat3.0 <- _prim_string_concat $ unboxed.CGrString.3 idr_Prelude.Interactive.printLn'6.41.7.arity.1
  _prim_string_print $ idris_str_concat3.0
  v.8 <- pure (Cidr_MkUnit)
  pure v.8

"idr_{APPLY_0}.unboxed" "idr_{APPLY_0}0" "idr_{APPLY_0}1" =
  "idr_{APPLY_0}0_val" <- fetch "idr_{APPLY_0}0"
  case "idr_{APPLY_0}0_val" of
    (C"idr_{U_Main.{main_0}_1}") ->
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" $ "idr_{APPLY_0}1"
    (C"idr_{U_Main.{main_1}_1}") ->
      v.9 <- pure (C"idr_{U_prim__toStrBigInt_1}")
      "idr_Main.{main_1}2.0" <- store v.9
      unboxed.CGrString.1.0 <- "idr_{APPLY_0}.unboxed" $ "idr_Main.{main_1}2.0" "idr_{APPLY_0}1"
      ccp.3.0 <- pure 0
      idr_Prelude.Show.primNumShow6.49.0.arity.1.0 <- pure 5
      idris_int_eq2.0 <- _prim_int_eq $ ccp.3.0 idr_Prelude.Show.primNumShow6.49.0.arity.1.0
      ccp.0.0 <- case idris_int_eq2.0 of
        #False ->
          pure ccp.3.0
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_20.0 <- case ccp.0.0 of
        0 ->
          idris_int_lt2.0 <- _prim_int_lt $ ccp.3.0 idr_Prelude.Show.primNumShow6.49.0.arity.1.0
          ccp.1.0 <- case idris_int_lt2.0 of
            #False ->
              pure ccp.0.0
            #True ->
              pure 1
          case ccp.1.0 of
            0 ->
              v.10 <- pure (Cidr_Prelude.Interfaces.GT)
              pure v.10
            #default ->
              v.11 <- pure (Cidr_Prelude.Interfaces.LT)
              pure v.11
        #default ->
          v.12 <- pure (Cidr_Prelude.Interfaces.EQ)
          pure v.12
      idr_Prelude.Show.primNumShow5_val_19.0 <- case idr_Prelude.Show.primNumShow5_val_20.0 of
        (Cidr_Prelude.Interfaces.GT) ->
          v.13 <- pure (Cidr_Prelude.Bool.True)
          pure v.13
        #default ->
          ccp.0.1 <- case idris_int_eq2.0 of
            #False ->
              pure ccp.3.0
            #True ->
              pure 1
          case ccp.0.1 of
            0 ->
              v.14 <- pure (Cidr_Prelude.Bool.False)
              pure v.14
            #default ->
              v.15 <- pure (Cidr_Prelude.Bool.True)
              pure v.15
      idr_Prelude.Show.primNumShow5_val.0 <- case idr_Prelude.Show.primNumShow5_val_19.0 of
        (Cidr_Prelude.Bool.False) ->
          v.16 <- pure (Cidr_Prelude.Bool.False)
          pure v.16
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_36.41.1.arity.1.0 <- pure #""
          idris_str_eq3.0 <- _prim_string_eq $ unboxed.CGrString.1.0 idr_Prelude.Show.primNumShow6_36.41.1.arity.1.0
          ccp.2.0 <- case idris_str_eq3.0 of
            #False ->
              pure ccp.3.0
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_33.0 <- case ccp.2.0 of
            0 ->
              v.17 <- pure (Cidr_Prelude.Bool.True)
              pure v.17
            #default ->
              v.18 <- pure (Cidr_Prelude.Bool.False)
              pure v.18
          v.19 <- pure (Cidr_Prelude.Bool.True)
          case idr_Prelude.Show.primNumShow6_val_33.0 of
            (Cidr_Prelude.Bool.False) ->
              v.20 <- pure (Cidr_Prelude.Bool.False)
              pure v.20
            (Cidr_Prelude.Bool.True) ->
              idris_str_head2.0.0 <- _prim_string_head $ unboxed.CGrString.1.0
              idr_Prelude.Show.primNumShow8.41.4.arity.1.0.0 <- pure 45
              idris_int_eq2.2.0 <- _prim_int_eq $ idris_str_head2.0.0 idr_Prelude.Show.primNumShow8.41.4.arity.1.0.0
              ccp.0.2.0 <- case idris_int_eq2.2.0 of
                #False ->
                  pure ccp.3.0
                #True ->
                  pure 1
              case ccp.0.2.0 of
                0 ->
                  v.21 <- pure (Cidr_Prelude.Bool.False)
                  pure v.21
                #default ->
                  pure v.19
      case idr_Prelude.Show.primNumShow5_val.0 of
        (Cidr_Prelude.Bool.False) ->
          pure unboxed.CGrString.1.0
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow7_57.41.5.arity.1.0 <- pure #")"
          idris_str_concat3.1 <- _prim_string_concat $ unboxed.CGrString.1.0 idr_Prelude.Show.primNumShow7_57.41.5.arity.1.0
          idr_Prelude.Show.primNumShow6_54.41.6.arity.1.0 <- pure #"("
          idris_str_concat3.2 <- _prim_string_concat $ idr_Prelude.Show.primNumShow6_54.41.6.arity.1.0 idris_str_concat3.1
          pure idris_str_concat3.2
    (C"idr_{U_prim__toStrBigInt_1}") ->
      p.1 <- fetch "idr_{APPLY_0}1"
      (CGrInt idris_int_str1_0.0) <- pure p.1
      idris_int_str2.0 <- _prim_int_str $ idris_int_str1_0.0
      pure idris_int_str2.0

"idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01" =
  "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01_val" <- fetch "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01"
  case "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01_val" of
    (Cidr_Main.I "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:02") ->
      unboxed.CGrString.5 <- "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" $ "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:02"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04.41.12.arity.1" <- pure #"1"
      idris_str_concat3.3 <- _prim_string_concat $ unboxed.CGrString.5 "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04.41.12.arity.1"
      pure idris_str_concat3.3
    (Cidr_Main.N) ->
      pure #""
