primop effectful
  _prim_int_print :: T_Int64 -> T_Unit
  _prim_string_print :: T_String -> T_Unit
  _prim_read_string :: T_String
  _prim_usleep :: T_Int64 -> T_Unit
  _prim_error :: T_String -> T_Unit
  _prim_ffi_file_eof :: T_Int64 -> T_Int64
  
primop pure
  _prim_string_concat :: T_String -> T_String -> T_String
  _prim_string_reverse :: T_String -> T_String
  _prim_string_lt :: T_String -> T_String -> T_Bool
  _prim_string_eq :: T_String -> T_String -> T_Bool
  _prim_string_head :: T_String -> T_Int64
  _prim_string_tail :: T_String -> T_String
  _prim_string_cons :: T_Int64 -> T_String -> T_String
  _prim_string_len :: T_String -> T_Int64
  _prim_int_str :: T_Int64 -> T_String
  _prim_str_int :: T_String -> T_Int64
  _prim_int_float :: T_Int64 -> T_Float
  _prim_float_string :: T_Float -> T_String
  _prim_char_int :: T_Char -> T_Int64
  _prim_int_add :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_sub :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_mul :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_div :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_eq :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ne :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_gt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ge :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_lt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_le :: T_Int64 -> T_Int64 -> T_Bool
  _prim_word_add :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_sub :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_mul :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_div :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_eq :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ne :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_gt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ge :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_lt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_le :: T_Word64 -> T_Word64 -> T_Bool
  _prim_float_add :: T_Float -> T_Float -> T_Float
  _prim_float_sub :: T_Float -> T_Float -> T_Float
  _prim_float_mul :: T_Float -> T_Float -> T_Float
  _prim_float_div :: T_Float -> T_Float -> T_Float
  _prim_float_eq :: T_Float -> T_Float -> T_Bool
  _prim_float_ne :: T_Float -> T_Float -> T_Bool
  _prim_float_gt :: T_Float -> T_Float -> T_Bool
  _prim_float_ge :: T_Float -> T_Float -> T_Bool
  _prim_float_lt :: T_Float -> T_Float -> T_Bool
  _prim_float_le :: T_Float -> T_Float -> T_Bool
  _prim_bool_eq :: T_Bool -> T_Bool -> T_Bool
  _prim_bool_ne :: T_Bool -> T_Bool -> T_Bool
  
primop effectful
  _prim_int_print :: T_Int64 -> T_Unit
  _prim_string_print :: T_String -> T_Unit
  _prim_read_string :: T_String
  _prim_usleep :: T_Int64 -> T_Unit
  _prim_error :: T_String -> T_Unit
  _prim_ffi_file_eof :: T_Int64 -> T_Int64
  
primop pure
  _prim_string_concat :: T_String -> T_String -> T_String
  _prim_string_reverse :: T_String -> T_String
  _prim_string_lt :: T_String -> T_String -> T_Bool
  _prim_string_eq :: T_String -> T_String -> T_Bool
  _prim_string_head :: T_String -> T_Int64
  _prim_string_tail :: T_String -> T_String
  _prim_string_cons :: T_Int64 -> T_String -> T_String
  _prim_string_len :: T_String -> T_Int64
  _prim_int_str :: T_Int64 -> T_String
  _prim_str_int :: T_String -> T_Int64
  _prim_int_float :: T_Int64 -> T_Float
  _prim_float_string :: T_Float -> T_String
  _prim_char_int :: T_Char -> T_Int64
  _prim_int_add :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_sub :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_mul :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_div :: T_Int64 -> T_Int64 -> T_Int64
  _prim_int_eq :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ne :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_gt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_ge :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_lt :: T_Int64 -> T_Int64 -> T_Bool
  _prim_int_le :: T_Int64 -> T_Int64 -> T_Bool
  _prim_word_add :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_sub :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_mul :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_div :: T_Word64 -> T_Word64 -> T_Word64
  _prim_word_eq :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ne :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_gt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_ge :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_lt :: T_Word64 -> T_Word64 -> T_Bool
  _prim_word_le :: T_Word64 -> T_Word64 -> T_Bool
  _prim_float_add :: T_Float -> T_Float -> T_Float
  _prim_float_sub :: T_Float -> T_Float -> T_Float
  _prim_float_mul :: T_Float -> T_Float -> T_Float
  _prim_float_div :: T_Float -> T_Float -> T_Float
  _prim_float_eq :: T_Float -> T_Float -> T_Bool
  _prim_float_ne :: T_Float -> T_Float -> T_Bool
  _prim_float_gt :: T_Float -> T_Float -> T_Bool
  _prim_float_ge :: T_Float -> T_Float -> T_Bool
  _prim_float_lt :: T_Float -> T_Float -> T_Bool
  _prim_float_le :: T_Float -> T_Float -> T_Bool
  _prim_bool_eq :: T_Bool -> T_Bool -> T_Bool
  _prim_bool_ne :: T_Bool -> T_Bool -> T_Bool
  
grinMain =
  idr_Main.main3_val.0 <- pure (C"idr_{U_Main.{main_0}_1}")
  idr_Main.main3.0 <- store idr_Main.main3_val.0
  idr_Main.main4_val_7.0 <- pure (Cidr_Main.N)
  idr_Main.main4.0 <- store idr_Main.main4_val_7.0
  idr_Main.main4_val_6.0 <- pure (Cidr_Main.I idr_Main.main4.0)
  idr_Main.main4_8.0 <- store idr_Main.main4_val_6.0
  idr_Main.main4_val_5.0 <- pure (Cidr_Main.I idr_Main.main4_8.0)
  idr_Main.main4_9.0 <- store idr_Main.main4_val_5.0
  idr_Main.main4_val_4.0 <- pure (Cidr_Main.I idr_Main.main4_9.0)
  idr_Main.main4_10.0 <- store idr_Main.main4_val_4.0
  idr_Main.main4_val.0 <- pure (Cidr_Main.I idr_Main.main4_10.0)
  idr_Main.main4_11.0 <- store idr_Main.main4_val.0
  idr_Main.main1_val.0 <- idr_Prelude.Interactive.printLn' $ idr_Main.main3.0 idr_Main.main4_11.0
  idr_Main.main4_val_17.0 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main4_18.0 <- store idr_Main.main4_val_17.0
  idr_Main.main5_val.0 <- pure (CGrInt 15)
  idr_Main.main5.0 <- store idr_Main.main5_val.0
  "idr_{runMain_0}0_val.0" <- idr_Prelude.Interactive.printLn' $ idr_Main.main4_18.0 idr_Main.main5.0
  pure ()

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  unboxed.CGrString.3 <- "idr_{APPLY_0}.unboxed" $ idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3
  idr_Prelude.Interactive.printLn'5_val_60 <- pure (CGrString unboxed.CGrString.3)
  idr_Prelude.Interactive.printLn'6_val <- pure (CGrString #"\n")
  (CGrString idr_Prelude.Interactive.printLn'5.41.7.arity.1) <- pure idr_Prelude.Interactive.printLn'5_val_60
  (CGrString idr_Prelude.Interactive.printLn'6.41.7.arity.1) <- pure idr_Prelude.Interactive.printLn'6_val
  idris_str_concat1.41.arity.1.0 <- pure idr_Prelude.Interactive.printLn'5.41.7.arity.1
  idris_str_concat2.41.arity.1.0 <- pure idr_Prelude.Interactive.printLn'6.41.7.arity.1
  (CGrString idris_str_concat1_0.0) <- pure (CGrString idris_str_concat1.41.arity.1.0)
  (CGrString idris_str_concat2_0.0) <- pure (CGrString idris_str_concat2.41.arity.1.0)
  idris_str_concat3.0 <- _prim_string_concat $ idris_str_concat1_0.0 idris_str_concat2_0.0
  unboxed.CGrString.4 <- pure idris_str_concat3.0
  idr_Prelude.Interactive.printLn'5_val_59 <- pure (CGrString unboxed.CGrString.4)
  (CGrString idr_Prelude.Interactive.printLn'5_61.41.8.arity.1) <- pure idr_Prelude.Interactive.printLn'5_val_59
  idris_write_str2.41.arity.1.0 <- pure idr_Prelude.Interactive.printLn'5_61.41.8.arity.1
  (CGrString idris_write_str2_0.0) <- pure (CGrString idris_write_str2.41.arity.1.0)
  _prim_string_print $ idris_write_str2_0.0
  pure (Cidr_MkUnit)

"idr_{APPLY_0}.unboxed" "idr_{APPLY_0}0" "idr_{APPLY_0}1" =
  "idr_{APPLY_0}0_val" <- fetch "idr_{APPLY_0}0"
  case "idr_{APPLY_0}0_val" of
    (C"idr_{U_Main.{main_0}_1}") ->
      "idr_Main.{main_0}0.0" <- pure "idr_{APPLY_0}1"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" $ "idr_Main.{main_0}0.0"
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}0.0" <- pure "idr_{APPLY_0}1"
      "idr_Main.{main_1}2_val.0" <- pure (C"idr_{U_prim__toStrBigInt_1}")
      "idr_Main.{main_1}2.0" <- store "idr_Main.{main_1}2_val.0"
      idr_Prelude.Show.primNumShow1.0 <- pure "idr_Main.{main_1}2.0"
      idr_Prelude.Show.primNumShow3.0 <- pure "idr_Main.{main_1}0.0"
      unboxed.CGrString.1.0 <- "idr_{APPLY_0}.unboxed" $ idr_Prelude.Show.primNumShow1.0 idr_Prelude.Show.primNumShow3.0
      idr_Prelude.Show.primNumShow4_val.0 <- pure (CGrString unboxed.CGrString.1.0)
      idr_Prelude.Show.primNumShow2_val.0 <- pure (Cidr_Prelude.Show.Open)
      ccp.3.0 <- do
        (Cidr_Prelude.Show.Open) <- pure idr_Prelude.Show.primNumShow2_val.0
        pure 0
      idr_Prelude.Show.primNumShow5_val_21.0 <- pure (CGrInt ccp.3.0)
      idr_Prelude.Show.primNumShow6_val.0 <- pure (CGrInt 5)
      (CGrInt idr_Prelude.Show.primNumShow5.49.0.arity.1.0) <- pure idr_Prelude.Show.primNumShow5_val_21.0
      (CGrInt idr_Prelude.Show.primNumShow6.49.0.arity.1.0) <- pure idr_Prelude.Show.primNumShow6_val.0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.49.arity.1.0" <- pure idr_Prelude.Show.primNumShow5.49.0.arity.1.0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.49.arity.1.0" <- pure idr_Prelude.Show.primNumShow6.49.0.arity.1.0
      (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.10.arity.1.0") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.49.arity.1.0")
      (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.10.arity.1.0") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.49.arity.1.0")
      idris_int_eq0.41.arity.1.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.10.arity.1.0"
      idris_int_eq1.41.arity.1.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.10.arity.1.0"
      (CGrInt idris_int_eq0_1.0) <- pure (CGrInt idris_int_eq0.41.arity.1.0)
      (CGrInt idris_int_eq1_1.0) <- pure (CGrInt idris_int_eq1.41.arity.1.0)
      idris_int_eq2.0 <- _prim_int_eq $ idris_int_eq0_1.0 idris_int_eq1_1.0
      ccp.0.0 <- case idris_int_eq2.0 of
        #False ->
          pure 0
        #True ->
          pure 1
      unboxed.CGrInt.4.0 <- pure ccp.0.0
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0" <- pure (CGrInt unboxed.CGrInt.4.0)
      "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_68.0" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val.0"
      idr_Prelude.Show.primNumShow5_val_20.0 <- do
        (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0") <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_68.0"
        case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0" of
          0 ->
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.11.arity.1.0") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.49.arity.1.0")
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.11.arity.1.0") <- pure (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.49.arity.1.0")
            idris_int_lt0.41.arity.1.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.11.arity.1.0"
            idris_int_lt1.41.arity.1.0 <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.11.arity.1.0"
            (CGrInt idris_int_lt0_1.0) <- pure (CGrInt idris_int_lt0.41.arity.1.0)
            (CGrInt idris_int_lt1_1.0) <- pure (CGrInt idris_int_lt1.41.arity.1.0)
            idris_int_lt2.0 <- _prim_int_lt $ idris_int_lt0_1.0 idris_int_lt1_1.0
            ccp.1.0 <- case idris_int_lt2.0 of
              #False ->
                pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0.0"
              #True ->
                pure 1
            unboxed.CGrInt.5.0 <- pure ccp.1.0
            "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0" <- pure (CGrInt unboxed.CGrInt.5.0)
            "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_69.0" <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val.0"
            do
              (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_70.0") <- pure "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_69.0"
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_70.0" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT)
          #default ->
            pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_23.0 <- pure idr_Prelude.Show.primNumShow5_val_20.0
      idr_Prelude.Show.primNumShow5_val_19.0 <- case idr_Prelude.Show.primNumShow5_val_23.0 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True)
        #default ->
          idr_Prelude.Show.primNumShow2_val_26.0 <- pure idr_Prelude.Show.primNumShow2_val.0
          ccp.4.0 <- do
            (Cidr_Prelude.Show.Open) <- pure idr_Prelude.Show.primNumShow2_val_26.0
            pure 0
          idr_Prelude.Show.primNumShow6_val_25.0 <- pure (CGrInt ccp.4.0)
          idr_Prelude.Show.primNumShow7_val.0 <- pure idr_Prelude.Show.primNumShow6_val.0
          (CGrInt idr_Prelude.Show.primNumShow6_27.41.0.arity.1.0) <- pure idr_Prelude.Show.primNumShow6_val_25.0
          (CGrInt idr_Prelude.Show.primNumShow7.41.0.arity.1.0) <- pure idr_Prelude.Show.primNumShow7_val.0
          idris_int_eq0.41.arity.1.1 <- pure idr_Prelude.Show.primNumShow6_27.41.0.arity.1.0
          idris_int_eq1.41.arity.1.1 <- pure idr_Prelude.Show.primNumShow7.41.0.arity.1.0
          (CGrInt idris_int_eq0_1.1) <- pure (CGrInt idris_int_eq0.41.arity.1.1)
          (CGrInt idris_int_eq1_1.1) <- pure (CGrInt idris_int_eq1.41.arity.1.1)
          idris_int_eq2.1 <- _prim_int_eq $ idris_int_eq0_1.1 idris_int_eq1_1.1
          ccp.0.1 <- case idris_int_eq2.1 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.0.0 <- pure ccp.0.1
          idr_Prelude.Show.primNumShow6_val_24.0 <- pure (CGrInt unboxed.CGrInt.0.0)
          idr_Prelude.Show.primNumShow6_val_29.0 <- pure idr_Prelude.Show.primNumShow6_val_24.0
          do
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0.0) <- pure idr_Prelude.Show.primNumShow6_val_29.0
            case idr_Prelude.Show.primNumShow_cpat_LInt64_0.0 of
              0 ->
                pure (Cidr_Prelude.Bool.False)
              #default ->
                pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val_31.0 <- pure idr_Prelude.Show.primNumShow5_val_19.0
      idr_Prelude.Show.primNumShow5_val.0 <- case idr_Prelude.Show.primNumShow5_val_31.0 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_val_35.0 <- pure (CGrString #"")
          (CGrString idr_Prelude.Show.primNumShow4.41.1.arity.1.0) <- pure idr_Prelude.Show.primNumShow4_val.0
          (CGrString idr_Prelude.Show.primNumShow6_36.41.1.arity.1.0) <- pure idr_Prelude.Show.primNumShow6_val_35.0
          idris_str_eq1.41.arity.1.0 <- pure idr_Prelude.Show.primNumShow4.41.1.arity.1.0
          idris_str_eq2.41.arity.1.0 <- pure idr_Prelude.Show.primNumShow6_36.41.1.arity.1.0
          (CGrString idris_str_eq1_0.0) <- pure (CGrString idris_str_eq1.41.arity.1.0)
          (CGrString idris_str_eq2_0.0) <- pure (CGrString idris_str_eq2.41.arity.1.0)
          idris_str_eq3.0 <- _prim_string_eq $ idris_str_eq1_0.0 idris_str_eq2_0.0
          ccp.2.0 <- case idris_str_eq3.0 of
            #False ->
              pure 0
            #True ->
              pure 1
          unboxed.CGrInt.1.0 <- pure ccp.2.0
          idr_Prelude.Show.primNumShow6_val_34.0 <- pure (CGrInt unboxed.CGrInt.1.0)
          idr_Prelude.Show.primNumShow6_val_38.0 <- pure idr_Prelude.Show.primNumShow6_val_34.0
          idr_Prelude.Show.primNumShow6_val_33.0 <- do
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_39.0) <- pure idr_Prelude.Show.primNumShow6_val_38.0
            case idr_Prelude.Show.primNumShow_cpat_LInt64_0_39.0 of
              0 ->
                pure (Cidr_Prelude.Bool.True)
              #default ->
                pure (Cidr_Prelude.Bool.False)
          idr_Prelude.Show.primNumShow6_40.0 <- store idr_Prelude.Show.primNumShow6_val_33.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.0" <- pure idr_Prelude.Show.primNumShow6_40.0
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" <- pure (Cidr_Prelude.Bool.True)
          idr_Prelude.Show.primNumShow6_val_32.0 <- do
            (Cidr_Prelude.Bool.True) <- pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
            "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_67.0" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00.0"
            case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_67.0" of
              (Cidr_Prelude.Bool.False) ->
                pure (Cidr_Prelude.Basics.No)
              (Cidr_Prelude.Bool.True) ->
                pure (Cidr_Prelude.Basics.Yes)
          idr_Prelude.Show.primNumShow6_val_44.0 <- pure idr_Prelude.Show.primNumShow6_val_32.0
          case idr_Prelude.Show.primNumShow6_val_44.0 of
            (Cidr_Prelude.Basics.No) ->
              pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Basics.Yes) ->
              (CGrString idr_Prelude.Show.primNumShow4.41.3.arity.1.0) <- pure idr_Prelude.Show.primNumShow4_val.0
              idris_str_head1.41.arity.1.0 <- pure idr_Prelude.Show.primNumShow4.41.3.arity.1.0
              (CGrString idris_str_head1_0.0) <- pure (CGrString idris_str_head1.41.arity.1.0)
              idris_str_head2.0 <- _prim_string_head $ idris_str_head1_0.0
              unboxed.CGrInt.2.0 <- pure idris_str_head2.0
              idr_Prelude.Show.primNumShow7_val_46.0 <- pure (CGrInt unboxed.CGrInt.2.0)
              idr_Prelude.Show.primNumShow8_val.0 <- pure (CGrInt 45)
              (CGrInt idr_Prelude.Show.primNumShow7_47.41.4.arity.1.0) <- pure idr_Prelude.Show.primNumShow7_val_46.0
              (CGrInt idr_Prelude.Show.primNumShow8.41.4.arity.1.0) <- pure idr_Prelude.Show.primNumShow8_val.0
              idris_int_eq0.41.arity.1.2 <- pure idr_Prelude.Show.primNumShow7_47.41.4.arity.1.0
              idris_int_eq1.41.arity.1.2 <- pure idr_Prelude.Show.primNumShow8.41.4.arity.1.0
              (CGrInt idris_int_eq0_1.2) <- pure (CGrInt idris_int_eq0.41.arity.1.2)
              (CGrInt idris_int_eq1_1.2) <- pure (CGrInt idris_int_eq1.41.arity.1.2)
              idris_int_eq2.2 <- _prim_int_eq $ idris_int_eq0_1.2 idris_int_eq1_1.2
              ccp.0.2 <- case idris_int_eq2.2 of
                #False ->
                  pure 0
                #True ->
                  pure 1
              unboxed.CGrInt.3.0 <- pure ccp.0.2
              idr_Prelude.Show.primNumShow7_val_45.0 <- pure (CGrInt unboxed.CGrInt.3.0)
              idr_Prelude.Show.primNumShow7_val_49.0 <- pure idr_Prelude.Show.primNumShow7_val_45.0
              do
                (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_50.0) <- pure idr_Prelude.Show.primNumShow7_val_49.0
                case idr_Prelude.Show.primNumShow_cpat_LInt64_0_50.0 of
                  0 ->
                    pure (Cidr_Prelude.Bool.False)
                  #default ->
                    pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
      idr_Prelude.Show.primNumShow5_val_52.0 <- pure idr_Prelude.Show.primNumShow5_val.0
      case idr_Prelude.Show.primNumShow5_val_52.0 of
        (Cidr_Prelude.Bool.False) ->
          (CGrString unboxed.CGrString.0.0) <- pure idr_Prelude.Show.primNumShow4_val.0
          pure unboxed.CGrString.0.0
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_val_53.0 <- pure (CGrString #"(")
          idr_Prelude.Show.primNumShow7_val_56.0 <- pure (CGrString #")")
          (CGrString idr_Prelude.Show.primNumShow4.41.5.arity.1.0) <- pure idr_Prelude.Show.primNumShow4_val.0
          (CGrString idr_Prelude.Show.primNumShow7_57.41.5.arity.1.0) <- pure idr_Prelude.Show.primNumShow7_val_56.0
          idris_str_concat1.41.arity.1.1 <- pure idr_Prelude.Show.primNumShow4.41.5.arity.1.0
          idris_str_concat2.41.arity.1.1 <- pure idr_Prelude.Show.primNumShow7_57.41.5.arity.1.0
          (CGrString idris_str_concat1_0.1) <- pure (CGrString idris_str_concat1.41.arity.1.1)
          (CGrString idris_str_concat2_0.1) <- pure (CGrString idris_str_concat2.41.arity.1.1)
          idris_str_concat3.1 <- _prim_string_concat $ idris_str_concat1_0.1 idris_str_concat2_0.1
          unboxed.CGrString.2.0 <- pure idris_str_concat3.1
          idr_Prelude.Show.primNumShow7_val_55.0 <- pure (CGrString unboxed.CGrString.2.0)
          (CGrString idr_Prelude.Show.primNumShow6_54.41.6.arity.1.0) <- pure idr_Prelude.Show.primNumShow6_val_53.0
          (CGrString idr_Prelude.Show.primNumShow7_58.41.6.arity.1.0) <- pure idr_Prelude.Show.primNumShow7_val_55.0
          idris_str_concat1.41.arity.1.2 <- pure idr_Prelude.Show.primNumShow6_54.41.6.arity.1.0
          idris_str_concat2.41.arity.1.2 <- pure idr_Prelude.Show.primNumShow7_58.41.6.arity.1.0
          (CGrString idris_str_concat1_0.2) <- pure (CGrString idris_str_concat1.41.arity.1.2)
          (CGrString idris_str_concat2_0.2) <- pure (CGrString idris_str_concat2.41.arity.1.2)
          idris_str_concat3.2 <- _prim_string_concat $ idris_str_concat1_0.2 idris_str_concat2_0.2
          pure idris_str_concat3.2
    (C"idr_{U_prim__toStrBigInt_1}") ->
      idr_prim__toStrBigInt0.0 <- pure "idr_{APPLY_0}1"
      idris_int_str1.0 <- pure idr_prim__toStrBigInt0.0
      (CGrInt idris_int_str1_0.0) <- fetch idris_int_str1.0
      idris_int_str2.0 <- _prim_int_str $ idris_int_str1_0.0
      pure idris_int_str2.0

"idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01" =
  "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01_val" <- fetch "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01"
  case "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01_val" of
    (Cidr_Main.I "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:02") ->
      unboxed.CGrString.5 <- "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" $ "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:02"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_val" <- pure (CGrString unboxed.CGrString.5)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04_val" <- pure (CGrString #"1")
      (CGrString "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_72.41.12.arity.1") <- pure "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_val"
      (CGrString "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04.41.12.arity.1") <- pure "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04_val"
      idris_str_concat1.41.arity.1.3 <- pure "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_72.41.12.arity.1"
      idris_str_concat2.41.arity.1.3 <- pure "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04.41.12.arity.1"
      (CGrString idris_str_concat1_0.3) <- pure (CGrString idris_str_concat1.41.arity.1.3)
      (CGrString idris_str_concat2_0.3) <- pure (CGrString idris_str_concat2.41.arity.1.3)
      idris_str_concat3.3 <- _prim_string_concat $ idris_str_concat1_0.3 idris_str_concat2_0.3
      pure idris_str_concat3.3
    (Cidr_Main.N) ->
      pure #""
