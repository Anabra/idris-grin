idris_int_eq.unboxed idris_int_eq0.41.arity.1 idris_int_eq1.41.arity.1 =
  (CGrInt idris_int_eq0_1) <- pure (CGrInt idris_int_eq0.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrInt idris_int_eq1_1) <- pure (CGrInt idris_int_eq1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_eq2 <- _prim_int_eq idris_int_eq0_1 idris_int_eq1_1
  ccp.0 <- case idris_int_eq2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.0

idris_int_lt.unboxed idris_int_lt0.41.arity.1 idris_int_lt1.41.arity.1 =
  (CGrInt idris_int_lt0_1) <- pure (CGrInt idris_int_lt0.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrInt idris_int_lt1_1) <- pure (CGrInt idris_int_lt1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_int_lt2 <- _prim_int_lt idris_int_lt0_1 idris_int_lt1_1
  ccp.1 <- case idris_int_lt2 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.1

idris_str_concat.unboxed idris_str_concat1.41.arity.1 idris_str_concat2.41.arity.1 =
  (CGrString idris_str_concat1_0) <- pure (CGrString idris_str_concat1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrString idris_str_concat2_0) <- pure (CGrString idris_str_concat2.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_concat3 <- _prim_string_concat idris_str_concat1_0 idris_str_concat2_0
  pure idris_str_concat3

idris_str_eq.unboxed idris_str_eq1.41.arity.1 idris_str_eq2.41.arity.1 =
  (CGrString idris_str_eq1_0) <- pure (CGrString idris_str_eq1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  (CGrString idris_str_eq2_0) <- pure (CGrString idris_str_eq2.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_eq3 <- _prim_string_eq idris_str_eq1_0 idris_str_eq2_0
  ccp.2 <- case idris_str_eq3 of
    #False ->
      pure 0
    #True ->
      pure 1
  pure ccp.2

idris_str_head.unboxed idris_str_head1.41.arity.1 =
  (CGrString idris_str_head1_0) <- pure (CGrString idris_str_head1.41.arity.1) -- LINT: Syntax error - expected SimpleExp without nodes
  idris_str_head2 <- _prim_string_head idris_str_head1_0
  pure idris_str_head2

idris_int_str.unboxed idris_int_str1 =
  (CGrInt idris_int_str1_0) <- fetch idris_int_str1
  idris_int_str2 <- _prim_int_str idris_int_str1_0
  pure idris_int_str2 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0)

grinMain =
  "idr_{runMain_0}0_val_65.0" <- pure (CErased)
  "idr_{runMain_0}0.0" <- store "idr_{runMain_0}0_val_65.0"
  "idr_{runMain_0}0_val.0" <- idr_Main.main
  "idr_{runMain_0}0_66.0" <- store "idr_{runMain_0}0_val.0"
  "idr_{EVAL_0}0.0.0" <- pure "idr_{runMain_0}0_66.0"
  "idr_{EVAL_0}0_val.0.0" <- fetch "idr_{EVAL_0}0.0.0"
  r <- fetch "idr_{EVAL_0}0.0.0"
  pure ()

idr_Main.main =
  idr_Main.main1_val_3 <- pure (CErased)
  idr_Main.main1 <- store idr_Main.main1_val_3
  idr_Main.main2_val <- pure (CErased)
  idr_Main.main2 <- store idr_Main.main2_val
  idr_Main.main3_val <- pure (C"idr_{U_Main.{main_0}_1}")
  idr_Main.main3 <- store idr_Main.main3_val
  idr_Main.main4_val_7 <- pure (Cidr_Main.N)
  idr_Main.main4 <- store idr_Main.main4_val_7
  idr_Main.main4_val_6 <- pure (Cidr_Main.I idr_Main.main4)
  idr_Main.main4_8 <- store idr_Main.main4_val_6
  idr_Main.main4_val_5 <- pure (Cidr_Main.I idr_Main.main4_8)
  idr_Main.main4_9 <- store idr_Main.main4_val_5
  idr_Main.main4_val_4 <- pure (Cidr_Main.I idr_Main.main4_9)
  idr_Main.main4_10 <- store idr_Main.main4_val_4
  idr_Main.main4_val <- pure (Cidr_Main.I idr_Main.main4_10)
  idr_Main.main4_11 <- store idr_Main.main4_val
  idr_Main.main1_val <- idr_Prelude.Interactive.printLn' idr_Main.main3 idr_Main.main4_11
  idr_Main.main1_12 <- store idr_Main.main1_val
  idr_Main.main2_val_13 <- pure (CErased)
  idr_Main.main2_14 <- store idr_Main.main2_val_13
  idr_Main.main3_val_15 <- pure (CErased)
  idr_Main.main3_16 <- store idr_Main.main3_val_15
  idr_Main.main4_val_17 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main4_18 <- store idr_Main.main4_val_17
  idr_Main.main5_val <- pure (CGrInt 15)
  idr_Main.main5 <- store idr_Main.main5_val
  idr_Prelude.Interactive.printLn' idr_Main.main4_18 idr_Main.main5

idr_Prelude.Show.primNumShow.unboxed idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3 =
  unboxed.CGrString.1 <- "idr_{APPLY_0}.unboxed" idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3
  idr_Prelude.Show.primNumShow4_val <- pure (CGrString unboxed.CGrString.1)
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- pure (Cidr_Prelude.Show.Open)
  ccp.3 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.Open) ->
      pure 0
  idr_Prelude.Show.primNumShow5_val_21 <- pure (CGrInt ccp.3)
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_21
  idr_Prelude.Show.primNumShow6_val <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6 <- store idr_Prelude.Show.primNumShow6_val
  idr_Prelude.Show.primNumShow5_val_20 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" idr_Prelude.Show.primNumShow5 idr_Prelude.Show.primNumShow6
  idr_Prelude.Show.primNumShow5_22 <- store idr_Prelude.Show.primNumShow5_val_20
  idr_Prelude.Show.primNumShow5_val_23 <- fetch idr_Prelude.Show.primNumShow5_22
  idr_Prelude.Show.primNumShow5_val_19 <- case idr_Prelude.Show.primNumShow5_val_23 of
    (Cidr_Prelude.Interfaces.GT) ->
      pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
    #default ->
      idr_Prelude.Show.primNumShow2_val_26 <- pure (Cidr_Prelude.Show.Open)
      ccp.4 <- case idr_Prelude.Show.primNumShow2_val_26 of
        (Cidr_Prelude.Show.Open) ->
          pure 0
      idr_Prelude.Show.primNumShow6_val_25 <- pure (CGrInt ccp.4)
      idr_Prelude.Show.primNumShow6_27 <- store idr_Prelude.Show.primNumShow6_val_25
      idr_Prelude.Show.primNumShow7_val <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7 <- store idr_Prelude.Show.primNumShow7_val
      (CGrInt idr_Prelude.Show.primNumShow6_27.41.0.arity.1) <- fetch idr_Prelude.Show.primNumShow6_27
      (CGrInt idr_Prelude.Show.primNumShow7.41.0.arity.1) <- fetch idr_Prelude.Show.primNumShow7
      unboxed.CGrInt.0 <- idris_int_eq.unboxed idr_Prelude.Show.primNumShow6_27.41.0.arity.1 idr_Prelude.Show.primNumShow7.41.0.arity.1
      idr_Prelude.Show.primNumShow6_val_24 <- pure (CGrInt unboxed.CGrInt.0)
      idr_Prelude.Show.primNumShow6_28 <- store idr_Prelude.Show.primNumShow6_val_24
      idr_Prelude.Show.primNumShow6_val_29 <- fetch idr_Prelude.Show.primNumShow6_28
      case idr_Prelude.Show.primNumShow6_val_29 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow7.41.0.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow6_27.41.0.arity.1)
  idr_Prelude.Show.primNumShow5_30 <- store idr_Prelude.Show.primNumShow5_val_19
  idr_Prelude.Show.primNumShow5_val_31 <- fetch idr_Prelude.Show.primNumShow5_30
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_31 of
    (Cidr_Prelude.Bool.False) ->
      pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_35 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_36 <- store idr_Prelude.Show.primNumShow6_val_35
      (CGrString idr_Prelude.Show.primNumShow4.41.1.arity.1) <- fetch idr_Prelude.Show.primNumShow4
      (CGrString idr_Prelude.Show.primNumShow6_36.41.1.arity.1) <- fetch idr_Prelude.Show.primNumShow6_36
      unboxed.CGrInt.1 <- idris_str_eq.unboxed idr_Prelude.Show.primNumShow4.41.1.arity.1 idr_Prelude.Show.primNumShow6_36.41.1.arity.1
      idr_Prelude.Show.primNumShow6_val_34 <- pure (CGrInt unboxed.CGrInt.1)
      idr_Prelude.Show.primNumShow6_37 <- store idr_Prelude.Show.primNumShow6_val_34
      idr_Prelude.Show.primNumShow6_val_38 <- fetch idr_Prelude.Show.primNumShow6_37
      idr_Prelude.Show.primNumShow6_val_33 <- case idr_Prelude.Show.primNumShow6_val_38 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_39) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_39 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
      idr_Prelude.Show.primNumShow6_40 <- store idr_Prelude.Show.primNumShow6_val_33
      idr_Prelude.Show.primNumShow7_val_41 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_42 <- store idr_Prelude.Show.primNumShow7_val_41
      (Cidr_Prelude.Bool.True) <- fetch idr_Prelude.Show.primNumShow7_42
      idr_Prelude.Show.primNumShow6_val_32 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" idr_Prelude.Show.primNumShow6_40
      idr_Prelude.Show.primNumShow6_43 <- store idr_Prelude.Show.primNumShow6_val_32
      idr_Prelude.Show.primNumShow6_val_44 <- fetch idr_Prelude.Show.primNumShow6_43
      case idr_Prelude.Show.primNumShow6_val_44 of
        (Cidr_Prelude.Basics.No) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Basics.Yes) ->
          (CGrString idr_Prelude.Show.primNumShow4.41.3.arity.1) <- fetch idr_Prelude.Show.primNumShow4
          unboxed.CGrInt.2 <- idris_str_head.unboxed idr_Prelude.Show.primNumShow4.41.3.arity.1
          idr_Prelude.Show.primNumShow7_val_46 <- pure (CGrInt unboxed.CGrInt.2)
          idr_Prelude.Show.primNumShow7_47 <- store idr_Prelude.Show.primNumShow7_val_46
          idr_Prelude.Show.primNumShow8_val <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8 <- store idr_Prelude.Show.primNumShow8_val
          (CGrInt idr_Prelude.Show.primNumShow7_47.41.4.arity.1) <- fetch idr_Prelude.Show.primNumShow7_47
          (CGrInt idr_Prelude.Show.primNumShow8.41.4.arity.1) <- fetch idr_Prelude.Show.primNumShow8
          unboxed.CGrInt.3 <- idris_int_eq.unboxed idr_Prelude.Show.primNumShow7_47.41.4.arity.1 idr_Prelude.Show.primNumShow8.41.4.arity.1
          idr_Prelude.Show.primNumShow7_val_45 <- pure (CGrInt unboxed.CGrInt.3)
          idr_Prelude.Show.primNumShow7_48 <- store idr_Prelude.Show.primNumShow7_val_45
          idr_Prelude.Show.primNumShow7_val_49 <- fetch idr_Prelude.Show.primNumShow7_48
          case idr_Prelude.Show.primNumShow7_val_49 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_50) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_50 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow8.41.4.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idr_Prelude.Show.primNumShow7_47.41.4.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow4.41.3.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Bool.True) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow6_36.41.1.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow4.41.1.arity.1)
  idr_Prelude.Show.primNumShow5_51 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_52 <- fetch idr_Prelude.Show.primNumShow5_51
  case idr_Prelude.Show.primNumShow5_val_52 of
    (Cidr_Prelude.Bool.False) ->
      (CGrString unboxed.CGrString.0) <- fetch idr_Prelude.Show.primNumShow4
      pure unboxed.CGrString.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrString unboxed.CGrString.0)
    (Cidr_Prelude.Bool.True) ->
      idr_Prelude.Show.primNumShow6_val_53 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_54 <- store idr_Prelude.Show.primNumShow6_val_53
      idr_Prelude.Show.primNumShow7_val_56 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_57 <- store idr_Prelude.Show.primNumShow7_val_56
      (CGrString idr_Prelude.Show.primNumShow4.41.5.arity.1) <- fetch idr_Prelude.Show.primNumShow4
      (CGrString idr_Prelude.Show.primNumShow7_57.41.5.arity.1) <- fetch idr_Prelude.Show.primNumShow7_57
      unboxed.CGrString.2 <- idris_str_concat.unboxed idr_Prelude.Show.primNumShow4.41.5.arity.1 idr_Prelude.Show.primNumShow7_57.41.5.arity.1
      idr_Prelude.Show.primNumShow7_val_55 <- pure (CGrString unboxed.CGrString.2)
      idr_Prelude.Show.primNumShow7_58 <- store idr_Prelude.Show.primNumShow7_val_55
      (CGrString idr_Prelude.Show.primNumShow6_54.41.6.arity.1) <- fetch idr_Prelude.Show.primNumShow6_54
      (CGrString idr_Prelude.Show.primNumShow7_58.41.6.arity.1) <- fetch idr_Prelude.Show.primNumShow7_58
      idris_str_concat.unboxed idr_Prelude.Show.primNumShow6_54.41.6.arity.1 idr_Prelude.Show.primNumShow7_58.41.6.arity.1 -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow7_58.41.6.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow6_54.41.6.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow7_57.41.5.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Show.primNumShow4.41.5.arity.1)

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  unboxed.CGrString.3 <- "idr_{APPLY_0}.unboxed" idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3
  idr_Prelude.Interactive.printLn'5_val_60 <- pure (CGrString unboxed.CGrString.3)
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_60
  idr_Prelude.Interactive.printLn'6_val <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6 <- store idr_Prelude.Interactive.printLn'6_val
  (CGrString idr_Prelude.Interactive.printLn'5.41.7.arity.1) <- fetch idr_Prelude.Interactive.printLn'5
  (CGrString idr_Prelude.Interactive.printLn'6.41.7.arity.1) <- fetch idr_Prelude.Interactive.printLn'6
  unboxed.CGrString.4 <- idris_str_concat.unboxed idr_Prelude.Interactive.printLn'5.41.7.arity.1 idr_Prelude.Interactive.printLn'6.41.7.arity.1
  idr_Prelude.Interactive.printLn'5_val_59 <- pure (CGrString unboxed.CGrString.4)
  idr_Prelude.Interactive.printLn'5_61 <- store idr_Prelude.Interactive.printLn'5_val_59
  (CGrString idr_Prelude.Interactive.printLn'5_61.41.8.arity.1) <- fetch idr_Prelude.Interactive.printLn'5_61
  idris_write_str2.41.arity.1.0 <- pure idr_Prelude.Interactive.printLn'5_61.41.8.arity.1
  (CGrString idris_write_str2_0.0) <- pure (CGrString idris_write_str2.41.arity.1.0) -- LINT: Syntax error - expected SimpleExp without nodes
  _prim_string_print idris_write_str2_0.0
  idr_Prelude.Interactive.printLn'5_val <- pure (CUnit)
  idr_Prelude.Interactive.printLn'5_62 <- store idr_Prelude.Interactive.printLn'5_val
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Interactive.printLn'5_61.41.8.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Interactive.printLn'6.41.7.arity.1) -- LINT: The result of Fetch can only be bound to a variable: (CGrString idr_Prelude.Interactive.printLn'5.41.7.arity.1)

"idr_{APPLY_0}.unboxed" "idr_{APPLY_0}0" "idr_{APPLY_0}1" =
  "idr_{APPLY_0}0_val" <- fetch "idr_{APPLY_0}0"
  case "idr_{APPLY_0}0_val" of
    (C"idr_{U_Main.{main_0}_1}") ->
      "idr_Main.{main_0}0.0" <- pure "idr_{APPLY_0}1"
      "idr_Main.{main_0}1_val.0" <- pure (CErased)
      "idr_Main.{main_0}1.0" <- store "idr_Main.{main_0}1_val.0"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" "idr_Main.{main_0}0.0"
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}0.0" <- pure "idr_{APPLY_0}1"
      "idr_Main.{main_1}1_val.0" <- pure (CErased)
      "idr_Main.{main_1}1.0" <- store "idr_Main.{main_1}1_val.0"
      "idr_Main.{main_1}2_val.0" <- pure (C"idr_{U_prim__toStrBigInt_1}")
      "idr_Main.{main_1}2.0" <- store "idr_Main.{main_1}2_val.0"
      "idr_Main.{main_1}3_val.0" <- pure (Cidr_Prelude.Show.Open)
      "idr_Main.{main_1}3.0" <- store "idr_Main.{main_1}3_val.0"
      (Cidr_Prelude.Show.Open) <- fetch "idr_Main.{main_1}3.0"
      idr_Prelude.Show.primNumShow.unboxed "idr_Main.{main_1}2.0" "idr_Main.{main_1}0.0" -- LINT: The result of Fetch can only be bound to a variable: (Cidr_Prelude.Show.Open)
    (C"idr_{U_prim__toStrBigInt_1}") ->
      idr_prim__toStrBigInt0.0 <- pure "idr_{APPLY_0}1"
      idris_int_str.unboxed idr_prim__toStrBigInt0.0

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" <- pure (Cidr_Prelude.Bool.True)
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" of
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_67" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_67" of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
        (Cidr_Prelude.Bool.True) ->
          pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01" =
  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.10.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00"
  (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.10.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
  unboxed.CGrInt.4 <- idris_int_eq.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.10.arity.1" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.10.arity.1"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val" <- pure (CGrInt unboxed.CGrInt.4)
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_68" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_68" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0" of
        0 ->
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.11.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00"
          (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.11.arity.1") <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
          unboxed.CGrInt.5 <- idris_int_lt.unboxed "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.11.arity.1" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.11.arity.1"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val" <- pure (CGrInt unboxed.CGrInt.5)
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_69" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_69" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_70") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_70" of
                0 ->
                  pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
                #default ->
                  pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.11.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.11.arity.1")
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ) -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01.41.10.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00.41.10.arity.1")

"idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01" =
  "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01_val" <- fetch "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01"
  case "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01_val" of
    (Cidr_Main.I "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:02") ->
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_val_71" <- pure (CErased)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_val_71"
      unboxed.CGrString.5 <- "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:02"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_val" <- pure (CGrString unboxed.CGrString.5)
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_72" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_val"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04_val" <- pure (CGrString #"1")
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04" <- store "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04_val"
      (CGrString "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_72.41.12.arity.1") <- fetch "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_72"
      (CGrString "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04.41.12.arity.1") <- fetch "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04"
      idris_str_concat.unboxed "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_72.41.12.arity.1" "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04.41.12.arity.1" -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04.41.12.arity.1") -- LINT: The result of Fetch can only be bound to a variable: (CGrString "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:03_72.41.12.arity.1")
    (Cidr_Main.N) ->
      pure #""
