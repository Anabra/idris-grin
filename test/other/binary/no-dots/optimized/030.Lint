grinMain =
  idr_Main.main3_val.0 <- pure (C"idr_{U_Main.{main_0}_1}")
  idr_Main.main3.0 <- store idr_Main.main3_val.0
  idr_Main.main4_val_7.0 <- pure (Cidr_Main.N)
  idr_Main.main4.0 <- store idr_Main.main4_val_7.0
  idr_Main.main4_val_6.0 <- pure (Cidr_Main.I idr_Main.main4.0)
  idr_Main.main4_8.0 <- store idr_Main.main4_val_6.0
  idr_Main.main4_val_5.0 <- pure (Cidr_Main.I idr_Main.main4_8.0)
  idr_Main.main4_9.0 <- store idr_Main.main4_val_5.0
  idr_Main.main4_val_4.0 <- pure (Cidr_Main.I idr_Main.main4_9.0)
  idr_Main.main4_10.0 <- store idr_Main.main4_val_4.0
  idr_Main.main4_val.0 <- pure (Cidr_Main.I idr_Main.main4_10.0)
  idr_Main.main4_11.0 <- store idr_Main.main4_val.0
  idr_Main.main1_val.0 <- idr_Prelude.Interactive.printLn' idr_Main.main3.0 idr_Main.main4_11.0
  idr_Main.main4_val_17.0 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main4_18.0 <- store idr_Main.main4_val_17.0
  idr_Main.main5_val.0 <- pure (CGrInt 15)
  idr_Main.main5.0 <- store idr_Main.main5_val.0
  "idr_{runMain_0}0_val.0" <- idr_Prelude.Interactive.printLn' idr_Main.main4_18.0 idr_Main.main5.0
  pure ()

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 =
  unboxed.CGrString.3 <- "idr_{APPLY_0}.unboxed" idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3
  idr_Prelude.Interactive.printLn'6.41.7.arity.1 <- pure #"\n"
  idris_str_concat3.0 <- _prim_string_concat unboxed.CGrString.3 idr_Prelude.Interactive.printLn'6.41.7.arity.1
  _prim_string_print idris_str_concat3.0
  pure (Cidr_MkUnit) -- LINT: Last return expressions can only return non-node values: pure (Cidr_MkUnit)

"idr_{APPLY_0}.unboxed" "idr_{APPLY_0}0" "idr_{APPLY_0}1" =
  "idr_{APPLY_0}0_val" <- fetch "idr_{APPLY_0}0"
  case "idr_{APPLY_0}0_val" of
    (C"idr_{U_Main.{main_0}_1}") ->
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" "idr_{APPLY_0}1"
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}2_val.0" <- pure (C"idr_{U_prim__toStrBigInt_1}")
      "idr_Main.{main_1}2.0" <- store "idr_Main.{main_1}2_val.0"
      unboxed.CGrString.1.0 <- "idr_{APPLY_0}.unboxed" "idr_Main.{main_1}2.0" "idr_{APPLY_0}1"
      ccp.3.0 <- pure 0
      idr_Prelude.Show.primNumShow6.49.0.arity.1.0 <- pure 5
      idris_int_eq2.0 <- _prim_int_eq ccp.3.0 idr_Prelude.Show.primNumShow6.49.0.arity.1.0
      ccp.0.0 <- case idris_int_eq2.0 of
        #False ->
          pure ccp.3.0
        #True ->
          pure 1
      idr_Prelude.Show.primNumShow5_val_20.0 <- case ccp.0.0 of
        0 ->
          idris_int_lt2.0 <- _prim_int_lt ccp.3.0 idr_Prelude.Show.primNumShow6.49.0.arity.1.0
          ccp.1.0 <- case idris_int_lt2.0 of
            #False ->
              pure ccp.0.0
            #True ->
              pure 1
          case ccp.1.0 of
            0 ->
              pure (Cidr_Prelude.Interfaces.GT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.GT)
            #default ->
              pure (Cidr_Prelude.Interfaces.LT) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.LT)
        #default ->
          pure (Cidr_Prelude.Interfaces.EQ) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Interfaces.EQ)
      idr_Prelude.Show.primNumShow5_val_19.0 <- case idr_Prelude.Show.primNumShow5_val_20.0 of
        (Cidr_Prelude.Interfaces.GT) ->
          pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
        #default ->
          ccp.4.0 <- pure ccp.3.0
          idr_Prelude.Show.primNumShow7.41.0.arity.1.0 <- pure idr_Prelude.Show.primNumShow6.49.0.arity.1.0
          idris_int_eq2.1 <- _prim_int_eq ccp.3.0 idr_Prelude.Show.primNumShow6.49.0.arity.1.0
          ccp.0.1 <- case idris_int_eq2.1 of
            #False ->
              pure ccp.3.0
            #True ->
              pure 1
          case ccp.0.1 of
            0 ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            #default ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow5_val.0 <- case idr_Prelude.Show.primNumShow5_val_19.0 of
        (Cidr_Prelude.Bool.False) ->
          pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow6_36.41.1.arity.1.0 <- pure #""
          idris_str_eq3.0 <- _prim_string_eq unboxed.CGrString.1.0 idr_Prelude.Show.primNumShow6_36.41.1.arity.1.0
          ccp.2.0 <- case idris_str_eq3.0 of
            #False ->
              pure ccp.3.0
            #True ->
              pure 1
          idr_Prelude.Show.primNumShow6_val_33.0 <- case ccp.2.0 of
            0 ->
              pure (Cidr_Prelude.Bool.True) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.True)
            #default ->
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0" <- pure (Cidr_Prelude.Bool.True)
          "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_67.0" <- pure idr_Prelude.Show.primNumShow6_val_33.0
          case idr_Prelude.Show.primNumShow6_val_33.0 of
            (Cidr_Prelude.Bool.False) ->
              idr_Prelude.Show.primNumShow6_val_32.0.0 <- do
                pure (Cidr_Prelude.Basics.No) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.No)
              (Cidr_Prelude.Basics.No) <- pure idr_Prelude.Show.primNumShow6_val_32.0.0
              pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
            (Cidr_Prelude.Bool.True) ->
              idr_Prelude.Show.primNumShow6_val_32.0.1 <- do
                pure (Cidr_Prelude.Basics.Yes) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Basics.Yes)
              (Cidr_Prelude.Basics.Yes) <- pure idr_Prelude.Show.primNumShow6_val_32.0.1
              idris_str_head2.0.0 <- _prim_string_head unboxed.CGrString.1.0
              idr_Prelude.Show.primNumShow8.41.4.arity.1.0.0 <- pure 45
              idris_int_eq2.2.0 <- _prim_int_eq idris_str_head2.0.0 idr_Prelude.Show.primNumShow8.41.4.arity.1.0.0
              ccp.0.2.0 <- case idris_int_eq2.2.0 of
                #False ->
                  pure ccp.3.0
                #True ->
                  pure 1
              case ccp.0.2.0 of
                0 ->
                  pure (Cidr_Prelude.Bool.False) -- LINT: Last return expressions can only return non-node values: pure (Cidr_Prelude.Bool.False)
                #default ->
                  pure "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val.0"
      case idr_Prelude.Show.primNumShow5_val.0 of
        (Cidr_Prelude.Bool.False) ->
          pure unboxed.CGrString.1.0
        (Cidr_Prelude.Bool.True) ->
          idr_Prelude.Show.primNumShow7_57.41.5.arity.1.0 <- pure #")"
          idris_str_concat3.1 <- _prim_string_concat unboxed.CGrString.1.0 idr_Prelude.Show.primNumShow7_57.41.5.arity.1.0
          idr_Prelude.Show.primNumShow6_54.41.6.arity.1.0 <- pure #"("
          idris_str_concat3.2 <- _prim_string_concat idr_Prelude.Show.primNumShow6_54.41.6.arity.1.0 idris_str_concat3.1
          pure idris_str_concat3.2
    (C"idr_{U_prim__toStrBigInt_1}") ->
      (CGrInt idris_int_str1_0.0) <- fetch "idr_{APPLY_0}1"
      idris_int_str2.0 <- _prim_int_str idris_int_str1_0.0
      pure idris_int_str2.0 -- LINT: The result of Fetch can only be bound to a variable: (CGrInt idris_int_str1_0.0)

"idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01" =
  "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01_val" <- fetch "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01"
  case "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:01_val" of
    (Cidr_Main.I "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:02") ->
      unboxed.CGrString.5 <- "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:0.unboxed" "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:02"
      "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04.41.12.arity.1" <- pure #"1"
      idris_str_concat3.3 <- _prim_string_concat unboxed.CGrString.5 "idr_Prelude.Show.Main.@Prelude.Show.Show$Bin n:!show:04.41.12.arity.1"
      pure idris_str_concat3.3
    (Cidr_Main.N) ->
      pure #""
